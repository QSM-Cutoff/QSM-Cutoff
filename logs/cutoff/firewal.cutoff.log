
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.848 seconds

[QRM NOTE]: Time elapsed since last: 7.848 seconds

[QRM NOTE]: Peak memory: 1180212 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: allowed_in('node',)
predicate: internal('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000101000000000
lex min decimal: 1536
states:
000101000000000
000011000000000
000110000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000100000000000
000010000000000
000001000000000




=== State Orbit 4 =====================
size : 6
repr state: 010101010000000
lex min decimal: 7176
states:
100011000100000
010101000000010
001110001000000
010101010000000
100011000000100
001110000001000




=== State Orbit 5 =====================
size : 3
repr state: 010101010000010
lex min decimal: 7240
states:
010101010000010
001110001001000
100011000100100




=== State Orbit 6 =====================
size : 6
repr state: 010101010100010
lex min decimal: 7242
states:
001110001001010
100011001100100
010101010100010
001110001001100
100011010100100
010101010001010




=== State Orbit 7 =====================
size : 3
repr state: 010101010101010
lex min decimal: 7246
states:
010101010101010
100011011100100
001110001001110




=== State Orbit 8 =====================
size : 6
repr state: 010101010100000
lex min decimal: 7178
states:
100011001000100
010101010100000
001110001000100
010101000001010
001110000001010
100011010100000




=== State Orbit 9 =====================
size : 6
repr state: 010101010101000
lex min decimal: 7182
states:
001110000001110
100011011000100
010101000101010
010101010101000
100011011100000
001110001000110




=== State Orbit 10 =====================
size : 6
repr state: 010101010001000
lex min decimal: 7180
states:
001110000001100
010101000100010
010101010001000
100011010000100
001110001000010
100011001100000




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
001100001000000
100001000000100
100010000100000
010001000000010
001010000001000
010100010000000




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
101010000101000
011100011000000
110001000000110




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
110001001000110
011100011100000
110001000001110
011100011000100
101010010101000
101010000101010




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
101010010101010
110001001001110
011100011100100




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
001010000001010
010001000001010
100001001000100
100010010100000
001100001000100
010100010100000



[QRM NOTE]: Time elapsed since start: 7.958 seconds

[QRM NOTE]: Time elapsed since last: 0.111 seconds

[QRM NOTE]: Peak memory: 1227944 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.961 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 190907 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : -00----------1-
6     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
7     : -00--------1---
7     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
8     : 0-0---------1--
8     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
9     : 0-0-----1------
9     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
10     : 00-------1-----
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
11     : 00-----1-------
11     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
12 (*) : -0---1-------1-
12     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
13     : --0-1------1---
13     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
14     : 0----1------1--
14     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
15     : --01----1------
15     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
16     : 0---1----1-----
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
17     : -0-1---1-------
17     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38 (*) : --0-1--------1-
38     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
39     : -0---1-----1---
39     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
40     : --01--------1--
40     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
41     : 0----1--1------
41     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
42     : -0-1-----1-----
42     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
43     : 0---1--1-------
43     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11----1-
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
19     : -------11--1---
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
20     : ---------1-11--
20     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
21     : --------11-1---
21     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
22     : ---------1--11-
22     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : -------1----11-
23     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
24 (*) : --------11---1-
24     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
25     : -------1---11--
25     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ----11-------1-
26     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
27     : ----11-----1---
27     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
28     : ---1-1------1--
28     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
29     : ---1-1--1------
29     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ---11--1-------
31     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
32 (*) : ----00-------1-
32     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
33     : ----00-----1---
33     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
34     : ---0-0------1--
34     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
35     : ---0-0--1------
35     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
36     : ---00----1-----
36     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
37     : ---00--1-------
37     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
44 (*) : --1-0--------1-
44     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
45     : -1---0-----1---
45     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
46     : --10--------1--
46     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
47     : 1----0--1------
47     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
48     : -1-0-----1-----
48     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
49     : 1---0--1-------
49     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
62 (*) : -1---0-------1-
62     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
63     : --1-0------1---
63     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
64     : 1----0------1--
64     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
65     : --10----1------
65     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
66     : 1---0----1-----
66     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
67     : -1-0---1-------
67     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
54     : 11-------1-----
54     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
55     : 11-----1-------
55     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 2
56 (*) : -0--0--------1-
56     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
57     : --0--0-----1---
57     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
58     : 0--0--------1--
58     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
59     : --0--0--1------
59     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
60     : 0--0-----1-----
60     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
61     : -0--0--1-------
61     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
68 (*) : --0--0-------1-
68     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : 0--0----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
72     : -0--0----1-----
72     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
73     : 0--0---1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11-----------0-
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
75     : 1-1--------0---
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
76     : 11----------0--
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
77     : -11-----0------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
78     : 1-1------0-----
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
79     : -11----0-------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : --1-0---0------
83     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
84     : -1---0-0-------
84     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
85     : --10-------0---
85     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
86     : 1----0---0-----
86     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
87     : -1-0---------0-
87     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : 1-1-0----------
90     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
91     : 11---0---------
91     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
92     : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
96 (*) : --1-0--0-1-----
96     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
97     : -1---0--0---1--
97     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
98     : --10---1-0-----
98     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
99     : 1----0-----0-1-
99     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
100     : -1-0----1---0--
100     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
101     : 1---0------1-0-
101     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00-----1---1-
102     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0-------11--
103     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0--1----1--
104     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1----1-
105     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0--11-----
106     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1---1---
107     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00-----1-1---
108     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0--------11-
109     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0--11------
110     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0-------11-
111     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-11------
112     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1-1---
113     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
198 (*) : 0----0---1---1-
198     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
199     : 0---0------11--
199     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
200     : -0---0-1----1--
200     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
201     : -0-0----1----1-
201     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
202     : --0-0---11-----
202     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
203     : --00---1---1---
203     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
312 (*) : --0-0----1--1--
312     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
313     : -0---0---1--1--
313     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
314     : --00---1-----1-
314     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
315     : 0----0-1-----1-
315     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
316     : -0-0----1--1---
316     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
317     : 0---0---1--1---
317     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
114 (*) : 1-0------1---1-
114     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
115     : 10---------11--
115     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
116     : -10----1----1--
116     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
117     : 01------1----1-
117     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
118     : -01-----11-----
118     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
119     : 0-1----1---1---
119     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
120 (*) : 1-0------1-1---
120     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
121     : 10----------11-
121     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
122     : -10----11------
122     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
123     : 01----------11-
123     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
124     : -01----11------
124     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
125     : 0-1------1-1---
125     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
138 (*) : 0-1------1---1-
138     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
139     : 01---------11--
139     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
140     : -01----1----1--
140     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
141     : 10------1----1-
141     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
142     : -10-----11-----
142     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
143     : 1-0----1---1---
143     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
300 (*) : -01------1--1--
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
301     : -10------1--1--
301     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
302     : 0-1----1-----1-
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
303     : 1-0----1-----1-
303     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
304     : 01------1--1---
304     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
305     : 10------1--1---
305     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
126 (*) : 0-1-----01-----
126     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 01-----0----1--
127     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -01----1---0---
128     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : 10-------0---1-
129     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : -10-----1----0-
130     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : 1-0--------10--
131     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
132 (*) : 0-1----0-1-----
132     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
133     : 01------0---1--
133     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
134     : -01----1-0-----
134     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
135     : 10---------0-1-
135     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
136     : -10-----1---0--
136     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
137     : 1-0--------1-0-
137     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
228 (*) : -01------1-0---
228     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
229     : -10---------10-
229     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
230     : 0-1----10------
230     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
231     : 1-0---------01-
231     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
232     : 01-----01------
232     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
233     : 10-------0-1---
233     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 18
num_suborbits: 3
144 (*) : --11----01-----
144     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
145     : -1-1---0----1--
145     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
146     : --1-1--1---0---
146     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
147     : 1---1----0---1-
147     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
148     : -1---1--1----0-
148     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
149     : 1----1-----10--
149     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
150 (*) : --11---0-1-----
150     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
151     : -1-1----0---1--
151     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
152     : --1-1--1-0-----
152     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
153     : 1---1------0-1-
153     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
154     : -1---1--1---0--
154     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
155     : 1----1-----1-0-
155     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
270 (*) : --1-1----1-0---
270     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
271     : -1---1------10-
271     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
272     : --11---10------
272     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
273     : 1----1------01-
273     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
274     : -1-1---01------
274     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
275     : 1---1----0-1---
275     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --11-----1---1-
156     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
157     : -1-1-------11--
157     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
158     : --1-1--1----1--
158     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
159     : 1---1---1----1-
159     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
160     : -1---1--11-----
160     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
161     : 1----1-1---1---
161     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
162 (*) : --11-----1-1---
162     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
163     : -1-1--------11-
163     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
164     : --1-1--11------
164     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
165     : 1---1-------11-
165     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
166     : -1---1-11------
166     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
167     : 1----1---1-1---
167     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
282 (*) : --1-1---11-----
282     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
283     : -1---1-1----1--
283     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
284     : --11---1---1---
284     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
285     : 1----1---1---1-
285     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
286     : -1-1----1----1-
286     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
287     : 1---1------11--
287     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
294 (*) : -1---1---1--1--
294     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
295     : --1-1----1--1--
295     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
296     : 1----1-1-----1-
296     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
297     : --11---1-----1-
297     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
298     : 1---1---1--1---
298     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
299     : -1-1----1--1---
299     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
168 (*) : ---1-0-0-1-----
168     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
169     : ---10---0---1--
169     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
170     : ----10-1-0-----
170     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
171     : ---01------0-1-
171     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
172     : ----01--1---0--
172     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
173     : ---0-1-----1-0-
173     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : ---1---0-1---0-
174     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
175     : ---1----0--01--
175     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
176     : ----1--1-0--0--
176     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
177     : ----1---0--0-1-
177     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
178     : -----1--10--0--
178     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
179     : -----1-0---1-0-
179     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
180 (*) : ---1---011-----
180     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
181     : ---1---10---1--
181     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
182     : ----1--1-0-1---
182     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : ----1----1-0-1-
183     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
184     : -----1--1---01-
184     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -----1-----110-
185     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
336 (*) : ---1----01--1--
336     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
337     : ---1---0-1--1--
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
338     : ----1--1---0-1-
338     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
339     : ----1--1-0---1-
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
340     : -----1--1--1-0-
340     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
341     : -----1--1--10--
341     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : ---1-0---1---1-
186     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
187     : ---10------11--
187     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
188     : ----10-1----1--
188     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
189     : ---01---1----1-
189     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
190     : ----01--11-----
190     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
191     : ---0-1-1---1---
191     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
192 (*) : ---1-0---1-1---
192     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
193     : ---10-------11-
193     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
194     : ----10-11------
194     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
195     : ---01-------11-
195     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
196     : ----01-11------
196     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
197     : ---0-1---1-1---
197     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
276 (*) : ----10--11-----
276     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
277     : ----01-1----1--
277     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
278     : ---1-0-1---1---
278     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
279     : ---0-1---1---1-
279     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
280     : ---10---1----1-
280     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
281     : ---01------11--
281     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
288 (*) : ----01---1--1--
288     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
289     : ----10---1--1--
289     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
290     : ---0-1-1-----1-
290     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
291     : ---1-0-1-----1-
291     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
292     : ---01---1--1---
292     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
293     : ---10---1--1---
293     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
204 (*) : 1--------1-0-1-
204     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
205     : 1----------110-
205     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
206     : -1-----10---1--
206     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
207     : -1------1---01-
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
208     : --1----011-----
208     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
209     : --1----1-0-1---
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
234 (*) : --1------1-0-1-
234     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
235     : -1---------110-
235     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
236     : --1----10---1--
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
237     : 1-------1---01-
237     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
238     : -1-----011-----
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
239     : 1------1-0-1---
239     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
306 (*) : --1-----01--1--
306     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
307     : -1-----0-1--1--
307     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
308     : --1----1---0-1-
308     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
309     : 1------1-0---1-
309     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
310     : -1------1--1-0-
310     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
311     : 1-------1--10--
311     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
330 (*) : -1------01--1--
330     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
331     : --1----0-1--1--
331     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
332     : 1------1---0-1-
332     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
333     : --1----1-0---1-
333     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
334     : 1-------1--1-0-
334     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
335     : -1------1--10--
335     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
210 (*) : -----0---1-0-1-
210     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
211     : ----0------110-
211     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
212     : -----0-10---1--
212     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
213     : ---0----1---01-
213     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
214     : ----0--011-----
214     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
215     : ---0---1-0-1---
215     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
216 (*) : ---0-----1-0-1-
216     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
217     : ---0-------110-
217     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
218     : ----0--10---1--
218     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
219     : ----0---1---01-
219     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
220     : -----0-011-----
220     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
221     : -----0-1-0-1---
221     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
324 (*) : ----0---01--1--
324     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
325     : -----0-0-1--1--
325     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
326     : ---0---1---0-1-
326     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
327     : -----0-1-0---1-
327     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
328     : ---0----1--1-0-
328     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
329     : ----0---1--10--
329     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
342 (*) : -----0--01--1--
342     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
343     : ----0--0-1--1--
343     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
344     : -----0-1---0-1-
344     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
345     : ---0---1-0---1-
345     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
346     : ----0---1--1-0-
346     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
347     : ---0----1--10--
347     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
222 (*) : -0-------1-0-1-
222     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
223     : --0--------110-
223     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
224     : 0------10---1--
224     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
225     : --0-----1---01-
225     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
226     : 0------011-----
226     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
227     : -0-----1-0-1---
227     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
318 (*) : 0-------01--1--
318     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
319     : 0------0-1--1--
319     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
320     : -0-----1---0-1-
320     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
321     : -0-----1-0---1-
321     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
322     : --0-----1--1-0-
322     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
323     : --0-----1--10--
323     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
240 (*) : 0------0-1---0-
240     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
241     : 0-------0--01--
241     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
242     : -0-----1-0--0--
242     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
243     : -0------0--0-1-
243     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
244     : --0-----10--0--
244     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
245     : --0----0---1-0-
245     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ----0--0-1---0-
246     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
247     : -----0--0--01--
247     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
248     : ---0---1-0--0--
248     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
249     : -----0--0--0-1-
249     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
250     : ---0----10--0--
250     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
251     : ----0--0---1-0-
251     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
252 (*) : ----00-0-1-----
252     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
253     : ----00--0---1--
253     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
254     : ---0-0-1-0-----
254     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
255     : ---0-0-----0-1-
255     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
256     : ---00---1---0--
256     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
257     : ---00------1-0-
257     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
258 (*) : 0----0-0-1-----
258     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
259     : 0---0---0---1--
259     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
260     : -0---0-1-0-----
260     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
261     : -0-0-------0-1-
261     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
262     : --0-0---1---0--
262     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
263     : --00-------1-0-
263     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
264 (*) : --1----0-1-0---
264     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
265     : -1------0---10-
265     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
266     : --1----100-----
266     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
267     : 1----------001-
267     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
268     : -1-----01---0--
268     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
269     : 1--------0-1-0-
269     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 8.035 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1556984 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

[QRM NOTE]: Time elapsed since start: 8.051 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 496278 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : -00----------1-
6     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
7     : -00--------1---
7     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
8     : 0-0---------1--
8     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
9     : 0-0-----1------
9     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
10     : 00-------1-----
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
11     : 00-----1-------
11     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$1], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$1, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE0)', 'sent(NODE0,NODE1)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
12 (*) : -0---1-------1-
12     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
13     : --0-1------1---
13     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
14     : 0----1------1--
14     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
15     : --01----1------
15     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
16     : 0---1----1-----
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
17     : -0-1---1-------
17     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38 (*) : --0-1--------1-
38     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
39     : -0---1-----1---
39     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
40     : --01--------1--
40     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
41     : 0----1--1------
41     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
42     : -0-1-----1-----
42     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
43     : 0---1--1-------
43     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'internal(NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE1,NODE0,NODE2. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11----1-
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
19     : -------11--1---
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
20     : ---------1-11--
20     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
21     : --------11-1---
21     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
22     : ---------1--11-
22     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : -------1----11-
23     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
24 (*) : --------11---1-
24     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
25     : -------1---11--
25     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$1, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE4)', 'sent(NODE2,NODE5)', 'sent(NODE0,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE1,NODE4) | ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ----11-------1-
26     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
27     : ----11-----1---
27     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
28     : ---1-1------1--
28     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
29     : ---1-1--1------
29     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ---11--1-------
31     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1': [node$0$internal$0$0; node$0$sent$1$0], 'node$0$internal$0; node$0$sent$0': [node$0$internal$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1': node$0$internal$0$0; node$0$sent$1$0, 'node$0$internal$0; node$0$sent$0': node$0$internal$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
32 (*) : ----00-------1-
32     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
33     : ----00-----1---
33     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
34     : ---0-0------1--
34     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
35     : ---0-0--1------
35     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
36     : ---00----1-----
36     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
37     : ---00--1-------
37     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$1], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$1, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'sent(NODE0,NODE1)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
44 (*) : --1-0--------1-
44     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
45     : -1---0-----1---
45     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
46     : --10--------1--
46     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
47     : 1----0--1------
47     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
48     : -1-0-----1-----
48     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
49     : 1---0--1-------
49     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
62 (*) : -1---0-------1-
62     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
63     : --1-0------1---
63     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
64     : 1----0------1--
64     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
65     : --10----1------
65     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
66     : 1---0----1-----
66     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
67     : -1-0---1-------
67     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE3)', 'allowed_in(NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE1,NODE0,NODE2. internal(NODE3) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
54     : 11-------1-----
54     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
55     : 11-----1-------
55     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$0; node$0$sent$1$0], 'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$0; node$0$sent$1$0, 'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'allowed_in(NODE0)', 'sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 12
num_suborbits: 2
56 (*) : -0--0--------1-
56     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
57     : --0--0-----1---
57     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
58     : 0--0--------1--
58     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
59     : --0--0--1------
59     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
60     : 0--0-----1-----
60     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
61     : -0--0--1-------
61     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
68 (*) : --0--0-------1-
68     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : 0--0----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
72     : -0--0----1-----
72     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
73     : 0--0---1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node1)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE2)', '~internal(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE2) | internal(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11-----------0-
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
75     : 1-1--------0---
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
76     : 11----------0--
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
77     : -11-----0------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
78     : 1-1------0-----
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
79     : -11----0-------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'allowed_in(NODE0)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : --1-0---0------
83     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
84     : -1---0-0-------
84     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
85     : --10-------0---
85     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
86     : 1----0---0-----
86     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
87     : -1-0---------0-
87     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : 1-1-0----------
90     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
91     : 11---0---------
91     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
92     : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
96 (*) : --1-0--0-1-----
96     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
97     : -1---0--0---1--
97     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
98     : --10---1-0-----
98     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
99     : 1----0-----0-1-
99     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
100     : -1-0----1---0--
100     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
101     : 1---0------1-0-
101     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE1)', 'sent(NODE1,NODE2)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00-----1---1-
102     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0-------11--
103     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0--1----1--
104     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1----1-
105     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0--11-----
106     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1---1---
107     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00-----1-1---
108     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0--------11-
109     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0--11------
110     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0-------11-
111     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-11------
112     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1-1---
113     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
198 (*) : 0----0---1---1-
198     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
199     : 0---0------11--
199     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
200     : -0---0-1----1--
200     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
201     : -0-0----1----1-
201     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
202     : --0-0---11-----
202     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
203     : --00---1---1---
203     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
312 (*) : --0-0----1--1--
312     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
313     : -0---0---1--1--
313     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
314     : --00---1-----1-
314     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
315     : 0----0-1-----1-
315     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
316     : -0-0----1--1---
316     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
317     : 0---0---1--1---
317     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~internal(NODE5)', 'sent(NODE1,NODE3)', '~allowed_in(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE0,NODE2) | internal(NODE5) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
114 (*) : 1-0------1---1-
114     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
115     : 10---------11--
115     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
116     : -10----1----1--
116     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
117     : 01------1----1-
117     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
118     : -01-----11-----
118     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
119     : 0-1----1---1---
119     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
120 (*) : 1-0------1-1---
120     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
121     : 10----------11-
121     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
122     : -10----11------
122     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
123     : 01----------11-
123     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
124     : -01----11------
124     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
125     : 0-1------1-1---
125     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
138 (*) : 0-1------1---1-
138     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
139     : 01---------11--
139     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
140     : -01----1----1--
140     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
141     : 10------1----1-
141     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
142     : -10-----11-----
142     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
143     : 1-0----1---1---
143     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
300 (*) : -01------1--1--
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
301     : -10------1--1--
301     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
302     : 0-1----1-----1-
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
303     : 1-0----1-----1-
303     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
304     : 01------1--1---
304     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
305     : 10------1--1---
305     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'allowed_in(NODE0)', '~allowed_in(NODE5)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE5) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))


=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
126 (*) : 0-1-----01-----
126     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 01-----0----1--
127     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -01----1---0---
128     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : 10-------0---1-
129     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : -10-----1----0-
130     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : 1-0--------10--
131     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
132 (*) : 0-1----0-1-----
132     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
133     : 01------0---1--
133     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
134     : -01----1-0-----
134     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
135     : 10---------0-1-
135     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
136     : -10-----1---0--
136     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
137     : 1-0--------1-0-
137     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
228 (*) : -01------1-0---
228     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
229     : -10---------10-
229     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
230     : 0-1----10------
230     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
231     : 1-0---------01-
231     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
232     : 01-----01------
232     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
233     : 10-------0-1---
233     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node0)', '~sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'allowed_in(NODE0)', '~sent(NODE3,NODE4)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1. allowed_in(NODE3) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 20 =====================
size : 18
num_suborbits: 3
144 (*) : --11----01-----
144     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
145     : -1-1---0----1--
145     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
146     : --1-1--1---0---
146     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
147     : 1---1----0---1-
147     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
148     : -1---1--1----0-
148     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
149     : 1----1-----10--
149     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
150 (*) : --11---0-1-----
150     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
151     : -1-1----0---1--
151     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
152     : --1-1--1-0-----
152     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
153     : 1---1------0-1-
153     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
154     : -1---1--1---0--
154     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
155     : 1----1-----1-0-
155     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
270 (*) : --1-1----1-0---
270     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
271     : -1---1------10-
271     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
272     : --11---10------
272     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
273     : 1----1------01-
273     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
274     : -1-1---01------
274     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
275     : 1---1----0-1---
275     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE1)', 'sent(NODE2,NODE3)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1. ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE3) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --11-----1---1-
156     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
157     : -1-1-------11--
157     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
158     : --1-1--1----1--
158     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
159     : 1---1---1----1-
159     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
160     : -1---1--11-----
160     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
161     : 1----1-1---1---
161     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
162 (*) : --11-----1-1---
162     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
163     : -1-1--------11-
163     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
164     : --1-1--11------
164     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
165     : 1---1-------11-
165     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
166     : -1---1-11------
166     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
167     : 1----1---1-1---
167     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
282 (*) : --1-1---11-----
282     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
283     : -1---1-1----1--
283     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
284     : --11---1---1---
284     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
285     : 1----1---1---1-
285     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
286     : -1-1----1----1-
286     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
287     : 1---1------11--
287     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
294 (*) : -1---1---1--1--
294     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
295     : --1-1----1--1--
295     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
296     : 1----1-1-----1-
296     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
297     : --11---1-----1-
297     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
298     : 1---1---1--1---
298     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
299     : -1-1----1--1---
299     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE3,NODE5)', 'allowed_in(NODE0)', 'internal(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~internal(NODE1) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4))


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
168 (*) : ---1-0-0-1-----
168     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
169     : ---10---0---1--
169     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
170     : ----10-1-0-----
170     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
171     : ---01------0-1-
171     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
172     : ----01--1---0--
172     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
173     : ---0-1-----1-0-
173     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE0,NODE1)', 'internal(NODE0)', 'sent(NODE1,NODE0)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : ---1---0-1---0-
174     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
175     : ---1----0--01--
175     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
176     : ----1--1-0--0--
176     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
177     : ----1---0--0-1-
177     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
178     : -----1--10--0--
178     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
179     : -----1-0---1-0-
179     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'internal(NODE0)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE2,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
180 (*) : ---1---011-----
180     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
181     : ---1---10---1--
181     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
182     : ----1--1-0-1---
182     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : ----1----1-0-1-
183     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
184     : -----1--1---01-
184     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -----1-----110-
185     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
336 (*) : ---1----01--1--
336     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
337     : ---1---0-1--1--
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
338     : ----1--1---0-1-
338     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
339     : ----1--1-0---1-
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
340     : -----1--1--1-0-
340     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
341     : -----1--1--10--
341     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE0,NODE2)', 'internal(NODE0)', 'sent(NODE1,NODE3)', 'sent(NODE2,NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE1,NODE0,NODE2. sent(NODE0,NODE2) | ~internal(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : ---1-0---1---1-
186     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
187     : ---10------11--
187     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
188     : ----10-1----1--
188     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
189     : ---01---1----1-
189     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
190     : ----01--11-----
190     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
191     : ---0-1-1---1---
191     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
192 (*) : ---1-0---1-1---
192     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
193     : ---10-------11-
193     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
194     : ----10-11------
194     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
195     : ---01-------11-
195     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
196     : ----01-11------
196     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
197     : ---0-1---1-1---
197     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
276 (*) : ----10--11-----
276     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
277     : ----01-1----1--
277     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
278     : ---1-0-1---1---
278     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
279     : ---0-1---1---1-
279     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
280     : ---10---1----1-
280     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
281     : ---01------11--
281     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
288 (*) : ----01---1--1--
288     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
289     : ----10---1--1--
289     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
290     : ---0-1-1-----1-
290     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
291     : ---1-0-1-----1-
291     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
292     : ---01---1--1---
292     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
293     : ---10---1--1---
293     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'internal(NODE0)', '~internal(NODE5)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~internal(NODE0) | internal(NODE5) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
204 (*) : 1--------1-0-1-
204     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
205     : 1----------110-
205     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
206     : -1-----10---1--
206     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
207     : -1------1---01-
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
208     : --1----011-----
208     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
209     : --1----1-0-1---
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
234 (*) : --1------1-0-1-
234     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
235     : -1---------110-
235     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
236     : --1----10---1--
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
237     : 1-------1---01-
237     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
238     : -1-----011-----
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
239     : 1------1-0-1---
239     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
306 (*) : --1-----01--1--
306     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
307     : -1-----0-1--1--
307     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
308     : --1----1---0-1-
308     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
309     : 1------1-0---1-
309     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
310     : -1------1--1-0-
310     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
311     : 1-------1--10--
311     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
330 (*) : -1------01--1--
330     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
331     : --1----0-1--1--
331     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
332     : 1------1---0-1-
332     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
333     : --1----1-0---1-
333     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
334     : 1-------1--1-0-
334     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
335     : -1------1--10--
335     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'allowed_in(NODE0)', '~sent(NODE4,NODE2)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE2:node = NODE4', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1. ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | sent(NODE4,NODE2) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3))


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
210 (*) : -----0---1-0-1-
210     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
211     : ----0------110-
211     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
212     : -----0-10---1--
212     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
213     : ---0----1---01-
213     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
214     : ----0--011-----
214     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
215     : ---0---1-0-1---
215     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
216 (*) : ---0-----1-0-1-
216     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
217     : ---0-------110-
217     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
218     : ----0--10---1--
218     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
219     : ----0---1---01-
219     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
220     : -----0-011-----
220     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
221     : -----0-1-0-1---
221     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
324 (*) : ----0---01--1--
324     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
325     : -----0-0-1--1--
325     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
326     : ---0---1---0-1-
326     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
327     : -----0-1-0---1-
327     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
328     : ---0----1--1-0-
328     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
329     : ----0---1--10--
329     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
342 (*) : -----0--01--1--
342     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
343     : ----0--0-1--1--
343     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
344     : -----0-1---0-1-
344     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
345     : ---0---1-0---1-
345     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
346     : ----0---1--1-0-
346     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
347     : ---0----1--10--
347     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node2)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE4)', '~sent(NODE3,NODE1)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE4,NODE3,NODE0,NODE1. internal(NODE4) | sent(NODE3,NODE1) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
222 (*) : -0-------1-0-1-
222     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
223     : --0--------110-
223     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
224     : 0------10---1--
224     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
225     : --0-----1---01-
225     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
226     : 0------011-----
226     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
227     : -0-----1-0-1---
227     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
318 (*) : 0-------01--1--
318     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
319     : 0------0-1--1--
319     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
320     : -0-----1---0-1-
320     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
321     : -0-----1-0---1-
321     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
322     : --0-----1--1-0-
322     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
323     : --0-----1--10--
323     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node1,node0)', '~sent(node1,node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', '~sent(NODE3,NODE1)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE1,NODE0,NODE2. allowed_in(NODE3) | sent(NODE3,NODE1) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
240 (*) : 0------0-1---0-
240     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
241     : 0-------0--01--
241     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
242     : -0-----1-0--0--
242     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
243     : -0------0--0-1-
243     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
244     : --0-----10--0--
244     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
245     : --0----0---1-0-
245     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~sent(NODE2,NODE0)', 'sent(NODE0,NODE1)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ----0--0-1---0-
246     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
247     : -----0--0--01--
247     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
248     : ---0---1-0--0--
248     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
249     : -----0--0--0-1-
249     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
250     : ---0----10--0--
250     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
251     : ----0--0---1-0-
251     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE0)', '~sent(NODE2,NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | internal(NODE0) | sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
252 (*) : ----00-0-1-----
252     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
253     : ----00--0---1--
253     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
254     : ---0-0-1-0-----
254     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
255     : ---0-0-----0-1-
255     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
256     : ---00---1---0--
256     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
257     : ---00------1-0-
257     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE0)', 'sent(NODE0,NODE1)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
258 (*) : 0----0-0-1-----
258     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
259     : 0---0---0---1--
259     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
260     : -0---0-1-0-----
260     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
261     : -0-0-------0-1-
261     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
262     : --0-0---1---0--
262     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
263     : --00-------1-0-
263     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)', '~allowed_in(NODE1)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
264 (*) : --1----0-1-0---
264     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
265     : -1------0---10-
265     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
266     : --1----100-----
266     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
267     : 1----------001-
267     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
268     : -1-----01---0--
268     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
269     : 1--------0-1-0-
269     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$1], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$1, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'allowed_in(NODE0)', '~sent(NODE2,NODE1)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : -1--1----------
3     : ['allowed_in(node1)', 'internal(node1)']
4     : --1--1---------
4     : ['allowed_in(node2)', 'internal(node2)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : -00----------1-
6     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
7     : -00--------1---
7     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
8     : 0-0---------1--
8     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
9     : 0-0-----1------
9     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
10     : 00-------1-----
10     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
11     : 00-----1-------
11     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 3 =====================
size : 12
num_suborbits: 2
12 (*) : -0---1-------1-
12     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
13     : --0-1------1---
13     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
14     : 0----1------1--
14     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
15     : --01----1------
15     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
16     : 0---1----1-----
16     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
17     : -0-1---1-------
17     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38 (*) : --0-1--------1-
38     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
39     : -0---1-----1---
39     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
40     : --01--------1--
40     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
41     : 0----1--1------
41     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
42     : -0-1-----1-----
42     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
43     : 0---1--1-------
43     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE3,NODE1,NODE0,NODE2. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 4 =====================
size : 8
num_suborbits: 2
18 (*) : -------11----1-
18     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
19     : -------11--1---
19     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
20     : ---------1-11--
20     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
21     : --------11-1---
21     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
22     : ---------1--11-
22     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
23     : -------1----11-
23     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
24 (*) : --------11---1-
24     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
25     : -------1---11--
25     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE1,NODE4) | ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 21




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
26 (*) : ----11-------1-
26     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
27     : ----11-----1---
27     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
28     : ---1-1------1--
28     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
29     : ---1-1--1------
29     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ---11--1-------
31     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
32 (*) : ----00-------1-
32     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
33     : ----00-----1---
33     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
34     : ---0-0------1--
34     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
35     : ---0-0--1------
35     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
36     : ---00----1-----
36     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
37     : ---00--1-------
37     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
44 (*) : --1-0--------1-
44     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
45     : -1---0-----1---
45     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
46     : --10--------1--
46     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
47     : 1----0--1------
47     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
48     : -1-0-----1-----
48     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
49     : 1---0--1-------
49     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
62 (*) : -1---0-------1-
62     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
63     : --1-0------1---
63     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
64     : 1----0------1--
64     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
65     : --10----1------
65     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
66     : 1---0----1-----
66     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
67     : -1-0---1-------
67     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE3,NODE1,NODE0,NODE2. internal(NODE3) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
50 (*) : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : -11--------1---
51     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
52     : 1-1---------1--
52     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
54     : 11-------1-----
54     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
55     : 11-----1-------
55     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 12
num_suborbits: 2
56 (*) : -0--0--------1-
56     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
57     : --0--0-----1---
57     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
58     : 0--0--------1--
58     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
59     : --0--0--1------
59     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
60     : 0--0-----1-----
60     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
61     : -0--0--1-------
61     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
68 (*) : --0--0-------1-
68     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
69     : -0--0------1---
69     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
70     : --0--0------1--
70     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
71     : 0--0----1------
71     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
72     : -0--0----1-----
72     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
73     : 0--0---1-------
73     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. ~sent(NODE0,NODE1) | allowed_in(NODE2) | internal(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11-----------0-
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
75     : 1-1--------0---
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
76     : 11----------0--
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
77     : -11-----0------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
78     : 1-1------0-----
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
79     : -11----0-------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE2,NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : --1-0---0------
83     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
84     : -1---0-0-------
84     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
85     : --10-------0---
85     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
86     : 1----0---0-----
86     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
87     : -1-0---------0-
87     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
88     : 1---0-------0--
88     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE2,NODE1,NODE0. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : 1-1-0----------
90     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
91     : 11---0---------
91     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
92     : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 16 =====================
size : 6
num_suborbits: 1
96 (*) : --1-0--0-1-----
96     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
97     : -1---0--0---1--
97     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
98     : --10---1-0-----
98     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
99     : 1----0-----0-1-
99     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
100     : -1-0----1---0--
100     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
101     : 1---0------1-0-
101     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00-----1---1-
102     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0-------11--
103     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0--1----1--
104     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1----1-
105     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0--11-----
106     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1---1---
107     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00-----1-1---
108     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0--------11-
109     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0--11------
110     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0-------11-
111     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-11------
112     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1-1---
113     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
198 (*) : 0----0---1---1-
198     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
199     : 0---0------11--
199     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
200     : -0---0-1----1--
200     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
201     : -0-0----1----1-
201     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
202     : --0-0---11-----
202     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
203     : --00---1---1---
203     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
312 (*) : --0-0----1--1--
312     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
313     : -0---0---1--1--
313     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
314     : --00---1-----1-
314     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
315     : 0----0-1-----1-
315     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
316     : -0-0----1--1---
316     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
317     : 0---0---1--1---
317     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE0,NODE2) | internal(NODE5) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 34




=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
114 (*) : 1-0------1---1-
114     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
115     : 10---------11--
115     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
116     : -10----1----1--
116     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
117     : 01------1----1-
117     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
118     : -01-----11-----
118     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
119     : 0-1----1---1---
119     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
120 (*) : 1-0------1-1---
120     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
121     : 10----------11-
121     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
122     : -10----11------
122     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
123     : 01----------11-
123     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
124     : -01----11------
124     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
125     : 0-1------1-1---
125     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
138 (*) : 0-1------1---1-
138     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
139     : 01---------11--
139     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
140     : -01----1----1--
140     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
141     : 10------1----1-
141     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
142     : -10-----11-----
142     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
143     : 1-0----1---1---
143     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
300 (*) : -01------1--1--
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
301     : -10------1--1--
301     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
302     : 0-1----1-----1-
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
303     : 1-0----1-----1-
303     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
304     : 01------1--1---
304     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
305     : 10------1--1---
305     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE5) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))
qcost : 34




=== Prime Orbit 19 =====================
size : 18
num_suborbits: 3
126 (*) : 0-1-----01-----
126     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 01-----0----1--
127     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -01----1---0---
128     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : 10-------0---1-
129     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : -10-----1----0-
130     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : 1-0--------10--
131     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
132 (*) : 0-1----0-1-----
132     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
133     : 01------0---1--
133     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
134     : -01----1-0-----
134     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
135     : 10---------0-1-
135     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
136     : -10-----1---0--
136     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
137     : 1-0--------1-0-
137     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
228 (*) : -01------1-0---
228     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
229     : -10---------10-
229     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
230     : 0-1----10------
230     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
231     : 1-0---------01-
231     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
232     : 01-----01------
232     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
233     : 10-------0-1---
233     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1. allowed_in(NODE3) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 24




=== Prime Orbit 20 =====================
size : 18
num_suborbits: 3
144 (*) : --11----01-----
144     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
145     : -1-1---0----1--
145     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
146     : --1-1--1---0---
146     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
147     : 1---1----0---1-
147     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
148     : -1---1--1----0-
148     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
149     : 1----1-----10--
149     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
150 (*) : --11---0-1-----
150     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
151     : -1-1----0---1--
151     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
152     : --1-1--1-0-----
152     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
153     : 1---1------0-1-
153     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
154     : -1---1--1---0--
154     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
155     : 1----1-----1-0-
155     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
270 (*) : --1-1----1-0---
270     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
271     : -1---1------10-
271     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
272     : --11---10------
272     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
273     : 1----1------01-
273     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
274     : -1-1---01------
274     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
275     : 1---1----0-1---
275     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1. ~allowed_in(NODE0) | ~internal(NODE1) | ~sent(NODE2,NODE3) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))
qcost : 24




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --11-----1---1-
156     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
157     : -1-1-------11--
157     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
158     : --1-1--1----1--
158     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
159     : 1---1---1----1-
159     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
160     : -1---1--11-----
160     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
161     : 1----1-1---1---
161     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
162 (*) : --11-----1-1---
162     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
163     : -1-1--------11-
163     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
164     : --1-1--11------
164     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
165     : 1---1-------11-
165     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
166     : -1---1-11------
166     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
167     : 1----1---1-1---
167     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
282 (*) : --1-1---11-----
282     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
283     : -1---1-1----1--
283     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
284     : --11---1---1---
284     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
285     : 1----1---1---1-
285     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
286     : -1-1----1----1-
286     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
287     : 1---1------11--
287     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
294 (*) : -1---1---1--1--
294     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
295     : --1-1----1--1--
295     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
296     : 1----1-1-----1-
296     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
297     : --11---1-----1-
297     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
298     : 1---1---1--1---
298     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
299     : -1-1----1--1---
299     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~sent(NODE3,NODE5) | ~allowed_in(NODE0) | ~internal(NODE1) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4))
qcost : 34




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
168 (*) : ---1-0-0-1-----
168     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
169     : ---10---0---1--
169     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
170     : ----10-1-0-----
170     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
171     : ---01------0-1-
171     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
172     : ----01--1---0--
172     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
173     : ---0-1-----1-0-
173     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
174 (*) : ---1---0-1---0-
174     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
175     : ---1----0--01--
175     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
176     : ----1--1-0--0--
176     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
177     : ----1---0--0-1-
177     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
178     : -----1--10--0--
178     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
179     : -----1-0---1-0-
179     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE2,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
180 (*) : ---1---011-----
180     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
181     : ---1---10---1--
181     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
182     : ----1--1-0-1---
182     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
183     : ----1----1-0-1-
183     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
184     : -----1--1---01-
184     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
185     : -----1-----110-
185     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
336 (*) : ---1----01--1--
336     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
337     : ---1---0-1--1--
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
338     : ----1--1---0-1-
338     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
339     : ----1--1-0---1-
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
340     : -----1--1--1-0-
340     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
341     : -----1--1--10--
341     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE3,NODE1,NODE0,NODE2. sent(NODE0,NODE2) | ~internal(NODE0) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : ---1-0---1---1-
186     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
187     : ---10------11--
187     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
188     : ----10-1----1--
188     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
189     : ---01---1----1-
189     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
190     : ----01--11-----
190     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
191     : ---0-1-1---1---
191     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
192 (*) : ---1-0---1-1---
192     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
193     : ---10-------11-
193     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
194     : ----10-11------
194     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
195     : ---01-------11-
195     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
196     : ----01-11------
196     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
197     : ---0-1---1-1---
197     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
276 (*) : ----10--11-----
276     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
277     : ----01-1----1--
277     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
278     : ---1-0-1---1---
278     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
279     : ---0-1---1---1-
279     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
280     : ---10---1----1-
280     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
281     : ---01------11--
281     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
288 (*) : ----01---1--1--
288     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
289     : ----10---1--1--
289     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
290     : ---0-1-1-----1-
290     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
291     : ---1-0-1-----1-
291     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
292     : ---01---1--1---
292     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
293     : ---10---1--1---
293     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1,NODE5. ~sent(NODE2,NODE4) | ~internal(NODE0) | internal(NODE5) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE4 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))
qcost : 34




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
204 (*) : 1--------1-0-1-
204     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
205     : 1----------110-
205     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
206     : -1-----10---1--
206     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
207     : -1------1---01-
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
208     : --1----011-----
208     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
209     : --1----1-0-1---
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
234 (*) : --1------1-0-1-
234     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
235     : -1---------110-
235     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
236     : --1----10---1--
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
237     : 1-------1---01-
237     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
238     : -1-----011-----
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
239     : 1------1-0-1---
239     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
306 (*) : --1-----01--1--
306     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
307     : -1-----0-1--1--
307     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
308     : --1----1---0-1-
308     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
309     : 1------1-0---1-
309     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
310     : -1------1--1-0-
310     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
311     : 1-------1--10--
311     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
330 (*) : -1------01--1--
330     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
331     : --1----0-1--1--
331     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
332     : 1------1---0-1-
332     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
333     : --1----1-0---1-
333     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
334     : 1-------1--1-0-
334     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
335     : -1------1--10--
335     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 24
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1. ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | sent(NODE4,NODE2) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3))
qcost : 29




=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
210 (*) : -----0---1-0-1-
210     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
211     : ----0------110-
211     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
212     : -----0-10---1--
212     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
213     : ---0----1---01-
213     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
214     : ----0--011-----
214     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
215     : ---0---1-0-1---
215     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
216 (*) : ---0-----1-0-1-
216     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
217     : ---0-------110-
217     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
218     : ----0--10---1--
218     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
219     : ----0---1---01-
219     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
220     : -----0-011-----
220     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
221     : -----0-1-0-1---
221     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
324 (*) : ----0---01--1--
324     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
325     : -----0-0-1--1--
325     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
326     : ---0---1---0-1-
326     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
327     : -----0-1-0---1-
327     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
328     : ---0----1--1-0-
328     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
329     : ----0---1--10--
329     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
342 (*) : -----0--01--1--
342     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
343     : ----0--0-1--1--
343     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
344     : -----0-1---0-1-
344     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
345     : ---0---1-0---1-
345     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
346     : ----0---1--1-0-
346     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
347     : ---0----1--10--
347     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 24
quantified form : forall NODE2,NODE4,NODE3,NODE0,NODE1. internal(NODE4) | sent(NODE3,NODE1) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 29




=== Prime Orbit 28 =====================
size : 12
num_suborbits: 2
222 (*) : -0-------1-0-1-
222     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
223     : --0--------110-
223     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
224     : 0------10---1--
224     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
225     : --0-----1---01-
225     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
226     : 0------011-----
226     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
227     : -0-----1-0-1---
227     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
318 (*) : 0-------01--1--
318     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
319     : 0------0-1--1--
319     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
320     : -0-----1---0-1-
320     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
321     : -0-----1-0---1-
321     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
322     : --0-----1--1-0-
322     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
323     : --0-----1--10--
323     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE3,NODE1,NODE0,NODE2. allowed_in(NODE3) | sent(NODE3,NODE1) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
240 (*) : 0------0-1---0-
240     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
241     : 0-------0--01--
241     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
242     : -0-----1-0--0--
242     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
243     : -0------0--0-1-
243     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
244     : --0-----10--0--
244     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
245     : --0----0---1-0-
245     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
246 (*) : ----0--0-1---0-
246     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
247     : -----0--0--01--
247     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
248     : ---0---1-0--0--
248     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
249     : -----0--0--0-1-
249     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
250     : ---0----10--0--
250     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
251     : ----0--0---1-0-
251     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | internal(NODE0) | sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
252 (*) : ----00-0-1-----
252     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
253     : ----00--0---1--
253     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
254     : ---0-0-1-0-----
254     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
255     : ---0-0-----0-1-
255     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
256     : ---00---1---0--
256     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
257     : ---00------1-0-
257     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
258 (*) : 0----0-0-1-----
258     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
259     : 0---0---0---1--
259     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
260     : -0---0-1-0-----
260     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
261     : -0-0-------0-1-
261     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
262     : --0-0---1---0--
262     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
263     : --00-------1-0-
263     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
264 (*) : --1----0-1-0---
264     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
265     : -1------0---10-
265     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
266     : --1----100-----
266     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
267     : 1----------001-
267     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
268     : -1-----01---0--
268     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
269     : 1--------0-1-0-
269     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE1,NODE0. sent(NODE1,NODE0) | ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10



[QRM NOTE]: Time elapsed since start: 10.012 seconds

[QRM NOTE]: Time elapsed since last: 1.961 seconds

[QRM NOTE]: Peak memory: 2336555 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Solution : [0, 11] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 528), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, 640), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 528), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 272), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, 640), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 528), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 272), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Decide 9 with phase True at level 2

After decision at level 2
 pending : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 9]


New level: 3
 pending : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, 640), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 528), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 272), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, 0), (31, 32), (32, 128), (33, 64)]

Covered at level 3 : {30}

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, 0), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 3 among pending : [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4]


New level: 4
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 576), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 4 among pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]


New level: 5
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15]


Solution : [0, 11, 1, 9, 4, 15] has cost 46.


Decide in level 5 among pending : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


New level: 6
 pending : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 6 : {3, 5, 23, 24, 28, 29}

After reduction : 
 pending  : [6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Solution : [0, 11, 1, 9, 4, 15, 2] has cost 52.


Decide in level 6 among pending : [6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 6]


New level: 7
 pending : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 6]


Before reduction : 
 pending  : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 6]


Solution : [0, 11, 1, 9, 4, 15, 2, 6] has cost 58.


Before backtrack at level 7
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 2, 6]

After backtrack at level 7
 pending : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Solution : [0, 11, 1, 9, 4, 15, 2] has cost 52.


Decide in level 7 among pending : [7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 7]


New level: 8
 pending : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 7]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 7]


Solution : [0, 11, 1, 9, 4, 15, 2, 7] has cost 65.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 2, 7]

After backtrack at level 8
 pending : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Solution : [0, 11, 1, 9, 4, 15, 2] has cost 52.


Decide in level 8 among pending : [8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 8]


New level: 9
 pending : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 8]


Before reduction : 
 pending  : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 8]


Solution : [0, 11, 1, 9, 4, 15, 2, 8] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 2, 8]

After backtrack at level 9
 pending : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Solution : [0, 11, 1, 9, 4, 15, 2] has cost 52.


Decide in level 9 among pending : [10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 10]


New level: 10
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 10]


Before reduction : 
 pending  : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 10]


Solution : [0, 11, 1, 9, 4, 15, 2, 10] has cost 61.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 2, 10]

After backtrack at level 10
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before reduction : 
 pending  : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

Essensial at level 10 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 2, 12]


Solution : [0, 11, 1, 9, 4, 15, 2, 12] has cost 61.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 2, 12]

After backtrack at level 10
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before backtrack at level 9
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33]
 solution : [0, 11, 1, 9, 4, 15, 2]

After backtrack at level 9
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before backtrack at level 8
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10]
 solution : [0, 11, 1, 9, 4, 15, 2]

After backtrack at level 8
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before backtrack at level 7
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8]
 solution : [0, 11, 1, 9, 4, 15, 2]

After backtrack at level 7
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 15, 2]


Before backtrack at level 6
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 15, 2]

After backtrack at level 6
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15]


Before reduction : 
 pending  : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15]


Solution : [0, 11, 1, 9, 4, 15] has cost 46.


Decide in level 6 among pending : [12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Decide 22 with phase True at level 6

After decision at level 6
 pending : [12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]


New level: 7
 pending : [12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]


Before reduction : 
 pending  : [12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31, 32, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 0), (32, 0), (33, 2)]

Covered at level 7 : {16, 32, 31}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 0), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22]


Solution : [0, 11, 1, 9, 4, 15, 22] has cost 56.


Decide in level 7 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 5, 23, 24, 28, 29, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]


New level: 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 5, 23, 24, 28, 29, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 8 : {5, 23, 24, 28, 29}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]


Solution : [0, 11, 1, 9, 4, 15, 22, 3] has cost 69.


Before backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]

After backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15, 22, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15, 22]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15, 22]

Essensial at level 8 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 8 : {24, 28, 29, 23}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 5]


Solution : [0, 11, 1, 9, 4, 15, 22, 5] has cost 62.


Before backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6]
 solution : [0, 11, 1, 9, 4, 15, 22, 5]

After backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15, 22]


Before backtrack at level 7
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15, 22]

After backtrack at level 7
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15, 22]


Invert decision for 22 at level 6


New level: 7
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15]


Solution : [0, 11, 1, 9, 4, 15] has cost 46.


Decide in level 7 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 5, 23, 24, 28, 29, 16, 31, 32, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15, 5]


New level: 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 23, 24, 28, 29, 16, 31, 32, 3]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : {3, 23, 24, 28, 29}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Solution : [0, 11, 1, 9, 4, 15, 5] has cost 52.


Decide in level 8 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 6, 16, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 8]


New level: 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 8]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 8]


Solution : [0, 11, 1, 9, 4, 15, 5, 8] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 5, 8]

After backtrack at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Solution : [0, 11, 1, 9, 4, 15, 5] has cost 52.


Decide in level 9 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 6, 16, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 7]


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 7]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 6, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 7]


Solution : [0, 11, 1, 9, 4, 15, 5, 7] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 5, 7]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Solution : [0, 11, 1, 9, 4, 15, 5] has cost 52.


Decide in level 10 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 6, 16, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 6]


New level: 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 6]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 6]


Solution : [0, 11, 1, 9, 4, 15, 5, 6] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 5, 6]

After backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Solution : [0, 11, 1, 9, 4, 15, 5] has cost 52.


Decide in level 11 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 12]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 12]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 12]


Solution : [0, 11, 1, 9, 4, 15, 5, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 5, 12]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 15, 5, 10]


Solution : [0, 11, 1, 9, 4, 15, 5, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 15, 5, 10]

After backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32]
 solution : [0, 11, 1, 9, 4, 15, 5]

After backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12]
 solution : [0, 11, 1, 9, 4, 15, 5]

After backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6]
 solution : [0, 11, 1, 9, 4, 15, 5]

After backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7]
 solution : [0, 11, 1, 9, 4, 15, 5]


Before backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7]
 solution : [0, 11, 1, 9, 4, 15, 5]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 23, 24, 28, 29, 3, 8]
 solution : [0, 11, 1, 9, 4, 15, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 23, 24, 28, 29, 3, 8]
 solution : [0, 11, 1, 9, 4, 15]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 23, 24, 28, 29, 3, 8]
 solution : [0, 11, 1, 9, 4, 15]

Essensial at level 8 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : {24, 28, 29, 23}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8]
 solution : [0, 11, 1, 9, 4, 15, 3]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8]
 solution : [0, 11, 1, 9, 4, 15, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8]
 solution : [0, 11, 1, 9, 4, 15, 3]


Solution : [0, 11, 1, 9, 4, 15, 3] has cost 59.


Before backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8]
 solution : [0, 11, 1, 9, 4, 15, 3]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15]


Before backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 15]

After backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 15]


Before backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 15]

After backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22]
 solution : [0, 11, 1, 9, 4, 15]


Before backtrack at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22]
 solution : [0, 11, 1, 9, 4, 15]

After backtrack at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 5 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 32, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

Decide 32 with phase True at level 5

After decision at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]


New level: 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 22, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, 128), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, 0), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 6 : {22}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, 0), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]


Solution : [0, 11, 1, 9, 4, 32] has cost 51.


Decide in level 6 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


New level: 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 7, 8, 3, 23, 24, 28, 29, 5, 13, 14, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 7, 8, 10, 12, 13, 14, 16, 26, 27, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Solution : [0, 11, 1, 9, 4, 32, 6] has cost 57.


Decide in level 7 among pending : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 3]


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {2, 5, 17, 18, 19, 20, 21, 23, 24, 25, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 3]


Solution : [0, 11, 1, 9, 4, 32, 6, 3] has cost 70.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 6, 3]

After backtrack at level 8
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Solution : [0, 11, 1, 9, 4, 32, 6] has cost 57.


Decide in level 8 among pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 5]


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {2, 17, 18, 19, 20, 21, 23, 24, 25, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 5]


Solution : [0, 11, 1, 9, 4, 32, 6, 5] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 6, 5]

After backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 2]
 solution : [0, 11, 1, 9, 4, 32, 6]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {17, 18, 19, 20, 21, 23, 24, 25, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 6, 2]


Solution : [0, 11, 1, 9, 4, 32, 6, 2] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 6, 2]

After backtrack at level 9
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before backtrack at level 8
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 6]

After backtrack at level 8
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 6]


Before backtrack at level 7
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 6]

After backtrack at level 7
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32]


Solution : [0, 11, 1, 9, 4, 32] has cost 51.


Decide in level 7 among pending : [2, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32, 2]


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14, 3]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 8 : {3, 5, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Solution : [0, 11, 1, 9, 4, 32, 2] has cost 57.


Decide in level 8 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 7, 8, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 7]


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 7]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 7]


Solution : [0, 11, 1, 9, 4, 32, 2, 7] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 2, 7]

After backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Solution : [0, 11, 1, 9, 4, 32, 2] has cost 57.


Decide in level 9 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 8]


New level: 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 8]


Solution : [0, 11, 1, 9, 4, 32, 2, 8] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 2, 8]

After backtrack at level 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Solution : [0, 11, 1, 9, 4, 32, 2] has cost 57.


Decide in level 10 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 11 : {16, 13, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]


Solution : [0, 11, 1, 9, 4, 32, 2, 14] has cost 62.


Before backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]


Solution : [0, 11, 1, 9, 4, 32, 2] has cost 57.


Decide in level 11 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 12, 16, 31, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 10]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 10]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 12, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 10]


Solution : [0, 11, 1, 9, 4, 32, 2, 10] has cost 66.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 2, 10]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 2, 12]


Solution : [0, 11, 1, 9, 4, 32, 2, 12] has cost 66.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 2, 12]

After backtrack at level 12
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 2]

After backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10]
 solution : [0, 11, 1, 9, 4, 32, 2]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before backtrack at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14]
 solution : [0, 11, 1, 9, 4, 32, 2]

After backtrack at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8]
 solution : [0, 11, 1, 9, 4, 32, 2]


Before backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8]
 solution : [0, 11, 1, 9, 4, 32, 2]

After backtrack at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32]


Solution : [0, 11, 1, 9, 4, 32] has cost 51.


Decide in level 8 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 14, 8, 23, 24, 28, 29, 5, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]


New level: 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 9 : {16, 13, 31}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 5, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14]


Solution : [0, 11, 1, 9, 4, 32, 14] has cost 56.


Decide in level 9 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 5, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : {3, 23, 24, 28, 29}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]


Solution : [0, 11, 1, 9, 4, 32, 14, 5] has cost 62.


Before backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 32, 14, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 32, 14]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 32, 14]

Essensial at level 10 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : {24, 28, 29, 23}

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 3]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 3]


Solution : [0, 11, 1, 9, 4, 32, 14, 3] has cost 69.


Before backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7]
 solution : [0, 11, 1, 9, 4, 32, 14, 3]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 14]


Before backtrack at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 14]

After backtrack at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32]


Solution : [0, 11, 1, 9, 4, 32] has cost 51.


Decide in level 9 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 8, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 7, 3, 23, 24, 28, 29, 16, 31, 13, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 7, 10, 12, 13, 16, 26, 27, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]


Solution : [0, 11, 1, 9, 4, 32, 8] has cost 57.


Decide in level 10 among pending : [17, 18, 19, 20, 21, 25, 3, 23, 24, 28, 29, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8, 3]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {5, 17, 18, 19, 20, 21, 23, 24, 25, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 3]


Solution : [0, 11, 1, 9, 4, 32, 8, 3] has cost 70.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 8, 3]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32, 8]

Essensial at level 11 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {17, 18, 19, 20, 21, 23, 24, 25, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 8, 5]


Solution : [0, 11, 1, 9, 4, 32, 8, 5] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 8, 5]

After backtrack at level 11
 pending : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 8]


Before backtrack at level 10
 pending : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32, 8]

After backtrack at level 10
 pending : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32]


Solution : [0, 11, 1, 9, 4, 32] has cost 51.


Decide in level 10 among pending : [5, 17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32, 5]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 12, 26, 27, 33, 10, 7, 16, 31, 13, 3]
 solution : [0, 11, 1, 9, 4, 32, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {3, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 7, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 7, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 7, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Solution : [0, 11, 1, 9, 4, 32, 5] has cost 57.


Decide in level 11 among pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 7, 16, 31, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 7]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 7]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 7]


Solution : [0, 11, 1, 9, 4, 32, 5, 7] has cost 70.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 5, 7]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Solution : [0, 11, 1, 9, 4, 32, 5] has cost 57.


Decide in level 12 among pending : [17, 18, 19, 20, 21, 25, 12, 26, 27, 33, 10, 16, 31, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 12]


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 12]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 12]


Solution : [0, 11, 1, 9, 4, 32, 5, 12] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 5, 12]

After backtrack at level 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 10, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 32, 5, 10]


Solution : [0, 11, 1, 9, 4, 32, 5, 10] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 4, 32, 5, 10]

After backtrack at level 13
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 32, 5]

After backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 32, 5]


Before backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 32, 5]

After backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 23, 24, 28, 29, 3, 7]
 solution : [0, 11, 1, 9, 4, 32]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {24, 28, 29, 23}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7]
 solution : [0, 11, 1, 9, 4, 32, 3]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7]
 solution : [0, 11, 1, 9, 4, 32, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7]
 solution : [0, 11, 1, 9, 4, 32, 3]


Solution : [0, 11, 1, 9, 4, 32, 3] has cost 64.


Before backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7]
 solution : [0, 11, 1, 9, 4, 32, 3]

After backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32]


Before backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 32]

After backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32]


Before backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 32]

After backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8]
 solution : [0, 11, 1, 9, 4, 32]


Before backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8]
 solution : [0, 11, 1, 9, 4, 32]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14]
 solution : [0, 11, 1, 9, 4, 32]


Before backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14]
 solution : [0, 11, 1, 9, 4, 32]

After backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]


Before backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2]
 solution : [0, 11, 1, 9, 4, 32]

After backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4, 32]


Invert decision for 32 at level 5


New level: 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 6 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 7, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4, 7]


New level: 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4, 7]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 3, 23, 24, 28, 29, 5, 8, 14, 2, 22, 6]
 solution : [0, 11, 1, 9, 4, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 128), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 7 : {6, 8, 10, 12, 13, 14, 16, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 3, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 3, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 128), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 128), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 3, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]


Solution : [0, 11, 1, 9, 4, 7] has cost 54.


Decide in level 7 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 3, 23, 24, 28, 29, 5, 2, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 128), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 3]


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 128), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 8 : {33, 2, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 3]


Solution : [0, 11, 1, 9, 4, 7, 3] has cost 67.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 9, 4, 7, 3]

After backtrack at level 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 32), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]


Solution : [0, 11, 1, 9, 4, 7] has cost 54.


Decide in level 8 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 5, 2, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 32), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 5]


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, 32), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 9 : {33, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 5]


Solution : [0, 11, 1, 9, 4, 7, 5] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 7, 5]

After backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 2, 22]
 solution : [0, 11, 1, 9, 4, 7]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 9 : {33, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 7, 2]


Solution : [0, 11, 1, 9, 4, 7, 2] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 7, 2]

After backtrack at level 9
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22]
 solution : [0, 11, 1, 9, 4, 7]


Before backtrack at level 8
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22]
 solution : [0, 11, 1, 9, 4, 7]

After backtrack at level 8
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5]
 solution : [0, 11, 1, 9, 4, 7]


Before backtrack at level 7
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5]
 solution : [0, 11, 1, 9, 4, 7]

After backtrack at level 7
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 7 among pending : [2, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4, 2]


New level: 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 22, 5, 10, 16, 31, 13, 12, 8, 14, 6, 3]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : {3, 5, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 8, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 8, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 8, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]


Solution : [0, 11, 1, 9, 4, 2] has cost 47.


Decide in level 8 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 8, 14, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2, 8]


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 6, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 8]


Solution : [0, 11, 1, 9, 4, 2, 8] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 8]

After backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]
 solution : [0, 11, 1, 9, 4, 2]


Solution : [0, 11, 1, 9, 4, 2] has cost 47.


Decide in level 9 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 14, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]


New level: 10
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 13, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 10 : {13}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]


Solution : [0, 11, 1, 9, 4, 2, 14] has cost 52.


Decide in level 10 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 6]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 6]


Solution : [0, 11, 1, 9, 4, 2, 14, 6] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 14, 6]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14]


Solution : [0, 11, 1, 9, 4, 2, 14] has cost 52.


Decide in level 11 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 10, 16, 31, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 10]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 10]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 10]


Solution : [0, 11, 1, 9, 4, 2, 14, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 14, 10]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 2, 14]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 14, 12]


Solution : [0, 11, 1, 9, 4, 2, 14, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 14, 12]

After backtrack at level 12
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31]
 solution : [0, 11, 1, 9, 4, 2, 14]

After backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10]
 solution : [0, 11, 1, 9, 4, 2, 14]


Before backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10]
 solution : [0, 11, 1, 9, 4, 2, 14]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13, 6]
 solution : [0, 11, 1, 9, 4, 2, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13, 6]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13, 6]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13, 6]
 solution : [0, 11, 1, 9, 4, 2]


Solution : [0, 11, 1, 9, 4, 2] has cost 47.


Decide in level 10 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 6]


New level: 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 6]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 6]


Solution : [0, 11, 1, 9, 4, 2, 6] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 6]

After backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2]


Solution : [0, 11, 1, 9, 4, 2] has cost 47.


Decide in level 11 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 12]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 12]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, 1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 13, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 12]


Solution : [0, 11, 1, 9, 4, 2, 12] has cost 56.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 12]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 2]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 13, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 2, 10]


Solution : [0, 11, 1, 9, 4, 2, 10] has cost 56.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 2, 10]

After backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 2]


Before backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 2]

After backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 2]


Before backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 2]

After backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6]
 solution : [0, 11, 1, 9, 4, 2]


Before backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6]
 solution : [0, 11, 1, 9, 4, 2]

After backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14]
 solution : [0, 11, 1, 9, 4, 2]


Before backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14]
 solution : [0, 11, 1, 9, 4, 2]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 8 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 22, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 22 with phase True at level 8

After decision at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22]


New level: 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, 128), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22]


Solution : [0, 11, 1, 9, 4, 22] has cost 51.


Decide in level 9 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 6, 14, 23, 24, 28, 29, 5, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22, 6]


New level: 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22, 6]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 14, 23, 24, 28, 29, 5, 3, 8]
 solution : [0, 11, 1, 9, 4, 22, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 10, 12, 13, 14, 16, 26, 27, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3]
 solution : [0, 11, 1, 9, 4, 22, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3]
 solution : [0, 11, 1, 9, 4, 22, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, 0), (27, 0), (28, 3), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3]
 solution : [0, 11, 1, 9, 4, 22, 6]


Solution : [0, 11, 1, 9, 4, 22, 6] has cost 57.


Before backtrack at level 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3]
 solution : [0, 11, 1, 9, 4, 22, 6]

After backtrack at level 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, 2), (20, 2), (21, 2), (22, -1), (23, 8), (24, 3), (25, 2), (26, -1), (27, -1), (28, 3), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22]


Solution : [0, 11, 1, 9, 4, 22] has cost 51.


Decide in level 10 among pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 5, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 23, 24, 28, 29, 3, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 16), (18, 16), (19, 10), (20, 10), (21, 10), (22, -1), (23, 8), (24, 3), (25, 10), (26, 2), (27, 2), (28, 3), (29, 8), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {3, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]


Solution : [0, 11, 1, 9, 4, 22, 5] has cost 57.


Before backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 5]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 22, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 22]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 22]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {24, 28, 29, 23}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, 0), (24, 0), (25, 4), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 3]


Solution : [0, 11, 1, 9, 4, 22, 3] has cost 64.


Before backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8]
 solution : [0, 11, 1, 9, 4, 22, 3]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 22]


Before backtrack at level 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 22]

After backtrack at level 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 22]


Before backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 22]

After backtrack at level 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 22]


Invert decision for 22 at level 8


New level: 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 1), (17, 4), (18, 4), (19, 4), (20, 4), (21, 4), (22, -1), (23, -1), (24, -1), (25, 4), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 9 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 14, 8, 3, 23, 24, 28, 29, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]


New level: 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 13, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, -1), (33, 8)]

Covered at level 10 : {13}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 3, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14]


Solution : [0, 11, 1, 9, 4, 14] has cost 46.


Decide in level 10 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 3, 23, 24, 28, 29, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, -1), (33, 8)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 23, 24, 28, 29, 5, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 1), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {5, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]


Solution : [0, 11, 1, 9, 4, 14, 3] has cost 59.


Before backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 3]

After backtrack at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 14, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 14]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 14]

Essensial at level 11 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : {24, 28, 29, 23}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]


Solution : [0, 11, 1, 9, 4, 14, 5] has cost 52.


Decide in level 11 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 8, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5, 8]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 8]


Solution : [0, 11, 1, 9, 4, 14, 5, 8] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 14, 5, 8]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]


Solution : [0, 11, 1, 9, 4, 14, 5] has cost 52.


Decide in level 12 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 6]


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 6]


Solution : [0, 11, 1, 9, 4, 14, 5, 6] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 4, 14, 5, 6]

After backtrack at level 13
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5]


Solution : [0, 11, 1, 9, 4, 14, 5] has cost 52.


Decide in level 13 among pending : [17, 18, 19, 20, 21, 25, 10, 26, 27, 33, 16, 31, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 10]


New level: 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 10]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 12, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 10]


Solution : [0, 11, 1, 9, 4, 14, 5, 10] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 4, 14, 5, 10]

After backtrack at level 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12]
 solution : [0, 11, 1, 9, 4, 14, 5]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 14, 5, 12]


Solution : [0, 11, 1, 9, 4, 14, 5, 12] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 4, 14, 5, 12]

After backtrack at level 14
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before backtrack at level 13
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31]
 solution : [0, 11, 1, 9, 4, 14, 5]

After backtrack at level 13
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before backtrack at level 12
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10]
 solution : [0, 11, 1, 9, 4, 14, 5]

After backtrack at level 12
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]


Before backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6]
 solution : [0, 11, 1, 9, 4, 14, 5]

After backtrack at level 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8]
 solution : [0, 11, 1, 9, 4, 14]


Before backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8]
 solution : [0, 11, 1, 9, 4, 14]

After backtrack at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 10 among pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 6, 5, 23, 24, 28, 29, 8, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4, 6]


New level: 11
 pending : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4, 6]


Before reduction : 
 pending  : [12, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 5, 23, 24, 28, 29, 8, 13, 3]
 solution : [0, 11, 1, 9, 4, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, -1), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 11 : {8, 10, 12, 13, 16, 31}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 5, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 5, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, -1), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, -1), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 5, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6]


Solution : [0, 11, 1, 9, 4, 6] has cost 47.


Decide in level 11 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 5, 23, 24, 28, 29, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, -1), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6, 5]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, 6), (20, 6), (21, 6), (22, -1), (23, 32), (24, 9), (25, 6), (26, 2), (27, 2), (28, 9), (29, 32), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {33, 3, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 5]


Solution : [0, 11, 1, 9, 4, 6, 5] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 6, 5]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 3]
 solution : [0, 11, 1, 9, 4, 6]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {33, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 6, 3]


Solution : [0, 11, 1, 9, 4, 6, 3] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 4, 6, 3]

After backtrack at level 12
 pending : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 6]


Before backtrack at level 11
 pending : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29]
 solution : [0, 11, 1, 9, 4, 6]

After backtrack at level 11
 pending : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4]


Solution : [0, 11, 1, 9, 4] has cost 41.


Decide in level 11 among pending : [3, 17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4, 3]


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 23, 24, 28, 29, 12, 16, 31, 10, 8, 13, 5]
 solution : [0, 11, 1, 9, 4, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 24), (18, 24), (19, 20), (20, 20), (21, 24), (22, -1), (23, 32), (24, 9), (25, 24), (26, 8), (27, 8), (28, 9), (29, 32), (30, -1), (31, 4), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : {5, 23, 24, 28, 29}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 3]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 3]


Solution : [0, 11, 1, 9, 4, 3] has cost 54.


Before backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 3]

After backtrack at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13, 23, 24, 28, 29, 5]
 solution : [0, 11, 1, 9, 4]

Essensial at level 12 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : {24, 28, 29, 23}

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, 0), (24, 0), (25, 5), (26, 2), (27, 2), (28, 0), (29, 0), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]
 solution : [0, 11, 1, 9, 4, 5]


Solution : [0, 11, 1, 9, 4, 5] has cost 47.


Decide in level 12 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 8, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 8]


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 8]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 8]


Solution : [0, 11, 1, 9, 4, 5, 8] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 4, 5, 8]

After backtrack at level 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5]


Solution : [0, 11, 1, 9, 4, 5] has cost 47.


Decide in level 13 among pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 12, 16, 31, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 12]


New level: 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 12]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 4), (17, 5), (18, 5), (19, 6), (20, 6), (21, 5), (22, -1), (23, -1), (24, -1), (25, 5), (26, 2), (27, 2), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 10, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 12]


Solution : [0, 11, 1, 9, 4, 5, 12] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 4, 5, 12]

After backtrack at level 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5]


Before reduction : 
 pending  : [17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 4, 5]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 13, 16, 17, 18, 19, 20, 21, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 4, 5, 10]


Solution : [0, 11, 1, 9, 4, 5, 10] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 4, 5, 10]

After backtrack at level 14
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 5]


Before backtrack at level 13
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 4, 5]

After backtrack at level 13
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 5]


Before backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12]
 solution : [0, 11, 1, 9, 4, 5]

After backtrack at level 12
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 11
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 4]


Before backtrack at level 4
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 4]

After backtrack at level 4
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32, 15]
 solution : [0, 11, 1, 9, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32, 15]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32, 15]
 solution : [0, 11, 1, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32, 15]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 4 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32, 15]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]


New level: 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 13, 12, 5, 23, 24, 28, 29, 8, 3, 6, 14, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 32), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 8), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 24, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 24, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 8), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 24, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 5 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 24, 28, 29, 8, 3, 6, 22, 2, 7, 32]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 24 with phase True at level 5

After decision at level 5
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]


New level: 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 28, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 96), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 100), (22, 32), (23, 8), (24, -1), (25, 100), (26, 10), (27, 11), (28, 0), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 6 : {28}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 100), (22, 32), (23, 8), (24, -1), (25, 100), (26, 10), (27, 11), (28, 0), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 100), (22, 32), (23, 8), (24, -1), (25, 100), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24]


Solution : [0, 11, 1, 9, 15, 24] has cost 41.


Decide in level 6 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 5, 23, 29, 8, 3, 6, 22, 2, 7, 32]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 100), (22, 32), (23, 8), (24, -1), (25, 100), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


New level: 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 23, 29, 8, 3, 6, 22, 2, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 100), (22, 32), (23, 8), (24, -1), (25, 100), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 7 : {2, 3, 29, 23}

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 8, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 8, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 8, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 7 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 8, 6, 22, 7, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 8]


New level: 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 8]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 8]


Solution : [0, 11, 1, 9, 15, 24, 5, 8] has cost 53.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 5, 8]

After backtrack at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 8 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 6, 22, 7, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 6]


New level: 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 6]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 6]


Solution : [0, 11, 1, 9, 15, 24, 5, 6] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 5, 6]

After backtrack at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 9 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 7, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 7]


New level: 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 7]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 5, 7]


Solution : [0, 11, 1, 9, 15, 24, 5, 7] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 5, 7]

After backtrack at level 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 10 among pending : [10, 17, 18, 19, 20, 21, 25, 26, 27, 33, 16, 31, 12, 22, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 21 with phase True at level 10

After decision at level 10
 pending : [10, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]


New level: 11
 pending : [10, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]


Before reduction : 
 pending  : [10, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 12, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 17, 18, 19, 20, 22, 25, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]


Solution : [0, 11, 1, 9, 15, 24, 5, 21] has cost 81.


Before backtrack at level 11
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]

After backtrack at level 11
 pending : [10, 12, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 21]


Invert decision for 21 at level 10


New level: 11
 pending : [10, 12, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 12, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 11 among pending : [10, 12, 17, 18, 19, 20, 25, 26, 27, 33, 16, 31, 22, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 25 with phase True at level 11

After decision at level 11
 pending : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]


New level: 12
 pending : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]


Before reduction : 
 pending  : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]


Solution : [0, 11, 1, 9, 15, 24, 5, 25] has cost 81.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]

After backtrack at level 12
 pending : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 25]


Invert decision for 25 at level 11


New level: 12
 pending : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Solution : [0, 11, 1, 9, 15, 24, 5] has cost 47.


Decide in level 12 among pending : [10, 12, 17, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 17 with phase True at level 12

After decision at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]


Solution : [0, 11, 1, 9, 15, 24, 5, 17] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5, 17]


Invert decision for 17 at level 12


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

Essensial at level 13 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 18]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 18]


Solution : [0, 11, 1, 9, 15, 24, 5, 18] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 5, 18]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6]
 solution : [0, 11, 1, 9, 15, 24, 5]


Before backtrack at level 7
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6]
 solution : [0, 11, 1, 9, 15, 24, 5]

After backtrack at level 7
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 24, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 24]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 24]


Solution : [0, 11, 1, 9, 15, 24] has cost 41.


Decide in level 7 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]


New level: 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : {2, 29, 23}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]


Solution : [0, 11, 1, 9, 15, 24, 3] has cost 54.


Before backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 3]

After backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 24, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 24]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 24]

Essensial at level 8 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : {29, 23}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 8 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 7]


New level: 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 7]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 7]


Solution : [0, 11, 1, 9, 15, 24, 2, 7] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 2, 7]

After backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 9 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 6]


New level: 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 6]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 6]


Solution : [0, 11, 1, 9, 15, 24, 2, 6] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 2, 6]

After backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 10 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 8]


New level: 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 8]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 24, 2, 8]


Solution : [0, 11, 1, 9, 15, 24, 2, 8] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 15, 24, 2, 8]

After backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 11 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 25 with phase True at level 11

After decision at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]


New level: 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]


Solution : [0, 11, 1, 9, 15, 24, 2, 25] has cost 81.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]

After backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2, 25]


Invert decision for 25 at level 11


New level: 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 12 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 21 with phase True at level 12

After decision at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]


Solution : [0, 11, 1, 9, 15, 24, 2, 21] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 21]


Invert decision for 21 at level 12


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2]


Solution : [0, 11, 1, 9, 15, 24, 2] has cost 47.


Decide in level 13 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 18 with phase True at level 13

After decision at level 13
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]


New level: 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]


Solution : [0, 11, 1, 9, 15, 24, 2, 18] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]

After backtrack at level 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2, 18]


Invert decision for 18 at level 13


New level: 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 24, 2]

Essensial at level 14 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 17]


Solution : [0, 11, 1, 9, 15, 24, 2, 17] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 24, 2, 17]

After backtrack at level 14
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 24, 2]


Before backtrack at level 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 24, 2]

After backtrack at level 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 24]


Before backtrack at level 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 24]

After backtrack at level 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 24]


Before backtrack at level 6
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 24]

After backtrack at level 6
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 28, 5]
 solution : [0, 11, 1, 9, 15, 24]


Invert decision for 24 at level 5


New level: 6
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 28, 5]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 28, 5]
 solution : [0, 11, 1, 9, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 28, 5]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 6 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 28, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 28 with phase True at level 6

After decision at level 6
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28]


New level: 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28]


Solution : [0, 11, 1, 9, 15, 28] has cost 41.


Decide in level 7 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 2, 23, 29, 7, 3, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28, 2]


New level: 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 23, 29, 7, 3, 5]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : {5, 3, 29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 8 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 8]


New level: 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 8]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 6, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 8]


Solution : [0, 11, 1, 9, 15, 28, 2, 8] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 2, 8]

After backtrack at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 9 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 6, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 6]


New level: 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 6]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 7, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 6]


Solution : [0, 11, 1, 9, 15, 28, 2, 6] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 2, 6]

After backtrack at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 10 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 7]


New level: 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 7]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 2, 7]


Solution : [0, 11, 1, 9, 15, 28, 2, 7] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 2, 7]

After backtrack at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 11 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 21 with phase True at level 11

After decision at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]


New level: 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 22, 25, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]


Solution : [0, 11, 1, 9, 15, 28, 2, 21] has cost 81.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]

After backtrack at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2, 21]


Invert decision for 21 at level 11


New level: 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 12 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]


New level: 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]


Solution : [0, 11, 1, 9, 15, 28, 2, 25] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2]


Solution : [0, 11, 1, 9, 15, 28, 2] has cost 47.


Decide in level 13 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 17 with phase True at level 13

After decision at level 13
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]


New level: 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]


Solution : [0, 11, 1, 9, 15, 28, 2, 17] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]

After backtrack at level 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2, 17]


Invert decision for 17 at level 13


New level: 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 2]

Essensial at level 14 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 18]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 18]


Solution : [0, 11, 1, 9, 15, 28, 2, 18] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 2, 18]

After backtrack at level 14
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6]
 solution : [0, 11, 1, 9, 15, 28, 2]


Before backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6]
 solution : [0, 11, 1, 9, 15, 28, 2]

After backtrack at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 5, 8]
 solution : [0, 11, 1, 9, 15, 28, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 5, 8]
 solution : [0, 11, 1, 9, 15, 28]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 5, 8]
 solution : [0, 11, 1, 9, 15, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 5, 8]
 solution : [0, 11, 1, 9, 15, 28]


Solution : [0, 11, 1, 9, 15, 28] has cost 41.


Decide in level 8 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 3, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Decide 3 with phase True at level 8

After decision at level 8
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 5, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]


New level: 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 5, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 23, 29, 5, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : {5, 29, 23}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]


Solution : [0, 11, 1, 9, 15, 28, 3] has cost 54.


Before backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 3]

After backtrack at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 28, 3]


Invert decision for 3 at level 8


New level: 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 28]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 28]

Essensial at level 9 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : {29, 23}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, 0), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 9 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 7, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 7]


New level: 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 7]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 6, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 7]


Solution : [0, 11, 1, 9, 15, 28, 5, 7] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 5, 7]

After backtrack at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 10 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 6]


New level: 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 6]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 6]


Solution : [0, 11, 1, 9, 15, 28, 5, 6] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 5, 6]

After backtrack at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 11 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 8]


New level: 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 8]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 28, 5, 8]


Solution : [0, 11, 1, 9, 15, 28, 5, 8] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 15, 28, 5, 8]

After backtrack at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 12 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 25, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]


Solution : [0, 11, 1, 9, 15, 28, 5, 25] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 13 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 21 with phase True at level 13

After decision at level 13
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]


New level: 14
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 18, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]


Solution : [0, 11, 1, 9, 15, 28, 5, 21] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]

After backtrack at level 14
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 21]


Invert decision for 21 at level 13


New level: 14
 pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5]


Solution : [0, 11, 1, 9, 15, 28, 5] has cost 47.


Decide in level 14 among pending : [10, 12, 18, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

Decide 18 with phase True at level 14

After decision at level 14
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]


New level: 15
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 17), (18, 17), (19, 6), (20, 6), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, 10), (27, 11), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 17, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]


Solution : [0, 11, 1, 9, 15, 28, 5, 18] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]

After backtrack at level 15
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5, 18]


Invert decision for 18 at level 14


New level: 15
 pending : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before reduction : 
 pending  : [10, 12, 19, 20, 26, 27, 33, 16, 31, 22, 32, 17]
 solution : [0, 11, 1, 9, 15, 28, 5]

Essensial at level 15 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 19, 20, 22, 26, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 17]


Solution : [0, 11, 1, 9, 15, 28, 5, 17] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 28, 5, 17]

After backtrack at level 15
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 14
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 14
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 12
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 11
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 10
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 28, 5]


Before backtrack at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 28, 5]

After backtrack at level 9
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 28]


Before backtrack at level 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 28]

After backtrack at level 8
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 28]


Before backtrack at level 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 28]

After backtrack at level 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 28]


Invert decision for 28 at level 6


New level: 7
 pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 7 among pending : [10, 12, 17, 19, 20, 26, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 26 with phase True at level 7

After decision at level 7
 pending : [10, 12, 17, 19, 20, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]


New level: 8
 pending : [10, 12, 17, 19, 20, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 27, 33, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 1), (32, 128), (33, 0)]

Covered at level 8 : {33, 27}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 1), (32, 128), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 128), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]


Solution : [0, 11, 1, 9, 15, 26] has cost 54.


Before backtrack at level 8
 pending : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2]
 solution : [0, 11, 1, 9, 15, 26]

After backtrack at level 8
 pending : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 26]


Invert decision for 26 at level 7


New level: 8
 pending : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 128), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 8 among pending : [10, 12, 17, 19, 20, 16, 31, 22, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 22 with phase True at level 8

After decision at level 8
 pending : [10, 12, 17, 19, 20, 16, 31, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]


New level: 9
 pending : [10, 12, 17, 19, 20, 16, 31, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 32, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, 52), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 2)]

Covered at level 9 : {16, 32, 31}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, 52), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 52), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22]


Solution : [0, 11, 1, 9, 15, 22] has cost 35.


Decide in level 9 among pending : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 5, 23, 29, 7, 3, 2, 27, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 52), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


New level: 10
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 23, 29, 7, 3, 2, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 52), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : {2, 3, 29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 10 among pending : [10, 12, 17, 19, 20, 18, 21, 25, 8, 6, 7, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 8]


New level: 11
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 8]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 7, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 8]


Solution : [0, 11, 1, 9, 15, 22, 5, 8] has cost 47.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 5, 8]

After backtrack at level 11
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 11 among pending : [10, 12, 17, 19, 20, 18, 21, 25, 6, 7, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 6]


New level: 12
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 6]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {33, 7, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 6]


Solution : [0, 11, 1, 9, 15, 22, 5, 6] has cost 47.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 5, 6]

After backtrack at level 12
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 12 among pending : [10, 12, 17, 19, 20, 18, 21, 25, 7, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 7]


New level: 13
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 7]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 5, 7]


Solution : [0, 11, 1, 9, 15, 22, 5, 7] has cost 54.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 5, 7]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 13 among pending : [10, 12, 17, 19, 20, 18, 21, 25, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 17 with phase True at level 13

After decision at level 13
 pending : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]


New level: 14
 pending : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]


Solution : [0, 11, 1, 9, 15, 22, 5, 17] has cost 75.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]

After backtrack at level 14
 pending : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 17]


Invert decision for 17 at level 13


New level: 14
 pending : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 19, 20, 18, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 14 among pending : [10, 12, 19, 20, 18, 21, 25, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 18 with phase True at level 14

After decision at level 14
 pending : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]


New level: 15
 pending : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]


Before reduction : 
 pending  : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 19, 20, 21, 25, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]


Solution : [0, 11, 1, 9, 15, 22, 5, 18] has cost 75.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]

After backtrack at level 15
 pending : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 18]


Invert decision for 18 at level 14


New level: 15
 pending : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 19, 20, 21, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Solution : [0, 11, 1, 9, 15, 22, 5] has cost 41.


Decide in level 15 among pending : [10, 12, 19, 20, 21, 25, 27, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 21 with phase True at level 15

After decision at level 15
 pending : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]


New level: 16
 pending : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]


Before reduction : 
 pending  : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {33, 19, 20, 25, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]


Solution : [0, 11, 1, 9, 15, 22, 5, 21] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]

After backtrack at level 16
 pending : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5, 21]


Invert decision for 21 at level 15


New level: 16
 pending : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 19, 20, 25, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

Essensial at level 16 : {25}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {27, 33, 19, 20}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 25]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 25]


Solution : [0, 11, 1, 9, 15, 22, 5, 25] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 5, 25]

After backtrack at level 16
 pending : [10, 12, 25, 19, 20, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 15
 pending : [10, 12, 25, 19, 20, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 15
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6]
 solution : [0, 11, 1, 9, 15, 22, 5]


Before backtrack at level 10
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6]
 solution : [0, 11, 1, 9, 15, 22, 5]

After backtrack at level 10
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 22, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 22]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 3, 2, 8]
 solution : [0, 11, 1, 9, 15, 22]


Solution : [0, 11, 1, 9, 15, 22] has cost 35.


Decide in level 10 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 3, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]


New level: 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 23, 29, 2, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, 52), (26, -1), (27, 17), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : {2, 29, 23}

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]


Solution : [0, 11, 1, 9, 15, 22, 3] has cost 48.


Before backtrack at level 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 3]

After backtrack at level 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 22, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 22]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8, 23, 29, 2]
 solution : [0, 11, 1, 9, 15, 22]

Essensial at level 11 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : {29, 23}

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 11 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 7, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 7]


New level: 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 7]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 8, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 7]


Solution : [0, 11, 1, 9, 15, 22, 2, 7] has cost 54.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 2, 7]

After backtrack at level 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 12 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 6]


New level: 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 6]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 13 : {33, 8, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 6]


Solution : [0, 11, 1, 9, 15, 22, 2, 6] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 2, 6]

After backtrack at level 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 13 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 8]


New level: 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 8]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 14 : {33, 10, 12, 17, 18, 19, 20, 21, 25, 27}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 22, 2, 8]


Solution : [0, 11, 1, 9, 15, 22, 2, 8] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 15, 22, 2, 8]

After backtrack at level 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 14 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 18, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 18 with phase True at level 14

After decision at level 14
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]


New level: 15
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 17, 19, 20, 21, 25, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]


Solution : [0, 11, 1, 9, 15, 22, 2, 18] has cost 75.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]

After backtrack at level 15
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2, 18]


Invert decision for 18 at level 14


New level: 15
 pending : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 15 among pending : [10, 12, 25, 19, 20, 27, 33, 21, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 17 with phase True at level 15

After decision at level 15
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]


New level: 16
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {33, 19, 20, 21, 25, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]


Solution : [0, 11, 1, 9, 15, 22, 2, 17] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]

After backtrack at level 16
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 17]


Invert decision for 17 at level 15


New level: 16
 pending : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 25, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2]


Solution : [0, 11, 1, 9, 15, 22, 2] has cost 41.


Decide in level 16 among pending : [10, 12, 25, 19, 20, 27, 33, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 25 with phase True at level 16

After decision at level 16
 pending : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]


New level: 17
 pending : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]


Before reduction : 
 pending  : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 17 : {33, 19, 20, 21, 27}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]


Solution : [0, 11, 1, 9, 15, 22, 2, 25] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]

After backtrack at level 17
 pending : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2, 25]


Invert decision for 25 at level 16


New level: 17
 pending : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before reduction : 
 pending  : [10, 12, 19, 20, 27, 33, 21]
 solution : [0, 11, 1, 9, 15, 22, 2]

Essensial at level 17 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 17 : {27, 33, 19, 20}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 21]


Solution : [0, 11, 1, 9, 15, 22, 2, 21] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 22, 2, 21]

After backtrack at level 17
 pending : [10, 12, 21, 19, 20, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 16
 pending : [10, 12, 21, 19, 20, 27, 33]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 16
 pending : [10, 12, 21, 19, 20, 27, 33, 25]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 15
 pending : [10, 12, 21, 19, 20, 27, 33, 25]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 15
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 14
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 14
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 13
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 13
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 12
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 12
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6]
 solution : [0, 11, 1, 9, 15, 22, 2]


Before backtrack at level 11
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6]
 solution : [0, 11, 1, 9, 15, 22, 2]

After backtrack at level 11
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 22]


Before backtrack at level 10
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7]
 solution : [0, 11, 1, 9, 15, 22]

After backtrack at level 10
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 22]


Before backtrack at level 9
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9, 15, 22]

After backtrack at level 9
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15, 22]


Invert decision for 22 at level 8


New level: 9
 pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 9 among pending : [10, 12, 21, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 21 with phase True at level 9

After decision at level 9
 pending : [10, 12, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]


New level: 10
 pending : [10, 12, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]


Before reduction : 
 pending  : [10, 12, 19, 20, 27, 33, 25, 17, 18, 8, 6, 2, 23, 29, 7, 3, 16, 31, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 0), (32, 1), (33, 0)]

Covered at level 10 : {33, 16, 17, 18, 19, 20, 25, 27, 31}

After reduction : 
 pending  : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]


Before reduction : 
 pending  : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 0), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, -1), (32, 1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]


Solution : [0, 11, 1, 9, 15, 21] has cost 59.


Before backtrack at level 10
 pending : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5]
 solution : [0, 11, 1, 9, 15, 21]

After backtrack at level 10
 pending : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 21]


Invert decision for 21 at level 9


New level: 10
 pending : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, -1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 10 among pending : [10, 12, 8, 6, 2, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [10, 12, 8, 6, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]


New level: 11
 pending : [10, 12, 8, 6, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 8, 6, 23, 29, 7, 3, 32, 5, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, 22), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, 8), (33, 64)]

Covered at level 11 : {5, 3, 29, 23}

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, 22), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 27, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 11 among pending : [10, 12, 8, 6, 7, 32, 19, 20, 27, 33, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

Decide 27 with phase True at level 11

After decision at level 11
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]


New level: 12
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 33, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 9), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 0)]

Covered at level 12 : {33}

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 9), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 9), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]


Solution : [0, 11, 1, 9, 15, 2, 27] has cost 60.


Before backtrack at level 12
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 27]

After backtrack at level 12
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 2, 27]


Invert decision for 27 at level 11


New level: 12
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 9), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 12 among pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

Decide 33 with phase True at level 12

After decision at level 12
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


New level: 13
 pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Solution : [0, 11, 1, 9, 15, 2, 33] has cost 41.


Decide in level 13 among pending : [10, 12, 8, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 8]


New level: 14
 pending : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 8]


Before reduction : 
 pending  : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 6, 7, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 8]


Solution : [0, 11, 1, 9, 15, 2, 33, 8] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 33, 8]

After backtrack at level 14
 pending : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Solution : [0, 11, 1, 9, 15, 2, 33] has cost 41.


Decide in level 14 among pending : [10, 12, 6, 7, 32, 19, 20, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 6]


New level: 15
 pending : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 6]


Before reduction : 
 pending  : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 7, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 6]


Solution : [0, 11, 1, 9, 15, 2, 33, 6] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 33, 6]

After backtrack at level 15
 pending : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Solution : [0, 11, 1, 9, 15, 2, 33] has cost 41.


Decide in level 15 among pending : [10, 12, 7, 32, 19, 20, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Decide 7 with phase True at level 15

After decision at level 15
 pending : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 7]


New level: 16
 pending : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 7]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 33, 7]


Solution : [0, 11, 1, 9, 15, 2, 33, 7] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 33, 7]

After backtrack at level 16
 pending : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 7]


Invert decision for 7 at level 15


New level: 16
 pending : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Solution : [0, 11, 1, 9, 15, 2, 33] has cost 41.


Decide in level 16 among pending : [10, 12, 32, 19, 20, 25, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Decide 25 with phase True at level 16

After decision at level 16
 pending : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]


New level: 17
 pending : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 20), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]


Solution : [0, 11, 1, 9, 15, 2, 33, 25] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]

After backtrack at level 17
 pending : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 25]


Invert decision for 25 at level 16


New level: 17
 pending : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 32, 19, 20, 17, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Solution : [0, 11, 1, 9, 15, 2, 33] has cost 41.


Decide in level 17 among pending : [10, 12, 32, 19, 20, 17, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]


New level: 18
 pending : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 16, 18, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]


Solution : [0, 11, 1, 9, 15, 2, 33, 17] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]

After backtrack at level 18
 pending : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

Essensial at level 18 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 16, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 18]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 18]


Solution : [0, 11, 1, 9, 15, 2, 33, 18] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 33, 18]

After backtrack at level 18
 pending : [10, 12, 18, 32, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before backtrack at level 17
 pending : [10, 12, 18, 32, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 2, 33]

After backtrack at level 17
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before backtrack at level 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 33]

After backtrack at level 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before backtrack at level 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 33]

After backtrack at level 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before backtrack at level 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7]
 solution : [0, 11, 1, 9, 15, 2, 33]

After backtrack at level 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6]
 solution : [0, 11, 1, 9, 15, 2, 33]


Before backtrack at level 13
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6]
 solution : [0, 11, 1, 9, 15, 2, 33]

After backtrack at level 13
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 2, 33]


Invert decision for 33 at level 12


New level: 13
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 13 among pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 7, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Decide 7 with phase True at level 13

After decision at level 13
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2, 7]


New level: 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2, 7]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 6, 8, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 7]


Solution : [0, 11, 1, 9, 15, 2, 7] has cost 44.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 7]

After backtrack at level 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2, 7]


Invert decision for 7 at level 13


New level: 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 14 among pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2, 6]


New level: 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2, 6]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 8, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 6]


Solution : [0, 11, 1, 9, 15, 2, 6] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 6]

After backtrack at level 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 15 among pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 8]


New level: 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 8]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 10, 12, 16, 17, 18, 19, 20, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 2, 8]


Solution : [0, 11, 1, 9, 15, 2, 8] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 15, 2, 8]

After backtrack at level 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 16 among pending : [10, 12, 18, 32, 19, 20, 16, 31, 17, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Decide 25 with phase True at level 16

After decision at level 16
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 25]


New level: 17
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 25]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, 22), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 25]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 25]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 25]


Solution : [0, 11, 1, 9, 15, 2, 25] has cost 65.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 25]

After backtrack at level 17
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 25]


Invert decision for 25 at level 16


New level: 17
 pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 18, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2]


Solution : [0, 11, 1, 9, 15, 2] has cost 31.


Decide in level 17 among pending : [10, 12, 18, 32, 19, 20, 16, 31, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

Decide 18 with phase True at level 17

After decision at level 17
 pending : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 18]


New level: 18
 pending : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 18]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 18]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 16, 17, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 18]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 18]


Solution : [0, 11, 1, 9, 15, 2, 18] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 18]

After backtrack at level 18
 pending : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2, 18]


Invert decision for 18 at level 17


New level: 18
 pending : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 32, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 2]

Essensial at level 18 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 16, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 17]


Solution : [0, 11, 1, 9, 15, 2, 17] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 2, 17]

After backtrack at level 18
 pending : [10, 12, 17, 32, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 17
 pending : [10, 12, 17, 32, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 17
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 16
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 16
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 15
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 15
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 14
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 14
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 13
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 13
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 12
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 12
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33]
 solution : [0, 11, 1, 9, 15, 2]


Before backtrack at level 11
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33]
 solution : [0, 11, 1, 9, 15, 2]

After backtrack at level 11
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 11 among pending : [10, 12, 17, 32, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

Decide 32 with phase True at level 11

After decision at level 11
 pending : [10, 12, 17, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]


New level: 12
 pending : [10, 12, 17, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 16, 31, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, 44), (26, -1), (27, 73), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 12 : {16, 31}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, 44), (26, -1), (27, 73), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, 44), (26, -1), (27, 73), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]
 solution : [0, 11, 1, 9, 15, 32]


Solution : [0, 11, 1, 9, 15, 32] has cost 35.


Decide in level 12 among pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 3, 5, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, 44), (26, -1), (27, 73), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 5, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]


New level: 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 5, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 23, 29, 5, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, 44), (26, -1), (27, 73), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 73), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : {5, 29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 73), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]


Solution : [0, 11, 1, 9, 15, 32, 3] has cost 48.


Before backtrack at level 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 3]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 32, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 32]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 23, 29, 5]
 solution : [0, 11, 1, 9, 15, 32]

Essensial at level 13 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : {29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 5]


Solution : [0, 11, 1, 9, 15, 32, 5] has cost 41.


Before backtrack at level 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27]
 solution : [0, 11, 1, 9, 15, 32, 5]

After backtrack at level 13
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29]
 solution : [0, 11, 1, 9, 15, 32]


Before backtrack at level 12
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29]
 solution : [0, 11, 1, 9, 15, 32]

After backtrack at level 12
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15, 32]


Invert decision for 32 at level 11


New level: 12
 pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, 14), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 12 among pending : [10, 12, 17, 19, 20, 18, 25, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [10, 12, 17, 19, 20, 18, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15, 25]


New level: 13
 pending : [10, 12, 17, 19, 20, 18, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15, 25]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 8, 6, 7, 33, 27, 5, 23, 29, 16, 31, 3]
 solution : [0, 11, 1, 9, 15, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 16, 17, 18, 19, 20, 27, 31}

After reduction : 
 pending  : [10, 12, 8, 6, 7, 5, 23, 29, 3]
 solution : [0, 11, 1, 9, 15, 25]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 5, 23, 29, 3]
 solution : [0, 11, 1, 9, 15, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 5, 23, 29, 3]
 solution : [0, 11, 1, 9, 15, 25]


Solution : [0, 11, 1, 9, 15, 25] has cost 59.


Before backtrack at level 13
 pending : [10, 12, 8, 6, 7, 5, 23, 29, 3]
 solution : [0, 11, 1, 9, 15, 25]

After backtrack at level 13
 pending : [10, 12, 8, 6, 7, 5, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [10, 12, 8, 6, 7, 5, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 5, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 1), (7, 1), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 5, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15]


Solution : [0, 11, 1, 9, 15] has cost 25.


Decide in level 13 among pending : [10, 12, 8, 6, 7, 5, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 12, 8, 6, 7, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


New level: 14
 pending : [10, 12, 8, 6, 7, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 23, 29, 3, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : {3, 29, 23}

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 27, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 14 among pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 27, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 27 with phase True at level 14

After decision at level 14
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]


New level: 15
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 33, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 0)]

Covered at level 15 : {33}

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]


Solution : [0, 11, 1, 9, 15, 5, 27] has cost 60.


Before backtrack at level 15
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 27]

After backtrack at level 15
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 5, 27]


Invert decision for 27 at level 14


New level: 15
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 9), (18, 9), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31, 33]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 15 among pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 33 with phase True at level 15

After decision at level 15
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]


New level: 16
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]


Solution : [0, 11, 1, 9, 15, 5, 33] has cost 41.


Before backtrack at level 16
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]

After backtrack at level 16
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 33]


Invert decision for 33 at level 15


New level: 16
 pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 16 among pending : [10, 12, 8, 6, 7, 17, 19, 20, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 8]


New level: 17
 pending : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 8]


Before reduction : 
 pending  : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 17 : {6, 7, 10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 8]


Solution : [0, 11, 1, 9, 15, 5, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 9, 15, 5, 8]

After backtrack at level 17
 pending : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 17 among pending : [10, 12, 6, 7, 17, 19, 20, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 6 with phase True at level 17

After decision at level 17
 pending : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 6]


New level: 18
 pending : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 6]


Before reduction : 
 pending  : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 18 : {7, 10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 6]


Solution : [0, 11, 1, 9, 15, 5, 6] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 9, 15, 5, 6]

After backtrack at level 18
 pending : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 6]


Invert decision for 6 at level 17


New level: 18
 pending : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 7, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 18 among pending : [10, 12, 7, 17, 19, 20, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 7 with phase True at level 18

After decision at level 18
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 7]


New level: 19
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 7]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 15, 5, 7]


Solution : [0, 11, 1, 9, 15, 5, 7] has cost 44.


Before backtrack at level 19
 pending : []
 solution : [0, 11, 1, 9, 15, 5, 7]

After backtrack at level 19
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 7]


Invert decision for 7 at level 18


New level: 19
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Solution : [0, 11, 1, 9, 15, 5] has cost 31.


Decide in level 19 among pending : [10, 12, 17, 19, 20, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 17 with phase True at level 19

After decision at level 19
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 17]


New level: 20
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 17]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {16, 18, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 17]


Solution : [0, 11, 1, 9, 15, 5, 17] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 17]

After backtrack at level 20
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5, 17]


Invert decision for 17 at level 19


New level: 20
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

Essensial at level 20 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {16, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 18]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 18]


Solution : [0, 11, 1, 9, 15, 5, 18] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 9, 15, 5, 18]

After backtrack at level 20
 pending : [10, 12, 18, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 19
 pending : [10, 12, 18, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 19
 pending : [10, 12, 18, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 18
 pending : [10, 12, 18, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 18
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 17
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 17
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 16
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 16
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 15
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 15
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 15, 5]


Before backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 15, 5]

After backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 23, 29, 3, 27]
 solution : [0, 11, 1, 9, 15, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 23, 29, 3, 27]
 solution : [0, 11, 1, 9, 15]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 23, 29, 3, 27]
 solution : [0, 11, 1, 9, 15]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : {29, 23}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27]
 solution : [0, 11, 1, 9, 15, 3]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27]
 solution : [0, 11, 1, 9, 15, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27]
 solution : [0, 11, 1, 9, 15, 3]


Solution : [0, 11, 1, 9, 15, 3] has cost 38.


Before backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27]
 solution : [0, 11, 1, 9, 15, 3]

After backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 12
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 12
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 11
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 11
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 10
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 10
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 9
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 9
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 8
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 8
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 7
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 7
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 6
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 6
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28]
 solution : [0, 11, 1, 9, 15]


Before backtrack at level 5
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28]
 solution : [0, 11, 1, 9, 15]

After backtrack at level 5
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28, 13, 14, 24]
 solution : [0, 11, 1, 9, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28, 13, 14, 24]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28, 13, 14, 24]
 solution : [0, 11, 1, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 104), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28, 13, 14, 24]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 5 among pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 28, 13, 14, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14, 24]
 solution : [0, 11, 1, 9, 28]


New level: 6
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14, 24]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14, 24]
 solution : [0, 11, 1, 9, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, 192), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, 0), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 6 : {24}

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, 0), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Solution : [0, 11, 1, 9, 28] has cost 36.


Decide in level 6 among pending : [10, 12, 18, 19, 20, 16, 31, 17, 7, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 7]


New level: 7
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 7]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 6, 8, 33, 27, 3, 23, 29, 5, 25, 32, 2, 21, 22, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

Covered at level 7 : {33, 6, 8, 10, 12, 13, 14, 16, 26, 27, 31}

After reduction : 
 pending  : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 28, 7]


Before reduction : 
 pending  : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 28, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 28, 7]


Solution : [0, 11, 1, 9, 28, 7] has cost 49.


Before backtrack at level 7
 pending : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22]
 solution : [0, 11, 1, 9, 28, 7]

After backtrack at level 7
 pending : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Solution : [0, 11, 1, 9, 28] has cost 36.


Decide in level 7 among pending : [18, 19, 20, 17, 3, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [18, 19, 20, 17, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]


New level: 8
 pending : [18, 19, 20, 17, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 5, 25, 32, 2, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 8 : {5, 2, 29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]


Solution : [0, 11, 1, 9, 28, 3] has cost 49.


Before backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 3]

After backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28]


Solution : [0, 11, 1, 9, 28] has cost 36.


Decide in level 8 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 6, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]


New level: 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

Covered at level 9 : {33, 8, 10, 12, 13, 14, 16, 26, 27, 31}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]


Solution : [0, 11, 1, 9, 28, 6] has cost 42.


Before backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 28, 6]

After backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28]


Solution : [0, 11, 1, 9, 28] has cost 36.


Decide in level 9 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]


New level: 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 2, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 10 : {2, 29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]


Solution : [0, 11, 1, 9, 28, 5] has cost 42.


Before backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 5]

After backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 2]
 solution : [0, 11, 1, 9, 28, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 2]
 solution : [0, 11, 1, 9, 28]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 23, 29, 2]
 solution : [0, 11, 1, 9, 28]

Essensial at level 10 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 10 : {29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 2]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 2]


Solution : [0, 11, 1, 9, 28, 2] has cost 42.


Before backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14]
 solution : [0, 11, 1, 9, 28, 2]

After backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29]
 solution : [0, 11, 1, 9, 28]


Before backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29]
 solution : [0, 11, 1, 9, 28]

After backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5]
 solution : [0, 11, 1, 9, 28]


Before backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5]
 solution : [0, 11, 1, 9, 28]

After backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6]
 solution : [0, 11, 1, 9, 28]


Before backtrack at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6]
 solution : [0, 11, 1, 9, 28]

After backtrack at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3]
 solution : [0, 11, 1, 9, 28]


Before backtrack at level 6
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3]
 solution : [0, 11, 1, 9, 28]

After backtrack at level 6
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 24, 7]
 solution : [0, 11, 1, 9, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 24, 7]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 24, 7]
 solution : [0, 11, 1, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 24, 7]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 6 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 24, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 24 with phase True at level 6

After decision at level 6
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24]


New level: 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, 192), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24]


Solution : [0, 11, 1, 9, 24] has cost 36.


Decide in level 7 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 8, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24, 8]


New level: 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24, 8]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 2, 23, 29, 5, 6, 3, 7]
 solution : [0, 11, 1, 9, 24, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 32), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

Covered at level 8 : {33, 6, 7, 10, 12, 13, 14, 16, 26, 27, 31}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 8]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 32), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 32), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 8]


Solution : [0, 11, 1, 9, 24, 8] has cost 42.


Before backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 8]

After backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 32), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24]


Solution : [0, 11, 1, 9, 24] has cost 36.


Decide in level 8 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 2, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 2 with phase True at level 8

After decision at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]


New level: 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 9 : {5, 3, 29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]


Solution : [0, 11, 1, 9, 24, 2] has cost 42.


Before backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7]
 solution : [0, 11, 1, 9, 24, 2]

After backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 2]


Invert decision for 2 at level 8


New level: 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24]


Solution : [0, 11, 1, 9, 24] has cost 36.


Decide in level 9 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 14, 6, 7, 23, 29, 5, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]


New level: 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 13, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 10 : {13}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]


Solution : [0, 11, 1, 9, 24, 14] has cost 41.


Before backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 14]

After backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 1), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 10), (27, 11), (28, -1), (29, 8), (30, -1), (31, 1), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24]


Solution : [0, 11, 1, 9, 24] has cost 36.


Decide in level 10 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 6, 7, 23, 29, 5, 3, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24, 6]


New level: 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24, 6]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 23, 29, 5, 3, 13]
 solution : [0, 11, 1, 9, 24, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

Covered at level 11 : {33, 7, 10, 12, 13, 16, 26, 27, 31}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 6]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, 0), (27, 0), (28, -1), (29, 8), (30, -1), (31, 0), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 6]


Solution : [0, 11, 1, 9, 24, 6] has cost 42.


Before backtrack at level 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3]
 solution : [0, 11, 1, 9, 24, 6]

After backtrack at level 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 4), (20, 4), (21, 12), (22, 8), (23, 8), (24, -1), (25, 12), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24]


Solution : [0, 11, 1, 9, 24] has cost 36.


Decide in level 11 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 5, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]


New level: 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 23, 29, 3, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 72), (18, 72), (19, 18), (20, 18), (21, 84), (22, 32), (23, 8), (24, -1), (25, 84), (26, 37), (27, 28), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 12 : {3, 29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]


Solution : [0, 11, 1, 9, 24, 5] has cost 42.


Before backtrack at level 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 5]

After backtrack at level 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 23, 29, 3]
 solution : [0, 11, 1, 9, 24, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 23, 29, 3]
 solution : [0, 11, 1, 9, 24]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 23, 29, 3]
 solution : [0, 11, 1, 9, 24]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 12 : {29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 3]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, 0), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, 0), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 3]


Solution : [0, 11, 1, 9, 24, 3] has cost 49.


Before backtrack at level 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13]
 solution : [0, 11, 1, 9, 24, 3]

After backtrack at level 12
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29]
 solution : [0, 11, 1, 9, 24]


Before backtrack at level 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29]
 solution : [0, 11, 1, 9, 24]

After backtrack at level 11
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5]
 solution : [0, 11, 1, 9, 24]


Before backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5]
 solution : [0, 11, 1, 9, 24]

After backtrack at level 10
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6]
 solution : [0, 11, 1, 9, 24]


Before backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6]
 solution : [0, 11, 1, 9, 24]

After backtrack at level 9
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14]
 solution : [0, 11, 1, 9, 24]


Before backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14]
 solution : [0, 11, 1, 9, 24]

After backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2]
 solution : [0, 11, 1, 9, 24]


Before backtrack at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2]
 solution : [0, 11, 1, 9, 24]

After backtrack at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 24]


Invert decision for 24 at level 6


New level: 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 17), (18, 17), (19, 6), (20, 6), (21, 22), (22, 1), (23, -1), (24, -1), (25, 22), (26, 37), (27, 28), (28, -1), (29, -1), (30, -1), (31, 32), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 7 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 26, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 26 with phase True at level 7

After decision at level 7
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]


New level: 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 33, 27, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, 168), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 4), (32, 128), (33, 0)]

Covered at level 8 : {33, 27}

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, 0), (28, -1), (29, 32), (30, -1), (31, 4), (32, 128), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 128), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]


Solution : [0, 11, 1, 9, 26] has cost 49.


Before backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8]
 solution : [0, 11, 1, 9, 26]

After backtrack at level 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 26]


Invert decision for 26 at level 7


New level: 8
 pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 48), (22, 128), (23, 32), (24, -1), (25, 48), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 128), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 8 among pending : [18, 19, 20, 17, 25, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 25 with phase True at level 8

After decision at level 8
 pending : [18, 19, 20, 17, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]


New level: 9
 pending : [18, 19, 20, 17, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]


Before reduction : 
 pending  : [18, 19, 20, 17, 32, 21, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 5), (28, -1), (29, 32), (30, -1), (31, 8), (32, 1), (33, 2)]

Covered at level 9 : {17, 18, 19, 20, 21}

After reduction : 
 pending  : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]


Before reduction : 
 pending  : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 5), (28, -1), (29, 32), (30, -1), (31, 8), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 5), (28, -1), (29, 32), (30, -1), (31, 8), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]


Solution : [0, 11, 1, 9, 25] has cost 54.


Before backtrack at level 9
 pending : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27]
 solution : [0, 11, 1, 9, 25]

After backtrack at level 9
 pending : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 25]


Invert decision for 25 at level 8


New level: 9
 pending : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 5), (28, -1), (29, 32), (30, -1), (31, 8), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Covered at level 9 : set()

After reduction : 
 pending  : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 9 among pending : [32, 22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

Decide 32 with phase True at level 9

After decision at level 9
 pending : [22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]


New level: 10
 pending : [22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [22, 10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, 0), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 10 : {22}

After reduction : 
 pending  : [10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, 0), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32]


Solution : [0, 11, 1, 9, 32] has cost 30.


Decide in level 10 among pending : [10, 12, 16, 31, 7, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [10, 12, 16, 31, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]


New level: 11
 pending : [10, 12, 16, 31, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]


Before reduction : 
 pending  : [10, 12, 16, 31, 13, 3, 23, 29, 5, 6, 14, 2, 8, 33, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 8, 10, 12, 13, 14, 16, 31}

After reduction : 
 pending  : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]


Before reduction : 
 pending  : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]


Solution : [0, 11, 1, 9, 32, 7] has cost 43.


Before backtrack at level 11
 pending : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21]
 solution : [0, 11, 1, 9, 32, 7]

After backtrack at level 11
 pending : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32]


Solution : [0, 11, 1, 9, 32] has cost 30.


Decide in level 11 among pending : [3, 23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]


New level: 12
 pending : [23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]


Before reduction : 
 pending  : [23, 29, 5, 2, 27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 12 : {5, 2, 29, 23}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]


Solution : [0, 11, 1, 9, 32, 3] has cost 43.


Before backtrack at level 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 3]

After backtrack at level 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32]


Solution : [0, 11, 1, 9, 32] has cost 30.


Decide in level 12 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 6, 14, 8, 33, 23, 29, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]


New level: 13
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 8, 10, 12, 13, 14, 16, 31}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 5, 2]
 solution : [0, 11, 1, 9, 32, 6]


Solution : [0, 11, 1, 9, 32, 6] has cost 36.


Decide in level 13 among pending : [27, 18, 19, 20, 17, 21, 23, 29, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6, 5]


New level: 14
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6, 5]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, 10), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 2), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {2, 17, 18, 19, 20, 21, 23, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 5]


Solution : [0, 11, 1, 9, 32, 6, 5] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 32, 6, 5]

After backtrack at level 14
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 2]
 solution : [0, 11, 1, 9, 32, 6]

Essensial at level 14 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {17, 18, 19, 20, 21, 23, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 6, 2]


Solution : [0, 11, 1, 9, 32, 6, 2] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 9, 32, 6, 2]

After backtrack at level 14
 pending : [2, 27, 18, 19, 20, 17, 21, 23, 29]
 solution : [0, 11, 1, 9, 32, 6]


Before backtrack at level 13
 pending : [2, 27, 18, 19, 20, 17, 21, 23, 29]
 solution : [0, 11, 1, 9, 32, 6]

After backtrack at level 13
 pending : [2, 27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [2, 27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [2, 27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 13 : set()

After reduction : 
 pending  : [2, 27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32]


Solution : [0, 11, 1, 9, 32] has cost 30.


Decide in level 13 among pending : [2, 27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32, 2]


New level: 14
 pending : [27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32, 2]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 23, 29, 10, 12, 16, 31, 13, 14, 8, 33, 5]
 solution : [0, 11, 1, 9, 32, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, 44), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 14 : {5, 29, 23}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 2]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33]
 solution : [0, 11, 1, 9, 32, 2]


Solution : [0, 11, 1, 9, 32, 2] has cost 36.


Decide in level 14 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 14, 8, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 14 with phase True at level 14

After decision at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]


New level: 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 16, 31, 13, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 15 : {16, 13, 31}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]


Solution : [0, 11, 1, 9, 32, 2, 14] has cost 41.


Before backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33]
 solution : [0, 11, 1, 9, 32, 2, 14]

After backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2, 14]


Invert decision for 14 at level 14


New level: 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 15 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2]


Solution : [0, 11, 1, 9, 32, 2] has cost 36.


Decide in level 15 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 8, 33, 16, 31, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2, 8]


New level: 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2, 8]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 21, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 2, 8]


Solution : [0, 11, 1, 9, 32, 2, 8] has cost 42.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 32, 2, 8]

After backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 16, 31, 13]
 solution : [0, 11, 1, 9, 32, 2]

Essensial at level 16 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 16 : {16, 31}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 2, 13]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 2, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 2, 13]


Solution : [0, 11, 1, 9, 32, 2, 13] has cost 38.


Before backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 2, 13]

After backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 2]


Before backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 2]

After backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8]
 solution : [0, 11, 1, 9, 32, 2]


Before backtrack at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8]
 solution : [0, 11, 1, 9, 32, 2]

After backtrack at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 23, 29, 5, 14]
 solution : [0, 11, 1, 9, 32, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 23, 29, 5, 14]
 solution : [0, 11, 1, 9, 32]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 23, 29, 5, 14]
 solution : [0, 11, 1, 9, 32]

Essensial at level 14 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 14 : {29, 23}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 14]
 solution : [0, 11, 1, 9, 32, 5]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 14]
 solution : [0, 11, 1, 9, 32, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 14]
 solution : [0, 11, 1, 9, 32, 5]


Solution : [0, 11, 1, 9, 32, 5] has cost 36.


Decide in level 14 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5, 8]


New level: 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5, 8]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 5, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 32, 5, 8]


Solution : [0, 11, 1, 9, 32, 5, 8] has cost 42.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 9, 32, 5, 8]

After backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 15 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5]


Solution : [0, 11, 1, 9, 32, 5] has cost 36.


Decide in level 15 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 14 with phase True at level 15

After decision at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5, 14]


New level: 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5, 14]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 76), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 16 : {16, 13, 31}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 14]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 14]


Solution : [0, 11, 1, 9, 32, 5, 14] has cost 41.


Before backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 14]

After backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5, 14]


Invert decision for 14 at level 15


New level: 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5]

Essensial at level 16 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 16 : {16, 31}

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 13]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 0), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 13]


Solution : [0, 11, 1, 9, 32, 5, 13] has cost 38.


Before backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33]
 solution : [0, 11, 1, 9, 32, 5, 13]

After backtrack at level 16
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5]


Before backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31]
 solution : [0, 11, 1, 9, 32, 5]

After backtrack at level 15
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5]


Before backtrack at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14]
 solution : [0, 11, 1, 9, 32, 5]

After backtrack at level 14
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8]
 solution : [0, 11, 1, 9, 32]


Before backtrack at level 13
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8]
 solution : [0, 11, 1, 9, 32]

After backtrack at level 13
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2]
 solution : [0, 11, 1, 9, 32]


Before backtrack at level 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2]
 solution : [0, 11, 1, 9, 32]

After backtrack at level 12
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6]
 solution : [0, 11, 1, 9, 32]


Before backtrack at level 11
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6]
 solution : [0, 11, 1, 9, 32]

After backtrack at level 11
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3]
 solution : [0, 11, 1, 9, 32]


Before backtrack at level 10
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3]
 solution : [0, 11, 1, 9, 32]

After backtrack at level 10
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 32]


Invert decision for 32 at level 9


New level: 10
 pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, 14), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 11), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 10 : set()

After reduction : 
 pending  : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 10 among pending : [27, 18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 27 with phase True at level 10

After decision at level 10
 pending : [18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]


New level: 11
 pending : [18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]


Before reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 33, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 64), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, -1), (33, 0)]

Covered at level 11 : {33}

After reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]


Before reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 64), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 64), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]


Solution : [0, 11, 1, 9, 27] has cost 49.


Before backtrack at level 11
 pending : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7]
 solution : [0, 11, 1, 9, 27]

After backtrack at level 11
 pending : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 27]


Invert decision for 27 at level 10


New level: 11
 pending : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 4), (17, 40), (18, 40), (19, 16), (20, 16), (21, 64), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 11 among pending : [18, 19, 20, 17, 21, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 21 with phase True at level 11

After decision at level 11
 pending : [18, 19, 20, 17, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]


New level: 12
 pending : [18, 19, 20, 17, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]


Before reduction : 
 pending  : [18, 19, 20, 17, 10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, 128), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, 64), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, 8), (32, -1), (33, 2)]

Covered at level 12 : {17, 18, 19, 20}

After reduction : 
 pending  : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]


Before reduction : 
 pending  : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, 64), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, 8), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, 64), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, 8), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]


Solution : [0, 11, 1, 9, 21] has cost 54.


Before backtrack at level 12
 pending : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33]
 solution : [0, 11, 1, 9, 21]

After backtrack at level 12
 pending : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 21]


Invert decision for 21 at level 11


New level: 12
 pending : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, -1), (5, 64), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 16), (30, -1), (31, 8), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 12 among pending : [10, 12, 13, 16, 31, 14, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [10, 12, 13, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]


New level: 13
 pending : [10, 12, 13, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]


Before reduction : 
 pending  : [10, 12, 13, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 13 : {13}

After reduction : 
 pending  : [10, 12, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]


Before reduction : 
 pending  : [10, 12, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14]


Solution : [0, 11, 1, 9, 14] has cost 25.


Decide in level 13 among pending : [10, 12, 16, 31, 5, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 12, 16, 31, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


New level: 14
 pending : [10, 12, 16, 31, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 23, 29, 8, 2, 6, 3, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : {2, 3, 29, 23}

After reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 33, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Solution : [0, 11, 1, 9, 14, 5] has cost 31.


Decide in level 14 among pending : [10, 12, 16, 31, 8, 6, 22, 7, 33, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 33 with phase True at level 14

After decision at level 14
 pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]


New level: 15
 pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]


Before reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]


Solution : [0, 11, 1, 9, 14, 5, 33] has cost 41.


Before backtrack at level 15
 pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]

After backtrack at level 15
 pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 33]


Invert decision for 33 at level 14


New level: 15
 pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Solution : [0, 11, 1, 9, 14, 5] has cost 31.


Decide in level 15 among pending : [10, 12, 16, 31, 8, 6, 22, 7, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 8]


New level: 16
 pending : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 8]


Before reduction : 
 pending  : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 16 : {6, 7, 10, 12, 16, 17, 18, 19, 20, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 8]


Solution : [0, 11, 1, 9, 14, 5, 8] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 14, 5, 8]

After backtrack at level 16
 pending : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Solution : [0, 11, 1, 9, 14, 5] has cost 31.


Decide in level 16 among pending : [10, 12, 16, 31, 6, 22, 7, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 6]


New level: 17
 pending : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 6]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 17 : {7, 10, 12, 16, 17, 18, 19, 20, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 6]


Solution : [0, 11, 1, 9, 14, 5, 6] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 9, 14, 5, 6]

After backtrack at level 17
 pending : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Solution : [0, 11, 1, 9, 14, 5] has cost 31.


Decide in level 17 among pending : [10, 12, 16, 31, 22, 7, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 7 with phase True at level 17

After decision at level 17
 pending : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 7]


New level: 18
 pending : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 7]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 18 : {10, 12, 16, 17, 18, 19, 20, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 5, 7]


Solution : [0, 11, 1, 9, 14, 5, 7] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 9, 14, 5, 7]

After backtrack at level 18
 pending : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 7]


Invert decision for 7 at level 17


New level: 18
 pending : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 16, 31, 22, 18, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Solution : [0, 11, 1, 9, 14, 5] has cost 31.


Decide in level 18 among pending : [10, 12, 16, 31, 22, 18, 19, 20, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 18 with phase True at level 18

After decision at level 18
 pending : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 18]


New level: 19
 pending : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 18]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 18]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {16, 17, 19, 20, 22, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 18]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 18]


Solution : [0, 11, 1, 9, 14, 5, 18] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 18]

After backtrack at level 19
 pending : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5, 18]


Invert decision for 18 at level 18


New level: 19
 pending : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]


Before reduction : 
 pending  : [10, 12, 16, 31, 22, 19, 20, 17]
 solution : [0, 11, 1, 9, 14, 5]

Essensial at level 19 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {16, 19, 20, 22, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 17]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 17]


Solution : [0, 11, 1, 9, 14, 5, 17] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 11, 1, 9, 14, 5, 17]

After backtrack at level 19
 pending : [10, 12, 17, 16, 31, 22, 19, 20]
 solution : [0, 11, 1, 9, 14, 5]


Before backtrack at level 18
 pending : [10, 12, 17, 16, 31, 22, 19, 20]
 solution : [0, 11, 1, 9, 14, 5]

After backtrack at level 18
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18]
 solution : [0, 11, 1, 9, 14, 5]


Before backtrack at level 17
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18]
 solution : [0, 11, 1, 9, 14, 5]

After backtrack at level 17
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7]
 solution : [0, 11, 1, 9, 14, 5]


Before backtrack at level 16
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7]
 solution : [0, 11, 1, 9, 14, 5]

After backtrack at level 16
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6]
 solution : [0, 11, 1, 9, 14, 5]


Before backtrack at level 15
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6]
 solution : [0, 11, 1, 9, 14, 5]

After backtrack at level 15
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8]
 solution : [0, 11, 1, 9, 14, 5]


Before backtrack at level 14
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8]
 solution : [0, 11, 1, 9, 14, 5]

After backtrack at level 14
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14]


Before reduction : 
 pending  : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14]


Solution : [0, 11, 1, 9, 14] has cost 25.


Decide in level 14 among pending : [10, 12, 17, 16, 31, 22, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 22 with phase True at level 14

After decision at level 14
 pending : [10, 12, 17, 16, 31, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]


New level: 15
 pending : [10, 12, 17, 16, 31, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]


Before reduction : 
 pending  : [10, 12, 17, 16, 31, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

Covered at level 15 : {16, 31}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 0), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]
 solution : [0, 11, 1, 9, 14, 22]


Solution : [0, 11, 1, 9, 14, 22] has cost 35.


Decide in level 15 among pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 2, 3, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

Decide 2 with phase True at level 15

After decision at level 15
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 3, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]


New level: 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 3, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 23, 29, 3, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : {3, 29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]


Solution : [0, 11, 1, 9, 14, 22, 2] has cost 41.


Before backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 2]

After backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 14, 22, 2]


Invert decision for 2 at level 15


New level: 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 14, 22]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 14, 22]

Essensial at level 16 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : {29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 3]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 3]


Solution : [0, 11, 1, 9, 14, 22, 3] has cost 48.


Before backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33]
 solution : [0, 11, 1, 9, 14, 22, 3]

After backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29]
 solution : [0, 11, 1, 9, 14, 22]


Before backtrack at level 15
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29]
 solution : [0, 11, 1, 9, 14, 22]

After backtrack at level 15
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14, 22]


Invert decision for 22 at level 14


New level: 15
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14]


Solution : [0, 11, 1, 9, 14] has cost 25.


Decide in level 15 among pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 3, 23, 29, 16, 31, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14, 3]


New level: 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14, 3]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 23, 29, 16, 31, 2]
 solution : [0, 11, 1, 9, 14, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 16 : {2, 29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 3]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 3]


Solution : [0, 11, 1, 9, 14, 3] has cost 38.


Before backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 3]

After backtrack at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31, 23, 29, 2]
 solution : [0, 11, 1, 9, 14, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31, 23, 29, 2]
 solution : [0, 11, 1, 9, 14]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31, 23, 29, 2]
 solution : [0, 11, 1, 9, 14]

Essensial at level 16 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 16 : {29, 23}

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Solution : [0, 11, 1, 9, 14, 2] has cost 31.


Decide in level 16 among pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 33, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 33 with phase True at level 16

After decision at level 16
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]


New level: 17
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]


Solution : [0, 11, 1, 9, 14, 2, 33] has cost 41.


Before backtrack at level 17
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]

After backtrack at level 17
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 33]


Invert decision for 33 at level 16


New level: 17
 pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Solution : [0, 11, 1, 9, 14, 2] has cost 31.


Decide in level 17 among pending : [10, 12, 17, 19, 20, 18, 7, 6, 8, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 7 with phase True at level 17

After decision at level 17
 pending : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 7]


New level: 18
 pending : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 7]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, 32), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 18 : {6, 8, 10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 7]


Solution : [0, 11, 1, 9, 14, 2, 7] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 9, 14, 2, 7]

After backtrack at level 18
 pending : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 7]


Invert decision for 7 at level 17


New level: 18
 pending : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Solution : [0, 11, 1, 9, 14, 2] has cost 31.


Decide in level 18 among pending : [10, 12, 17, 19, 20, 18, 6, 8, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 6 with phase True at level 18

After decision at level 18
 pending : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 6]


New level: 19
 pending : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 6]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {8, 10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 6]


Solution : [0, 11, 1, 9, 14, 2, 6] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 11, 1, 9, 14, 2, 6]

After backtrack at level 19
 pending : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 6]


Invert decision for 6 at level 18


New level: 19
 pending : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 8, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Solution : [0, 11, 1, 9, 14, 2] has cost 31.


Decide in level 19 among pending : [10, 12, 17, 19, 20, 18, 8, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 8 with phase True at level 19

After decision at level 19
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 8]


New level: 20
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 8]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 8]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 20 : {10, 12, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 8]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 14, 2, 8]


Solution : [0, 11, 1, 9, 14, 2, 8] has cost 37.


Before backtrack at level 20
 pending : []
 solution : [0, 11, 1, 9, 14, 2, 8]

After backtrack at level 20
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 8]


Invert decision for 8 at level 19


New level: 20
 pending : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12, 17, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Solution : [0, 11, 1, 9, 14, 2] has cost 31.


Decide in level 20 among pending : [10, 12, 17, 19, 20, 18, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 17 with phase True at level 20

After decision at level 20
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 17]


New level: 21
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 17]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 17]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 21 : {16, 18, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 17]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 17]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 17]


Solution : [0, 11, 1, 9, 14, 2, 17] has cost 65.


Before backtrack at level 21
 pending : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 17]

After backtrack at level 21
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2, 17]


Invert decision for 17 at level 20


New level: 21
 pending : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before reduction : 
 pending  : [10, 12, 19, 20, 18, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

Essensial at level 21 : {18}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 21 : {16, 19, 20, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 18]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 18]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 18]


Solution : [0, 11, 1, 9, 14, 2, 18] has cost 65.


Before backtrack at level 21
 pending : [10, 12]
 solution : [0, 11, 1, 9, 14, 2, 18]

After backtrack at level 21
 pending : [10, 12, 18, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]


Before backtrack at level 20
 pending : [10, 12, 18, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 14, 2]

After backtrack at level 20
 pending : [10, 12, 18, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 14, 2]


Before backtrack at level 19
 pending : [10, 12, 18, 19, 20, 16, 31, 17]
 solution : [0, 11, 1, 9, 14, 2]

After backtrack at level 19
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8]
 solution : [0, 11, 1, 9, 14, 2]


Before backtrack at level 18
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8]
 solution : [0, 11, 1, 9, 14, 2]

After backtrack at level 18
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6]
 solution : [0, 11, 1, 9, 14, 2]


Before backtrack at level 17
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6]
 solution : [0, 11, 1, 9, 14, 2]

After backtrack at level 17
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7]
 solution : [0, 11, 1, 9, 14, 2]


Before backtrack at level 16
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7]
 solution : [0, 11, 1, 9, 14, 2]

After backtrack at level 16
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33]
 solution : [0, 11, 1, 9, 14]


Before backtrack at level 15
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33]
 solution : [0, 11, 1, 9, 14]

After backtrack at level 15
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3]
 solution : [0, 11, 1, 9, 14]


Before backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3]
 solution : [0, 11, 1, 9, 14]

After backtrack at level 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22]
 solution : [0, 11, 1, 9, 14]


Before backtrack at level 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22]
 solution : [0, 11, 1, 9, 14]

After backtrack at level 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 13 among pending : [10, 12, 18, 19, 20, 16, 31, 17, 8, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9, 8]


New level: 14
 pending : [10, 12, 18, 19, 20, 16, 31, 17, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9, 8]


Before reduction : 
 pending  : [10, 12, 18, 19, 20, 16, 31, 17, 6, 7, 2, 23, 29, 33, 3, 22, 13, 5]
 solution : [0, 11, 1, 9, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 20), (18, 20), (19, 40), (20, 40), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 16)]

Covered at level 14 : {6, 7, 10, 12, 13, 16, 31}

After reduction : 
 pending  : [18, 19, 20, 17, 2, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]


Before reduction : 
 pending  : [18, 19, 20, 17, 2, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 0), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 20), (18, 20), (19, 40), (20, 40), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 40), (20, 40), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 2, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]


Solution : [0, 11, 1, 9, 8] has cost 26.


Decide in level 14 among pending : [18, 19, 20, 17, 2, 23, 29, 33, 3, 22, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 40), (20, 40), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 16)]

Decide 2 with phase True at level 14

After decision at level 14
 pending : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8, 2]


New level: 15
 pending : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8, 2]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 40), (20, 40), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 15 : {33, 3, 5, 17, 18, 19, 20, 22, 23, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 2]


Solution : [0, 11, 1, 9, 8, 2] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 9, 8, 2]

After backtrack at level 15
 pending : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8, 2]


Invert decision for 2 at level 14


New level: 15
 pending : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]
 solution : [0, 11, 1, 9, 8]


Solution : [0, 11, 1, 9, 8] has cost 26.


Decide in level 15 among pending : [18, 19, 20, 17, 23, 29, 33, 3, 22, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8, 3]


New level: 16
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8, 3]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, 32), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {33, 5, 17, 18, 19, 20, 22, 23, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 3]


Solution : [0, 11, 1, 9, 8, 3] has cost 39.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 8, 3]

After backtrack at level 16
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 22, 5]
 solution : [0, 11, 1, 9, 8]

Essensial at level 16 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 16 : {33, 17, 18, 19, 20, 22, 23, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 8, 5]


Solution : [0, 11, 1, 9, 8, 5] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 8, 5]

After backtrack at level 16
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22]
 solution : [0, 11, 1, 9, 8]


Before backtrack at level 15
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22]
 solution : [0, 11, 1, 9, 8]

After backtrack at level 15
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3]
 solution : [0, 11, 1, 9, 8]


Before backtrack at level 14
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3]
 solution : [0, 11, 1, 9, 8]

After backtrack at level 14
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 14 among pending : [5, 18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9, 5]


New level: 15
 pending : [18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 23, 29, 33, 22, 3, 10, 12, 16, 31, 6, 7, 13, 2]
 solution : [0, 11, 1, 9, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 15 : {2, 3, 29, 23}

After reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 6, 7, 13]
 solution : [0, 11, 1, 9, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 6, 7, 13]
 solution : [0, 11, 1, 9, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 6, 7, 13]
 solution : [0, 11, 1, 9, 5]


Solution : [0, 11, 1, 9, 5] has cost 26.


Decide in level 15 among pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 6, 7, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5, 6]


New level: 16
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5, 6]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 7, 10, 12, 13, 16, 17, 18, 19, 20, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 6]


Solution : [0, 11, 1, 9, 5, 6] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 9, 5, 6]

After backtrack at level 16
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 16 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]
 solution : [0, 11, 1, 9, 5]


Solution : [0, 11, 1, 9, 5] has cost 26.


Decide in level 16 among pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 7, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5, 7]


New level: 17
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5, 7]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 5, 7]


Solution : [0, 11, 1, 9, 5, 7] has cost 39.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 9, 5, 7]

After backtrack at level 17
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31, 13]
 solution : [0, 11, 1, 9, 5]

Essensial at level 17 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 17 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Before reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 17 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Solution : [0, 11, 1, 9, 5, 13] has cost 28.


Decide in level 17 among pending : [18, 19, 20, 17, 33, 22, 10, 12, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 33 with phase True at level 17

After decision at level 17
 pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]


New level: 18
 pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]


Before reduction : 
 pending  : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]


Solution : [0, 11, 1, 9, 5, 13, 33] has cost 38.


Before backtrack at level 18
 pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]

After backtrack at level 18
 pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 33]


Invert decision for 33 at level 17


New level: 18
 pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Before reduction : 
 pending  : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 19, 20, 17, 22, 10, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Solution : [0, 11, 1, 9, 5, 13] has cost 28.


Decide in level 18 among pending : [18, 19, 20, 17, 22, 10, 12, 16, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 10 with phase True at level 18

After decision at level 18
 pending : [18, 19, 20, 17, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 10]


New level: 19
 pending : [18, 19, 20, 17, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 10]


Before reduction : 
 pending  : [18, 19, 20, 17, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {12, 16, 19, 20, 22, 31}

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 10]


Before reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 10]


Solution : [0, 11, 1, 9, 5, 13, 10] has cost 37.


Before backtrack at level 19
 pending : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 10]

After backtrack at level 19
 pending : [18, 17, 19, 20, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13, 10]


Invert decision for 10 at level 18


New level: 19
 pending : [18, 17, 19, 20, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Before reduction : 
 pending  : [18, 17, 19, 20, 22, 12, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]

Essensial at level 19 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 19 : {16, 19, 20, 22, 31}

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 12]


Before reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 12]


Solution : [0, 11, 1, 9, 5, 13, 12] has cost 37.


Before backtrack at level 19
 pending : [18, 17]
 solution : [0, 11, 1, 9, 5, 13, 12]

After backtrack at level 19
 pending : [18, 17, 12, 19, 20, 22, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]


Before backtrack at level 18
 pending : [18, 17, 12, 19, 20, 22, 16, 31]
 solution : [0, 11, 1, 9, 5, 13]

After backtrack at level 18
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10]
 solution : [0, 11, 1, 9, 5, 13]


Before backtrack at level 17
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10]
 solution : [0, 11, 1, 9, 5, 13]

After backtrack at level 17
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33]
 solution : [0, 11, 1, 9, 5]


Before backtrack at level 16
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33]
 solution : [0, 11, 1, 9, 5]

After backtrack at level 16
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7]
 solution : [0, 11, 1, 9, 5]


Before backtrack at level 15
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7]
 solution : [0, 11, 1, 9, 5]

After backtrack at level 15
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 15 among pending : [18, 17, 12, 19, 20, 22, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22]


New level: 16
 pending : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22]


Before reduction : 
 pending  : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, 128), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 16 : set()

After reduction : 
 pending  : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22]


Solution : [0, 11, 1, 9, 22] has cost 30.


Decide in level 16 among pending : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 7, 23, 29, 3, 2, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22, 7]


New level: 17
 pending : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22, 7]


Before reduction : 
 pending  : [18, 17, 12, 19, 20, 16, 31, 10, 13, 33, 23, 29, 3, 2, 6]
 solution : [0, 11, 1, 9, 22, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 6, 10, 12, 13, 16, 31}

After reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 3, 2]
 solution : [0, 11, 1, 9, 22, 7]


Before reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 3, 2]
 solution : [0, 11, 1, 9, 22, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 4), (20, 4), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 3, 2]
 solution : [0, 11, 1, 9, 22, 7]


Solution : [0, 11, 1, 9, 22, 7] has cost 43.


Before backtrack at level 17
 pending : [18, 17, 19, 20, 23, 29, 3, 2]
 solution : [0, 11, 1, 9, 22, 7]

After backtrack at level 17
 pending : [18, 17, 19, 20, 23, 29, 3, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [18, 17, 19, 20, 23, 29, 3, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22]


Before reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 3, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, 4), (20, 4), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 17 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 3, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22]


Solution : [0, 11, 1, 9, 22] has cost 30.


Decide in level 17 among pending : [18, 17, 19, 20, 23, 29, 3, 2, 12, 16, 31, 10, 13, 33, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

Decide 3 with phase True at level 17

After decision at level 17
 pending : [18, 17, 19, 20, 23, 29, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]


New level: 18
 pending : [18, 17, 19, 20, 23, 29, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]


Before reduction : 
 pending  : [18, 17, 19, 20, 23, 29, 2, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 64), (18, 64), (19, 18), (20, 18), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 18 : {2, 29, 23}

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]


Solution : [0, 11, 1, 9, 22, 3] has cost 43.


Before backtrack at level 18
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 3]

After backtrack at level 18
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 23, 29, 2]
 solution : [0, 11, 1, 9, 22, 3]


Invert decision for 3 at level 17


New level: 18
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 23, 29, 2]
 solution : [0, 11, 1, 9, 22]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 23, 29, 2]
 solution : [0, 11, 1, 9, 22]

Essensial at level 18 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 18 : {29, 23}

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 2]


Solution : [0, 11, 1, 9, 22, 2] has cost 36.


Before backtrack at level 18
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6]
 solution : [0, 11, 1, 9, 22, 2]

After backtrack at level 18
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29]
 solution : [0, 11, 1, 9, 22]


Before backtrack at level 17
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29]
 solution : [0, 11, 1, 9, 22]

After backtrack at level 17
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3]
 solution : [0, 11, 1, 9, 22]


Before backtrack at level 16
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3]
 solution : [0, 11, 1, 9, 22]

After backtrack at level 16
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, 16), (18, 16), (19, 4), (20, 4), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 16 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 16 among pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 6, 2, 23, 29, 3, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9, 6]


New level: 17
 pending : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9, 6]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10, 13, 33, 2, 23, 29, 3, 7]
 solution : [0, 11, 1, 9, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 4)]

Covered at level 17 : {7, 10, 12, 13, 16, 31}

After reduction : 
 pending  : [18, 17, 19, 20, 33, 2, 23, 29, 3]
 solution : [0, 11, 1, 9, 6]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 2, 23, 29, 3]
 solution : [0, 11, 1, 9, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 33, 2, 23, 29, 3]
 solution : [0, 11, 1, 9, 6]


Solution : [0, 11, 1, 9, 6] has cost 26.


Decide in level 17 among pending : [18, 17, 19, 20, 33, 2, 23, 29, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

Decide 2 with phase True at level 17

After decision at level 17
 pending : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6, 2]


New level: 18
 pending : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 20), (18, 20), (19, 16), (20, 16), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 3, 17, 18, 19, 20, 23, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 2]


Solution : [0, 11, 1, 9, 6, 2] has cost 32.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 9, 6, 2]

After backtrack at level 18
 pending : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6, 2]


Invert decision for 2 at level 17


New level: 18
 pending : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 23, 29, 3]
 solution : [0, 11, 1, 9, 6]

Essensial at level 18 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

Covered at level 18 : {33, 17, 18, 19, 20, 23, 29}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 6, 3]


Solution : [0, 11, 1, 9, 6, 3] has cost 39.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 9, 6, 3]

After backtrack at level 18
 pending : [3, 18, 17, 19, 20, 33, 23, 29]
 solution : [0, 11, 1, 9, 6]


Before backtrack at level 17
 pending : [3, 18, 17, 19, 20, 33, 23, 29]
 solution : [0, 11, 1, 9, 6]

After backtrack at level 17
 pending : [3, 18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [3, 18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [3, 18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 20.


Decide in level 17 among pending : [3, 18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 3 with phase True at level 17

After decision at level 17
 pending : [18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9, 3]


New level: 18
 pending : [18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9, 3]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 23, 29, 12, 16, 31, 10, 13, 7, 2]
 solution : [0, 11, 1, 9, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 80), (18, 80), (19, 66), (20, 66), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 18 : {2, 29, 23}

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 3]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 3]


Solution : [0, 11, 1, 9, 3] has cost 33.


Before backtrack at level 18
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 3]

After backtrack at level 18
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7, 23, 29, 2]
 solution : [0, 11, 1, 9, 3]


Invert decision for 3 at level 17


New level: 18
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7, 23, 29, 2]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7, 23, 29, 2]
 solution : [0, 11, 1, 9]

Essensial at level 18 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 18 : {29, 23}

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 18 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]
 solution : [0, 11, 1, 9, 2]


Solution : [0, 11, 1, 9, 2] has cost 26.


Decide in level 18 among pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Decide 7 with phase True at level 18

After decision at level 18
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2, 7]


New level: 19
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2, 7]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 32), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 10, 12, 13, 16, 17, 18, 19, 20, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 2, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 9, 2, 7]


Solution : [0, 11, 1, 9, 2, 7] has cost 39.


Before backtrack at level 19
 pending : []
 solution : [0, 11, 1, 9, 2, 7]

After backtrack at level 19
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2, 7]


Invert decision for 7 at level 18


New level: 19
 pending : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10, 13]
 solution : [0, 11, 1, 9, 2]

Essensial at level 19 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 19 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]


Before reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Covered at level 19 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 33, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]


Solution : [0, 11, 1, 9, 2, 13] has cost 28.


Decide in level 19 among pending : [18, 17, 19, 20, 33, 12, 16, 31, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

Decide 33 with phase True at level 19

After decision at level 19
 pending : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]


New level: 20
 pending : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]


Solution : [0, 11, 1, 9, 2, 13, 33] has cost 38.


Before backtrack at level 20
 pending : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]

After backtrack at level 20
 pending : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 33]


Invert decision for 33 at level 19


New level: 20
 pending : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]


Before reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 4), (17, 18), (18, 18), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 12, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]


Solution : [0, 11, 1, 9, 2, 13] has cost 28.


Decide in level 20 among pending : [18, 17, 19, 20, 12, 16, 31, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

Decide 12 with phase True at level 20

After decision at level 20
 pending : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 12]


New level: 21
 pending : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 12]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 12]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, 8), (17, 18), (18, 18), (19, 12), (20, 12), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 21 : {10, 16, 19, 20, 31}

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 12]


Before reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 12]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 12]


Solution : [0, 11, 1, 9, 2, 13, 12] has cost 37.


Before backtrack at level 21
 pending : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 12]

After backtrack at level 21
 pending : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13, 12]


Invert decision for 12 at level 20


New level: 21
 pending : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 10]
 solution : [0, 11, 1, 9, 2, 13]

Essensial at level 21 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

Covered at level 21 : {16, 19, 20, 31}

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 10]


Before reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 10]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 8), (18, 8), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 10]


Solution : [0, 11, 1, 9, 2, 13, 10] has cost 37.


Before backtrack at level 21
 pending : [18, 17]
 solution : [0, 11, 1, 9, 2, 13, 10]

After backtrack at level 21
 pending : [18, 17, 10, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 2, 13]


Before backtrack at level 20
 pending : [18, 17, 10, 19, 20, 16, 31]
 solution : [0, 11, 1, 9, 2, 13]

After backtrack at level 20
 pending : [18, 17, 10, 19, 20, 16, 31, 12]
 solution : [0, 11, 1, 9, 2, 13]


Before backtrack at level 19
 pending : [18, 17, 10, 19, 20, 16, 31, 12]
 solution : [0, 11, 1, 9, 2, 13]

After backtrack at level 19
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33]
 solution : [0, 11, 1, 9, 2]


Before backtrack at level 18
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33]
 solution : [0, 11, 1, 9, 2]

After backtrack at level 18
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7]
 solution : [0, 11, 1, 9]


Before backtrack at level 17
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7]
 solution : [0, 11, 1, 9]

After backtrack at level 17
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9]


Before backtrack at level 16
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3]
 solution : [0, 11, 1, 9]

After backtrack at level 16
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6]
 solution : [0, 11, 1, 9]


Before backtrack at level 15
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6]
 solution : [0, 11, 1, 9]

After backtrack at level 15
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22]
 solution : [0, 11, 1, 9]


Before backtrack at level 14
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22]
 solution : [0, 11, 1, 9]

After backtrack at level 14
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5]
 solution : [0, 11, 1, 9]


Before backtrack at level 13
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5]
 solution : [0, 11, 1, 9]

After backtrack at level 13
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8]
 solution : [0, 11, 1, 9]


Before backtrack at level 12
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8]
 solution : [0, 11, 1, 9]

After backtrack at level 12
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14]
 solution : [0, 11, 1, 9]


Before backtrack at level 11
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14]
 solution : [0, 11, 1, 9]

After backtrack at level 11
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21]
 solution : [0, 11, 1, 9]


Before backtrack at level 10
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21]
 solution : [0, 11, 1, 9]

After backtrack at level 10
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27]
 solution : [0, 11, 1, 9]


Before backtrack at level 9
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27]
 solution : [0, 11, 1, 9]

After backtrack at level 9
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32]
 solution : [0, 11, 1, 9]


Before backtrack at level 8
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32]
 solution : [0, 11, 1, 9]

After backtrack at level 8
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25]
 solution : [0, 11, 1, 9]


Before backtrack at level 7
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25]
 solution : [0, 11, 1, 9]

After backtrack at level 7
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26]
 solution : [0, 11, 1, 9]


Before backtrack at level 6
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26]
 solution : [0, 11, 1, 9]

After backtrack at level 6
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24]
 solution : [0, 11, 1, 9]


Before backtrack at level 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24]
 solution : [0, 11, 1, 9]

After backtrack at level 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28]
 solution : [0, 11, 1, 9]


Before backtrack at level 4
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28]
 solution : [0, 11, 1, 9]

After backtrack at level 4
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15]
 solution : [0, 11, 1, 9]


Before backtrack at level 3
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15]
 solution : [0, 11, 1, 9]

After backtrack at level 3
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30, 4]
 solution : [0, 11, 1, 9]


Invert decision for 9 at level 2


New level: 3
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30, 4]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30, 4]
 solution : [0, 11, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 8), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30, 4]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 3 among pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4]


New level: 4
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, 576), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 112), (18, 48), (19, 44), (20, 24), (21, 24), (22, 128), (23, 64), (24, 20), (25, 68), (26, 16), (27, 56), (28, 40), (29, 128), (30, 128), (31, 256), (32, 256), (33, 16)]

Covered at level 4 : set()

After reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 31.


Decide in level 4 among pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 2, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 112), (18, 48), (19, 44), (20, 24), (21, 24), (22, 128), (23, 64), (24, 20), (25, 68), (26, 16), (27, 56), (28, 40), (29, 128), (30, 128), (31, 256), (32, 256), (33, 16)]

Decide 2 with phase True at level 4

After decision at level 4
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4, 2]


New level: 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4, 2]


Before reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 23, 29, 7, 3, 6, 22, 5, 8, 14, 21, 27, 32, 25, 26, 24, 28, 15, 30]
 solution : [0, 11, 1, 4, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 112), (18, 48), (19, 44), (20, 24), (21, 24), (22, 128), (23, 64), (24, 20), (25, 68), (26, 16), (27, 56), (28, 40), (29, 128), (30, 128), (31, 256), (32, 256), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 24), (18, 10), (19, 12), (20, 6), (21, 5), (22, 4), (23, 0), (24, 0), (25, 15), (26, 4), (27, 14), (28, 0), (29, 0), (30, 32), (31, 256), (32, 8), (33, 4)]

Covered at level 5 : {3, 5, 23, 24, 28, 29}

After reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30]
 solution : [0, 11, 1, 4, 2]


Before reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30]
 solution : [0, 11, 1, 4, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 24), (18, 10), (19, 12), (20, 6), (21, 5), (22, 4), (23, 0), (24, 0), (25, 15), (26, 4), (27, 14), (28, 0), (29, 0), (30, 32), (31, 256), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 24), (18, 10), (19, 12), (20, 6), (21, 5), (22, 4), (23, -1), (24, -1), (25, 15), (26, 4), (27, 14), (28, -1), (29, -1), (30, 32), (31, 256), (32, 8), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30]
 solution : [0, 11, 1, 4, 2]


Solution : [0, 11, 1, 4, 2] has cost 37.


Before backtrack at level 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30]
 solution : [0, 11, 1, 4, 2]

After backtrack at level 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 3, 5, 24, 28]
 solution : [0, 11, 1, 4, 2]


Invert decision for 2 at level 4


New level: 5
 pending : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 3, 5, 24, 28]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 6, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 3, 5, 24, 28]
 solution : [0, 11, 1, 4]

Essensial at level 5 : {3, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 24), (18, 10), (19, 12), (20, 6), (21, 5), (22, 4), (23, -1), (24, -1), (25, 15), (26, 4), (27, 14), (28, -1), (29, -1), (30, 32), (31, 256), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {5, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 6]


Solution : [0, 11, 1, 4, 3, 6] has cost 50.


Before backtrack at level 5
 pending : []
 solution : [0, 11, 1, 4, 3, 6]

After backtrack at level 5
 pending : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 4]


Before backtrack at level 4
 pending : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 4]

After backtrack at level 4
 pending : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 4 among pending : [6, 3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]


New level: 5
 pending : [3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]


Before reduction : 
 pending  : [3, 18, 17, 10, 19, 20, 16, 31, 12, 13, 33, 7, 22, 8, 14, 21, 27, 32, 25, 26, 15, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, 512), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 352), (18, 160), (19, 132), (20, 72), (21, 130), (22, 128), (23, 64), (24, 192), (25, 264), (26, 176), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 2), (17, 86), (18, 40), (19, 48), (20, 40), (21, 26), (22, 128), (23, 64), (24, 192), (25, 53), (26, 36), (27, 112), (28, 384), (29, 128), (30, 32), (31, 8), (32, 256), (33, 16)]

Covered at level 5 : {7, 8, 10, 12, 13, 14, 15}

After reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]


Before reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, -1), (7, 0), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 2), (17, 86), (18, 40), (19, 48), (20, 40), (21, 26), (22, 128), (23, 64), (24, 192), (25, 53), (26, 36), (27, 112), (28, 384), (29, 128), (30, 32), (31, 8), (32, 256), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 86), (18, 40), (19, 48), (20, 40), (21, 26), (22, 128), (23, 64), (24, 192), (25, 53), (26, 36), (27, 112), (28, 384), (29, 128), (30, 32), (31, 8), (32, 256), (33, 16)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 2]
 solution : [0, 11, 1, 6]


Solution : [0, 11, 1, 6] has cost 16.


Decide in level 5 among pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 2]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 86), (18, 40), (19, 48), (20, 40), (21, 26), (22, 128), (23, 64), (24, 192), (25, 53), (26, 36), (27, 112), (28, 384), (29, 128), (30, 32), (31, 8), (32, 256), (33, 16)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6, 2]


New level: 6
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6, 2]


Before reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 320), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 86), (18, 40), (19, 48), (20, 40), (21, 26), (22, 128), (23, 64), (24, 192), (25, 53), (26, 36), (27, 112), (28, 384), (29, 128), (30, 32), (31, 8), (32, 256), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {3, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 2]


Solution : [0, 11, 1, 6, 2] has cost 22.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 1, 6, 2]

After backtrack at level 6
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6]


Before reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6]

Essensial at level 6 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 6, 3]


Solution : [0, 11, 1, 6, 3] has cost 29.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 1, 6, 3]

After backtrack at level 6
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6]


Before backtrack at level 5
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28]
 solution : [0, 11, 1, 6]

After backtrack at level 5
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 10, 12, 13, 7, 8, 14, 15, 2]
 solution : [0, 11, 1, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 10, 12, 13, 7, 8, 14, 15, 2]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [3, 18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 23, 29, 5, 24, 28, 10, 12, 13, 7, 8, 14, 15, 2]
 solution : [0, 11, 1]

Essensial at level 5 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, 0), (24, 5), (25, 45), (26, 162), (27, 400), (28, 10), (29, 0), (30, 32), (31, 256), (32, 32), (33, 64)]

Covered at level 5 : {5, 3, 29, 23}

After reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, 0), (24, 5), (25, 45), (26, 162), (27, 400), (28, 10), (29, 0), (30, 32), (31, 256), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, 400), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2]


Solution : [0, 11, 1, 2] has cost 16.


Decide in level 5 among pending : [18, 17, 19, 20, 16, 31, 33, 22, 21, 27, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, 400), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

Decide 27 with phase True at level 5

After decision at level 5
 pending : [18, 17, 19, 20, 16, 31, 33, 22, 21, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]


New level: 6
 pending : [18, 17, 19, 20, 16, 31, 33, 22, 21, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 33, 22, 21, 32, 25, 26, 30, 24, 28, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, 400), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 272), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 16), (17, 36), (18, 18), (19, 8), (20, 4), (21, 9), (22, 2), (23, -1), (24, 0), (25, 18), (26, 0), (27, -1), (28, 0), (29, -1), (30, 8), (31, 64), (32, 4), (33, 0)]

Covered at level 6 : {24, 33, 26, 28}

After reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 272), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 16), (17, 36), (18, 18), (19, 8), (20, 4), (21, 9), (22, 2), (23, -1), (24, 0), (25, 18), (26, 0), (27, -1), (28, 0), (29, -1), (30, 8), (31, 64), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 272), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 16), (17, 36), (18, 18), (19, 8), (20, 4), (21, 9), (22, 2), (23, -1), (24, -1), (25, 18), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 64), (32, 4), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]


Solution : [0, 11, 1, 2, 27] has cost 45.


Before backtrack at level 6
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15]
 solution : [0, 11, 1, 2, 27]

After backtrack at level 6
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2, 27]


Invert decision for 27 at level 5


New level: 6
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 272), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 16), (17, 36), (18, 18), (19, 8), (20, 4), (21, 9), (22, 2), (23, -1), (24, -1), (25, 18), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 64), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, -1), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2]


Solution : [0, 11, 1, 2] has cost 16.


Decide in level 6 among pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 7, 8, 14, 15, 33, 26, 24, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, -1), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2, 7]


New level: 7
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2, 7]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 320), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, 64), (14, 128), (15, 256), (16, 128), (17, 76), (18, 36), (19, 24), (20, 12), (21, 22), (22, 16), (23, -1), (24, 5), (25, 45), (26, 162), (27, -1), (28, 10), (29, -1), (30, 32), (31, 256), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 2, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 2, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 2, 7]


Solution : [0, 11, 1, 2, 7] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [0, 11, 1, 2, 7]

After backtrack at level 7
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2]


Before reduction : 
 pending  : [18, 17, 19, 20, 16, 31, 22, 21, 32, 25, 30, 10, 12, 13, 8, 14, 15, 33, 26, 24, 28]
 solution : [0, 11, 1, 2]

Essensial at level 7 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 0), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, 2), (17, 67), (18, 16), (19, 0), (20, 0), (21, 7), (22, 0), (23, -1), (24, 0), (25, 29), (26, 10), (27, -1), (28, 0), (29, -1), (30, 16), (31, 16), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 10, 19, 20, 22, 24, 28}

After reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26]
 solution : [0, 11, 1, 2, 12]


Before reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26]
 solution : [0, 11, 1, 2, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 0), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, 2), (17, 67), (18, 16), (19, 0), (20, 0), (21, 7), (22, 0), (23, -1), (24, 0), (25, 29), (26, 10), (27, -1), (28, 0), (29, -1), (30, 16), (31, 16), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, 2), (17, 67), (18, 16), (19, -1), (20, -1), (21, 7), (22, -1), (23, -1), (24, -1), (25, 29), (26, 10), (27, -1), (28, -1), (29, -1), (30, 16), (31, 16), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26]
 solution : [0, 11, 1, 2, 12]


Solution : [0, 11, 1, 2, 12] has cost 25.


Before backtrack at level 7
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26]
 solution : [0, 11, 1, 2, 12]

After backtrack at level 7
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28]
 solution : [0, 11, 1, 2]


Before backtrack at level 6
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28]
 solution : [0, 11, 1, 2]

After backtrack at level 6
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7]
 solution : [0, 11, 1, 2]


Before backtrack at level 5
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7]
 solution : [0, 11, 1, 2]

After backtrack at level 5
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27]
 solution : [0, 11, 1]


Before backtrack at level 4
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27]
 solution : [0, 11, 1]

After backtrack at level 4
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6]
 solution : [0, 11, 1]


Before backtrack at level 3
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6]
 solution : [0, 11, 1]

After backtrack at level 3
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4]
 solution : [0, 11, 1]


Before backtrack at level 2
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4]
 solution : [0, 11, 1]

After backtrack at level 2
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11]


Before reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, 2), (17, 67), (18, 16), (19, -1), (20, -1), (21, 7), (22, -1), (23, -1), (24, -1), (25, 29), (26, 10), (27, -1), (28, -1), (29, -1), (30, 16), (31, 16), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11]


Solution : [0, 11] has cost 7.


Decide in level 2 among pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 7, 2, 3, 23, 29, 5, 27, 6, 4, 9]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Decide 7 with phase True at level 2

After decision at level 2
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]


New level: 3
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]


Before reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 15, 26, 12, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, 768), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 128), (7, -1), (8, 128), (9, 288), (10, 64), (11, -1), (12, 0), (13, 256), (14, 1), (15, 0), (16, 4), (17, 172), (18, 160), (19, 130), (20, 192), (21, 200), (22, 128), (23, 128), (24, 384), (25, 212), (26, 152), (27, 256), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 64)]

Covered at level 3 : {12, 15}

After reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]


Before reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 128), (7, -1), (8, 128), (9, 288), (10, 64), (11, -1), (12, 0), (13, 256), (14, 1), (15, 0), (16, 4), (17, 172), (18, 160), (19, 130), (20, 192), (21, 200), (22, 128), (23, 128), (24, 384), (25, 212), (26, 152), (27, 256), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 128), (7, -1), (8, 128), (9, 288), (10, 64), (11, -1), (12, -1), (13, 256), (14, 1), (15, -1), (16, 4), (17, 172), (18, 160), (19, 130), (20, 192), (21, 200), (22, 128), (23, 128), (24, 384), (25, 212), (26, 152), (27, 256), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7]


Solution : [0, 11, 7] has cost 20.


Decide in level 3 among pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 3, 23, 29, 5, 27, 6, 4, 9]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 128), (7, -1), (8, 128), (9, 288), (10, 64), (11, -1), (12, -1), (13, 256), (14, 1), (15, -1), (16, 4), (17, 172), (18, 160), (19, 130), (20, 192), (21, 200), (22, 128), (23, 128), (24, 384), (25, 212), (26, 152), (27, 256), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 64)]

Decide 3 with phase True at level 3

After decision at level 3
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]


New level: 4
 pending : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]


Before reduction : 
 pending  : [18, 17, 16, 31, 21, 25, 30, 13, 8, 14, 26, 19, 20, 22, 32, 10, 33, 24, 28, 2, 23, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 128), (7, -1), (8, 128), (9, 288), (10, 64), (11, -1), (12, -1), (13, 256), (14, 1), (15, -1), (16, 4), (17, 172), (18, 160), (19, 130), (20, 192), (21, 200), (22, 128), (23, 128), (24, 384), (25, 212), (26, 152), (27, 256), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, 64), (11, -1), (12, -1), (13, 256), (14, 1), (15, -1), (16, 0), (17, 18), (18, 0), (19, 0), (20, 9), (21, 16), (22, 0), (23, 0), (24, 5), (25, 0), (26, 5), (27, 12), (28, 12), (29, 16), (30, 16), (31, 16), (32, 16), (33, 2)]

Covered at level 4 : {16, 18, 19, 22, 23, 25}

After reduction : 
 pending  : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]


Before reduction : 
 pending  : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, 64), (11, -1), (12, -1), (13, 256), (14, 1), (15, -1), (16, 0), (17, 18), (18, 0), (19, 0), (20, 9), (21, 16), (22, 0), (23, 0), (24, 5), (25, 0), (26, 5), (27, 12), (28, 12), (29, 16), (30, 16), (31, 16), (32, 16), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, 64), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 9), (21, 16), (22, -1), (23, -1), (24, 5), (25, -1), (26, 5), (27, 12), (28, 12), (29, 16), (30, 16), (31, 16), (32, 16), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]


Solution : [0, 11, 7, 3] has cost 33.


Before backtrack at level 4
 pending : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9]
 solution : [0, 11, 7, 3]

After backtrack at level 4
 pending : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7, 3]


Invert decision for 3 at level 3


New level: 4
 pending : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7]


Before reduction : 
 pending  : [17, 31, 21, 30, 13, 8, 14, 26, 20, 32, 10, 33, 24, 28, 2, 29, 5, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7]

Essensial at level 4 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, 64), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, 18), (18, -1), (19, -1), (20, 9), (21, 16), (22, -1), (23, -1), (24, 5), (25, -1), (26, 5), (27, 12), (28, 12), (29, 16), (30, 16), (31, 16), (32, 16), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 0), (9, 288), (10, 0), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 166), (18, 6), (19, 6), (20, 2), (21, 0), (22, 32), (23, 32), (24, 20), (25, 25), (26, 2), (27, 168), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 2)]

Covered at level 4 : {8, 10, 13, 14, 21}

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7, 5]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 0), (9, 288), (10, 0), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 166), (18, 6), (19, 6), (20, 2), (21, 0), (22, 32), (23, 32), (24, 20), (25, 25), (26, 2), (27, 168), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, -1), (9, 288), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 166), (18, 6), (19, 6), (20, 2), (21, -1), (22, 32), (23, 32), (24, 20), (25, 25), (26, 2), (27, 168), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7, 5]


Solution : [0, 11, 7, 5] has cost 26.


Before backtrack at level 4
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23]
 solution : [0, 11, 7, 5]

After backtrack at level 4
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10]
 solution : [0, 11, 7]


Before backtrack at level 3
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10]
 solution : [0, 11, 7]

After backtrack at level 3
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12, 3]
 solution : [0, 11, 7]


Invert decision for 7 at level 2


New level: 3
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12, 3]
 solution : [0, 11]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12, 3]
 solution : [0, 11]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, -1), (9, 288), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 166), (18, 6), (19, 6), (20, 2), (21, -1), (22, 32), (23, 32), (24, 20), (25, 25), (26, 2), (27, 168), (28, 384), (29, 128), (30, 64), (31, 64), (32, 128), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12, 3]
 solution : [0, 11]


Solution : [0, 11] has cost 7.


Decide in level 3 among pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12, 3]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Decide 3 with phase True at level 3

After decision at level 3
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]


New level: 4
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 23, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 768), (4, 576), (5, 512), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 288), (21, 520), (22, 256), (23, 128), (24, 384), (25, 424), (26, 352), (27, 512), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, 0), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 4 : {23}

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, 0), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3]


Solution : [0, 11, 3] has cost 20.


Decide in level 4 among pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 4, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 4 with phase True at level 4

After decision at level 4
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]


New level: 5
 pending : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 24, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 576), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 54), (18, 48), (19, 42), (20, 36), (21, 28), (22, 16), (23, -1), (24, 0), (25, 45), (26, 16), (27, 24), (28, 5), (29, 32), (30, 64), (31, 256), (32, 128), (33, 16)]

Covered at level 5 : {24}

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 54), (18, 48), (19, 42), (20, 36), (21, 28), (22, 16), (23, -1), (24, 0), (25, 45), (26, 16), (27, 24), (28, 5), (29, 32), (30, 64), (31, 256), (32, 128), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 54), (18, 48), (19, 42), (20, 36), (21, 28), (22, 16), (23, -1), (24, -1), (25, 45), (26, 16), (27, 24), (28, 5), (29, 32), (30, 64), (31, 256), (32, 128), (33, 16)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]


Solution : [0, 11, 3, 4] has cost 41.


Before backtrack at level 5
 pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12]
 solution : [0, 11, 3, 4]

After backtrack at level 5
 pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 4]


Invert decision for 4 at level 4


New level: 5
 pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 54), (18, 48), (19, 42), (20, 36), (21, 28), (22, 16), (23, -1), (24, -1), (25, 45), (26, 16), (27, 24), (28, 5), (29, 32), (30, 64), (31, 256), (32, 128), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3]


Solution : [0, 11, 3] has cost 20.


Decide in level 5 among pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 6, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 6 with phase True at level 5

After decision at level 5
 pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]


New level: 6
 pending : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]


Before reduction : 
 pending  : [17, 31, 30, 26, 20, 32, 33, 28, 2, 29, 27, 9, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 512), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 0), (10, 256), (11, -1), (12, 64), (13, 512), (14, 512), (15, 64), (16, 16), (17, 0), (18, 5), (19, 6), (20, 82), (21, 146), (22, 8), (23, -1), (24, 40), (25, 18), (26, 320), (27, 7), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 128)]

Covered at level 6 : {32, 2, 9, 17, 28, 29, 30, 31}

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]


Before reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 0), (10, 256), (11, -1), (12, 64), (13, 512), (14, 512), (15, 64), (16, 16), (17, 0), (18, 5), (19, 6), (20, 82), (21, 146), (22, 8), (23, -1), (24, 40), (25, 18), (26, 320), (27, 7), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 64), (13, 512), (14, 512), (15, 64), (16, 16), (17, -1), (18, 5), (19, 6), (20, 82), (21, 146), (22, 8), (23, -1), (24, 40), (25, 18), (26, 320), (27, 7), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]


Solution : [0, 11, 3, 6] has cost 26.


Before backtrack at level 6
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24]
 solution : [0, 11, 3, 6]

After backtrack at level 6
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 6]


Invert decision for 6 at level 5


New level: 6
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 64), (13, 512), (14, 512), (15, 64), (16, 16), (17, -1), (18, 5), (19, 6), (20, 82), (21, 146), (22, 8), (23, -1), (24, 40), (25, 18), (26, 320), (27, 7), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3]


Solution : [0, 11, 3] has cost 20.


Decide in level 6 among pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 13, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 13 with phase True at level 6

After decision at level 6
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]


New level: 7
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]


Before reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 198), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]


Solution : [0, 11, 3, 13] has cost 22.


Decide in level 7 among pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 15, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]


New level: 8
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]


Before reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 132), (10, 128), (11, -1), (12, 128), (13, -1), (14, 1), (15, -1), (16, 16), (17, 166), (18, 36), (19, 22), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 321), (27, 400), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]


Solution : [0, 11, 3, 13, 15] has cost 27.


Before backtrack at level 8
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]

After backtrack at level 8
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]


Before reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 132), (10, 128), (11, -1), (12, 128), (13, -1), (14, 1), (15, -1), (16, 16), (17, 166), (18, 36), (19, 22), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 321), (27, 400), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 400), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13]


Solution : [0, 11, 3, 13] has cost 22.


Decide in level 8 among pending : [26, 20, 33, 27, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 400), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 27 with phase True at level 8

After decision at level 8
 pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]


New level: 9
 pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]


Before reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 24, 17, 31, 30, 32, 28, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, 400), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 264), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 80), (18, 144), (19, 34), (20, 10), (21, 36), (22, 8), (23, -1), (24, 0), (25, 80), (26, 2), (27, -1), (28, 0), (29, 8), (30, 16), (31, 64), (32, 32), (33, 2)]

Covered at level 9 : {24, 28}

After reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]


Before reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 264), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 80), (18, 144), (19, 34), (20, 10), (21, 36), (22, 8), (23, -1), (24, 0), (25, 80), (26, 2), (27, -1), (28, 0), (29, 8), (30, 16), (31, 64), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 264), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 80), (18, 144), (19, 34), (20, 10), (21, 36), (22, 8), (23, -1), (24, -1), (25, 80), (26, 2), (27, -1), (28, -1), (29, 8), (30, 16), (31, 64), (32, 32), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]


Solution : [0, 11, 3, 13, 27] has cost 51.


Before backtrack at level 9
 pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9]
 solution : [0, 11, 3, 13, 27]

After backtrack at level 9
 pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13, 27]


Invert decision for 27 at level 8


New level: 9
 pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13]


Before reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 264), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 80), (18, 144), (19, 34), (20, 10), (21, 36), (22, 8), (23, -1), (24, -1), (25, 80), (26, 2), (27, -1), (28, -1), (29, 8), (30, 16), (31, 64), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13]


Solution : [0, 11, 3, 13] has cost 22.


Decide in level 9 among pending : [26, 20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 26 with phase True at level 9

After decision at level 9
 pending : [20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13, 26]


New level: 10
 pending : [20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13, 26]


Before reduction : 
 pending  : [20, 33, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 24, 28]
 solution : [0, 11, 3, 13, 26]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, 328), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 166), (18, 80), (19, 32), (20, 8), (21, 18), (22, 16), (23, -1), (24, 0), (25, 139), (26, -1), (27, -1), (28, 12), (29, 32), (30, 64), (31, 256), (32, 128), (33, 0)]

Covered at level 10 : {24, 33}

After reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28]
 solution : [0, 11, 3, 13, 26]


Before reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28]
 solution : [0, 11, 3, 13, 26]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 166), (18, 80), (19, 32), (20, 8), (21, 18), (22, 16), (23, -1), (24, 0), (25, 139), (26, -1), (27, -1), (28, 12), (29, 32), (30, 64), (31, 256), (32, 128), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 166), (18, 80), (19, 32), (20, 8), (21, 18), (22, 16), (23, -1), (24, -1), (25, 139), (26, -1), (27, -1), (28, 12), (29, 32), (30, 64), (31, 256), (32, 128), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28]
 solution : [0, 11, 3, 13, 26]


Solution : [0, 11, 3, 13, 26] has cost 51.


Before backtrack at level 10
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28]
 solution : [0, 11, 3, 13, 26]

After backtrack at level 10
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28, 33, 24]
 solution : [0, 11, 3, 13, 26]


Invert decision for 26 at level 9


New level: 10
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28, 33, 24]
 solution : [0, 11, 3, 13]


Before reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28, 33, 24]
 solution : [0, 11, 3, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 32), (17, 166), (18, 80), (19, 32), (20, 8), (21, 18), (22, 16), (23, -1), (24, -1), (25, 139), (26, -1), (27, -1), (28, 12), (29, 32), (30, 64), (31, 256), (32, 128), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, -1), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28, 33, 24]
 solution : [0, 11, 3, 13]


Solution : [0, 11, 3, 13] has cost 22.


Decide in level 10 among pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 9, 28, 33, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, -1), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]


New level: 11
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]


Before reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 30, 32, 2, 29, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, 288), (10, 128), (11, -1), (12, 256), (13, -1), (14, 256), (15, -1), (16, 256), (17, 166), (18, 160), (19, 104), (20, 22), (21, 44), (22, 64), (23, -1), (24, 5), (25, 153), (26, -1), (27, -1), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, -1), (10, 128), (11, -1), (12, 64), (13, -1), (14, 4), (15, -1), (16, 16), (17, 18), (18, 36), (19, 22), (20, 22), (21, 44), (22, 8), (23, -1), (24, 5), (25, 22), (26, -1), (27, -1), (28, 5), (29, 0), (30, 0), (31, 8), (32, 8), (33, 128)]

Covered at level 11 : {2, 29, 30}

After reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]


Before reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, -1), (10, 128), (11, -1), (12, 64), (13, -1), (14, 4), (15, -1), (16, 16), (17, 18), (18, 36), (19, 22), (20, 22), (21, 44), (22, 8), (23, -1), (24, 5), (25, 22), (26, -1), (27, -1), (28, 5), (29, 0), (30, 0), (31, 8), (32, 8), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, -1), (10, 128), (11, -1), (12, 64), (13, -1), (14, 4), (15, -1), (16, 16), (17, 18), (18, 36), (19, 22), (20, 22), (21, 44), (22, 8), (23, -1), (24, 5), (25, 22), (26, -1), (27, -1), (28, 5), (29, -1), (30, -1), (31, 8), (32, 8), (33, 128)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]


Solution : [0, 11, 3, 13, 9] has cost 32.


Before backtrack at level 11
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24]
 solution : [0, 11, 3, 13, 9]

After backtrack at level 11
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24, 30, 2, 29]
 solution : [0, 11, 3, 13, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24, 30, 2, 29]
 solution : [0, 11, 3, 13]


Before reduction : 
 pending  : [20, 18, 16, 25, 19, 22, 5, 21, 8, 14, 10, 12, 17, 31, 32, 28, 33, 24, 30, 2, 29]
 solution : [0, 11, 3, 13]

Essensial at level 11 : {17, 2, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 256), (9, -1), (10, 128), (11, -1), (12, 64), (13, -1), (14, 4), (15, -1), (16, 16), (17, 18), (18, 36), (19, 22), (20, 22), (21, 44), (22, 8), (23, -1), (24, 5), (25, 22), (26, -1), (27, -1), (28, 5), (29, -1), (30, -1), (31, 8), (32, 8), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 31}

After reduction : 
 pending  : [5, 8, 14, 10]
 solution : [0, 11, 3, 13, 17, 2, 12]


Before reduction : 
 pending  : [5, 8, 14, 10]
 solution : [0, 11, 3, 13, 17, 2, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [5, 8, 14, 10]
 solution : [0, 11, 3, 13, 17, 2, 12]


Solution : [0, 11, 3, 13, 17, 2, 12] has cost 71.


Before backtrack at level 11
 pending : [5, 8, 14, 10]
 solution : [0, 11, 3, 13, 17, 2, 12]

After backtrack at level 11
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29]
 solution : [0, 11, 3, 13]


Before backtrack at level 10
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29]
 solution : [0, 11, 3, 13]

After backtrack at level 10
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9]
 solution : [0, 11, 3, 13]


Before backtrack at level 9
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9]
 solution : [0, 11, 3, 13]

After backtrack at level 9
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26]
 solution : [0, 11, 3, 13]


Before backtrack at level 8
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26]
 solution : [0, 11, 3, 13]

After backtrack at level 8
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27]
 solution : [0, 11, 3, 13]


Before backtrack at level 7
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27]
 solution : [0, 11, 3, 13]

After backtrack at level 7
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 13]


Invert decision for 13 at level 6


New level: 7
 pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 2), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3]


Solution : [0, 11, 3] has cost 20.


Decide in level 7 among pending : [5, 8, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [5, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]


New level: 8
 pending : [5, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]


Before reduction : 
 pending  : [5, 14, 10, 12, 17, 2, 20, 18, 16, 25, 19, 22, 21, 31, 32, 28, 33, 24, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 512), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 288), (10, 0), (11, -1), (12, 64), (13, -1), (14, 4), (15, 512), (16, 64), (17, 166), (18, 20), (19, 16), (20, 0), (21, 0), (22, 2), (23, -1), (24, 0), (25, 8), (26, 36), (27, 386), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 4)]

Covered at level 8 : {5, 10, 20, 21, 24}

After reduction : 
 pending  : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]


Before reduction : 
 pending  : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 288), (10, 0), (11, -1), (12, 64), (13, -1), (14, 4), (15, 512), (16, 64), (17, 166), (18, 20), (19, 16), (20, 0), (21, 0), (22, 2), (23, -1), (24, 0), (25, 8), (26, 36), (27, 386), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 288), (10, -1), (11, -1), (12, 64), (13, -1), (14, 4), (15, 512), (16, 64), (17, 166), (18, 20), (19, 16), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 8), (26, 36), (27, 386), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]


Solution : [0, 11, 3, 8] has cost 26.


Before backtrack at level 8
 pending : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15]
 solution : [0, 11, 3, 8]

After backtrack at level 8
 pending : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 288), (10, -1), (11, -1), (12, 64), (13, -1), (14, 4), (15, 512), (16, 64), (17, 166), (18, 20), (19, 16), (20, -1), (21, -1), (22, 2), (23, -1), (24, -1), (25, 8), (26, 36), (27, 386), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3]


Solution : [0, 11, 3] has cost 20.


Decide in level 8 among pending : [14, 12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]


New level: 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 288), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 256), (17, 166), (18, 160), (19, 104), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 328), (27, 448), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 64), (6, -1), (7, -1), (8, -1), (9, 272), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, 128), (16, 128), (17, 166), (18, 160), (19, 100), (20, 84), (21, 152), (22, 16), (23, -1), (24, 40), (25, 45), (26, 328), (27, 400), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]


Solution : [0, 11, 3, 14] has cost 25.


Before backtrack at level 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]

After backtrack at level 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 15, 5, 10, 20, 21, 24]
 solution : [0, 11, 3]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 64), (6, -1), (7, -1), (8, -1), (9, 272), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, 128), (16, 128), (17, 166), (18, 160), (19, 100), (20, 84), (21, 152), (22, 16), (23, -1), (24, 40), (25, 45), (26, 328), (27, 400), (28, 96), (29, 32), (30, 64), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 132), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 32), (17, 166), (18, 36), (19, 22), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 321), (27, 448), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 15]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 132), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 32), (17, 166), (18, 36), (19, 22), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 321), (27, 448), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 132), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 32), (17, 166), (18, 36), (19, 22), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 321), (27, 448), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 15]


Solution : [0, 11, 3, 15] has cost 25.


Before backtrack at level 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24]
 solution : [0, 11, 3, 15]

After backtrack at level 9
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15]
 solution : [0, 11, 3]


Before backtrack at level 8
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15]
 solution : [0, 11, 3]

After backtrack at level 8
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14]
 solution : [0, 11, 3]


Before backtrack at level 7
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14]
 solution : [0, 11, 3]

After backtrack at level 7
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8]
 solution : [0, 11, 3]


Before backtrack at level 6
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8]
 solution : [0, 11, 3]

After backtrack at level 6
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13]
 solution : [0, 11, 3]


Before backtrack at level 5
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13]
 solution : [0, 11, 3]

After backtrack at level 5
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13, 6]
 solution : [0, 11, 3]


Before backtrack at level 4
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13, 6]
 solution : [0, 11, 3]

After backtrack at level 4
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 3]


Invert decision for 3 at level 3


New level: 4
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 5, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11]

Essensial at level 4 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 132), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 32), (17, 166), (18, 36), (19, 22), (20, 84), (21, 152), (22, 64), (23, -1), (24, 40), (25, 153), (26, 321), (27, 448), (28, 96), (29, 16), (30, 32), (31, 128), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 128), (21, 260), (22, 128), (23, 64), (24, 96), (25, 178), (26, 352), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 128), (21, 260), (22, 128), (23, 64), (24, 96), (25, 178), (26, 352), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 128), (21, 260), (22, 128), (23, 64), (24, 96), (25, 178), (26, 352), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 13.


Decide in level 4 among pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 9, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 128), (21, 260), (22, 128), (23, 64), (24, 96), (25, 178), (26, 352), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5, 9]


New level: 5
 pending : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5, 9]


Before reduction : 
 pending  : [12, 17, 2, 18, 16, 25, 19, 22, 31, 32, 28, 33, 30, 29, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 23, 4]
 solution : [0, 11, 5, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, -1), (4, 576), (5, -1), (6, 512), (7, -1), (8, 512), (9, 640), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 256), (17, 576), (18, 320), (19, 272), (20, 128), (21, 260), (22, 128), (23, 64), (24, 96), (25, 178), (26, 352), (27, 448), (28, 384), (29, 128), (30, 128), (31, 256), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 64), (17, 18), (18, 36), (19, 22), (20, 40), (21, 80), (22, 16), (23, 0), (24, 10), (25, 40), (26, 321), (27, 112), (28, 5), (29, 0), (30, 0), (31, 32), (32, 8), (33, 128)]

Covered at level 5 : {2, 29, 30, 23}

After reduction : 
 pending  : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4]
 solution : [0, 11, 5, 9]


Before reduction : 
 pending  : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4]
 solution : [0, 11, 5, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 64), (17, 18), (18, 36), (19, 22), (20, 40), (21, 80), (22, 16), (23, 0), (24, 10), (25, 40), (26, 321), (27, 112), (28, 5), (29, 0), (30, 0), (31, 32), (32, 8), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 64), (17, 18), (18, 36), (19, 22), (20, 40), (21, 80), (22, 16), (23, -1), (24, 10), (25, 40), (26, 321), (27, 112), (28, 5), (29, -1), (30, -1), (31, 32), (32, 8), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4]
 solution : [0, 11, 5, 9]


Solution : [0, 11, 5, 9] has cost 23.


Before backtrack at level 5
 pending : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4]
 solution : [0, 11, 5, 9]

After backtrack at level 5
 pending : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 2, 30, 29, 23]
 solution : [0, 11, 5, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 2, 30, 29, 23]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [12, 17, 18, 16, 25, 19, 22, 31, 32, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 2, 30, 29, 23]
 solution : [0, 11, 5]

Essensial at level 5 : {2, 12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 576), (5, -1), (6, 128), (7, -1), (8, 512), (9, -1), (10, 256), (11, -1), (12, 128), (13, 512), (14, 512), (15, 512), (16, 64), (17, 18), (18, 36), (19, 22), (20, 40), (21, 80), (22, 16), (23, -1), (24, 10), (25, 40), (26, 321), (27, 112), (28, 5), (29, -1), (30, -1), (31, 32), (32, 8), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, 512), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 512), (14, 128), (15, 128), (16, 128), (17, 192), (18, 128), (19, 4), (20, 4), (21, 50), (22, 16), (23, 8), (24, 9), (25, 141), (26, 258), (27, 304), (28, 2), (29, 0), (30, 32), (31, 32), (32, 0), (33, 2)]

Covered at level 5 : {32, 29}

After reduction : 
 pending  : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23]
 solution : [0, 11, 5, 2, 12]


Before reduction : 
 pending  : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23]
 solution : [0, 11, 5, 2, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, 512), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 512), (14, 128), (15, 128), (16, 128), (17, 192), (18, 128), (19, 4), (20, 4), (21, 50), (22, 16), (23, 8), (24, 9), (25, 141), (26, 258), (27, 304), (28, 2), (29, 0), (30, 32), (31, 32), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 512), (5, -1), (6, 512), (7, -1), (8, 512), (9, -1), (10, 8), (11, -1), (12, -1), (13, 512), (14, 128), (15, 128), (16, 128), (17, 164), (18, 128), (19, 4), (20, 4), (21, 50), (22, 16), (23, 8), (24, 9), (25, 141), (26, 258), (27, 304), (28, 2), (29, -1), (30, 32), (31, 32), (32, -1), (33, 2)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23]
 solution : [0, 11, 5, 2, 12]


Solution : [0, 11, 5, 2, 12] has cost 28.


Before backtrack at level 5
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23]
 solution : [0, 11, 5, 2, 12]

After backtrack at level 5
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29]
 solution : [0, 11, 5]


Before backtrack at level 4
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29]
 solution : [0, 11, 5]

After backtrack at level 4
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9]
 solution : [0, 11]


Before backtrack at level 3
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9]
 solution : [0, 11]

After backtrack at level 3
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9, 3]
 solution : [0, 11]


Before backtrack at level 2
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9, 3]
 solution : [0, 11]

After backtrack at level 2
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9, 3, 7]
 solution : [0, 11]


Before backtrack at level 1
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9, 3, 7]
 solution : [0, 11]

After backtrack at level 1
 pending : [17, 18, 16, 25, 19, 22, 31, 28, 33, 26, 27, 10, 20, 21, 24, 15, 14, 8, 13, 6, 4, 30, 23, 12, 2, 32, 29, 5, 9, 3, 7, 1]
 solution : [0, 11]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 11, 1, 6, 2] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_11] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_6] forall NODE1,NODE0. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1 # qcost: 6

invariant [invar_2] forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 12.297 seconds

[QRM NOTE]: Time elapsed since last: 2.285 seconds

[QRM NOTE]: Peak memory: 2304621 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_6
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_2

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_6 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_2 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_6 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_2 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_6 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_2 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE1,NODE0. internal(NODE0) | ~sent(NODE0,NODE1) | internal(NODE1) | NODE0 = NODE1) & (forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 14.568 seconds

[QRM NOTE]: Time elapsed since last: 2.271 seconds

[QRM NOTE]: Peak memory: 1305859 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

