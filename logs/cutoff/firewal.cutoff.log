
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 7.091 seconds

[QRM NOTE]: Time elapsed since last: 7.091 seconds

[QRM NOTE]: Peak memory: 1180215 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: sent('node', 'node')
predicate: allowed_in('node',)
predicate: internal('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000101000000000
lex min decimal: 1536
states:
000101000000000
000110000000000
000011000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000100000000000
000001000000000
000010000000000




=== State Orbit 4 =====================
size : 6
repr state: 010101010000000
lex min decimal: 7176
states:
001110001000000
100011000000100
100011000100000
010101000000010
001110000001000
010101010000000




=== State Orbit 5 =====================
size : 3
repr state: 010101010000010
lex min decimal: 7240
states:
010101010000010
100011000100100
001110001001000




=== State Orbit 6 =====================
size : 6
repr state: 010101010100010
lex min decimal: 7242
states:
100011010100100
010101010001010
001110001001100
001110001001010
100011001100100
010101010100010




=== State Orbit 7 =====================
size : 3
repr state: 010101010101010
lex min decimal: 7246
states:
100011011100100
010101010101010
001110001001110




=== State Orbit 8 =====================
size : 6
repr state: 010101010100000
lex min decimal: 7178
states:
100011010100000
001110000001010
100011001000100
010101010100000
001110001000100
010101000001010




=== State Orbit 9 =====================
size : 6
repr state: 010101010101000
lex min decimal: 7182
states:
001110001000110
100011011000100
010101010101000
001110000001110
100011011100000
010101000101010




=== State Orbit 10 =====================
size : 6
repr state: 010101010001000
lex min decimal: 7180
states:
010101000100010
100011001100000
010101010001000
001110001000010
100011010000100
001110000001100




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010100010000000
001010000001000
001100001000000
100001000000100
010001000000010
100010000100000




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
011100011000000
110001000000110
101010000101000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
101010010101000
011100011000100
110001000001110
011100011100000
110001001000110
101010000101010




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
011100011100100
110001001001110
101010010101010




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
001100001000100
100010010100000
001010000001010
100001001000100
010001000001010
010100010100000



[QRM NOTE]: Time elapsed since start: 7.200 seconds

[QRM NOTE]: Time elapsed since last: 0.108 seconds

[QRM NOTE]: Peak memory: 1227785 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.203 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 190865 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1------1--
6     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
7     : 0---1----1-----
7     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
8     : -0---1-------1-
8     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
9     : -0-1---1-------
9     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
10     : --0-1------1---
10     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
11     : --01----1------
11     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
12 (*) : 0----1--1------
12     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
13     : 0---1--1-------
13     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
14     : -0---1-----1---
14     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : --01--------1--
17     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : ----11-------1-
18     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
19     : ----11-----1---
19     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
20     : ---1-1------1--
20     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
21     : ---1-1--1------
21     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
22     : ---11----1-----
22     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
23     : ---11--1-------
23     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
24 (*) : 1--------0--0--
24     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
25     : -1-----0-----0-
25     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
26     : --1-----0--0---
26     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
27 (*) : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : 1----0------1--
28     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
29     : -1-0---1-------
29     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
30     : -1---0-------1-
30     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : --1-0------1---
32     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
39 (*) : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : 1---0--1-------
40     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
41     : -1---0-----1---
41     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
42     : -1-0-----1-----
42     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
43     : --1-0--------1-
43     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
44     : --10--------1--
44     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
33 (*) : 1---0-------0--
33     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
34     : 1----0---0-----
34     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
35     : -1-0---------0-
35     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
36     : -1---0-0-------
36     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
37     : --10-------0---
37     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
38     : --1-0---0------
38     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
45 (*) : 1---00---------
45     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
46     : -1-0-0---------
46     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
47     : --100----------
47     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 1-1---------1--
48     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
49     : 11-------1-----
49     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
50     : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : 11-----1-------
51     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
52     : -11--------1---
52     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
54 (*) : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11----------0--
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
56     : -11----0-------
56     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
57     : 11-----------0-
57     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
58     : -11-----0------
58     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
59     : 1-1--------0---
59     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
60 (*) : 1-1-0----------
60     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
61     : 11---0---------
61     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
62     : -110-----------
62     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
63 (*) : 111------------
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 2
64 (*) : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : -0--0------1---
65     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
66     : --0--0------1--
66     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : 0--0---1-------
69     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
82 (*) : -0--0--------1-
82     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
83     : --0--0-----1---
83     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
84     : 0--0--------1--
84     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
85     : --0--0--1------
85     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
86     : 0--0-----1-----
86     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
87     : -0--0--1-------
87     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
70 (*) : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : -00--------1---
71     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 0-0-----1------
73     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
75     : 00-----1-------
75     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
76 (*) : ----00-------1-
76     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
77     : ----00-----1---
77     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
78     : ---0-0------1--
78     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
79     : ---0-0--1------
79     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
80     : ---00----1-----
80     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
81     : ---00--1-------
81     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11---1-
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
89     : -------1---11--
89     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
90 (*) : ---------1--11-
90     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : ---------1-11--
91     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
92     : -------1----11-
92     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
93     : -------11----1-
93     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
94     : --------11-1---
94     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
95     : -------11--1---
95     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1---------110-
96     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
97     : --1------1-0-1-
97     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1---01-
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
99     : --1----10---1--
99     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0-1---
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
101     : -1-----011-----
101     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
102 (*) : 1----------110-
102     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
103     : 1--------1-0-1-
103     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
104     : -1------1---01-
104     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
105     : -1-----10---1--
105     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
106     : --1----1-0-1---
106     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
107     : --1----011-----
107     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
126 (*) : -1------1--10--
126     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
127     : --1----1-0---1-
127     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
128     : 1-------1--1-0-
128     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
129     : --1----0-1--1--
129     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
130     : 1------1---0-1-
130     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
131     : -1------01--1--
131     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
138 (*) : 1-------1--10--
138     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
139     : 1------1-0---1-
139     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
140     : -1------1--1-0-
140     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
141     : -1-----0-1--1--
141     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
142     : --1----1---0-1-
142     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
143     : --1-----01--1--
143     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
108 (*) : 01---------11--
108     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
109     : 0-1------1---1-
109     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
110     : 10------1----1-
110     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
111     : -01----1----1--
111     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
112     : 1-0----1---1---
112     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
113     : -10-----11-----
113     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
114 (*) : 10---------11--
114     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
115     : 1-0------1---1-
115     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
116     : 01------1----1-
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
117     : -10----1----1--
117     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
118     : 0-1----1---1---
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
119     : -01-----11-----
119     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
120 (*) : 01------1--1---
120     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
121     : 0-1----1-----1-
121     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
122     : 10------1--1---
122     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
123     : -01------1--1--
123     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
124     : 1-0----1-----1-
124     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
125     : -10------1--1--
125     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
300 (*) : 0-1------1-1---
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01----------11-
301     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01----11------
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
303     : 10----------11-
303     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
304     : -10----11------
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
305     : 1-0------1-1---
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
132 (*) : 10-------0-1---
132     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
133     : 1-0---------01-
133     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
134     : 01-----01------
134     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
135     : -10---------10-
135     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
136     : 0-1----10------
136     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
137     : -01------1-0---
137     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
312 (*) : 1-0--------10--
312     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
313     : 10-------0---1-
313     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
314     : -10-----1----0-
314     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
315     : 01-----0----1--
315     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
316     : -01----1---0---
316     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
317     : 0-1-----01-----
317     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
342 (*) : 1-0--------1-0-
342     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
343     : 10---------0-1-
343     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
344     : -10-----1---0--
344     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
345     : 01------0---1--
345     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
346     : -01----1-0-----
346     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
347     : 0-1----0-1-----
347     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
144 (*) : 1--------0-1-0-
144     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
145     : 1----------001-
145     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
146     : -1-----01---0--
146     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
147     : -1------0---10-
147     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
148     : --1----100-----
148     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
149     : --1----0-1-0---
149     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 12
num_suborbits: 2
150 (*) : -0-----1-0-1---
150     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
151     : --0-----1---01-
151     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
152     : 0------011-----
152     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
153     : --0--------110-
153     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
154     : 0------10---1--
154     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
155     : -0-------1-0-1-
155     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
222 (*) : --0-----1--10--
222     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
223     : -0-----1-0---1-
223     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
224     : --0-----1--1-0-
224     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
225     : 0------0-1--1--
225     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
226     : -0-----1---0-1-
226     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
227     : 0-------01--1--
227     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --00---1---1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
157     : -0-0----1----1-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
158     : --0-0---11-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
159     : 0---0------11--
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
160     : -0---0-1----1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
161     : 0----0---1---1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
186 (*) : 0----0-1---1---
186     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
187     : 0---0---1----1-
187     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
188     : -0---0--11-----
188     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
189     : -0-0-------11--
189     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
190     : --0-0--1----1--
190     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
191     : --00-----1---1-
191     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
216 (*) : 0---0---1--1---
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
217     : 0----0-1-----1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
218     : -0-0----1--1---
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
219     : -0---0---1--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
220     : --00---1-----1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
221     : --0-0----1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
258 (*) : --00-----1-1---
258     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
259     : -0-0--------11-
259     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
260     : --0-0--11------
260     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
261     : 0---0-------11-
261     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
262     : -0---0-11------
262     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
263     : 0----0---1-1---
263     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
162 (*) : ---1-0-1---1---
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
163     : ---10---1----1-
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
164     : ----10--11-----
164     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
165     : ---01------11--
165     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
166     : ----01-1----1--
166     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
167     : ---0-1---1---1-
167     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
174 (*) : ---0-1-1---1---
174     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
175     : ---01---1----1-
175     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
176     : ----01--11-----
176     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
177     : ---10------11--
177     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
178     : ----10-1----1--
178     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
179     : ---1-0---1---1-
179     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
246 (*) : ---10---1--1---
246     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
247     : ---1-0-1-----1-
247     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
248     : ---01---1--1---
248     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
249     : ----10---1--1--
249     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
250     : ---0-1-1-----1-
250     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
251     : ----01---1--1--
251     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ---1-0---1-1---
270     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
271     : ---10-------11-
271     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
272     : ----10-11------
272     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
273     : ---01-------11-
273     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
274     : ----01-11------
274     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
275     : ---0-1---1-1---
275     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
168 (*) : --11---1---1---
168     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
169     : -1-1----1----1-
169     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
170     : --1-1---11-----
170     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
171     : 1---1------11--
171     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
172     : -1---1-1----1--
172     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
173     : 1----1---1---1-
173     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
180 (*) : 1----1-1---1---
180     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
181     : 1---1---1----1-
181     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
182     : -1---1--11-----
182     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
183     : -1-1-------11--
183     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
184     : --1-1--1----1--
184     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
185     : --11-----1---1-
185     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
210 (*) : -1-1----1--1---
210     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
211     : --11---1-----1-
211     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
212     : 1---1---1--1---
212     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
213     : --1-1----1--1--
213     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
214     : 1----1-1-----1-
214     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
215     : -1---1---1--1--
215     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
306 (*) : --11-----1-1---
306     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
307     : -1-1--------11-
307     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
308     : --1-1--11------
308     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
309     : 1---1-------11-
309     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
310     : -1---1-11------
310     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
311     : 1----1---1-1---
311     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
192 (*) : ----1--1-0-1---
192     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
193     : -----1--1---01-
193     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
194     : ---1---011-----
194     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
195     : -----1-----110-
195     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
196     : ---1---10---1--
196     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
197     : ----1----1-0-1-
197     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
234 (*) : -----1--1--10--
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
235     : ----1--1-0---1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
236     : -----1--1--1-0-
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
237     : ---1---0-1--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
238     : ----1--1---0-1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
239     : ---1----01--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
198 (*) : ---0---1-0-1---
198     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
199     : ---0----1---01-
199     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
200     : ----0--011-----
200     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
201     : ----0------110-
201     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
202     : -----0-10---1--
202     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
203     : -----0---1-0-1-
203     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
204 (*) : -----0-1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
205     : ----0---1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
206     : -----0-011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
207     : ---0-------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
208     : ----0--10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
209     : ---0-----1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
228 (*) : ----0---1--10--
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
229     : -----0-1-0---1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
230     : ---0----1--1-0-
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
231     : -----0-0-1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
232     : ---0---1---0-1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
233     : ----0---01--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
252 (*) : --0----0---1-0-
252     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
253     : -0------0--0-1-
253     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
254     : --0-----10--0--
254     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
255     : 0-------0--01--
255     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
256     : -0-----1-0--0--
256     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
257     : 0------0-1---0-
257     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : --00-------1-0-
264     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
265     : -0-0-------0-1-
265     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
266     : --0-0---1---0--
266     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
267     : 0---0---0---1--
267     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
268     : -0---0-1-0-----
268     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
269     : 0----0-0-1-----
269     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-1-----1-0-
276     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
277     : ---01------0-1-
277     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
278     : ----01--1---0--
278     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
279     : ---10---0---1--
279     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
280     : ----10-1-0-----
280     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
281     : ---1-0-0-1-----
281     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
282 (*) : -----1-0---1-0-
282     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
283     : ----1---0--0-1-
283     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
284     : -----1--10--0--
284     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
285     : ---1----0--01--
285     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
286     : ----1--1-0--0--
286     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
287     : ---1---0-1---0-
287     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
288 (*) : ----0--0---1-0-
288     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
289     : -----0--0--0-1-
289     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
290     : ---0----10--0--
290     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
291     : -----0--0--01--
291     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
292     : ---0---1-0--0--
292     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
293     : ----0--0-1---0-
293     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : ---00------1-0-
294     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
295     : ---0-0-----0-1-
295     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
296     : ---00---1---0--
296     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
297     : ----00--0---1--
297     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
298     : ---0-0-1-0-----
298     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
299     : ----00-0-1-----
299     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
318 (*) : 1---1----0-1---
318     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
319     : 1----1------01-
319     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
320     : -1-1---01------
320     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
321     : -1---1------10-
321     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
322     : --11---10------
322     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
323     : --1-1----1-0---
323     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
324 (*) : 1----1-----10--
324     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
325     : 1---1----0---1-
325     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
326     : -1---1--1----0-
326     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
327     : -1-1---0----1--
327     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
328     : --1-1--1---0---
328     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
329     : --11----01-----
329     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
330 (*) : 1----1-----1-0-
330     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
331     : 1---1------0-1-
331     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
332     : -1---1--1---0--
332     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
333     : -1-1----0---1--
333     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
334     : --1-1--1-0-----
334     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
335     : --11---0-1-----
335     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
336 (*) : 1---0------1-0-
336     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
337     : 1----0-----0-1-
337     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
338     : -1-0----1---0--
338     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
339     : -1---0--0---1--
339     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
340     : --10---1-0-----
340     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
341     : --1-0--0-1-----
341     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 7.276 seconds

[QRM NOTE]: Time elapsed since last: 0.073 seconds

[QRM NOTE]: Peak memory: 1556790 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]


Before reduction : 
 pending  : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]

[QRM NOTE]: Time elapsed since start: 7.292 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 496049 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
24 (*) : 1--------0--0--
24     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
25     : -1-----0-----0-
25     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
26     : --1-----0--0---
26     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1------1--
6     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
7     : 0---1----1-----
7     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
8     : -0---1-------1-
8     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
9     : -0-1---1-------
9     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
10     : --0-1------1---
10     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
11     : --01----1------
11     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
12 (*) : 0----1--1------
12     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
13     : 0---1--1-------
13     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
14     : -0---1-----1---
14     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : --01--------1--
17     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'internal(node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'internal(NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE3,NODE1. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : ----11-------1-
18     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
19     : ----11-----1---
19     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
20     : ---1-1------1--
20     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
21     : ---1-1--1------
21     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
22     : ---11----1-----
22     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
23     : ---11--1-------
23     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1': [node$0$internal$0$0; node$0$sent$1$0], 'node$0$internal$0; node$0$sent$0': [node$0$internal$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1': node$0$internal$0$0; node$0$sent$1$0, 'node$0$internal$0; node$0$sent$0': node$0$internal$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
27 (*) : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : 1----0------1--
28     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
29     : -1-0---1-------
29     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
30     : -1---0-------1-
30     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : --1-0------1---
32     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
39 (*) : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : 1---0--1-------
40     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
41     : -1---0-----1---
41     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
42     : -1-0-----1-----
42     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
43     : --1-0--------1-
43     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
44     : --10--------1--
44     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~internal(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
33 (*) : 1---0-------0--
33     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
34     : 1----0---0-----
34     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
35     : -1-0---------0-
35     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
36     : -1---0-0-------
36     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
37     : --10-------0---
37     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
38     : --1-0---0------
38     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE1)', 'allowed_in(NODE0)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. internal(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
45 (*) : 1---00---------
45     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
46     : -1-0-0---------
46     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
47     : --100----------
47     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 1-1---------1--
48     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
49     : 11-------1-----
49     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
50     : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : 11-----1-------
51     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
52     : -11--------1---
52     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$0; node$0$sent$1$0], 'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$0; node$0$sent$1$0, 'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'sent(NODE1,NODE0)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~allowed_in(NODE1) | ~sent(NODE1,NODE0) | ~allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
54 (*) : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11----------0--
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
56     : -11----0-------
56     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
57     : 11-----------0-
57     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
58     : -11-----0------
58     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
59     : 1-1--------0---
59     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$allowed_in$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$allowed_in$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$allowed_in$0': [node$0$allowed_in$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$allowed_in$0': node$0$allowed_in$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'allowed_in(NODE0)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
60 (*) : 1-1-0----------
60     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
61     : 11---0---------
61     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
62     : -110-----------
62     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE1)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
63 (*) : 111------------
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 12 =====================
size : 12
num_suborbits: 2
64 (*) : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : -0--0------1---
65     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
66     : --0--0------1--
66     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : 0--0---1-------
69     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
82 (*) : -0--0--------1-
82     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
83     : --0--0-----1---
83     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
84     : 0--0--------1--
84     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
85     : --0--0--1------
85     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
86     : 0--0-----1-----
86     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
87     : -0--0--1-------
87     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
70 (*) : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : -00--------1---
71     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 0-0-----1------
73     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
75     : 00-----1-------
75     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$1], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$1, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
76 (*) : ----00-------1-
76     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
77     : ----00-----1---
77     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
78     : ---0-0------1--
78     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
79     : ---0-0--1------
79     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
80     : ---00----1-----
80     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
81     : ---00--1-------
81     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$1], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$1, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', '~internal(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11---1-
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
89     : -------1---11--
89     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
90 (*) : ---------1--11-
90     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : ---------1-11--
91     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
92     : -------1----11-
92     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
93     : -------11----1-
93     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
94     : --------11-1---
94     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
95     : -------11--1---
95     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$2], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$2, node$0$sent$0$1; node$0$sent$0$2, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE4)', 'sent(NODE0,NODE3)', 'sent(NODE2,NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1---------110-
96     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
97     : --1------1-0-1-
97     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1---01-
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
99     : --1----10---1--
99     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0-1---
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
101     : -1-----011-----
101     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
102 (*) : 1----------110-
102     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
103     : 1--------1-0-1-
103     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
104     : -1------1---01-
104     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
105     : -1-----10---1--
105     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
106     : --1----1-0-1---
106     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
107     : --1----011-----
107     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
126 (*) : -1------1--10--
126     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
127     : --1----1-0---1-
127     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
128     : 1-------1--1-0-
128     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
129     : --1----0-1--1--
129     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
130     : 1------1---0-1-
130     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
131     : -1------01--1--
131     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
138 (*) : 1-------1--10--
138     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
139     : 1------1-0---1-
139     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
140     : -1------1--1-0-
140     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
141     : -1-----0-1--1--
141     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
142     : --1----1---0-1-
142     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
143     : --1-----01--1--
143     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~sent(NODE3,NODE1)', 'sent(NODE2,NODE4)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE3:node = NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE2,NODE1,NODE3. ~sent(NODE1,NODE3) | sent(NODE3,NODE1) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
108 (*) : 01---------11--
108     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
109     : 0-1------1---1-
109     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
110     : 10------1----1-
110     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
111     : -01----1----1--
111     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
112     : 1-0----1---1---
112     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
113     : -10-----11-----
113     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
114 (*) : 10---------11--
114     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
115     : 1-0------1---1-
115     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
116     : 01------1----1-
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
117     : -10----1----1--
117     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
118     : 0-1----1---1---
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
119     : -01-----11-----
119     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
120 (*) : 01------1--1---
120     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
121     : 0-1----1-----1-
121     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
122     : 10------1--1---
122     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
123     : -01------1--1--
123     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
124     : 1-0----1-----1-
124     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
125     : -10------1--1--
125     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
300 (*) : 0-1------1-1---
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01----------11-
301     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01----11------
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
303     : 10----------11-
303     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
304     : -10----11------
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
305     : 1-0------1-1---
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~allowed_in(NODE5)', 'sent(NODE2,NODE4)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~sent(NODE1,NODE3) | allowed_in(NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))


=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
132 (*) : 10-------0-1---
132     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
133     : 1-0---------01-
133     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
134     : 01-----01------
134     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
135     : -10---------10-
135     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
136     : 0-1----10------
136     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
137     : -01------1-0---
137     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
312 (*) : 1-0--------10--
312     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
313     : 10-------0---1-
313     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
314     : -10-----1----0-
314     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
315     : 01-----0----1--
315     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
316     : -01----1---0---
316     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
317     : 0-1-----01-----
317     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
342 (*) : 1-0--------1-0-
342     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
343     : 10---------0-1-
343     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
344     : -10-----1---0--
344     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
345     : 01------0---1--
345     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
346     : -01----1-0-----
346     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
347     : 0-1----0-1-----
347     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~allowed_in(node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE3)', 'sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~sent(NODE3,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE2,NODE1,NODE3. allowed_in(NODE3) | ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
144 (*) : 1--------0-1-0-
144     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
145     : 1----------001-
145     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
146     : -1-----01---0--
146     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
147     : -1------0---10-
147     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
148     : --1----100-----
148     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
149     : --1----0-1-0---
149     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~sent(node1,node0)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$1$sent$1$1, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~sent(node1,node0)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'sent(NODE1,NODE2)', '~sent(NODE2,NODE1)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 20 =====================
size : 12
num_suborbits: 2
150 (*) : -0-----1-0-1---
150     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
151     : --0-----1---01-
151     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
152     : 0------011-----
152     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
153     : --0--------110-
153     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
154     : 0------10---1--
154     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
155     : -0-------1-0-1-
155     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
222 (*) : --0-----1--10--
222     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
223     : -0-----1-0---1-
223     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
224     : --0-----1--1-0-
224     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
225     : 0------0-1--1--
225     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
226     : -0-----1---0-1-
226     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
227     : 0-------01--1--
227     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', 'sent(NODE0,NODE2)', '~sent(NODE2,NODE0)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE0) | allowed_in(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --00---1---1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
157     : -0-0----1----1-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
158     : --0-0---11-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
159     : 0---0------11--
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
160     : -0---0-1----1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
161     : 0----0---1---1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
186 (*) : 0----0-1---1---
186     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
187     : 0---0---1----1-
187     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
188     : -0---0--11-----
188     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
189     : -0-0-------11--
189     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
190     : --0-0--1----1--
190     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
191     : --00-----1---1-
191     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
216 (*) : 0---0---1--1---
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
217     : 0----0-1-----1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
218     : -0-0----1--1---
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
219     : -0---0---1--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
220     : --00---1-----1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
221     : --0-0----1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
258 (*) : --00-----1-1---
258     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
259     : -0-0--------11-
259     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
260     : --0-0--11------
260     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
261     : 0---0-------11-
261     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
262     : -0---0-11------
262     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
263     : 0----0---1-1---
263     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE5)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)', '~allowed_in(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. internal(NODE5) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
162 (*) : ---1-0-1---1---
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
163     : ---10---1----1-
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
164     : ----10--11-----
164     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
165     : ---01------11--
165     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
166     : ----01-1----1--
166     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
167     : ---0-1---1---1-
167     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
174 (*) : ---0-1-1---1---
174     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
175     : ---01---1----1-
175     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
176     : ----01--11-----
176     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
177     : ---10------11--
177     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
178     : ----10-1----1--
178     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
179     : ---1-0---1---1-
179     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
246 (*) : ---10---1--1---
246     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
247     : ---1-0-1-----1-
247     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
248     : ---01---1--1---
248     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
249     : ----10---1--1--
249     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
250     : ---0-1-1-----1-
250     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
251     : ----01---1--1--
251     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ---1-0---1-1---
270     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
271     : ---10-------11-
271     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
272     : ----10-11------
272     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
273     : ---01-------11-
273     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
274     : ----01-11------
274     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
275     : ---0-1---1-1---
275     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE5)', 'sent(NODE1,NODE3)', 'sent(NODE2,NODE4)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. internal(NODE5) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE1 | NODE0 = NODE4))


=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
168 (*) : --11---1---1---
168     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
169     : -1-1----1----1-
169     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
170     : --1-1---11-----
170     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
171     : 1---1------11--
171     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
172     : -1---1-1----1--
172     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
173     : 1----1---1---1-
173     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
180 (*) : 1----1-1---1---
180     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
181     : 1---1---1----1-
181     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
182     : -1---1--11-----
182     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
183     : -1-1-------11--
183     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
184     : --1-1--1----1--
184     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
185     : --11-----1---1-
185     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
210 (*) : -1-1----1--1---
210     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
211     : --11---1-----1-
211     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
212     : 1---1---1--1---
212     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
213     : --1-1----1--1--
213     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
214     : 1----1-1-----1-
214     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
215     : -1---1---1--1--
215     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
306 (*) : --11-----1-1---
306     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
307     : -1-1--------11-
307     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
308     : --1-1--11------
308     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
309     : 1---1-------11-
309     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
310     : -1---1-11------
310     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
311     : 1----1---1-1---
311     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'sent(NODE3,NODE5)', 'sent(NODE2,NODE4)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~internal(NODE1) | ~sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE1 | NODE0 = NODE4) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
192 (*) : ----1--1-0-1---
192     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
193     : -----1--1---01-
193     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
194     : ---1---011-----
194     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
195     : -----1-----110-
195     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
196     : ---1---10---1--
196     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
197     : ----1----1-0-1-
197     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
234 (*) : -----1--1--10--
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
235     : ----1--1-0---1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
236     : -----1--1--1-0-
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
237     : ---1---0-1--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
238     : ----1--1---0-1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
239     : ---1----01--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)', 'sent(NODE2,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE3', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE2,NODE3) | ((NODE0 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
198 (*) : ---0---1-0-1---
198     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
199     : ---0----1---01-
199     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
200     : ----0--011-----
200     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
201     : ----0------110-
201     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
202     : -----0-10---1--
202     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
203     : -----0---1-0-1-
203     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
204 (*) : -----0-1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
205     : ----0---1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
206     : -----0-011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
207     : ---0-------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
208     : ----0--10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
209     : ---0-----1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
228 (*) : ----0---1--10--
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
229     : -----0-1-0---1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
230     : ---0----1--1-0-
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
231     : -----0-0-1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
232     : ---0---1---0-1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
233     : ----0---01--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~internal(NODE4)', 'sent(NODE1,NODE3)', '~sent(NODE2,NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE2,NODE1,NODE3. ~sent(NODE0,NODE2) | internal(NODE4) | ~sent(NODE1,NODE3) | sent(NODE2,NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
252 (*) : --0----0---1-0-
252     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
253     : -0------0--0-1-
253     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
254     : --0-----10--0--
254     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
255     : 0-------0--01--
255     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
256     : -0-----1-0--0--
256     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
257     : 0------0-1---0-
257     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$1, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : --00-------1-0-
264     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
265     : -0-0-------0-1-
265     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
266     : --0-0---1---0--
266     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
267     : 0---0---0---1--
267     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
268     : -0---0-1-0-----
268     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
269     : 0----0-0-1-----
269     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node0)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE2)', '~allowed_in(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE2) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-1-----1-0-
276     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
277     : ---01------0-1-
277     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
278     : ----01--1---0--
278     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
279     : ---10---0---1--
279     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
280     : ----10-1-0-----
280     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
281     : ---1-0-0-1-----
281     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', '~internal(NODE2)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
282 (*) : -----1-0---1-0-
282     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
283     : ----1---0--0-1-
283     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
284     : -----1--10--0--
284     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
285     : ---1----0--01--
285     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
286     : ----1--1-0--0--
286     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
287     : ---1---0-1---0-
287     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$1, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node2)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
288 (*) : ----0--0---1-0-
288     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
289     : -----0--0--0-1-
289     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
290     : ---0----10--0--
290     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
291     : -----0--0--01--
291     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
292     : ---0---1-0--0--
292     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
293     : ----0--0-1---0-
293     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~sent(node0,node1)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE0)', 'sent(NODE0,NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : ---00------1-0-
294     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
295     : ---0-0-----0-1-
295     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
296     : ---00---1---0--
296     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
297     : ----00--0---1--
297     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
298     : ---0-0-1-0-----
298     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
299     : ----00-0-1-----
299     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE0)', '~internal(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
318 (*) : 1---1----0-1---
318     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
319     : 1----1------01-
319     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
320     : -1-1---01------
320     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
321     : -1---1------10-
321     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
322     : --11---10------
322     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
323     : --1-1----1-0---
323     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
324 (*) : 1----1-----10--
324     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
325     : 1---1----0---1-
325     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
326     : -1---1--1----0-
326     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
327     : -1-1---0----1--
327     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
328     : --1-1--1---0---
328     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
329     : --11----01-----
329     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
330 (*) : 1----1-----1-0-
330     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
331     : 1---1------0-1-
331     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
332     : -1---1--1---0--
332     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
333     : -1-1----0---1--
333     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
334     : --1-1--1-0-----
334     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
335     : --11---0-1-----
335     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE4)', 'internal(NODE1)', 'sent(NODE2,NODE3)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE4,NODE0,NODE2,NODE1,NODE3. sent(NODE1,NODE4) | ~internal(NODE1) | ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
336 (*) : 1---0------1-0-
336     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
337     : 1----0-----0-1-
337     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
338     : -1-0----1---0--
338     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
339     : -1---0--0---1--
339     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
340     : --10---1-0-----
340     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
341     : --1-0--0-1-----
341     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE1)', '~sent(NODE2,NODE1)', 'sent(NODE1,NODE2)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE1. internal(NODE1) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 4 =====================
size : 3
num_suborbits: 1
24 (*) : 1--------0--0--
24     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
25     : -1-----0-----0-
25     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
26     : --1-----0--0---
26     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1------1--
6     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
7     : 0---1----1-----
7     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
8     : -0---1-------1-
8     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
9     : -0-1---1-------
9     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
10     : --0-1------1---
10     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
11     : --01----1------
11     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
12 (*) : 0----1--1------
12     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
13     : 0---1--1-------
13     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
14     : -0---1-----1---
14     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
15     : -0-1-----1-----
15     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
16     : --0-1--------1-
16     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
17     : --01--------1--
17     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE2,NODE0,NODE3,NODE1. allowed_in(NODE3) | ~internal(NODE0) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : ----11-------1-
18     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
19     : ----11-----1---
19     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
20     : ---1-1------1--
20     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
21     : ---1-1--1------
21     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
22     : ---11----1-----
22     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
23     : ---11--1-------
23     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
27 (*) : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : 1----0------1--
28     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
29     : -1-0---1-------
29     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
30     : -1---0-------1-
30     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
31     : --10----1------
31     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
32     : --1-0------1---
32     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
39 (*) : 1----0--1------
39     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
40     : 1---0--1-------
40     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
41     : -1---0-----1---
41     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
42     : -1-0-----1-----
42     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
43     : --1-0--------1-
43     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
44     : --10--------1--
44     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
33 (*) : 1---0-------0--
33     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
34     : 1----0---0-----
34     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
35     : -1-0---------0-
35     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
36     : -1---0-0-------
36     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
37     : --10-------0---
37     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
38     : --1-0---0------
38     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE2,NODE0,NODE1. internal(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 3
num_suborbits: 1
45 (*) : 1---00---------
45     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
46     : -1-0-0---------
46     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
47     : --100----------
47     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
48 (*) : 1-1---------1--
48     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
49     : 11-------1-----
49     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
50     : -11----------1-
50     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
51     : 11-----1-------
51     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
52     : -11--------1---
52     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
53     : 1-1-----1------
53     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~allowed_in(NODE1) | ~sent(NODE1,NODE0) | ~allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
54 (*) : 1-1------0-----
54     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
55     : 11----------0--
55     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
56     : -11----0-------
56     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
57     : 11-----------0-
57     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
58     : -11-----0------
58     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
59     : 1-1--------0---
59     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE2,NODE0,NODE1. ~allowed_in(NODE1) | ~allowed_in(NODE0) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 10 =====================
size : 3
num_suborbits: 1
60 (*) : 1-1-0----------
60     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
61     : 11---0---------
61     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
62     : -110-----------
62     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 11 =====================
size : 1
num_suborbits: 1
63 (*) : 111------------
63     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 12 =====================
size : 12
num_suborbits: 2
64 (*) : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : -0--0------1---
65     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
66     : --0--0------1--
66     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
67     : 0--0----1------
67     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
68     : -0--0----1-----
68     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
69     : 0--0---1-------
69     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
82 (*) : -0--0--------1-
82     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
83     : --0--0-----1---
83     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
84     : 0--0--------1--
84     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
85     : --0--0--1------
85     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
86     : 0--0-----1-----
86     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
87     : -0--0--1-------
87     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 13 =====================
size : 6
num_suborbits: 1
70 (*) : -00----------1-
70     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
71     : -00--------1---
71     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
72     : 0-0---------1--
72     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
73     : 0-0-----1------
73     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
74     : 00-------1-----
74     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
75     : 00-----1-------
75     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 14 =====================
size : 6
num_suborbits: 1
76 (*) : ----00-------1-
76     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
77     : ----00-----1---
77     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
78     : ---0-0------1--
78     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
79     : ---0-0--1------
79     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
80     : ---00----1-----
80     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
81     : ---00--1-------
81     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11---1-
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
89     : -------1---11--
89     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
90 (*) : ---------1--11-
90     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
91     : ---------1-11--
91     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
92     : -------1----11-
92     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
93     : -------11----1-
93     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
94     : --------11-1---
94     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
95     : -------11--1---
95     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))
qcost : 21




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : -1---------110-
96     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
97     : --1------1-0-1-
97     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : 1-------1---01-
98     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
99     : --1----10---1--
99     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : 1------1-0-1---
100     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
101     : -1-----011-----
101     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
102 (*) : 1----------110-
102     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
103     : 1--------1-0-1-
103     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
104     : -1------1---01-
104     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
105     : -1-----10---1--
105     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
106     : --1----1-0-1---
106     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
107     : --1----011-----
107     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
126 (*) : -1------1--10--
126     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
127     : --1----1-0---1-
127     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
128     : 1-------1--1-0-
128     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
129     : --1----0-1--1--
129     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
130     : 1------1---0-1-
130     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
131     : -1------01--1--
131     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
138 (*) : 1-------1--10--
138     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
139     : 1------1-0---1-
139     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
140     : -1------1--1-0-
140     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
141     : -1-----0-1--1--
141     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
142     : --1----1---0-1-
142     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
143     : --1-----01--1--
143     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 24
quantified form : forall NODE4,NODE0,NODE2,NODE1,NODE3. ~sent(NODE1,NODE3) | sent(NODE3,NODE1) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))
qcost : 29




=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
108 (*) : 01---------11--
108     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
109     : 0-1------1---1-
109     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
110     : 10------1----1-
110     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
111     : -01----1----1--
111     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
112     : 1-0----1---1---
112     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
113     : -10-----11-----
113     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
114 (*) : 10---------11--
114     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
115     : 1-0------1---1-
115     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
116     : 01------1----1-
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
117     : -10----1----1--
117     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
118     : 0-1----1---1---
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
119     : -01-----11-----
119     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
120 (*) : 01------1--1---
120     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
121     : 0-1----1-----1-
121     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
122     : 10------1--1---
122     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
123     : -01------1--1--
123     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
124     : 1-0----1-----1-
124     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
125     : -10------1--1--
125     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
300 (*) : 0-1------1-1---
300     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01----------11-
301     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01----11------
302     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
303     : 10----------11-
303     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
304     : -10----11------
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
305     : 1-0------1-1---
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~sent(NODE1,NODE3) | allowed_in(NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3))
qcost : 34




=== Prime Orbit 18 =====================
size : 18
num_suborbits: 3
132 (*) : 10-------0-1---
132     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
133     : 1-0---------01-
133     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
134     : 01-----01------
134     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
135     : -10---------10-
135     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
136     : 0-1----10------
136     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
137     : -01------1-0---
137     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
312 (*) : 1-0--------10--
312     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
313     : 10-------0---1-
313     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
314     : -10-----1----0-
314     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
315     : 01-----0----1--
315     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
316     : -01----1---0---
316     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
317     : 0-1-----01-----
317     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
342 (*) : 1-0--------1-0-
342     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
343     : 10---------0-1-
343     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
344     : -10-----1---0--
344     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
345     : 01------0---1--
345     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
346     : -01----1-0-----
346     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
347     : 0-1----0-1-----
347     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE4,NODE0,NODE2,NODE1,NODE3. allowed_in(NODE3) | ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
144 (*) : 1--------0-1-0-
144     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
145     : 1----------001-
145     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
146     : -1-----01---0--
146     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
147     : -1------0---10-
147     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
148     : --1----100-----
148     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
149     : --1----0-1-0---
149     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 20 =====================
size : 12
num_suborbits: 2
150 (*) : -0-----1-0-1---
150     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
151     : --0-----1---01-
151     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
152     : 0------011-----
152     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
153     : --0--------110-
153     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
154     : 0------10---1--
154     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
155     : -0-------1-0-1-
155     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
222 (*) : --0-----1--10--
222     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
223     : -0-----1-0---1-
223     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
224     : --0-----1--1-0-
224     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
225     : 0------0-1--1--
225     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
226     : -0-----1---0-1-
226     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
227     : 0-------01--1--
227     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE0) | allowed_in(NODE2) | ((NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
156 (*) : --00---1---1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
157     : -0-0----1----1-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
158     : --0-0---11-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
159     : 0---0------11--
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
160     : -0---0-1----1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
161     : 0----0---1---1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
186 (*) : 0----0-1---1---
186     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
187     : 0---0---1----1-
187     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
188     : -0---0--11-----
188     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
189     : -0-0-------11--
189     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
190     : --0-0--1----1--
190     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
191     : --00-----1---1-
191     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
216 (*) : 0---0---1--1---
216     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
217     : 0----0-1-----1-
217     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
218     : -0-0----1--1---
218     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
219     : -0---0---1--1--
219     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
220     : --00---1-----1-
220     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
221     : --0-0----1--1--
221     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
258 (*) : --00-----1-1---
258     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
259     : -0-0--------11-
259     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
260     : --0-0--11------
260     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
261     : 0---0-------11-
261     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
262     : -0---0-11------
262     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
263     : 0----0---1-1---
263     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. internal(NODE5) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3))
qcost : 34




=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
162 (*) : ---1-0-1---1---
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
163     : ---10---1----1-
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
164     : ----10--11-----
164     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
165     : ---01------11--
165     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
166     : ----01-1----1--
166     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
167     : ---0-1---1---1-
167     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
174 (*) : ---0-1-1---1---
174     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
175     : ---01---1----1-
175     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
176     : ----01--11-----
176     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
177     : ---10------11--
177     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
178     : ----10-1----1--
178     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
179     : ---1-0---1---1-
179     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
246 (*) : ---10---1--1---
246     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
247     : ---1-0-1-----1-
247     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
248     : ---01---1--1---
248     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
249     : ----10---1--1--
249     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
250     : ---0-1-1-----1-
250     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
251     : ----01---1--1--
251     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
270 (*) : ---1-0---1-1---
270     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
271     : ---10-------11-
271     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
272     : ----10-11------
272     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
273     : ---01-------11-
273     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
274     : ----01-11------
274     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
275     : ---0-1---1-1---
275     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. internal(NODE5) | ~sent(NODE1,NODE3) | ~sent(NODE2,NODE4) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE4 | NODE0 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE3 | NODE2 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE1 | NODE0 = NODE4))
qcost : 34




=== Prime Orbit 23 =====================
size : 24
num_suborbits: 4
168 (*) : --11---1---1---
168     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
169     : -1-1----1----1-
169     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
170     : --1-1---11-----
170     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
171     : 1---1------11--
171     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
172     : -1---1-1----1--
172     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
173     : 1----1---1---1-
173     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
180 (*) : 1----1-1---1---
180     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
181     : 1---1---1----1-
181     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
182     : -1---1--11-----
182     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
183     : -1-1-------11--
183     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
184     : --1-1--1----1--
184     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
185     : --11-----1---1-
185     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
210 (*) : -1-1----1--1---
210     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
211     : --11---1-----1-
211     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
212     : 1---1---1--1---
212     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
213     : --1-1----1--1--
213     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
214     : 1----1-1-----1-
214     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
215     : -1---1---1--1--
215     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
306 (*) : --11-----1-1---
306     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
307     : -1-1--------11-
307     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
308     : --1-1--11------
308     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
309     : 1---1-------11-
309     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
310     : -1---1-11------
310     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
311     : 1----1---1-1---
311     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE4,NODE0,NODE5,NODE2,NODE1,NODE3. ~internal(NODE1) | ~sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ((NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE1 | NODE0 = NODE4) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
192 (*) : ----1--1-0-1---
192     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
193     : -----1--1---01-
193     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
194     : ---1---011-----
194     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
195     : -----1-----110-
195     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
196     : ---1---10---1--
196     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
197     : ----1----1-0-1-
197     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
234 (*) : -----1--1--10--
234     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
235     : ----1--1-0---1-
235     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
236     : -----1--1--1-0-
236     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
237     : ---1---0-1--1--
237     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
238     : ----1--1---0-1-
238     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
239     : ---1----01--1--
239     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE2,NODE0,NODE3,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | ~sent(NODE2,NODE3) | ((NODE0 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
198 (*) : ---0---1-0-1---
198     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
199     : ---0----1---01-
199     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
200     : ----0--011-----
200     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
201     : ----0------110-
201     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
202     : -----0-10---1--
202     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
203     : -----0---1-0-1-
203     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
204 (*) : -----0-1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
205     : ----0---1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
206     : -----0-011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
207     : ---0-------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
208     : ----0--10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
209     : ---0-----1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
228 (*) : ----0---1--10--
228     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
229     : -----0-1-0---1-
229     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
230     : ---0----1--1-0-
230     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
231     : -----0-0-1--1--
231     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
232     : ---0---1---0-1-
232     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
233     : ----0---01--1--
233     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
240 (*) : ---0----1--10--
240     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
241     : ---0---1-0---1-
241     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
242     : ----0---1--1-0-
242     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
243     : ----0--0-1--1--
243     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
244     : -----0-1---0-1-
244     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
245     : -----0--01--1--
245     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 24
quantified form : forall NODE4,NODE0,NODE2,NODE1,NODE3. ~sent(NODE0,NODE2) | internal(NODE4) | ~sent(NODE1,NODE3) | sent(NODE2,NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 29




=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
252 (*) : --0----0---1-0-
252     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
253     : -0------0--0-1-
253     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
254     : --0-----10--0--
254     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
255     : 0-------0--01--
255     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
256     : -0-----1-0--0--
256     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
257     : 0------0-1---0-
257     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
264 (*) : --00-------1-0-
264     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
265     : -0-0-------0-1-
265     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
266     : --0-0---1---0--
266     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
267     : 0---0---0---1--
267     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
268     : -0---0-1-0-----
268     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
269     : 0----0-0-1-----
269     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE2) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
276 (*) : ---0-1-----1-0-
276     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
277     : ---01------0-1-
277     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
278     : ----01--1---0--
278     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
279     : ---10---0---1--
279     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
280     : ----10-1-0-----
280     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
281     : ---1-0-0-1-----
281     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
282 (*) : -----1-0---1-0-
282     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
283     : ----1---0--0-1-
283     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
284     : -----1--10--0--
284     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
285     : ---1----0--01--
285     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
286     : ----1--1-0--0--
286     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
287     : ---1---0-1---0-
287     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
288 (*) : ----0--0---1-0-
288     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
289     : -----0--0--0-1-
289     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
290     : ---0----10--0--
290     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
291     : -----0--0--01--
291     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
292     : ---0---1-0--0--
292     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
293     : ----0--0-1---0-
293     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
294 (*) : ---00------1-0-
294     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
295     : ---0-0-----0-1-
295     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
296     : ---00---1---0--
296     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
297     : ----00--0---1--
297     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
298     : ---0-0-1-0-----
298     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
299     : ----00-0-1-----
299     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. sent(NODE1,NODE0) | internal(NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
318 (*) : 1---1----0-1---
318     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
319     : 1----1------01-
319     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
320     : -1-1---01------
320     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
321     : -1---1------10-
321     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
322     : --11---10------
322     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
323     : --1-1----1-0---
323     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
324 (*) : 1----1-----10--
324     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
325     : 1---1----0---1-
325     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
326     : -1---1--1----0-
326     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
327     : -1-1---0----1--
327     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
328     : --1-1--1---0---
328     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
329     : --11----01-----
329     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
330 (*) : 1----1-----1-0-
330     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
331     : 1---1------0-1-
331     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
332     : -1---1--1---0--
332     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
333     : -1-1----0---1--
333     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
334     : --1-1--1-0-----
334     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
335     : --11---0-1-----
335     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE4,NODE0,NODE2,NODE1,NODE3. sent(NODE1,NODE4) | ~internal(NODE1) | ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE0 = NODE1 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
336 (*) : 1---0------1-0-
336     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
337     : 1----0-----0-1-
337     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
338     : -1-0----1---0--
338     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
339     : -1---0--0---1--
339     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
340     : --10---1-0-----
340     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
341     : --1-0--0-1-----
341     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE2,NODE0,NODE1. internal(NODE1) | sent(NODE2,NODE1) | ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10



[QRM NOTE]: Time elapsed since start: 8.926 seconds

[QRM NOTE]: Time elapsed since last: 1.634 seconds

[QRM NOTE]: Peak memory: 2333145 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]


Before reduction : 
 pending  : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4]


Solution : [0, 4] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1]


New level: 2
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 608), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, 768), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1]


Solution : [0, 4, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, 768), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Decide 15 with phase True at level 2

After decision at level 2
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15]


New level: 3
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, 768), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15]


Solution : [0, 4, 1, 15] has cost 31.


Decide in level 3 among pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]


New level: 4
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, 0), (31, 4), (32, 24), (33, 4)]

Covered at level 4 : {30}

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, 0), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 4 among pending : [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]


New level: 5
 pending : [2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]


Before reduction : 
 pending  : [2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, 0), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 5 : {10, 11}

After reduction : 
 pending  : [2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]


Before reduction : 
 pending  : [2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, 0), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7]


Solution : [0, 4, 1, 15, 12, 7] has cost 46.


Decide in level 5 among pending : [2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


New level: 6
 pending : [3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 6 : {3, 13, 20, 24, 26, 29}

After reduction : 
 pending  : [5, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [5, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Solution : [0, 4, 1, 15, 12, 7, 2] has cost 59.


Decide in level 6 among pending : [5, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 5]


New level: 7
 pending : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 5]


Before reduction : 
 pending  : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 5]


Solution : [0, 4, 1, 15, 12, 7, 2, 5] has cost 72.


Before backtrack at level 7
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 2, 5]

After backtrack at level 7
 pending : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Solution : [0, 4, 1, 15, 12, 7, 2] has cost 59.


Decide in level 7 among pending : [6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 8]


New level: 8
 pending : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 8]


Before reduction : 
 pending  : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 8]


Solution : [0, 4, 1, 15, 12, 7, 2, 8] has cost 65.


Before backtrack at level 8
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 2, 8]

After backtrack at level 8
 pending : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Solution : [0, 4, 1, 15, 12, 7, 2] has cost 59.


Decide in level 8 among pending : [6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 14]


New level: 9
 pending : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 14]


Before reduction : 
 pending  : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 14]


Solution : [0, 4, 1, 15, 12, 7, 2, 14] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 2, 14]

After backtrack at level 9
 pending : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Solution : [0, 4, 1, 15, 12, 7, 2] has cost 59.


Decide in level 9 among pending : [6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 6]


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 6]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 6]


Solution : [0, 4, 1, 15, 12, 7, 2, 6] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 2, 6]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

Essensial at level 10 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 2, 9]


Solution : [0, 4, 1, 15, 12, 7, 2, 9] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 2, 9]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33]
 solution : [0, 4, 1, 15, 12, 7, 2]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6]
 solution : [0, 4, 1, 15, 12, 7, 2]

After backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 2]

After backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 2]


Before backtrack at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 2]

After backtrack at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7]


Solution : [0, 4, 1, 15, 12, 7] has cost 46.


Decide in level 6 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 27 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]


New level: 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31, 32, 33, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, 0), (29, 8), (30, -1), (31, 0), (32, 16), (33, 0)]

Covered at level 7 : {33, 28, 31}

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, 0), (29, 8), (30, -1), (31, 0), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 16), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]


Solution : [0, 4, 1, 15, 12, 7, 27] has cost 56.


Decide in level 7 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 3, 13, 20, 24, 26, 29, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 16), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


New level: 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 8 : {13, 20, 24, 26, 29}

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Solution : [0, 4, 1, 15, 12, 7, 27, 3] has cost 62.


Decide in level 8 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]


New level: 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 5, 6, 8, 9, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]


Solution : [0, 4, 1, 15, 12, 7, 27, 3, 14] has cost 68.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Solution : [0, 4, 1, 15, 12, 7, 27, 3] has cost 62.


Decide in level 9 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 5, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]


Solution : [0, 4, 1, 15, 12, 7, 27, 3, 8] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Solution : [0, 4, 1, 15, 12, 7, 27, 3] has cost 62.


Decide in level 10 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]


New level: 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]


Solution : [0, 4, 1, 15, 12, 7, 27, 3, 5] has cost 75.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Solution : [0, 4, 1, 15, 12, 7, 27, 3] has cost 62.


Decide in level 11 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 6, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]


Solution : [0, 4, 1, 15, 12, 7, 27, 3, 9] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]

After backtrack at level 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 6]


Solution : [0, 4, 1, 15, 12, 7, 27, 3, 6] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 3, 6]

After backtrack at level 12
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

After backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

After backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

After backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Before backtrack at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]

After backtrack at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 13, 20, 24, 26, 29, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 13, 20, 24, 26, 29, 14]
 solution : [0, 4, 1, 15, 12, 7, 27]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 13, 20, 24, 26, 29, 14]
 solution : [0, 4, 1, 15, 12, 7, 27]

Essensial at level 8 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 8 : {24, 26, 20, 29}

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Solution : [0, 4, 1, 15, 12, 7, 27, 13] has cost 62.


Decide in level 8 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 5, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]


New level: 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]


Solution : [0, 4, 1, 15, 12, 7, 27, 13, 5] has cost 75.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]

After backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Solution : [0, 4, 1, 15, 12, 7, 27, 13] has cost 62.


Decide in level 9 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]


New level: 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]


Solution : [0, 4, 1, 15, 12, 7, 27, 13, 8] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]

After backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Solution : [0, 4, 1, 15, 12, 7, 27, 13] has cost 62.


Decide in level 10 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]


New level: 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]


Solution : [0, 4, 1, 15, 12, 7, 27, 13, 14] has cost 68.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]

After backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Solution : [0, 4, 1, 15, 12, 7, 27, 13] has cost 62.


Decide in level 11 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 9, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]


Solution : [0, 4, 1, 15, 12, 7, 27, 13, 6] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]

After backtrack at level 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 9]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 16, 17, 18, 19, 21, 22, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 9]


Solution : [0, 4, 1, 15, 12, 7, 27, 13, 9] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 27, 13, 9]

After backtrack at level 12
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]


Before backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 27, 13]

After backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]


Before backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7, 27]

After backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7, 27]


Invert decision for 27 at level 6


New level: 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7]


Solution : [0, 4, 1, 15, 12, 7] has cost 46.


Decide in level 7 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 13, 20, 24, 26, 29, 5, 28, 31, 33, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7, 13]


New level: 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 20, 24, 26, 29, 5, 28, 31, 33, 3]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 8 : {3, 20, 24, 26, 29}

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Solution : [0, 4, 1, 15, 12, 7, 13] has cost 52.


Decide in level 8 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 14, 8, 5, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 14]


New level: 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 14]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 5, 6, 8, 9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 14]


Solution : [0, 4, 1, 15, 12, 7, 13, 14] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 13, 14]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Solution : [0, 4, 1, 15, 12, 7, 13] has cost 52.


Decide in level 9 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 8, 5, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 8]


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 8]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 5, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 8]


Solution : [0, 4, 1, 15, 12, 7, 13, 8] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 13, 8]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Solution : [0, 4, 1, 15, 12, 7, 13] has cost 52.


Decide in level 10 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 5, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 5]


New level: 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 5]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 5]


Solution : [0, 4, 1, 15, 12, 7, 13, 5] has cost 65.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 13, 5]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Solution : [0, 4, 1, 15, 12, 7, 13] has cost 52.


Decide in level 11 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 9]


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 6, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 9]


Solution : [0, 4, 1, 15, 12, 7, 13, 9] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 13, 9]

After backtrack at level 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 6, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 13, 6]


Solution : [0, 4, 1, 15, 12, 7, 13, 6] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 13, 6]

After backtrack at level 12
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 13]

After backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 13]

After backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5]
 solution : [0, 4, 1, 15, 12, 7, 13]

After backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8]
 solution : [0, 4, 1, 15, 12, 7, 13]


Before backtrack at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8]
 solution : [0, 4, 1, 15, 12, 7, 13]

After backtrack at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 20, 24, 26, 29, 3, 14]
 solution : [0, 4, 1, 15, 12, 7, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 20, 24, 26, 29, 3, 14]
 solution : [0, 4, 1, 15, 12, 7]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 20, 24, 26, 29, 3, 14]
 solution : [0, 4, 1, 15, 12, 7]

Essensial at level 8 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 8 : {24, 26, 20, 29}

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Solution : [0, 4, 1, 15, 12, 7, 3] has cost 52.


Decide in level 8 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 5, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 5]


New level: 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 5]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 6, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 5]


Solution : [0, 4, 1, 15, 12, 7, 3, 5] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 3, 5]

After backtrack at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Solution : [0, 4, 1, 15, 12, 7, 3] has cost 52.


Decide in level 9 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 8]


New level: 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 8]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 6, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 8]


Solution : [0, 4, 1, 15, 12, 7, 3, 8] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 3, 8]

After backtrack at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Solution : [0, 4, 1, 15, 12, 7, 3] has cost 52.


Decide in level 10 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 14]


New level: 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 14]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 14]


Solution : [0, 4, 1, 15, 12, 7, 3, 14] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 3, 14]

After backtrack at level 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3]


Solution : [0, 4, 1, 15, 12, 7, 3] has cost 52.


Decide in level 11 among pending : [6, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 6]


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 9, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 6]


Solution : [0, 4, 1, 15, 12, 7, 3, 6] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 3, 6]

After backtrack at level 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 7, 3]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 21, 22, 23, 25, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 7, 3, 9]


Solution : [0, 4, 1, 15, 12, 7, 3, 9] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 7, 3, 9]

After backtrack at level 12
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33]
 solution : [0, 4, 1, 15, 12, 7, 3]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6]
 solution : [0, 4, 1, 15, 12, 7, 3]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14]
 solution : [0, 4, 1, 15, 12, 7, 3]

After backtrack at level 9
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 3]


Before backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8]
 solution : [0, 4, 1, 15, 12, 7, 3]

After backtrack at level 8
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7]


Before backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15, 12, 7]

After backtrack at level 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13]
 solution : [0, 4, 1, 15, 12, 7]


Before backtrack at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13]
 solution : [0, 4, 1, 15, 12, 7]

After backtrack at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27]
 solution : [0, 4, 1, 15, 12, 7]


Before backtrack at level 5
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27]
 solution : [0, 4, 1, 15, 12, 7]

After backtrack at level 5
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 5 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 28, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]


New level: 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 27, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, 0), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 6 : {27}

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, 0), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28]


Solution : [0, 4, 1, 15, 12, 28] has cost 51.


Decide in level 6 among pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 14, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 14 with phase True at level 6

After decision at level 6
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


New level: 7
 pending : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 21, 22, 23, 25, 32, 31, 33, 6, 8, 3, 20, 24, 26, 29, 5, 13, 10, 11, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

Covered at level 7 : {33, 5, 6, 8, 9, 10, 11, 16, 19, 25, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 3, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 3, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 3, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Solution : [0, 4, 1, 15, 12, 28, 14] has cost 57.


Decide in level 7 among pending : [17, 18, 21, 22, 23, 32, 3, 20, 24, 26, 29, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 3]


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 8 : {32, 2, 13, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 3]


Solution : [0, 4, 1, 15, 12, 28, 14, 3] has cost 63.


Before backtrack at level 8
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 14, 3]

After backtrack at level 8
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Solution : [0, 4, 1, 15, 12, 28, 14] has cost 57.


Decide in level 8 among pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 13]


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 2, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 13]


Solution : [0, 4, 1, 15, 12, 28, 14, 13] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 14, 13]

After backtrack at level 9
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 2]
 solution : [0, 4, 1, 15, 12, 28, 14]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 14, 2]


Solution : [0, 4, 1, 15, 12, 28, 14, 2] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 14, 2]

After backtrack at level 9
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before backtrack at level 8
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 28, 14]

After backtrack at level 8
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 28, 14]


Before backtrack at level 7
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 28, 14]

After backtrack at level 7
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28, 14]


Invert decision for 14 at level 6


New level: 7
 pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28]


Solution : [0, 4, 1, 15, 12, 28] has cost 51.


Decide in level 7 among pending : [2, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28, 2]


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 3]
 solution : [0, 4, 1, 15, 12, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 8 : {3, 13, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 2]


Solution : [0, 4, 1, 15, 12, 28, 2] has cost 64.


Before backtrack at level 8
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 2]

After backtrack at level 8
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28]


Solution : [0, 4, 1, 15, 12, 28] has cost 51.


Decide in level 8 among pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 8, 5, 10, 11, 20, 24, 26, 29, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

Covered at level 9 : {33, 5, 6, 9, 10, 11, 16, 19, 25, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]


Solution : [0, 4, 1, 15, 12, 28, 8] has cost 57.


Decide in level 9 among pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Decide 13 with phase True at level 9

After decision at level 9
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8, 13]


New level: 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 3, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 13]


Solution : [0, 4, 1, 15, 12, 28, 8, 13] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 8, 13]

After backtrack at level 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8, 13]


Invert decision for 13 at level 9


New level: 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3]
 solution : [0, 4, 1, 15, 12, 28, 8]

Essensial at level 10 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 8, 3]


Solution : [0, 4, 1, 15, 12, 28, 8, 3] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 8, 3]

After backtrack at level 10
 pending : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 28, 8]


Before backtrack at level 9
 pending : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 28, 8]

After backtrack at level 9
 pending : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28]


Solution : [0, 4, 1, 15, 12, 28] has cost 51.


Decide in level 9 among pending : [3, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28, 3]


New level: 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11, 13]
 solution : [0, 4, 1, 15, 12, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 10 : {13, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Solution : [0, 4, 1, 15, 12, 28, 3] has cost 57.


Decide in level 10 among pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 5, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 5]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 5]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 9, 10, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 5]


Solution : [0, 4, 1, 15, 12, 28, 3, 5] has cost 70.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 3, 5]

After backtrack at level 11
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Solution : [0, 4, 1, 15, 12, 28, 3] has cost 57.


Decide in level 11 among pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 12 : {33, 11, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]


Solution : [0, 4, 1, 15, 12, 28, 3, 10] has cost 62.


Before backtrack at level 12
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]

After backtrack at level 12
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Solution : [0, 4, 1, 15, 12, 28, 3] has cost 57.


Decide in level 12 among pending : [17, 18, 21, 22, 23, 32, 9, 16, 19, 25, 6, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 9]


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 9]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 9]


Solution : [0, 4, 1, 15, 12, 28, 3, 9] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 3, 9]

After backtrack at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]

Essensial at level 13 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 3, 6]


Solution : [0, 4, 1, 15, 12, 28, 3, 6] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 3, 6]

After backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 3]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 28, 3]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 28, 3]


Before backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 28, 3]

After backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 20, 24, 26, 29, 13, 5]
 solution : [0, 4, 1, 15, 12, 28, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 20, 24, 26, 29, 13, 5]
 solution : [0, 4, 1, 15, 12, 28]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 20, 24, 26, 29, 13, 5]
 solution : [0, 4, 1, 15, 12, 28]

Essensial at level 10 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 10 : {24, 26, 20, 29}

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 5]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 5]
 solution : [0, 4, 1, 15, 12, 28, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 5]
 solution : [0, 4, 1, 15, 12, 28, 13]


Solution : [0, 4, 1, 15, 12, 28, 13] has cost 57.


Decide in level 10 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 10 with phase True at level 10

After decision at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]


New level: 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 11 : {33, 11, 31}

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]


Solution : [0, 4, 1, 15, 12, 28, 13, 10] has cost 62.


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 10]


Invert decision for 10 at level 10


New level: 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Solution : [0, 4, 1, 15, 12, 28, 13] has cost 57.


Decide in level 11 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 5, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 5]


New level: 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 5]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 5]


Solution : [0, 4, 1, 15, 12, 28, 13, 5] has cost 70.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 13, 5]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Solution : [0, 4, 1, 15, 12, 28, 13] has cost 57.


Decide in level 12 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 6]


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 6]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 6]


Solution : [0, 4, 1, 15, 12, 28, 13, 6] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 13, 6]

After backtrack at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]

Essensial at level 13 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 28, 13, 9]


Solution : [0, 4, 1, 15, 12, 28, 13, 9] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 28, 13, 9]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 28, 13]

After backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before backtrack at level 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 28, 13]

After backtrack at level 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5]
 solution : [0, 4, 1, 15, 12, 28, 13]


Before backtrack at level 10
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5]
 solution : [0, 4, 1, 15, 12, 28, 13]

After backtrack at level 10
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10]
 solution : [0, 4, 1, 15, 12, 28]


Before backtrack at level 9
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10]
 solution : [0, 4, 1, 15, 12, 28]

After backtrack at level 9
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3]
 solution : [0, 4, 1, 15, 12, 28]


Before backtrack at level 8
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3]
 solution : [0, 4, 1, 15, 12, 28]

After backtrack at level 8
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8]
 solution : [0, 4, 1, 15, 12, 28]


Before backtrack at level 7
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8]
 solution : [0, 4, 1, 15, 12, 28]

After backtrack at level 7
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2]
 solution : [0, 4, 1, 15, 12, 28]


Before backtrack at level 6
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2]
 solution : [0, 4, 1, 15, 12, 28]

After backtrack at level 6
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 6 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 6 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 5, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 5 with phase True at level 6

After decision at level 6
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12, 5]


New level: 7
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12, 5]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 13, 20, 24, 26, 29, 10, 3, 8, 2, 27, 14]
 solution : [0, 4, 1, 15, 12, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 0), (32, 6), (33, 0)]

Covered at level 7 : {33, 6, 8, 9, 10, 11, 14, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 13, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 13, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 0), (32, 6), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 13, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]


Solution : [0, 4, 1, 15, 12, 5] has cost 54.


Decide in level 7 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 13, 20, 24, 26, 29, 3, 2, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 13]


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 8 : {32, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 13]


Solution : [0, 4, 1, 15, 12, 5, 13] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 4, 1, 15, 12, 5, 13]

After backtrack at level 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]


Solution : [0, 4, 1, 15, 12, 5] has cost 54.


Decide in level 8 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 3, 2, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Decide 3 with phase True at level 8

After decision at level 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 3]


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 3]


Solution : [0, 4, 1, 15, 12, 5, 3] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 5, 3]

After backtrack at level 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5, 3]


Invert decision for 3 at level 8


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 2, 27]
 solution : [0, 4, 1, 15, 12, 5]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 9 : {32, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 5, 2]


Solution : [0, 4, 1, 15, 12, 5, 2] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 4, 1, 15, 12, 5, 2]

After backtrack at level 9
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27]
 solution : [0, 4, 1, 15, 12, 5]


Before backtrack at level 8
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27]
 solution : [0, 4, 1, 15, 12, 5]

After backtrack at level 8
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3]
 solution : [0, 4, 1, 15, 12, 5]


Before backtrack at level 7
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3]
 solution : [0, 4, 1, 15, 12, 5]

After backtrack at level 7
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12, 5]


Invert decision for 5 at level 6


New level: 7
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 7 among pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12, 2]


New level: 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 27, 3, 9, 31, 33, 11, 6, 10, 8, 14, 13]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, 1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 8 : {3, 13, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 10, 8, 14]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 10, 8, 14]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, 1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 10, 8, 14]
 solution : [0, 4, 1, 15, 12, 2]


Solution : [0, 4, 1, 15, 12, 2] has cost 54.


Decide in level 8 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 10, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 11, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 9 : {11}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]


Solution : [0, 4, 1, 15, 12, 2, 10] has cost 59.


Before backtrack at level 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14]
 solution : [0, 4, 1, 15, 12, 2, 10]

After backtrack at level 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14, 11]
 solution : [0, 4, 1, 15, 12, 2, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]


Solution : [0, 4, 1, 15, 12, 2] has cost 54.


Decide in level 9 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 8, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2, 8]


New level: 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 6, 9, 11, 14, 16, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 8]


Solution : [0, 4, 1, 15, 12, 2, 8] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 15, 12, 2, 8]

After backtrack at level 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]
 solution : [0, 4, 1, 15, 12, 2]


Solution : [0, 4, 1, 15, 12, 2] has cost 54.


Decide in level 10 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 14]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 14]


Solution : [0, 4, 1, 15, 12, 2, 14] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 2, 14]

After backtrack at level 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2]


Solution : [0, 4, 1, 15, 12, 2] has cost 54.


Decide in level 11 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 9, 31, 33, 6, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 9]


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 9]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 6, 11, 16, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 9]


Solution : [0, 4, 1, 15, 12, 2, 9] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 2, 9]

After backtrack at level 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 2]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 2, 6]


Solution : [0, 4, 1, 15, 12, 2, 6] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 2, 6]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 2]


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 2]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 2]


Before backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 2]

After backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 2]


Before backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 2]

After backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8]
 solution : [0, 4, 1, 15, 12, 2]


Before backtrack at level 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8]
 solution : [0, 4, 1, 15, 12, 2]

After backtrack at level 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 8 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 27, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 27 with phase True at level 8

After decision at level 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27]


New level: 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27]


Solution : [0, 4, 1, 15, 12, 27] has cost 51.


Decide in level 9 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 8, 20, 24, 26, 29, 3, 13, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27, 14]


New level: 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27, 14]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 20, 24, 26, 29, 3, 13, 10]
 solution : [0, 4, 1, 15, 12, 27, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

Covered at level 10 : {33, 6, 8, 9, 10, 11, 16, 19, 25, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3, 13]
 solution : [0, 4, 1, 15, 12, 27, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3, 13]
 solution : [0, 4, 1, 15, 12, 27, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 2), (18, 2), (19, 0), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, 0), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 2), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3, 13]
 solution : [0, 4, 1, 15, 12, 27, 14]


Solution : [0, 4, 1, 15, 12, 27, 14] has cost 57.


Decide in level 10 among pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 3, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14, 3]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 2), (18, 2), (19, -1), (20, 3), (21, 2), (22, 2), (23, 2), (24, 3), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 13, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 3]


Solution : [0, 4, 1, 15, 12, 27, 14, 3] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 14, 3]

After backtrack at level 11
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 27, 14]

Essensial at level 11 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 17, 18, 20, 21, 22, 23, 24, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 14, 13]


Solution : [0, 4, 1, 15, 12, 27, 14, 13] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 14, 13]

After backtrack at level 11
 pending : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 27, 14]


Before backtrack at level 10
 pending : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 27, 14]

After backtrack at level 10
 pending : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27]


Before reduction : 
 pending  : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27]


Solution : [0, 4, 1, 15, 12, 27] has cost 51.


Decide in level 10 among pending : [13, 17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27, 13]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 20, 24, 26, 29, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10, 3]
 solution : [0, 4, 1, 15, 12, 27, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 20), (18, 16), (19, 2), (20, 3), (21, 20), (22, 16), (23, 16), (24, 3), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : {3, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]


Solution : [0, 4, 1, 15, 12, 27, 13] has cost 57.


Decide in level 11 among pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 8, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13, 8]


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 6, 9, 10, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 8]


Solution : [0, 4, 1, 15, 12, 27, 13, 8] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 13, 8]

After backtrack at level 12
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]


Solution : [0, 4, 1, 15, 12, 27, 13] has cost 57.


Decide in level 12 among pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 13 : {33, 11, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]


Solution : [0, 4, 1, 15, 12, 27, 13, 10] has cost 62.


Before backtrack at level 13
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]

After backtrack at level 13
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]


Solution : [0, 4, 1, 15, 12, 27, 13] has cost 57.


Decide in level 13 among pending : [17, 18, 21, 22, 23, 32, 6, 16, 19, 25, 9, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13, 6]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13, 6]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 6]


Solution : [0, 4, 1, 15, 12, 27, 13, 6] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 13, 6]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 9, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 13, 9]


Solution : [0, 4, 1, 15, 12, 27, 13, 9] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 13, 9]

After backtrack at level 14
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 13]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 27, 13]

After backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]


Before backtrack at level 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10]
 solution : [0, 4, 1, 15, 12, 27, 13]

After backtrack at level 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 20, 24, 26, 29, 3, 8]
 solution : [0, 4, 1, 15, 12, 27, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 20, 24, 26, 29, 3, 8]
 solution : [0, 4, 1, 15, 12, 27]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 20, 24, 26, 29, 3, 8]
 solution : [0, 4, 1, 15, 12, 27]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : {24, 26, 20, 29}

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 8]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 8]
 solution : [0, 4, 1, 15, 12, 27, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, 0), (21, 5), (22, 4), (23, 4), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 8]
 solution : [0, 4, 1, 15, 12, 27, 3]


Solution : [0, 4, 1, 15, 12, 27, 3] has cost 57.


Decide in level 11 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 10, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]


New level: 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 12 : {33, 11, 31}

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]


Solution : [0, 4, 1, 15, 12, 27, 3, 10] has cost 62.


Before backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]

After backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Solution : [0, 4, 1, 15, 12, 27, 3] has cost 57.


Decide in level 12 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 8, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 8]


New level: 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 8]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 8]


Solution : [0, 4, 1, 15, 12, 27, 3, 8] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 3, 8]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Solution : [0, 4, 1, 15, 12, 27, 3] has cost 57.


Decide in level 13 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 9]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 9]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 5), (18, 4), (19, 2), (20, -1), (21, 5), (22, 4), (23, 4), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 4), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 6, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 9]


Solution : [0, 4, 1, 15, 12, 27, 3, 9] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 3, 9]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 27, 3, 6]


Solution : [0, 4, 1, 15, 12, 27, 3, 6] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 27, 3, 6]

After backtrack at level 14
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 27, 3]

After backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 27, 3]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8]
 solution : [0, 4, 1, 15, 12, 27, 3]


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8]
 solution : [0, 4, 1, 15, 12, 27, 3]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10]
 solution : [0, 4, 1, 15, 12, 27]


Before backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10]
 solution : [0, 4, 1, 15, 12, 27]

After backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13]
 solution : [0, 4, 1, 15, 12, 27]


Before backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13]
 solution : [0, 4, 1, 15, 12, 27]

After backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12, 27]


Invert decision for 27 at level 8


New level: 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 9 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 8, 3, 20, 24, 26, 29, 10, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12, 8]


New level: 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12, 8]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 3, 20, 24, 26, 29, 10, 13, 14]
 solution : [0, 4, 1, 15, 12, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, 6), (33, 0)]

Covered at level 10 : {33, 6, 9, 10, 11, 14, 31}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 3, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 3, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, 6), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 3, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8]


Solution : [0, 4, 1, 15, 12, 8] has cost 47.


Decide in level 10 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 3, 20, 24, 26, 29, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8, 3]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 7), (18, 6), (19, 2), (20, 9), (21, 7), (22, 6), (23, 6), (24, 9), (25, 2), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 6), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 3]


Solution : [0, 4, 1, 15, 12, 8, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 8, 3]

After backtrack at level 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 13]
 solution : [0, 4, 1, 15, 12, 8]

Essensial at level 11 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 8, 13]


Solution : [0, 4, 1, 15, 12, 8, 13] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 15, 12, 8, 13]

After backtrack at level 11
 pending : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 8]


Before backtrack at level 10
 pending : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29]
 solution : [0, 4, 1, 15, 12, 8]

After backtrack at level 10
 pending : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12]


Solution : [0, 4, 1, 15, 12] has cost 41.


Decide in level 10 among pending : [13, 17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12, 13]


New level: 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 20, 24, 26, 29, 6, 31, 33, 11, 9, 10, 14, 3]
 solution : [0, 4, 1, 15, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 8), (17, 25), (18, 24), (19, 8), (20, 9), (21, 25), (22, 21), (23, 21), (24, 9), (25, 8), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 24), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 11 : {3, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 10, 14]
 solution : [0, 4, 1, 15, 12, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 10, 14]
 solution : [0, 4, 1, 15, 12, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 10, 14]
 solution : [0, 4, 1, 15, 12, 13]


Solution : [0, 4, 1, 15, 12, 13] has cost 47.


Decide in level 11 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 10, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]


New level: 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 12 : {11}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]


Solution : [0, 4, 1, 15, 12, 13, 10] has cost 52.


Decide in level 12 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 14]


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 9, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 14]


Solution : [0, 4, 1, 15, 12, 13, 10, 14] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 10, 14]

After backtrack at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10]


Solution : [0, 4, 1, 15, 12, 13, 10] has cost 52.


Decide in level 13 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 6, 31, 33, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 6]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 6]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 9, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 6]


Solution : [0, 4, 1, 15, 12, 13, 10, 6] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 10, 6]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 13, 10]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 10, 9]


Solution : [0, 4, 1, 15, 12, 13, 10, 9] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 10, 9]

After backtrack at level 14
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33]
 solution : [0, 4, 1, 15, 12, 13, 10]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6]
 solution : [0, 4, 1, 15, 12, 13, 10]


Before backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6]
 solution : [0, 4, 1, 15, 12, 13, 10]

After backtrack at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11, 14]
 solution : [0, 4, 1, 15, 12, 13, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11, 14]
 solution : [0, 4, 1, 15, 12, 13]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11, 14]
 solution : [0, 4, 1, 15, 12, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11, 14]
 solution : [0, 4, 1, 15, 12, 13]


Solution : [0, 4, 1, 15, 12, 13] has cost 47.


Decide in level 12 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 14]


New level: 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 14]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 14]


Solution : [0, 4, 1, 15, 12, 13, 14] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 14]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13]


Solution : [0, 4, 1, 15, 12, 13] has cost 47.


Decide in level 13 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 9]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 9]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 6, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 9]


Solution : [0, 4, 1, 15, 12, 13, 9] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 9]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 6, 11]
 solution : [0, 4, 1, 15, 12, 13]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 13, 6]


Solution : [0, 4, 1, 15, 12, 13, 6] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 13, 6]

After backtrack at level 14
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 13]


Before backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 13]

After backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 13]


Before backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 13]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 13]


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14]
 solution : [0, 4, 1, 15, 12, 13]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 20, 24, 26, 29, 3, 10]
 solution : [0, 4, 1, 15, 12, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 20, 24, 26, 29, 3, 10]
 solution : [0, 4, 1, 15, 12]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 20, 24, 26, 29, 3, 10]
 solution : [0, 4, 1, 15, 12]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 11 : {24, 26, 20, 29}

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 10]
 solution : [0, 4, 1, 15, 12, 3]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 10]
 solution : [0, 4, 1, 15, 12, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, 0), (21, 6), (22, 5), (23, 5), (24, 0), (25, 2), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 10]
 solution : [0, 4, 1, 15, 12, 3]


Solution : [0, 4, 1, 15, 12, 3] has cost 47.


Decide in level 11 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 14, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3, 14]


New level: 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3, 14]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 6, 9, 10, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 14]


Solution : [0, 4, 1, 15, 12, 3, 14] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 15, 12, 3, 14]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3]


Solution : [0, 4, 1, 15, 12, 3] has cost 47.


Decide in level 12 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]


New level: 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 13 : {11}

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]


Solution : [0, 4, 1, 15, 12, 3, 10] has cost 52.


Decide in level 13 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10, 6]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10, 6]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 9, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 6]


Solution : [0, 4, 1, 15, 12, 3, 10, 6] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 3, 10, 6]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 9]
 solution : [0, 4, 1, 15, 12, 3, 10]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 10, 9]


Solution : [0, 4, 1, 15, 12, 3, 10, 9] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 3, 10, 9]

After backtrack at level 14
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33]
 solution : [0, 4, 1, 15, 12, 3, 10]


Before backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33]
 solution : [0, 4, 1, 15, 12, 3, 10]

After backtrack at level 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3]


Before reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3]


Solution : [0, 4, 1, 15, 12, 3] has cost 47.


Decide in level 13 among pending : [9, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3, 9]


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3, 9]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 6), (18, 5), (19, 2), (20, -1), (21, 6), (22, 5), (23, 5), (24, -1), (25, 2), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 5), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 6, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 9]


Solution : [0, 4, 1, 15, 12, 3, 9] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 3, 9]

After backtrack at level 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 6]
 solution : [0, 4, 1, 15, 12, 3]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 12, 3, 6]


Solution : [0, 4, 1, 15, 12, 3, 6] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 15, 12, 3, 6]

After backtrack at level 14
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 3]


Before backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11]
 solution : [0, 4, 1, 15, 12, 3]

After backtrack at level 13
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 3]


Before backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9]
 solution : [0, 4, 1, 15, 12, 3]

After backtrack at level 12
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3]


Before backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10]
 solution : [0, 4, 1, 15, 12, 3]

After backtrack at level 11
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 10
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 9
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 8
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 7
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 7
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 6
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 6
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 5
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 5
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28]
 solution : [0, 4, 1, 15, 12]


Before backtrack at level 4
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28]
 solution : [0, 4, 1, 15, 12]

After backtrack at level 4
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15]


Solution : [0, 4, 1, 15] has cost 31.


Decide in level 4 among pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 14, 13, 8, 27, 2, 5, 28, 30, 7]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

Decide 14 with phase True at level 4

After decision at level 4
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15, 14]


New level: 5
 pending : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15, 14]


Before reduction : 
 pending  : [6, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 11, 9, 10, 3, 20, 24, 26, 29, 13, 8, 27, 2, 5, 28, 30, 7]
 solution : [0, 4, 1, 15, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 16), (17, 52), (18, 48), (19, 16), (20, 40), (21, 144), (22, 72), (23, 22), (24, 20), (25, 56), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 26), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 512), (14, -1), (15, -1), (16, 4), (17, 14), (18, 12), (19, 4), (20, 40), (21, 38), (22, 19), (23, 6), (24, 20), (25, 14), (26, 128), (27, 256), (28, 128), (29, 64), (30, 32), (31, 8), (32, 8), (33, 2)]

Covered at level 5 : {5, 6, 7, 8, 9, 10, 11}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 13, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 13, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 512), (14, -1), (15, -1), (16, 4), (17, 14), (18, 12), (19, 4), (20, 40), (21, 38), (22, 19), (23, 6), (24, 20), (25, 14), (26, 128), (27, 256), (28, 128), (29, 64), (30, 32), (31, 8), (32, 8), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, -1), (16, 4), (17, 14), (18, 12), (19, 4), (20, 40), (21, 38), (22, 19), (23, 6), (24, 20), (25, 14), (26, 128), (27, 256), (28, 128), (29, 64), (30, 32), (31, 8), (32, 8), (33, 2)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 13, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14]


Solution : [0, 4, 1, 15, 14] has cost 37.


Decide in level 5 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 13, 27, 2, 28, 30]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, -1), (16, 4), (17, 14), (18, 12), (19, 4), (20, 40), (21, 38), (22, 19), (23, 6), (24, 20), (25, 14), (26, 128), (27, 256), (28, 128), (29, 64), (30, 32), (31, 8), (32, 8), (33, 2)]

Decide 13 with phase True at level 5

After decision at level 5
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14, 13]


New level: 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 512), (14, -1), (15, -1), (16, 4), (17, 14), (18, 12), (19, 4), (20, 40), (21, 38), (22, 19), (23, 6), (24, 20), (25, 14), (26, 128), (27, 256), (28, 128), (29, 64), (30, 32), (31, 8), (32, 8), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 13]


Solution : [0, 4, 1, 15, 14, 13] has cost 43.


Before backtrack at level 6
 pending : []
 solution : [0, 4, 1, 15, 14, 13]

After backtrack at level 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14, 13]


Invert decision for 13 at level 5


New level: 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 2, 28, 30]
 solution : [0, 4, 1, 15, 14]

Essensial at level 6 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 14, 2]


Solution : [0, 4, 1, 15, 14, 2] has cost 50.


Before backtrack at level 6
 pending : []
 solution : [0, 4, 1, 15, 14, 2]

After backtrack at level 6
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 28, 30]
 solution : [0, 4, 1, 15, 14]


Before backtrack at level 5
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 28, 30]
 solution : [0, 4, 1, 15, 14]

After backtrack at level 5
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7, 13]
 solution : [0, 4, 1, 15, 14]


Invert decision for 14 at level 4


New level: 5
 pending : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7, 13]
 solution : [0, 4, 1, 15]


Before reduction : 
 pending  : [2, 17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 3, 20, 24, 26, 29, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7, 13]
 solution : [0, 4, 1, 15]

Essensial at level 5 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 10), (19, 4), (20, 0), (21, 34), (22, 17), (23, 5), (24, 0), (25, 14), (26, 0), (27, 8), (28, 4), (29, 0), (30, 32), (31, 256), (32, 5), (33, 128)]

Covered at level 5 : {2, 3, 20, 24, 26, 29}

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7]
 solution : [0, 4, 1, 15, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7]
 solution : [0, 4, 1, 15, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 10), (19, 4), (20, 0), (21, 34), (22, 17), (23, 5), (24, 0), (25, 14), (26, 0), (27, 8), (28, 4), (29, 0), (30, 32), (31, 256), (32, 5), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 10), (19, 4), (20, -1), (21, 34), (22, 17), (23, 5), (24, -1), (25, 14), (26, -1), (27, 8), (28, 4), (29, -1), (30, 32), (31, 256), (32, 5), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7]
 solution : [0, 4, 1, 15, 13]


Solution : [0, 4, 1, 15, 13] has cost 37.


Decide in level 5 among pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 5, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 10), (19, 4), (20, -1), (21, 34), (22, 17), (23, 5), (24, -1), (25, 14), (26, -1), (27, 8), (28, 4), (29, -1), (30, 32), (31, 256), (32, 5), (33, 128)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13, 5]


New level: 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13, 5]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 12), (18, 10), (19, 4), (20, -1), (21, 34), (22, 17), (23, 5), (24, -1), (25, 14), (26, -1), (27, 8), (28, 4), (29, -1), (30, 32), (31, 256), (32, 5), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 15, 13, 5]


Solution : [0, 4, 1, 15, 13, 5] has cost 50.


Before backtrack at level 6
 pending : []
 solution : [0, 4, 1, 15, 13, 5]

After backtrack at level 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13]


Before reduction : 
 pending  : [17, 18, 21, 22, 23, 32, 16, 19, 25, 31, 33, 27, 28, 30, 6, 11, 9, 10, 8, 7]
 solution : [0, 4, 1, 15, 13]

Essensial at level 6 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 10), (22, 6), (23, 0), (24, -1), (25, 6), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 2), (32, 0), (33, 0)]

Covered at level 6 : {32, 33, 8, 9, 10, 11, 16, 17, 18, 19, 23, 27, 28}

After reduction : 
 pending  : [21, 22, 25, 31, 30, 7]
 solution : [0, 4, 1, 15, 13, 6]


Before reduction : 
 pending  : [21, 22, 25, 31, 30, 7]
 solution : [0, 4, 1, 15, 13, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 10), (22, 6), (23, 0), (24, -1), (25, 6), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 2), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 10), (22, 6), (23, -1), (24, -1), (25, 6), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 2), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 22, 25, 31, 30, 7]
 solution : [0, 4, 1, 15, 13, 6]


Solution : [0, 4, 1, 15, 13, 6] has cost 46.


Before backtrack at level 6
 pending : [21, 22, 25, 31, 30, 7]
 solution : [0, 4, 1, 15, 13, 6]

After backtrack at level 6
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8]
 solution : [0, 4, 1, 15, 13]


Before backtrack at level 5
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8]
 solution : [0, 4, 1, 15, 13]

After backtrack at level 5
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15]


Before backtrack at level 4
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5]
 solution : [0, 4, 1, 15]

After backtrack at level 4
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 15]


Before backtrack at level 3
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 15]

After backtrack at level 3
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14, 12]
 solution : [0, 4, 1, 15]


Invert decision for 15 at level 2


New level: 3
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14, 12]
 solution : [0, 4, 1]


Before reduction : 
 pending  : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14, 12]
 solution : [0, 4, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 4), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 10), (22, 6), (23, -1), (24, -1), (25, 6), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14, 12]
 solution : [0, 4, 1]


Solution : [0, 4, 1] has cost 10.


Decide in level 3 among pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14, 12]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]


New level: 4
 pending : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [21, 22, 25, 31, 30, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, 640), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 584), (22, 296), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, 0), (31, 32), (32, 52), (33, 32)]

Covered at level 4 : {30}

After reduction : 
 pending  : [21, 22, 25, 31, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [21, 22, 25, 31, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, 0), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 22, 25, 31, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 4 among pending : [21, 22, 25, 31, 7, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]


New level: 5
 pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 11, 9, 10, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, 0), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 5 : {10, 11}

After reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, 0), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 5 among pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 20, 24, 26, 29, 5, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 20 with phase True at level 5

After decision at level 5
 pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]


New level: 6
 pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 24, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 130), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 129), (24, 0), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 6 : {24}

After reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 129), (24, 0), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20]


Solution : [0, 4, 1, 12, 7, 20] has cost 41.


Decide in level 6 among pending : [21, 22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 21 with phase True at level 6

After decision at level 6
 pending : [22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]


New level: 7
 pending : [22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]


Before reduction : 
 pending  : [22, 25, 31, 6, 17, 18, 23, 32, 16, 19, 33, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 16, 17, 18, 19, 22, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]


Solution : [0, 4, 1, 12, 7, 20, 21] has cost 75.


Before backtrack at level 7
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 21]

After backtrack at level 7
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 22, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 21]


Invert decision for 21 at level 6


New level: 7
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 22, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 22, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 22, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Solution : [0, 4, 1, 12, 7, 20] has cost 41.


Decide in level 7 among pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 22, 25, 31, 17, 18, 23, 32, 16, 19, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 22 with phase True at level 7

After decision at level 7
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 22]


New level: 8
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, 129), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 16, 17, 18, 19, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 22]


Solution : [0, 4, 1, 12, 7, 20, 22] has cost 75.


Before backtrack at level 8
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 22]

After backtrack at level 8
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 22]


Invert decision for 22 at level 7


New level: 8
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Solution : [0, 4, 1, 12, 7, 20] has cost 41.


Decide in level 8 among pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 23, 32, 16, 19, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 23 with phase True at level 8

After decision at level 8
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 23]


New level: 9
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 23]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 23]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 129), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 4), (27, 1), (28, 1), (29, 4), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 18, 19, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 23]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 23]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, 4), (27, 1), (28, 1), (29, 4), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 64), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 4), (27, 1), (28, 1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 23]


Solution : [0, 4, 1, 12, 7, 20, 23] has cost 75.


Before backtrack at level 9
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14]
 solution : [0, 4, 1, 12, 7, 20, 23]

After backtrack at level 9
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 23]


Invert decision for 23 at level 8


New level: 9
 pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 64), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 4), (27, 1), (28, 1), (29, 4), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20]


Solution : [0, 4, 1, 12, 7, 20] has cost 41.


Decide in level 9 among pending : [6, 27, 28, 9, 8, 13, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 13 with phase True at level 9

After decision at level 9
 pending : [6, 27, 28, 9, 8, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]


New level: 10
 pending : [6, 27, 28, 9, 8, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 2, 3, 26, 29, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : {26, 2, 3, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]


Solution : [0, 4, 1, 12, 7, 20, 13] has cost 47.


Before backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 13]

After backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 2, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20, 13]


Invert decision for 13 at level 9


New level: 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 2, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 2, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 2, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]


Solution : [0, 4, 1, 12, 7, 20] has cost 41.


Decide in level 10 among pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 2, 3, 26, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20, 2]


New level: 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20, 2]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : {26, 3, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 2]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 2]


Solution : [0, 4, 1, 12, 7, 20, 2] has cost 54.


Before backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 2]

After backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : {26, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 3]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 3]


Solution : [0, 4, 1, 12, 7, 20, 3] has cost 47.


Before backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33]
 solution : [0, 4, 1, 12, 7, 20, 3]

After backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]


Before backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29]
 solution : [0, 4, 1, 12, 7, 20]

After backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2]
 solution : [0, 4, 1, 12, 7, 20]


Before backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2]
 solution : [0, 4, 1, 12, 7, 20]

After backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 20]


Before backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 20]

After backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23]
 solution : [0, 4, 1, 12, 7, 20]


Before backtrack at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23]
 solution : [0, 4, 1, 12, 7, 20]

After backtrack at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22]
 solution : [0, 4, 1, 12, 7, 20]


Before backtrack at level 6
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22]
 solution : [0, 4, 1, 12, 7, 20]

After backtrack at level 6
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 24, 21]
 solution : [0, 4, 1, 12, 7, 20]


Invert decision for 20 at level 5


New level: 6
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 24, 21]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 24, 21]
 solution : [0, 4, 1, 12, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 24, 21]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 6 among pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 24, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 24 with phase True at level 6

After decision at level 6
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 21]
 solution : [0, 4, 1, 12, 7, 24]


New level: 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 21]
 solution : [0, 4, 1, 12, 7, 24]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 21]
 solution : [0, 4, 1, 12, 7, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 21]
 solution : [0, 4, 1, 12, 7, 24]


Solution : [0, 4, 1, 12, 7, 24] has cost 41.


Decide in level 7 among pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 22, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 22 with phase True at level 7

After decision at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 21]
 solution : [0, 4, 1, 12, 7, 24, 22]


New level: 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 21]
 solution : [0, 4, 1, 12, 7, 24, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 3, 26, 29, 2, 13, 23, 21]
 solution : [0, 4, 1, 12, 7, 24, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 16, 17, 18, 19, 21, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 22]


Solution : [0, 4, 1, 12, 7, 24, 22] has cost 75.


Before backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 22]

After backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23, 21]
 solution : [0, 4, 1, 12, 7, 24, 22]


Invert decision for 22 at level 7


New level: 8
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23, 21]
 solution : [0, 4, 1, 12, 7, 24]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23, 21]
 solution : [0, 4, 1, 12, 7, 24]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23, 21]
 solution : [0, 4, 1, 12, 7, 24]


Solution : [0, 4, 1, 12, 7, 24] has cost 41.


Decide in level 8 among pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 21 with phase True at level 8

After decision at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 21]


New level: 9
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 21]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 18, 19, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 21]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 21]


Solution : [0, 4, 1, 12, 7, 24, 21] has cost 75.


Before backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 21]

After backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 21]


Invert decision for 21 at level 8


New level: 9
 pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24]


Solution : [0, 4, 1, 12, 7, 24] has cost 41.


Decide in level 9 among pending : [6, 27, 28, 9, 8, 5, 14, 3, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]


New level: 10
 pending : [6, 27, 28, 9, 8, 5, 14, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 26, 29, 2, 13, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : {13, 26, 2, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]


Solution : [0, 4, 1, 12, 7, 24, 3] has cost 47.


Before backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 3]

After backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 7, 24]


Solution : [0, 4, 1, 12, 7, 24] has cost 41.


Decide in level 10 among pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 2, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24, 2]


New level: 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24, 2]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : {26, 13, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 2]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 2]


Solution : [0, 4, 1, 12, 7, 24, 2] has cost 54.


Before backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 2]

After backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 24]

Essensial at level 11 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : {26, 29}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 13]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 13]


Solution : [0, 4, 1, 12, 7, 24, 13] has cost 47.


Before backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 24, 13]

After backtrack at level 11
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29]
 solution : [0, 4, 1, 12, 7, 24]


Before backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29]
 solution : [0, 4, 1, 12, 7, 24]

After backtrack at level 10
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2]
 solution : [0, 4, 1, 12, 7, 24]


Before backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2]
 solution : [0, 4, 1, 12, 7, 24]

After backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 24]


Before backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 24]

After backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21]
 solution : [0, 4, 1, 12, 7, 24]


Before backtrack at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21]
 solution : [0, 4, 1, 12, 7, 24]

After backtrack at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21, 22]
 solution : [0, 4, 1, 12, 7, 24]


Invert decision for 24 at level 6


New level: 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21, 22]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21, 22]
 solution : [0, 4, 1, 12, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 24), (18, 5), (19, 2), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 11), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 5), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21, 22]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 7 among pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 21, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 21 with phase True at level 7

After decision at level 7
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 22]
 solution : [0, 4, 1, 12, 7, 21]


New level: 8
 pending : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 22]
 solution : [0, 4, 1, 12, 7, 21]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 25, 31, 17, 18, 32, 16, 19, 33, 23, 13, 26, 29, 2, 3, 22]
 solution : [0, 4, 1, 12, 7, 21]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 130), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 16, 17, 18, 19, 22, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 21]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 21]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 21]


Solution : [0, 4, 1, 12, 7, 21] has cost 59.


Before backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 21]

After backtrack at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23, 22]
 solution : [0, 4, 1, 12, 7, 21]


Invert decision for 21 at level 7


New level: 8
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23, 22]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23, 22]
 solution : [0, 4, 1, 12, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23, 22]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 8 among pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 22 with phase True at level 8

After decision at level 8
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 22]


New level: 9
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 18, 19, 23, 25, 31}

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 22]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 22]


Solution : [0, 4, 1, 12, 7, 22] has cost 59.


Before backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3]
 solution : [0, 4, 1, 12, 7, 22]

After backtrack at level 9
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 22]


Invert decision for 22 at level 8


New level: 9
 pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 1), (6, 1), (7, -1), (8, 1), (9, 1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, 32), (27, 1), (28, 1), (29, 32), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 9 among pending : [6, 27, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 27 with phase True at level 9

After decision at level 9
 pending : [6, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 27]


New level: 10
 pending : [6, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 27]


Before reduction : 
 pending  : [6, 28, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 31, 17, 18, 32, 16, 19, 33, 23]
 solution : [0, 4, 1, 12, 7, 27]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 73), (26, 8), (27, -1), (28, 0), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

Covered at level 10 : {33, 28, 31}

After reduction : 
 pending  : [6, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27]


Before reduction : 
 pending  : [6, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 73), (26, 8), (27, -1), (28, 0), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 73), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27]


Solution : [0, 4, 1, 12, 7, 27] has cost 35.


Decide in level 10 among pending : [6, 9, 8, 5, 14, 13, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 73), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [6, 9, 8, 5, 14, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


New level: 11
 pending : [6, 9, 8, 5, 14, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 8, 5, 14, 26, 29, 2, 3, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 73), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : {3, 26, 2, 29}

After reduction : 
 pending  : [6, 9, 8, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 8, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 9, 8, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Solution : [0, 4, 1, 12, 7, 27, 13] has cost 41.


Decide in level 11 among pending : [6, 9, 8, 5, 14, 25, 17, 18, 32, 16, 19, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 8]


New level: 12
 pending : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 8]


Before reduction : 
 pending  : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 5, 6, 9, 14, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 8]


Solution : [0, 4, 1, 12, 7, 27, 13, 8] has cost 47.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 13, 8]

After backtrack at level 12
 pending : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Solution : [0, 4, 1, 12, 7, 27, 13] has cost 41.


Decide in level 12 among pending : [6, 9, 5, 14, 25, 17, 18, 32, 16, 19, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 5]


New level: 13
 pending : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 5]


Before reduction : 
 pending  : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 13 : {32, 6, 9, 14, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 5]


Solution : [0, 4, 1, 12, 7, 27, 13, 5] has cost 54.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 13, 5]

After backtrack at level 13
 pending : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Solution : [0, 4, 1, 12, 7, 27, 13] has cost 41.


Decide in level 13 among pending : [6, 9, 14, 25, 17, 18, 32, 16, 19, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 14 with phase True at level 13

After decision at level 13
 pending : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 14]


New level: 14
 pending : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 14]


Before reduction : 
 pending  : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 14 : {32, 6, 9, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 13, 14]


Solution : [0, 4, 1, 12, 7, 27, 13, 14] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 13, 14]

After backtrack at level 14
 pending : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 14]


Invert decision for 14 at level 13


New level: 14
 pending : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 25, 17, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Solution : [0, 4, 1, 12, 7, 27, 13] has cost 41.


Decide in level 14 among pending : [6, 9, 25, 17, 18, 32, 16, 19, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]


New level: 15
 pending : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]


Before reduction : 
 pending  : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 16, 18, 19, 23, 25}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]


Solution : [0, 4, 1, 12, 7, 27, 13, 17] has cost 75.


Before backtrack at level 15
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]

After backtrack at level 15
 pending : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before reduction : 
 pending  : [6, 9, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 13]

Essensial at level 15 : {23}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 16, 18, 19, 25}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 23]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 23]


Solution : [0, 4, 1, 12, 7, 27, 13, 23] has cost 75.


Before backtrack at level 15
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 13, 23]

After backtrack at level 15
 pending : [6, 9, 23, 25, 18, 32, 16, 19]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before backtrack at level 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19]
 solution : [0, 4, 1, 12, 7, 27, 13]

After backtrack at level 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before backtrack at level 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 13]

After backtrack at level 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before backtrack at level 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14]
 solution : [0, 4, 1, 12, 7, 27, 13]

After backtrack at level 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 27, 13]


Before backtrack at level 11
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 27, 13]

After backtrack at level 11
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 2, 3, 8]
 solution : [0, 4, 1, 12, 7, 27, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 2, 3, 8]
 solution : [0, 4, 1, 12, 7, 27]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 2, 3, 8]
 solution : [0, 4, 1, 12, 7, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 17), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 2, 3, 8]
 solution : [0, 4, 1, 12, 7, 27]


Solution : [0, 4, 1, 12, 7, 27] has cost 35.


Decide in level 11 among pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 2, 3, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 17), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 3, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]


New level: 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 3, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 26, 29, 3, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 17), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, 17), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : {26, 3, 29}

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]


Solution : [0, 4, 1, 12, 7, 27, 2] has cost 48.


Before backtrack at level 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 2]

After backtrack at level 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8, 26, 29, 3]
 solution : [0, 4, 1, 12, 7, 27, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8, 26, 29, 3]
 solution : [0, 4, 1, 12, 7, 27]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8, 26, 29, 3]
 solution : [0, 4, 1, 12, 7, 27]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : {26, 29}

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Solution : [0, 4, 1, 12, 7, 27, 3] has cost 41.


Decide in level 12 among pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 14, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 14]


New level: 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 14]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 13 : {32, 5, 6, 8, 9, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 14]


Solution : [0, 4, 1, 12, 7, 27, 3, 14] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 3, 14]

After backtrack at level 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Solution : [0, 4, 1, 12, 7, 27, 3] has cost 41.


Decide in level 13 among pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 5]


New level: 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 5]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 14 : {32, 6, 8, 9, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 5]


Solution : [0, 4, 1, 12, 7, 27, 3, 5] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 3, 5]

After backtrack at level 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Solution : [0, 4, 1, 12, 7, 27, 3] has cost 41.


Decide in level 14 among pending : [6, 9, 23, 25, 18, 32, 16, 19, 17, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 8]


New level: 15
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 8]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 6, 9, 16, 17, 18, 19, 23, 25}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 27, 3, 8]


Solution : [0, 4, 1, 12, 7, 27, 3, 8] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 7, 27, 3, 8]

After backtrack at level 15
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 23, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3]


Solution : [0, 4, 1, 12, 7, 27, 3] has cost 41.


Decide in level 15 among pending : [6, 9, 23, 25, 18, 32, 16, 19, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 23 with phase True at level 15

After decision at level 15
 pending : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]


New level: 16
 pending : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]


Before reduction : 
 pending  : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 16 : {32, 16, 17, 18, 19, 25}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]


Solution : [0, 4, 1, 12, 7, 27, 3, 23] has cost 75.


Before backtrack at level 16
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]

After backtrack at level 16
 pending : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3, 23]


Invert decision for 23 at level 15


New level: 16
 pending : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before reduction : 
 pending  : [6, 9, 25, 18, 32, 16, 19, 17]
 solution : [0, 4, 1, 12, 7, 27, 3]

Essensial at level 16 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 16 : {32, 16, 18, 19, 25}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 17]


Solution : [0, 4, 1, 12, 7, 27, 3, 17] has cost 75.


Before backtrack at level 16
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 27, 3, 17]

After backtrack at level 16
 pending : [6, 9, 17, 25, 18, 32, 16, 19]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before backtrack at level 15
 pending : [6, 9, 17, 25, 18, 32, 16, 19]
 solution : [0, 4, 1, 12, 7, 27, 3]

After backtrack at level 15
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before backtrack at level 14
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23]
 solution : [0, 4, 1, 12, 7, 27, 3]

After backtrack at level 14
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before backtrack at level 13
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8]
 solution : [0, 4, 1, 12, 7, 27, 3]

After backtrack at level 13
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5]
 solution : [0, 4, 1, 12, 7, 27, 3]


Before backtrack at level 12
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5]
 solution : [0, 4, 1, 12, 7, 27, 3]

After backtrack at level 12
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14]
 solution : [0, 4, 1, 12, 7, 27]


Before backtrack at level 11
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14]
 solution : [0, 4, 1, 12, 7, 27]

After backtrack at level 11
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2]
 solution : [0, 4, 1, 12, 7, 27]


Before backtrack at level 10
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2]
 solution : [0, 4, 1, 12, 7, 27]

After backtrack at level 10
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 27]


Invert decision for 27 at level 9


New level: 10
 pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 10 among pending : [6, 9, 17, 25, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 25 with phase True at level 10

After decision at level 10
 pending : [6, 9, 17, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]


New level: 11
 pending : [6, 9, 17, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 16, 19, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 0), (17, 41), (18, 16), (19, 0), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, 32), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 11 : {16, 19}

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 0), (17, 41), (18, 16), (19, 0), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, 32), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, 32), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]


Solution : [0, 4, 1, 12, 7, 25] has cost 54.


Before backtrack at level 11
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13]
 solution : [0, 4, 1, 12, 7, 25]

After backtrack at level 11
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7, 25]


Invert decision for 25 at level 10


New level: 11
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, 32), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 11 among pending : [6, 9, 17, 18, 32, 23, 8, 5, 3, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]


New level: 12
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 26, 29, 14, 2, 28, 31, 33, 13, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 104), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, 8), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 12 : {13, 26, 2, 29}

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 104), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, 8), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 104), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 16, 19]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 12 among pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 16, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 104), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 16 with phase True at level 12

After decision at level 12
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3, 16]


New level: 13
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3, 16]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3, 16]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 104), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, -1), (22, -1), (23, 9), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 13 : {19}

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 16]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 16]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, -1), (22, -1), (23, 9), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, -1), (22, -1), (23, 9), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 16]


Solution : [0, 4, 1, 12, 7, 3, 16] has cost 60.


Before backtrack at level 13
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 16]

After backtrack at level 13
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3, 16]


Invert decision for 16 at level 12


New level: 13
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, -1), (22, -1), (23, 9), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 13 among pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 13

After decision at level 13
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


New level: 14
 pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Solution : [0, 4, 1, 12, 7, 3, 19] has cost 41.


Decide in level 14 among pending : [6, 9, 17, 18, 32, 23, 8, 5, 14, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 8]


New level: 15
 pending : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 8]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 5, 6, 9, 14, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 8]


Solution : [0, 4, 1, 12, 7, 3, 19, 8] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 19, 8]

After backtrack at level 15
 pending : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Solution : [0, 4, 1, 12, 7, 3, 19] has cost 41.


Decide in level 15 among pending : [6, 9, 17, 18, 32, 23, 5, 14, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 5]


New level: 16
 pending : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 5]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 6, 9, 14, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 5]


Solution : [0, 4, 1, 12, 7, 3, 19, 5] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 19, 5]

After backtrack at level 16
 pending : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Solution : [0, 4, 1, 12, 7, 3, 19] has cost 41.


Decide in level 16 among pending : [6, 9, 17, 18, 32, 23, 14, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Decide 14 with phase True at level 16

After decision at level 16
 pending : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 14]


New level: 17
 pending : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 14]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 6, 9, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 19, 14]


Solution : [0, 4, 1, 12, 7, 3, 19, 14] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 19, 14]

After backtrack at level 17
 pending : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 14]


Invert decision for 14 at level 16


New level: 17
 pending : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 9, 17, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Solution : [0, 4, 1, 12, 7, 3, 19] has cost 41.


Decide in level 17 among pending : [6, 9, 17, 18, 32, 23, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]


New level: 18
 pending : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]


Before reduction : 
 pending  : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 18, 23, 28, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]


Solution : [0, 4, 1, 12, 7, 3, 19, 17] has cost 75.


Before backtrack at level 18
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]

After backtrack at level 18
 pending : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before reduction : 
 pending  : [6, 9, 18, 32, 23, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

Essensial at level 18 : {23}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 18, 28, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 23]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 23]


Solution : [0, 4, 1, 12, 7, 3, 19, 23] has cost 75.


Before backtrack at level 18
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 19, 23]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before backtrack at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 19]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before backtrack at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 19]

After backtrack at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before backtrack at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14]
 solution : [0, 4, 1, 12, 7, 3, 19]

After backtrack at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 3, 19]


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 3, 19]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 3, 19]


Invert decision for 19 at level 13


New level: 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 14 among pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 14, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 14 with phase True at level 14

After decision at level 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3, 14]


New level: 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3, 14]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 5, 6, 8, 9, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 14]


Solution : [0, 4, 1, 12, 7, 3, 14] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 14]

After backtrack at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3, 14]


Invert decision for 14 at level 14


New level: 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 15 among pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3, 5]


New level: 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3, 5]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 6, 8, 9, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 5]


Solution : [0, 4, 1, 12, 7, 3, 5] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 5]

After backtrack at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 16 among pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 8]


New level: 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 8]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 6, 9, 17, 18, 23, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 3, 8]


Solution : [0, 4, 1, 12, 7, 3, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 4, 1, 12, 7, 3, 8]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3]


Solution : [0, 4, 1, 12, 7, 3] has cost 31.


Decide in level 17 among pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 17 with phase True at level 17

After decision at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 17]


New level: 18
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 17]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 18, 23, 28, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 17]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 17]


Solution : [0, 4, 1, 12, 7, 3, 17] has cost 65.


Before backtrack at level 18
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 17]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3, 17]


Invert decision for 17 at level 17


New level: 18
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3]

Essensial at level 18 : {23}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 18, 28, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 23]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 23]


Solution : [0, 4, 1, 12, 7, 3, 23] has cost 65.


Before backtrack at level 18
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 3, 23]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 16
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 15
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 13
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 13
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19]
 solution : [0, 4, 1, 12, 7, 3]


Before backtrack at level 12
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19]
 solution : [0, 4, 1, 12, 7, 3]

After backtrack at level 12
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 12 among pending : [6, 9, 23, 18, 32, 28, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 28 with phase True at level 12

After decision at level 12
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]


New level: 13
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, 128), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 73), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

Covered at level 13 : {33, 31}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 73), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 32), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 73), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]
 solution : [0, 4, 1, 12, 7, 28]


Solution : [0, 4, 1, 12, 7, 28] has cost 35.


Decide in level 13 among pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 2, 13, 16]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 73), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 13, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]


New level: 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 13, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 26, 29, 13, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 73), (17, 64), (18, 32), (19, 2), (20, -1), (21, -1), (22, -1), (23, 64), (24, -1), (25, -1), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : {26, 13, 29}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, 0), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]


Solution : [0, 4, 1, 12, 7, 28, 2] has cost 48.


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 2]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 28, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 28]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 26, 29, 13]
 solution : [0, 4, 1, 12, 7, 28]

Essensial at level 14 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 73), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : {26, 29}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 73), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 73), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 13]


Solution : [0, 4, 1, 12, 7, 28, 13] has cost 41.


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16]
 solution : [0, 4, 1, 12, 7, 28, 13]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29]
 solution : [0, 4, 1, 12, 7, 28]


Before backtrack at level 13
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29]
 solution : [0, 4, 1, 12, 7, 28]

After backtrack at level 13
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 28]


Invert decision for 28 at level 12


New level: 13
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, 73), (17, 16), (18, 4), (19, 2), (20, -1), (21, -1), (22, -1), (23, 16), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 13 among pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 16, 13, 26, 29, 31, 33, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 16 with phase True at level 13

After decision at level 13
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]


New level: 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 19, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 14 : {19}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]


Solution : [0, 4, 1, 12, 7, 16] has cost 54.


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2]
 solution : [0, 4, 1, 12, 7, 16]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7, 16]


Invert decision for 16 at level 13


New level: 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, -1), (22, -1), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 1), (32, 16), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7]


Solution : [0, 4, 1, 12, 7] has cost 25.


Decide in level 14 among pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 13, 26, 29, 31, 33, 2, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

Decide 13 with phase True at level 14

After decision at level 14
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7, 13]


New level: 15
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 26, 29, 31, 33, 2, 19]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, -1), (22, -1), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 8), (32, 52), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : {26, 2, 29}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33, 19]
 solution : [0, 4, 1, 12, 7, 13]


Solution : [0, 4, 1, 12, 7, 13] has cost 31.


Decide in level 15 among pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 15

After decision at level 15
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]


New level: 16
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]


Solution : [0, 4, 1, 12, 7, 13, 19] has cost 41.


Before backtrack at level 16
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]

After backtrack at level 16
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 19]


Invert decision for 19 at level 15


New level: 16
 pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Solution : [0, 4, 1, 12, 7, 13] has cost 31.


Decide in level 16 among pending : [6, 9, 23, 18, 32, 17, 8, 5, 14, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 8]


New level: 17
 pending : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 8]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 5, 6, 9, 14, 17, 18, 23, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 8]


Solution : [0, 4, 1, 12, 7, 13, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 4, 1, 12, 7, 13, 8]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Solution : [0, 4, 1, 12, 7, 13] has cost 31.


Decide in level 17 among pending : [6, 9, 23, 18, 32, 17, 5, 14, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 5 with phase True at level 17

After decision at level 17
 pending : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 5]


New level: 18
 pending : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 5]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 6, 9, 14, 17, 18, 23, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 5]


Solution : [0, 4, 1, 12, 7, 13, 5] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 4, 1, 12, 7, 13, 5]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 5]


Invert decision for 5 at level 17


New level: 18
 pending : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 14, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Solution : [0, 4, 1, 12, 7, 13] has cost 31.


Decide in level 18 among pending : [6, 9, 23, 18, 32, 17, 14, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 14 with phase True at level 18

After decision at level 18
 pending : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 14]


New level: 19
 pending : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 14]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 14]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 6, 9, 17, 18, 23, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 14]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 7, 13, 14]


Solution : [0, 4, 1, 12, 7, 13, 14] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 4, 1, 12, 7, 13, 14]

After backtrack at level 19
 pending : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 14]


Invert decision for 14 at level 18


New level: 19
 pending : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 17, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Solution : [0, 4, 1, 12, 7, 13] has cost 31.


Decide in level 19 among pending : [6, 9, 23, 18, 32, 17, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 17 with phase True at level 19

After decision at level 19
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 17]


New level: 20
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 17]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 18, 23, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 17]


Solution : [0, 4, 1, 12, 7, 13, 17] has cost 65.


Before backtrack at level 20
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 17]

After backtrack at level 20
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13, 17]


Invert decision for 17 at level 19


New level: 20
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

Essensial at level 20 : {23}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 18, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 23]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 23]


Solution : [0, 4, 1, 12, 7, 13, 23] has cost 65.


Before backtrack at level 20
 pending : [6, 9]
 solution : [0, 4, 1, 12, 7, 13, 23]

After backtrack at level 20
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]


Before backtrack at level 19
 pending : [6, 9, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 7, 13]

After backtrack at level 19
 pending : [6, 9, 23, 18, 32, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 13]


Before backtrack at level 18
 pending : [6, 9, 23, 18, 32, 31, 33, 17]
 solution : [0, 4, 1, 12, 7, 13]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14]
 solution : [0, 4, 1, 12, 7, 13]


Before backtrack at level 17
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14]
 solution : [0, 4, 1, 12, 7, 13]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 13]


Before backtrack at level 16
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5]
 solution : [0, 4, 1, 12, 7, 13]

After backtrack at level 16
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 13]


Before backtrack at level 15
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8]
 solution : [0, 4, 1, 12, 7, 13]

After backtrack at level 15
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 7, 13]


Invert decision for 13 at level 14


New level: 15
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 7]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 7]

Essensial at level 15 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : {26, 29}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19]
 solution : [0, 4, 1, 12, 7, 2]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19]
 solution : [0, 4, 1, 12, 7, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19]
 solution : [0, 4, 1, 12, 7, 2]


Solution : [0, 4, 1, 12, 7, 2] has cost 38.


Before backtrack at level 15
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19]
 solution : [0, 4, 1, 12, 7, 2]

After backtrack at level 15
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 14
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 14
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 13
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 13
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 12
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 12
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 11
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 11
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 10
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 10
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 9
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 9
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 8
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 8
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 7
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 7
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 6
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 6
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24]
 solution : [0, 4, 1, 12, 7]


Before backtrack at level 5
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24]
 solution : [0, 4, 1, 12, 7]

After backtrack at level 5
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24, 11, 10, 20]
 solution : [0, 4, 1, 12, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24, 11, 10, 20]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24, 11, 10, 20]
 solution : [0, 4, 1, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, -1), (22, -1), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24, 11, 10, 20]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 5 among pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 24, 11, 10, 20]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 24 with phase True at level 5

After decision at level 5
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10, 20]
 solution : [0, 4, 1, 12, 24]


New level: 6
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10, 20]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10, 20]
 solution : [0, 4, 1, 12, 24]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 130), (22, 130), (23, 74), (24, 192), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, 0), (21, 129), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 6 : {20}

After reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10]
 solution : [0, 4, 1, 12, 24]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, 0), (21, 129), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 6 among pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 22, 21, 11, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 22 with phase True at level 6

After decision at level 6
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 21, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]


New level: 7
 pending : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 21, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 31, 33, 17, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 21, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

Covered at level 7 : {32, 17, 18, 21, 23}

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]


Before reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]


Solution : [0, 4, 1, 12, 24, 22] has cost 70.


Before backtrack at level 7
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 22]

After backtrack at level 7
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 24, 22]


Invert decision for 22 at level 6


New level: 7
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 7 among pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 21 with phase True at level 7

After decision at level 7
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 21]


New level: 8
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 21]


Before reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 21]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 129), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

Covered at level 8 : {32, 17, 18, 23}

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 21]


Before reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 21]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 21]


Solution : [0, 4, 1, 12, 24, 21] has cost 70.


Before backtrack at level 8
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10]
 solution : [0, 4, 1, 12, 24, 21]

After backtrack at level 8
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 21]


Invert decision for 21 at level 7


New level: 8
 pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 8 among pending : [6, 9, 31, 33, 14, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [6, 9, 31, 33, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]


New level: 9
 pending : [6, 9, 31, 33, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]


Before reduction : 
 pending  : [6, 9, 31, 33, 5, 8, 19, 2, 26, 29, 13, 16, 28, 3, 25, 27, 11, 10, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 9 : {33, 5, 6, 8, 9, 10, 11, 16, 19, 25, 31}

After reduction : 
 pending  : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]


Before reduction : 
 pending  : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]


Solution : [0, 4, 1, 12, 24, 14] has cost 42.


Before backtrack at level 9
 pending : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17]
 solution : [0, 4, 1, 12, 24, 14]

After backtrack at level 9
 pending : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 9 among pending : [2, 26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 2 with phase True at level 9

After decision at level 9
 pending : [26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]


New level: 10
 pending : [26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]


Before reduction : 
 pending  : [26, 29, 13, 28, 3, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 10 : {3, 26, 13, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]


Solution : [0, 4, 1, 12, 24, 2] has cost 49.


Before backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 2]

After backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 2]


Invert decision for 2 at level 9


New level: 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 10 among pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 5, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]


New level: 11
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 11 : {33, 6, 8, 9, 10, 11, 16, 19, 25, 31}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]


Solution : [0, 4, 1, 12, 24, 5] has cost 49.


Before backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3]
 solution : [0, 4, 1, 12, 24, 5]

After backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, -1), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24]


Solution : [0, 4, 1, 12, 24] has cost 36.


Decide in level 11 among pending : [28, 27, 23, 18, 32, 17, 26, 29, 13, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [28, 27, 23, 18, 32, 17, 26, 29, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]


New level: 12
 pending : [28, 27, 23, 18, 32, 17, 26, 29, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 26, 29, 3, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, -1), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 12 : {26, 3, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]


Solution : [0, 4, 1, 12, 24, 13] has cost 42.


Before backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 13]

After backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 3]
 solution : [0, 4, 1, 12, 24, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 3]
 solution : [0, 4, 1, 12, 24]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 26, 29, 3]
 solution : [0, 4, 1, 12, 24]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 12 : {26, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 3]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 3]


Solution : [0, 4, 1, 12, 24, 3] has cost 42.


Before backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10]
 solution : [0, 4, 1, 12, 24, 3]

After backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 9
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 9
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 8
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 8
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 7
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 7
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21]
 solution : [0, 4, 1, 12, 24]


Before backtrack at level 6
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21]
 solution : [0, 4, 1, 12, 24]

After backtrack at level 6
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 20, 22]
 solution : [0, 4, 1, 12, 24]


Invert decision for 24 at level 5


New level: 6
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 20, 22]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 20, 22]
 solution : [0, 4, 1, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, -1), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 98), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 20, 22]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 6 among pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 20, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 98), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 20 with phase True at level 6

After decision at level 6
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 22]
 solution : [0, 4, 1, 12, 20]


New level: 7
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 22]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 22]
 solution : [0, 4, 1, 12, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, 192), (21, 98), (22, 130), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 22]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 7 among pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 22 with phase True at level 7

After decision at level 7
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21]
 solution : [0, 4, 1, 12, 20, 22]


New level: 8
 pending : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21]
 solution : [0, 4, 1, 12, 20, 22]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 21]
 solution : [0, 4, 1, 12, 20, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, 129), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

Covered at level 8 : {32, 17, 18, 21, 23}

After reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 20, 22]


Before reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 20, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, 0), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 20, 22]


Solution : [0, 4, 1, 12, 20, 22] has cost 70.


Before backtrack at level 8
 pending : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14]
 solution : [0, 4, 1, 12, 20, 22]

After backtrack at level 8
 pending : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 22]


Invert decision for 22 at level 7


New level: 8
 pending : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 5), (26, 8), (27, 1), (28, 1), (29, 8), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 8 among pending : [28, 27, 6, 9, 31, 33, 8, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [28, 27, 6, 9, 31, 33, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]


New level: 9
 pending : [28, 27, 6, 9, 31, 33, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]


Before reduction : 
 pending  : [28, 27, 6, 9, 31, 33, 19, 16, 25, 11, 10, 3, 26, 29, 13, 5, 2, 14, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 9 : {33, 5, 6, 9, 10, 11, 14, 16, 19, 25, 31}

After reduction : 
 pending  : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]


Before reduction : 
 pending  : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]


Solution : [0, 4, 1, 12, 20, 8] has cost 42.


Before backtrack at level 9
 pending : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21]
 solution : [0, 4, 1, 12, 20, 8]

After backtrack at level 9
 pending : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 9 among pending : [28, 27, 3, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [28, 27, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]


New level: 10
 pending : [28, 27, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]


Before reduction : 
 pending  : [28, 27, 26, 29, 13, 2, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 10 : {2, 26, 13, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]


Solution : [0, 4, 1, 12, 20, 3] has cost 42.


Before backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14]
 solution : [0, 4, 1, 12, 20, 3]

After backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 10 among pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 10, 5, 14, 26, 29, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 10 with phase True at level 10

After decision at level 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]


New level: 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 11 : {11}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, 0), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]


Solution : [0, 4, 1, 12, 20, 10] has cost 41.


Before backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 10]

After backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20, 10]


Invert decision for 10 at level 10


New level: 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 32), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, 128), (14, 32), (15, -1), (16, 11), (17, 97), (18, 24), (19, 2), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 11), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 1), (32, 24), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 11 among pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 5, 14, 26, 29, 13, 2, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20, 5]


New level: 12
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20, 5]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 26, 29, 13, 2, 11]
 solution : [0, 4, 1, 12, 20, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 12 : {33, 6, 9, 11, 14, 16, 19, 25, 31}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 5]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, 0), (17, 11), (18, 4), (19, 0), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, 0), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 5]


Solution : [0, 4, 1, 12, 20, 5] has cost 49.


Before backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 20, 5]

After backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 11), (18, 4), (19, -1), (20, -1), (21, 11), (22, -1), (23, 10), (24, -1), (25, -1), (26, 8), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20]


Solution : [0, 4, 1, 12, 20] has cost 36.


Decide in level 12 among pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 13, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

Decide 13 with phase True at level 12

After decision at level 12
 pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]


New level: 13
 pending : [28, 27, 23, 18, 32, 17, 21, 26, 29, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 26, 29, 2, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 28), (17, 97), (18, 24), (19, 16), (20, -1), (21, 97), (22, -1), (23, 69), (24, -1), (25, 28), (26, 8), (27, 32), (28, 32), (29, 8), (30, -1), (31, 32), (32, 24), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 13 : {26, 2, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]


Solution : [0, 4, 1, 12, 20, 13] has cost 42.


Before backtrack at level 13
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 13]

After backtrack at level 13
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 26, 29, 2]
 solution : [0, 4, 1, 12, 20, 13]


Invert decision for 13 at level 12


New level: 13
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 26, 29, 2]
 solution : [0, 4, 1, 12, 20]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 26, 29, 2]
 solution : [0, 4, 1, 12, 20]

Essensial at level 13 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 13 : {26, 29}

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 2]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, 0), (27, 1), (28, 1), (29, 0), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 2]


Solution : [0, 4, 1, 12, 20, 2] has cost 49.


Before backtrack at level 13
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11]
 solution : [0, 4, 1, 12, 20, 2]

After backtrack at level 13
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 12
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 11
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 10
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 9
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 9
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 8
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 8
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8]
 solution : [0, 4, 1, 12, 20]


Before backtrack at level 7
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8]
 solution : [0, 4, 1, 12, 20]

After backtrack at level 7
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 20]


Invert decision for 20 at level 6


New level: 7
 pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, 28), (17, 24), (18, 5), (19, 16), (20, -1), (21, 24), (22, -1), (23, 17), (24, -1), (25, 28), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, 5), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 7 among pending : [28, 27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 28 with phase True at level 7

After decision at level 7
 pending : [27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]


New level: 8
 pending : [27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [27, 23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, 128), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, 0), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 8 : {27}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, 0), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28]


Solution : [0, 4, 1, 12, 28] has cost 30.


Decide in level 8 among pending : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 14, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28, 14]


New level: 9
 pending : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28, 14]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 6, 9, 31, 33, 19, 16, 25, 11, 2, 26, 29, 13, 5, 10, 3, 8, 22]
 solution : [0, 4, 1, 12, 28, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 9 : {33, 5, 6, 8, 9, 10, 11, 19, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 2, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 2, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 2, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]


Solution : [0, 4, 1, 12, 28, 14] has cost 36.


Decide in level 9 among pending : [23, 18, 32, 17, 21, 16, 25, 2, 26, 29, 13, 3, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 2 with phase True at level 9

After decision at level 9
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 2]


New level: 10
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 2]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 10 : {32, 3, 13, 16, 17, 18, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 2]


Solution : [0, 4, 1, 12, 28, 14, 2] has cost 49.


Before backtrack at level 10
 pending : []
 solution : [0, 4, 1, 12, 28, 14, 2]

After backtrack at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 2]


Invert decision for 2 at level 9


New level: 10
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]


Solution : [0, 4, 1, 12, 28, 14] has cost 36.


Decide in level 10 among pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 13, 3, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 13]


New level: 11
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 3, 16, 17, 18, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 13]


Solution : [0, 4, 1, 12, 28, 14, 13] has cost 42.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 12, 28, 14, 13]

After backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 3, 22]
 solution : [0, 4, 1, 12, 28, 14]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 16, 17, 18, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 14, 3]


Solution : [0, 4, 1, 12, 28, 14, 3] has cost 42.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 12, 28, 14, 3]

After backtrack at level 11
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22]
 solution : [0, 4, 1, 12, 28, 14]


Before backtrack at level 10
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22]
 solution : [0, 4, 1, 12, 28, 14]

After backtrack at level 10
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13]
 solution : [0, 4, 1, 12, 28, 14]


Before backtrack at level 9
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13]
 solution : [0, 4, 1, 12, 28, 14]

After backtrack at level 9
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28]


Solution : [0, 4, 1, 12, 28] has cost 30.


Decide in level 9 among pending : [3, 23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28, 3]


New level: 10
 pending : [23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 26, 29, 22, 13, 6, 9, 31, 33, 19, 11, 5, 10, 8, 2]
 solution : [0, 4, 1, 12, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 10 : {2, 26, 13, 29}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 5, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 5, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 5, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]


Solution : [0, 4, 1, 12, 28, 3] has cost 36.


Decide in level 10 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 5, 10, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3, 5]


New level: 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 8, 9, 10, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 5]


Solution : [0, 4, 1, 12, 28, 3, 5] has cost 49.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 12, 28, 3, 5]

After backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]
 solution : [0, 4, 1, 12, 28, 3]


Solution : [0, 4, 1, 12, 28, 3] has cost 36.


Decide in level 11 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 10, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 31, 33, 19, 11, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 76), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 12 : {33, 11, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]


Solution : [0, 4, 1, 12, 28, 3, 10] has cost 41.


Before backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8]
 solution : [0, 4, 1, 12, 28, 3, 10]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 32), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3]


Solution : [0, 4, 1, 12, 28, 3] has cost 36.


Decide in level 12 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 8, 31, 33, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3, 8]


New level: 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3, 8]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 3, 8]


Solution : [0, 4, 1, 12, 28, 3, 8] has cost 42.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 12, 28, 3, 8]

After backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 31, 33, 11]
 solution : [0, 4, 1, 12, 28, 3]

Essensial at level 13 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 13 : {33, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 3, 11]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 3, 11]


Solution : [0, 4, 1, 12, 28, 3, 11] has cost 38.


Before backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 3, 11]

After backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 3]


Before backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 3]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8]
 solution : [0, 4, 1, 12, 28, 3]


Before backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8]
 solution : [0, 4, 1, 12, 28, 3]

After backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10]
 solution : [0, 4, 1, 12, 28, 3]


Before backtrack at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10]
 solution : [0, 4, 1, 12, 28, 3]

After backtrack at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28]


Solution : [0, 4, 1, 12, 28] has cost 30.


Decide in level 10 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 8, 10, 26, 29, 13, 2, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28, 8]


New level: 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28, 8]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 26, 29, 13, 2, 5]
 solution : [0, 4, 1, 12, 28, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 11 : {33, 5, 6, 9, 10, 11, 19, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 28, 8]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 28, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 13, 2]
 solution : [0, 4, 1, 12, 28, 8]


Solution : [0, 4, 1, 12, 28, 8] has cost 36.


Decide in level 11 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8, 13]


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, 2), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 2, 16, 17, 18, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 13]


Solution : [0, 4, 1, 12, 28, 8, 13] has cost 42.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 12, 28, 8, 13]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 2]
 solution : [0, 4, 1, 12, 28, 8]

Essensial at level 12 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 16, 17, 18, 21, 22, 23, 25, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 8, 2]


Solution : [0, 4, 1, 12, 28, 8, 2] has cost 49.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 12, 28, 8, 2]

After backtrack at level 12
 pending : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29]
 solution : [0, 4, 1, 12, 28, 8]


Before backtrack at level 11
 pending : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29]
 solution : [0, 4, 1, 12, 28, 8]

After backtrack at level 11
 pending : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28]


Solution : [0, 4, 1, 12, 28] has cost 30.


Decide in level 11 among pending : [2, 23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28, 2]


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28, 2]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 26, 29, 6, 9, 19, 11, 31, 33, 10, 5, 13]
 solution : [0, 4, 1, 12, 28, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, 76), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 12 : {26, 13, 29}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 2]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 2]


Solution : [0, 4, 1, 12, 28, 2] has cost 43.


Before backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 2]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5, 26, 29, 13]
 solution : [0, 4, 1, 12, 28, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5, 26, 29, 13]
 solution : [0, 4, 1, 12, 28]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5, 26, 29, 13]
 solution : [0, 4, 1, 12, 28]

Essensial at level 12 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 12 : {26, 29}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]
 solution : [0, 4, 1, 12, 28, 13]


Solution : [0, 4, 1, 12, 28, 13] has cost 36.


Decide in level 12 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 10, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]


New level: 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 13 : {33, 11, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]


Solution : [0, 4, 1, 12, 28, 13, 10] has cost 41.


Before backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5]
 solution : [0, 4, 1, 12, 28, 13, 10]

After backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, 8), (7, -1), (8, -1), (9, 8), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]


Solution : [0, 4, 1, 12, 28, 13] has cost 36.


Decide in level 13 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 5, 11, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13, 5]


New level: 14
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 64), (7, -1), (8, -1), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 28), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 6, 9, 11, 16, 17, 18, 19, 21, 22, 23, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 13, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 28, 13, 5]


Solution : [0, 4, 1, 12, 28, 13, 5] has cost 49.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 12, 28, 13, 5]

After backtrack at level 14
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]

Essensial at level 14 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 14 : {33, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 13, 11]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 13, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 13, 11]


Solution : [0, 4, 1, 12, 28, 13, 11] has cost 38.


Before backtrack at level 14
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19]
 solution : [0, 4, 1, 12, 28, 13, 11]

After backtrack at level 14
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]


Before backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33]
 solution : [0, 4, 1, 12, 28, 13]

After backtrack at level 13
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5]
 solution : [0, 4, 1, 12, 28, 13]


Before backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5]
 solution : [0, 4, 1, 12, 28, 13]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10]
 solution : [0, 4, 1, 12, 28]


Before backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10]
 solution : [0, 4, 1, 12, 28]

After backtrack at level 11
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2]
 solution : [0, 4, 1, 12, 28]


Before backtrack at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2]
 solution : [0, 4, 1, 12, 28]

After backtrack at level 10
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8]
 solution : [0, 4, 1, 12, 28]


Before backtrack at level 9
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8]
 solution : [0, 4, 1, 12, 28]

After backtrack at level 9
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3]
 solution : [0, 4, 1, 12, 28]


Before backtrack at level 8
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3]
 solution : [0, 4, 1, 12, 28]

After backtrack at level 8
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 28]


Invert decision for 28 at level 7


New level: 8
 pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 4), (19, 2), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 11), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 8 among pending : [23, 18, 32, 17, 21, 16, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [23, 18, 32, 17, 21, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]


New level: 9
 pending : [23, 18, 32, 17, 21, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 25, 22, 6, 9, 19, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, 128), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, 0), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

Covered at level 9 : {25, 19}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, 0), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]


Solution : [0, 4, 1, 12, 16] has cost 49.


Before backtrack at level 9
 pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14]
 solution : [0, 4, 1, 12, 16]

After backtrack at level 9
 pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 9 among pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 5, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12, 5]


New level: 10
 pending : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 6, 9, 11, 31, 33, 13, 26, 29, 10, 2, 8, 3, 27, 14, 25, 19]
 solution : [0, 4, 1, 12, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 0), (32, 16), (33, 0)]

Covered at level 10 : {33, 6, 8, 9, 10, 11, 14, 31}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 13, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 13, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, 0), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 13, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Solution : [0, 4, 1, 12, 5] has cost 33.


Decide in level 10 among pending : [23, 18, 32, 17, 21, 22, 13, 26, 29, 2, 3, 27, 25, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 13]


New level: 11
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 13]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 11 : {32, 2, 3, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 13]


Solution : [0, 4, 1, 12, 5, 13] has cost 39.


Before backtrack at level 11
 pending : []
 solution : [0, 4, 1, 12, 5, 13]

After backtrack at level 11
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Solution : [0, 4, 1, 12, 5] has cost 33.


Decide in level 11 among pending : [23, 18, 32, 17, 21, 22, 26, 29, 2, 3, 27, 25, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 2]


New level: 12
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 2]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, 14), (26, 32), (27, 32), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 3, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 2]


Solution : [0, 4, 1, 12, 5, 2] has cost 46.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 12, 5, 2]

After backtrack at level 12
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 3, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 12 : {32, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 5, 3]


Solution : [0, 4, 1, 12, 5, 3] has cost 39.


Before backtrack at level 12
 pending : []
 solution : [0, 4, 1, 12, 5, 3]

After backtrack at level 12
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]


Before backtrack at level 11
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19]
 solution : [0, 4, 1, 12, 5]

After backtrack at level 11
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2]
 solution : [0, 4, 1, 12, 5]


Before backtrack at level 10
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2]
 solution : [0, 4, 1, 12, 5]

After backtrack at level 10
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 10 among pending : [3, 23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12, 3]


New level: 11
 pending : [23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 26, 29, 27, 25, 19, 2, 6, 9, 11, 31, 33, 10, 8, 14, 13]
 solution : [0, 4, 1, 12, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, 0), (27, 8), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 11 : {13, 26, 2, 29}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 10, 8, 14]
 solution : [0, 4, 1, 12, 3]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 10, 8, 14]
 solution : [0, 4, 1, 12, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, 0), (27, 8), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 10, 8, 14]
 solution : [0, 4, 1, 12, 3]


Solution : [0, 4, 1, 12, 3] has cost 26.


Decide in level 11 among pending : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 10, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


New level: 12
 pending : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 11, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 12 : {11}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 12 among pending : [23, 18, 32, 17, 21, 22, 27, 25, 19, 6, 9, 31, 33, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [23, 18, 32, 17, 21, 22, 27, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]


New level: 13
 pending : [23, 18, 32, 17, 21, 22, 27, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 19, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 13 : {19}

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]


Solution : [0, 4, 1, 12, 3, 10, 25] has cost 60.


Before backtrack at level 13
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 25]

After backtrack at level 13
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14, 19]
 solution : [0, 4, 1, 12, 3, 10, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14, 19]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14, 19]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14, 19]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 13 among pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 13

After decision at level 13
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]


New level: 14
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]


Solution : [0, 4, 1, 12, 3, 10, 19] has cost 41.


Before backtrack at level 14
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]

After backtrack at level 14
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10, 19]


Invert decision for 19 at level 13


New level: 14
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 14 among pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10, 8]


New level: 15
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10, 8]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 6, 9, 14, 17, 18, 21, 22, 23, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 8]


Solution : [0, 4, 1, 12, 3, 10, 8] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 3, 10, 8]

After backtrack at level 15
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 15 among pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 14 with phase True at level 15

After decision at level 15
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 14]


New level: 16
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 14]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, 32), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 6, 9, 17, 18, 21, 22, 23, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 10, 14]


Solution : [0, 4, 1, 12, 3, 10, 14] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 4, 1, 12, 3, 10, 14]

After backtrack at level 16
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 14]


Invert decision for 14 at level 15


New level: 16
 pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 16 among pending : [23, 18, 32, 17, 21, 22, 27, 6, 9, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 17 with phase True at level 16

After decision at level 16
 pending : [23, 18, 32, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 17]


New level: 17
 pending : [23, 18, 32, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 17]


Before reduction : 
 pending  : [23, 18, 32, 21, 22, 27, 6, 9, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 17]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 18, 21, 22, 23, 27, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 17]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 17]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 17]


Solution : [0, 4, 1, 12, 3, 10, 17] has cost 65.


Before backtrack at level 17
 pending : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 17]

After backtrack at level 17
 pending : [6, 9, 23, 18, 32, 21, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 17]


Invert decision for 17 at level 16


New level: 17
 pending : [6, 9, 23, 18, 32, 21, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 21, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 21, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 17 among pending : [6, 9, 23, 18, 32, 21, 22, 27, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 21 with phase True at level 17

After decision at level 17
 pending : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 21]


New level: 18
 pending : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 21]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 18, 22, 23, 27, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 21]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 21]


Solution : [0, 4, 1, 12, 3, 10, 21] has cost 65.


Before backtrack at level 18
 pending : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 21]

After backtrack at level 18
 pending : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 21]


Invert decision for 21 at level 17


New level: 18
 pending : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 9, 23, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Solution : [0, 4, 1, 12, 3, 10] has cost 31.


Decide in level 18 among pending : [6, 9, 23, 18, 32, 22, 27, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 23 with phase True at level 18

After decision at level 18
 pending : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 23]


New level: 19
 pending : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 23]


Before reduction : 
 pending  : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 23]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 18, 22, 27, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 23]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 23]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 23]


Solution : [0, 4, 1, 12, 3, 10, 23] has cost 65.


Before backtrack at level 19
 pending : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 23]

After backtrack at level 19
 pending : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10, 23]


Invert decision for 23 at level 18


New level: 19
 pending : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Before reduction : 
 pending  : [6, 9, 18, 32, 22, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]

Essensial at level 19 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 18, 27, 31}

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 22]


Before reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 22]


Solution : [0, 4, 1, 12, 3, 10, 22] has cost 65.


Before backtrack at level 19
 pending : [6, 9]
 solution : [0, 4, 1, 12, 3, 10, 22]

After backtrack at level 19
 pending : [6, 9, 22, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 18
 pending : [6, 9, 22, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 18
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 17
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 17
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19]
 solution : [0, 4, 1, 12, 3, 10]


Before backtrack at level 12
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19]
 solution : [0, 4, 1, 12, 3, 10]

After backtrack at level 12
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Solution : [0, 4, 1, 12, 3] has cost 26.


Decide in level 12 among pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 14, 8, 19, 11, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 14]


New level: 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 14]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 6, 8, 9, 11, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 14]


Solution : [0, 4, 1, 12, 3, 14] has cost 32.


Before backtrack at level 13
 pending : []
 solution : [0, 4, 1, 12, 3, 14]

After backtrack at level 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Solution : [0, 4, 1, 12, 3] has cost 26.


Decide in level 13 among pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 8, 19, 11, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 8]


New level: 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 8]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 6, 9, 11, 17, 18, 19, 21, 22, 23, 25, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 3, 8]


Solution : [0, 4, 1, 12, 3, 8] has cost 32.


Before backtrack at level 14
 pending : []
 solution : [0, 4, 1, 12, 3, 8]

After backtrack at level 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]

Essensial at level 14 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 25]
 solution : [0, 4, 1, 12, 3, 11]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 25]
 solution : [0, 4, 1, 12, 3, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 25]
 solution : [0, 4, 1, 12, 3, 11]


Solution : [0, 4, 1, 12, 3, 11] has cost 28.


Decide in level 14 among pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 25 with phase True at level 14

After decision at level 14
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11, 25]


New level: 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11, 25]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, 104), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 15 : {19}

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 25]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 9), (18, 3), (19, 0), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 25]


Solution : [0, 4, 1, 12, 3, 11, 25] has cost 57.


Before backtrack at level 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 25]

After backtrack at level 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11, 25]


Invert decision for 25 at level 14


New level: 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 9), (18, 3), (19, -1), (20, -1), (21, 9), (22, 9), (23, 9), (24, -1), (25, -1), (26, -1), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]
 solution : [0, 4, 1, 12, 3, 11]


Solution : [0, 4, 1, 12, 3, 11] has cost 28.


Decide in level 15 among pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 15

After decision at level 15
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]


New level: 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]


Solution : [0, 4, 1, 12, 3, 11, 19] has cost 38.


Before backtrack at level 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]

After backtrack at level 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 19]


Invert decision for 19 at level 15


New level: 16
 pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11]


Before reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11]


Solution : [0, 4, 1, 12, 3, 11] has cost 28.


Decide in level 16 among pending : [6, 9, 22, 18, 32, 27, 31, 33, 23, 21, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]


New level: 17
 pending : [9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]


Before reduction : 
 pending  : [9, 22, 18, 32, 27, 31, 33, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 9, 18, 27, 31}

After reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]


Before reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]


Solution : [0, 4, 1, 12, 3, 11, 6] has cost 37.


Before backtrack at level 17
 pending : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 6]

After backtrack at level 17
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 11, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 11]


Before reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 11]

Essensial at level 17 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 18, 27, 31}

After reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 9]


Before reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 9]


Solution : [0, 4, 1, 12, 3, 11, 9] has cost 37.


Before backtrack at level 17
 pending : [22, 23, 21, 17]
 solution : [0, 4, 1, 12, 3, 11, 9]

After backtrack at level 17
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 11]


Before backtrack at level 16
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33]
 solution : [0, 4, 1, 12, 3, 11]

After backtrack at level 16
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6]
 solution : [0, 4, 1, 12, 3, 11]


Before backtrack at level 15
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6]
 solution : [0, 4, 1, 12, 3, 11]

After backtrack at level 15
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19]
 solution : [0, 4, 1, 12, 3, 11]


Before backtrack at level 14
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19]
 solution : [0, 4, 1, 12, 3, 11]

After backtrack at level 14
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]


Before backtrack at level 13
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25]
 solution : [0, 4, 1, 12, 3]

After backtrack at level 13
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8]
 solution : [0, 4, 1, 12, 3]


Before backtrack at level 12
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8]
 solution : [0, 4, 1, 12, 3]

After backtrack at level 12
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14]
 solution : [0, 4, 1, 12, 3]


Before backtrack at level 11
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14]
 solution : [0, 4, 1, 12, 3]

After backtrack at level 11
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 11 among pending : [22, 23, 21, 17, 9, 18, 32, 27, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 27 with phase True at level 11

After decision at level 11
 pending : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27]


New level: 12
 pending : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27]


Before reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, 128), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27]


Solution : [0, 4, 1, 12, 27] has cost 30.


Decide in level 12 among pending : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 8, 14, 26, 29, 2, 13, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27, 8]


New level: 13
 pending : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27, 8]


Before reduction : 
 pending  : [22, 23, 21, 17, 9, 18, 32, 31, 33, 6, 19, 11, 25, 14, 26, 29, 2, 13, 10]
 solution : [0, 4, 1, 12, 27, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, -1), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

Covered at level 13 : {33, 6, 9, 10, 11, 14, 19, 31}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 27, 8]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 27, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, 0), (15, -1), (16, -1), (17, 10), (18, 4), (19, 0), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 0), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 27, 8]


Solution : [0, 4, 1, 12, 27, 8] has cost 36.


Before backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13]
 solution : [0, 4, 1, 12, 27, 8]

After backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 10), (18, 4), (19, -1), (20, -1), (21, 10), (22, 8), (23, 8), (24, -1), (25, 2), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, -1), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27]


Solution : [0, 4, 1, 12, 27] has cost 30.


Decide in level 13 among pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 2, 13, 9, 31, 33, 6, 19, 11, 14, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]


New level: 14
 pending : [22, 23, 21, 17, 18, 32, 25, 26, 29, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 26, 29, 13, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 64), (18, 32), (19, 16), (20, -1), (21, 64), (22, 64), (23, 64), (24, -1), (25, 76), (26, 8), (27, -1), (28, -1), (29, 8), (30, -1), (31, 8), (32, 32), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 14 : {26, 13, 29}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]


Solution : [0, 4, 1, 12, 27, 2] has cost 43.


Before backtrack at level 14
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 2]

After backtrack at level 14
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 26, 29, 13]
 solution : [0, 4, 1, 12, 27, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 26, 29, 13]
 solution : [0, 4, 1, 12, 27]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 26, 29, 13]
 solution : [0, 4, 1, 12, 27]

Essensial at level 14 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 76), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 28), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 14 : {26, 29}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 13]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 28), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 28), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 13]


Solution : [0, 4, 1, 12, 27, 13] has cost 36.


Before backtrack at level 14
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10]
 solution : [0, 4, 1, 12, 27, 13]

After backtrack at level 14
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29]
 solution : [0, 4, 1, 12, 27]


Before backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29]
 solution : [0, 4, 1, 12, 27]

After backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2]
 solution : [0, 4, 1, 12, 27]


Before backtrack at level 12
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2]
 solution : [0, 4, 1, 12, 27]

After backtrack at level 12
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 27]


Invert decision for 27 at level 11


New level: 12
 pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, -1), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 128), (15, -1), (16, -1), (17, 16), (18, 4), (19, 16), (20, -1), (21, 16), (22, 16), (23, 16), (24, -1), (25, 28), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 12 among pending : [22, 23, 21, 17, 18, 32, 25, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 25 with phase True at level 12

After decision at level 12
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]


New level: 13
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 19, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, 128), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

Covered at level 13 : {19}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, 0), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]


Solution : [0, 4, 1, 12, 25] has cost 49.


Before backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8]
 solution : [0, 4, 1, 12, 25]

After backtrack at level 13
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12, 25]


Invert decision for 25 at level 12


New level: 13
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 41), (18, 16), (19, -1), (20, -1), (21, 41), (22, 37), (23, 37), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 4), (32, 16), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 13 among pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 14, 10, 13, 26, 29, 2, 8, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 14 with phase True at level 13

After decision at level 13
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12, 14]


New level: 14
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12, 14]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 11, 10, 13, 26, 29, 2, 8, 19]
 solution : [0, 4, 1, 12, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, 128), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, 16), (33, 0)]

Covered at level 14 : {33, 6, 8, 9, 10, 11, 31}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 13, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 13, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 0), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 13, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14]


Solution : [0, 4, 1, 12, 14] has cost 26.


Decide in level 14 among pending : [22, 23, 21, 17, 18, 32, 13, 26, 29, 2, 19]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

Decide 13 with phase True at level 14

After decision at level 14
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14, 13]


New level: 15
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14, 13]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 26), (18, 16), (19, 4), (20, -1), (21, 26), (22, 20), (23, 20), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, -1), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 2, 17, 18, 19, 21, 22, 23, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 13]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 13]


Solution : [0, 4, 1, 12, 14, 13] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 14, 13]

After backtrack at level 15
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14, 13]


Invert decision for 13 at level 14


New level: 15
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 26, 29, 2, 19]
 solution : [0, 4, 1, 12, 14]

Essensial at level 15 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

Covered at level 15 : {32, 17, 18, 19, 21, 22, 23, 26, 29}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 2]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 14, 2]


Solution : [0, 4, 1, 12, 14, 2] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 4, 1, 12, 14, 2]

After backtrack at level 15
 pending : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19]
 solution : [0, 4, 1, 12, 14]


Before backtrack at level 14
 pending : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19]
 solution : [0, 4, 1, 12, 14]

After backtrack at level 14
 pending : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12, 14]


Invert decision for 14 at level 13


New level: 14
 pending : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12]


Solution : [0, 4, 1, 12] has cost 20.


Decide in level 14 among pending : [2, 22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

Decide 2 with phase True at level 14

After decision at level 14
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12, 2]


New level: 15
 pending : [22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12, 2]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 26, 29, 19, 9, 31, 33, 6, 11, 10, 8, 13]
 solution : [0, 4, 1, 12, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 128), (14, -1), (15, -1), (16, -1), (17, 98), (18, 52), (19, 64), (20, -1), (21, 98), (22, 74), (23, 74), (24, -1), (25, -1), (26, 32), (27, -1), (28, -1), (29, 32), (30, -1), (31, 32), (32, 52), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 15 : {26, 13, 29}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 2]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 0), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 2]


Solution : [0, 4, 1, 12, 2] has cost 33.


Before backtrack at level 15
 pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 2]

After backtrack at level 15
 pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8, 26, 29, 13]
 solution : [0, 4, 1, 12, 2]


Invert decision for 2 at level 14


New level: 15
 pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8, 26, 29, 13]
 solution : [0, 4, 1, 12]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8, 26, 29, 13]
 solution : [0, 4, 1, 12]

Essensial at level 15 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 15 : {26, 29}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 13]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, 0), (27, -1), (28, -1), (29, 0), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]
 solution : [0, 4, 1, 12, 13]


Solution : [0, 4, 1, 12, 13] has cost 26.


Decide in level 15 among pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 10, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Decide 10 with phase True at level 15

After decision at level 15
 pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 8]
 solution : [0, 4, 1, 12, 13, 10]


New level: 16
 pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 8]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 11, 8]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : {11}

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]


Solution : [0, 4, 1, 12, 13, 10] has cost 31.


Decide in level 16 among pending : [22, 23, 21, 17, 18, 32, 19, 9, 31, 33, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 16

After decision at level 16
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]


New level: 17
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]


Solution : [0, 4, 1, 12, 13, 10, 19] has cost 41.


Before backtrack at level 17
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]

After backtrack at level 17
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10, 19]


Invert decision for 19 at level 16


New level: 17
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]
 solution : [0, 4, 1, 12, 13, 10]


Solution : [0, 4, 1, 12, 13, 10] has cost 31.


Decide in level 17 among pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 8 with phase True at level 17

After decision at level 17
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 8]


New level: 18
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 8]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 32), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 6, 9, 17, 18, 21, 22, 23, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 10, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 10, 8]


Solution : [0, 4, 1, 12, 13, 10, 8] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 4, 1, 12, 13, 10, 8]

After backtrack at level 18
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 8]


Invert decision for 8 at level 17


New level: 18
 pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10]


Solution : [0, 4, 1, 12, 13, 10] has cost 31.


Decide in level 18 among pending : [22, 23, 21, 17, 18, 32, 9, 31, 33, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 21 with phase True at level 18

After decision at level 18
 pending : [22, 23, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]


New level: 19
 pending : [22, 23, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]


Before reduction : 
 pending  : [22, 23, 17, 18, 32, 9, 31, 33, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 17, 18, 22, 23, 31}

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]


Before reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]


Solution : [0, 4, 1, 12, 13, 10, 21] has cost 65.


Before backtrack at level 19
 pending : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 21]

After backtrack at level 19
 pending : [9, 6, 22, 23, 17, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 21]


Invert decision for 21 at level 18


New level: 19
 pending : [9, 6, 22, 23, 17, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [9, 6, 22, 23, 17, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [9, 6, 22, 23, 17, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Solution : [0, 4, 1, 12, 13, 10] has cost 31.


Decide in level 19 among pending : [9, 6, 22, 23, 17, 18, 32, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 17 with phase True at level 19

After decision at level 19
 pending : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 17]


New level: 20
 pending : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 17]


Before reduction : 
 pending  : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 18, 22, 23, 31}

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 17]


Before reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 17]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 17]


Solution : [0, 4, 1, 12, 13, 10, 17] has cost 65.


Before backtrack at level 20
 pending : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 17]

After backtrack at level 20
 pending : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 17]


Invert decision for 17 at level 19


New level: 20
 pending : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 20 : set()

After reduction : 
 pending  : [9, 6, 22, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Solution : [0, 4, 1, 12, 13, 10] has cost 31.


Decide in level 20 among pending : [9, 6, 22, 23, 18, 32, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 22 with phase True at level 20

After decision at level 20
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 22]


New level: 21
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 22]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 22]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, -1), (9, 16), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, -1), (21, -1), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 18, 23, 31}

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 22]


Before reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 22]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 22]


Solution : [0, 4, 1, 12, 13, 10, 22] has cost 65.


Before backtrack at level 21
 pending : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 22]

After backtrack at level 21
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10, 22]


Invert decision for 22 at level 20


New level: 21
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]

Essensial at level 21 : {23}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 18, 31}

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 23]


Before reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 23]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 23]


Solution : [0, 4, 1, 12, 13, 10, 23] has cost 65.


Before backtrack at level 21
 pending : [9, 6]
 solution : [0, 4, 1, 12, 13, 10, 23]

After backtrack at level 21
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]


Before backtrack at level 20
 pending : [9, 6, 23, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 10]

After backtrack at level 20
 pending : [9, 6, 23, 18, 32, 31, 33, 22]
 solution : [0, 4, 1, 12, 13, 10]


Before backtrack at level 19
 pending : [9, 6, 23, 18, 32, 31, 33, 22]
 solution : [0, 4, 1, 12, 13, 10]

After backtrack at level 19
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17]
 solution : [0, 4, 1, 12, 13, 10]


Before backtrack at level 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17]
 solution : [0, 4, 1, 12, 13, 10]

After backtrack at level 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 10]


Before backtrack at level 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 10]

After backtrack at level 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8]
 solution : [0, 4, 1, 12, 13, 10]


Before backtrack at level 16
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8]
 solution : [0, 4, 1, 12, 13, 10]

After backtrack at level 16
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8, 11, 19]
 solution : [0, 4, 1, 12, 13, 10]


Invert decision for 10 at level 15


New level: 16
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8, 11, 19]
 solution : [0, 4, 1, 12, 13]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8, 11, 19]
 solution : [0, 4, 1, 12, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, -1), (9, 1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8, 11, 19]
 solution : [0, 4, 1, 12, 13]


Solution : [0, 4, 1, 12, 13] has cost 26.


Decide in level 16 among pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 8, 11, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13, 8]


New level: 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13, 8]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, 64), (10, -1), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 6, 9, 11, 17, 18, 19, 21, 22, 23, 31}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 12, 13, 8]


Solution : [0, 4, 1, 12, 13, 8] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 4, 1, 12, 13, 8]

After backtrack at level 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 11, 19]
 solution : [0, 4, 1, 12, 13]

Essensial at level 17 : {11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 19]
 solution : [0, 4, 1, 12, 13, 11]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 19]
 solution : [0, 4, 1, 12, 13, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 19]
 solution : [0, 4, 1, 12, 13, 11]


Solution : [0, 4, 1, 12, 13, 11] has cost 28.


Decide in level 17 among pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 19 with phase True at level 17

After decision at level 17
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]


New level: 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, 64), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]


Solution : [0, 4, 1, 12, 13, 11, 19] has cost 38.


Before backtrack at level 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]

After backtrack at level 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 19]


Invert decision for 19 at level 17


New level: 18
 pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11]


Before reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 6), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11]


Solution : [0, 4, 1, 12, 13, 11] has cost 28.


Decide in level 18 among pending : [9, 6, 23, 18, 32, 31, 33, 22, 17, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

Decide 9 with phase True at level 18

After decision at level 18
 pending : [6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]


New level: 19
 pending : [6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]


Before reduction : 
 pending  : [6, 23, 18, 32, 31, 33, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 24), (18, 10), (19, -1), (20, -1), (21, 24), (22, 18), (23, 18), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 10), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 6, 18, 31}

After reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]


Before reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]


Solution : [0, 4, 1, 12, 13, 11, 9] has cost 37.


Before backtrack at level 19
 pending : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 9]

After backtrack at level 19
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 11, 9]


Invert decision for 9 at level 18


New level: 19
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 11]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 11]

Essensial at level 19 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 18, 31}

After reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 6]


Before reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, 0), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 6]


Solution : [0, 4, 1, 12, 13, 11, 6] has cost 37.


Before backtrack at level 19
 pending : [23, 22, 17, 21]
 solution : [0, 4, 1, 12, 13, 11, 6]

After backtrack at level 19
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 11]


Before backtrack at level 18
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33]
 solution : [0, 4, 1, 12, 13, 11]

After backtrack at level 18
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9]
 solution : [0, 4, 1, 12, 13, 11]


Before backtrack at level 17
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9]
 solution : [0, 4, 1, 12, 13, 11]

After backtrack at level 17
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19]
 solution : [0, 4, 1, 12, 13]


Before backtrack at level 16
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19]
 solution : [0, 4, 1, 12, 13]

After backtrack at level 16
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8]
 solution : [0, 4, 1, 12, 13]


Before backtrack at level 15
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8]
 solution : [0, 4, 1, 12, 13]

After backtrack at level 15
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10]
 solution : [0, 4, 1, 12]


Before backtrack at level 14
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10]
 solution : [0, 4, 1, 12]

After backtrack at level 14
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2]
 solution : [0, 4, 1, 12]


Before backtrack at level 13
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2]
 solution : [0, 4, 1, 12]

After backtrack at level 13
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14]
 solution : [0, 4, 1, 12]


Before backtrack at level 12
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14]
 solution : [0, 4, 1, 12]

After backtrack at level 12
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25]
 solution : [0, 4, 1, 12]


Before backtrack at level 11
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25]
 solution : [0, 4, 1, 12]

After backtrack at level 11
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27]
 solution : [0, 4, 1, 12]


Before backtrack at level 10
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27]
 solution : [0, 4, 1, 12]

After backtrack at level 10
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3]
 solution : [0, 4, 1, 12]


Before backtrack at level 9
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3]
 solution : [0, 4, 1, 12]

After backtrack at level 9
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5]
 solution : [0, 4, 1, 12]


Before backtrack at level 8
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5]
 solution : [0, 4, 1, 12]

After backtrack at level 8
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16]
 solution : [0, 4, 1, 12]


Before backtrack at level 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16]
 solution : [0, 4, 1, 12]

After backtrack at level 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28]
 solution : [0, 4, 1, 12]


Before backtrack at level 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28]
 solution : [0, 4, 1, 12]

After backtrack at level 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20]
 solution : [0, 4, 1, 12]


Before backtrack at level 5
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20]
 solution : [0, 4, 1, 12]

After backtrack at level 5
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24]
 solution : [0, 4, 1, 12]


Before backtrack at level 4
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24]
 solution : [0, 4, 1, 12]

After backtrack at level 4
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, 8), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 456), (22, 232), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1]


Solution : [0, 4, 1] has cost 10.


Decide in level 4 among pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 13, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 456), (22, 232), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


New level: 5
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 26, 29, 10, 2, 14, 25, 27, 3, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, -1), (5, 264), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, 512), (14, 512), (15, -1), (16, 160), (17, 200), (18, 112), (19, 64), (20, 384), (21, 456), (22, 232), (23, 140), (24, 192), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 512), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, 0), (27, 32), (28, 16), (29, 0), (30, 32), (31, 256), (32, 10), (33, 128)]

Covered at level 5 : {3, 26, 2, 29}

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 14, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 14, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 512), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, 0), (27, 32), (28, 16), (29, 0), (30, 32), (31, 256), (32, 10), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 512), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 14, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


Solution : [0, 4, 1, 13] has cost 16.


Decide in level 5 among pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 14, 25, 27, 5, 16, 28, 20, 24, 30, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 512), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 14]


New level: 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 14]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, 512), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 14]


Solution : [0, 4, 1, 13, 14] has cost 22.


Before backtrack at level 6
 pending : []
 solution : [0, 4, 1, 13, 14]

After backtrack at level 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13]


Solution : [0, 4, 1, 13] has cost 16.


Decide in level 6 among pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 25, 27, 5, 16, 28, 20, 24, 30, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Decide 25 with phase True at level 6

After decision at level 6
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 25]


New level: 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 25]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 19, 8, 10, 27, 5, 16, 28, 20, 24, 30, 7]
 solution : [0, 4, 1, 13, 25]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, 400), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 257), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 18), (18, 6), (19, 0), (20, 0), (21, 36), (22, 18), (23, 9), (24, 0), (25, -1), (26, -1), (27, 4), (28, 2), (29, -1), (30, 8), (31, 64), (32, 3), (33, 16)]

Covered at level 7 : {16, 24, 19, 20}

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7]
 solution : [0, 4, 1, 13, 25]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7]
 solution : [0, 4, 1, 13, 25]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 257), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 18), (18, 6), (19, 0), (20, 0), (21, 36), (22, 18), (23, 9), (24, 0), (25, -1), (26, -1), (27, 4), (28, 2), (29, -1), (30, 8), (31, 64), (32, 3), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 257), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 18), (18, 6), (19, -1), (20, -1), (21, 36), (22, 18), (23, 9), (24, -1), (25, -1), (26, -1), (27, 4), (28, 2), (29, -1), (30, 8), (31, 64), (32, 3), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7]
 solution : [0, 4, 1, 13, 25]


Solution : [0, 4, 1, 13, 25] has cost 45.


Before backtrack at level 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7]
 solution : [0, 4, 1, 13, 25]

After backtrack at level 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13, 25]


Invert decision for 25 at level 6


New level: 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 257), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 18), (18, 6), (19, -1), (20, -1), (21, 36), (22, 18), (23, 9), (24, -1), (25, -1), (26, -1), (27, 4), (28, 2), (29, -1), (30, 8), (31, 64), (32, 3), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, -1), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13]


Solution : [0, 4, 1, 13] has cost 16.


Decide in level 7 among pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 5, 28, 30, 7, 19, 16, 20, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, -1), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13, 5]


New level: 8
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13, 5]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 258), (6, 128), (7, 256), (8, 128), (9, 64), (10, 128), (11, 64), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 64), (20, 10), (21, 98), (22, 49), (23, 18), (24, 5), (25, -1), (26, -1), (27, 32), (28, 16), (29, -1), (30, 32), (31, 256), (32, 10), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 13, 5]


Solution : [0, 4, 1, 13, 5] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 4, 1, 13, 5]

After backtrack at level 8
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13]


Before reduction : 
 pending  : [23, 22, 17, 21, 6, 18, 32, 31, 33, 9, 11, 8, 10, 27, 28, 30, 7, 19, 16, 20, 24]
 solution : [0, 4, 1, 13]

Essensial at level 8 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 64), (8, 32), (9, 0), (10, 8), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 0), (19, 0), (20, 0), (21, 66), (22, 34), (23, 8), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 16), (31, 16), (32, 0), (33, 2)]

Covered at level 8 : {32, 9, 18, 19, 20, 24, 27, 28}

After reduction : 
 pending  : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16]
 solution : [0, 4, 1, 13, 6]


Before reduction : 
 pending  : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16]
 solution : [0, 4, 1, 13, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 64), (8, 32), (9, 0), (10, 8), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, 0), (19, 0), (20, 0), (21, 66), (22, 34), (23, 8), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, 16), (31, 16), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 64), (8, 32), (9, -1), (10, 8), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, -1), (19, -1), (20, -1), (21, 66), (22, 34), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 16), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16]
 solution : [0, 4, 1, 13, 6]


Solution : [0, 4, 1, 13, 6] has cost 25.


Before backtrack at level 8
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16]
 solution : [0, 4, 1, 13, 6]

After backtrack at level 8
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24]
 solution : [0, 4, 1, 13]


Before backtrack at level 7
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24]
 solution : [0, 4, 1, 13]

After backtrack at level 7
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5]
 solution : [0, 4, 1, 13]


Before backtrack at level 6
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5]
 solution : [0, 4, 1, 13]

After backtrack at level 6
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25]
 solution : [0, 4, 1, 13]


Before backtrack at level 5
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25]
 solution : [0, 4, 1, 13]

After backtrack at level 5
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 2, 3, 14]
 solution : [0, 4, 1, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 2, 3, 14]
 solution : [0, 4, 1]


Before reduction : 
 pending  : [23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 2, 3, 14]
 solution : [0, 4, 1]

Essensial at level 5 : {2, 14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 64), (8, 32), (9, -1), (10, 8), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 11), (17, 16), (18, -1), (19, -1), (20, -1), (21, 66), (22, 34), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 16), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {3, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 1, 2, 14]


Before reduction : 
 pending  : []
 solution : [0, 4, 1, 2, 14]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 1, 2, 14]


Solution : [0, 4, 1, 2, 14] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 4, 1, 2, 14]

After backtrack at level 5
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3]
 solution : [0, 4, 1]


Before backtrack at level 4
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3]
 solution : [0, 4, 1]

After backtrack at level 4
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13]
 solution : [0, 4, 1]


Before backtrack at level 3
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13]
 solution : [0, 4, 1]

After backtrack at level 3
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12]
 solution : [0, 4, 1]


Before backtrack at level 2
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12]
 solution : [0, 4, 1]

After backtrack at level 2
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4]


Before reduction : 
 pending  : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 464), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4]


Solution : [0, 4] has cost 7.


Decide in level 2 among pending : [2, 14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]

Coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 464), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

Decide 2 with phase True at level 2

After decision at level 2
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4, 2]


New level: 3
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 29, 3, 13, 12, 15]
 solution : [0, 4, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 464), (23, 560), (24, 384), (25, 512), (26, 128), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 256), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, 768), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, 0), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 3 : {29}

After reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12, 15]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12, 15]
 solution : [0, 4, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, 768), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, 0), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, 768), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12, 15]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 3 among pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, 768), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]


New level: 4
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 24, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, 768), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 528), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 264), (13, 128), (14, 512), (15, -1), (16, 16), (17, 49), (18, 48), (19, 16), (20, 5), (21, 70), (22, 65), (23, 40), (24, 0), (25, 24), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 40), (33, 256)]

Covered at level 4 : {24}

After reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 528), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 264), (13, 128), (14, 512), (15, -1), (16, 16), (17, 49), (18, 48), (19, 16), (20, 5), (21, 70), (22, 65), (23, 40), (24, 0), (25, 24), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 40), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 528), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 264), (13, 128), (14, 512), (15, -1), (16, 16), (17, 49), (18, 48), (19, 16), (20, 5), (21, 70), (22, 65), (23, 40), (24, -1), (25, 24), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 40), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]


Solution : [0, 4, 2, 15] has cost 41.


Before backtrack at level 4
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12]
 solution : [0, 4, 2, 15]

After backtrack at level 4
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 528), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 264), (13, 128), (14, 512), (15, -1), (16, 16), (17, 49), (18, 48), (19, 16), (20, 5), (21, 70), (22, 65), (23, 40), (24, -1), (25, 24), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 40), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 4 among pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 5, 25, 26, 3, 13, 12, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 5 with phase True at level 4

After decision at level 4
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]


New level: 5
 pending : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]


Before reduction : 
 pending  : [14, 23, 22, 17, 21, 31, 33, 11, 8, 10, 30, 7, 16, 6, 18, 32, 9, 27, 28, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 576), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, 0), (8, 128), (9, 64), (10, 1), (11, 256), (12, 64), (13, 64), (14, 64), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, 12), (21, 18), (22, 0), (23, 16), (24, 5), (25, 12), (26, 16), (27, 16), (28, 0), (29, -1), (30, 16), (31, 16), (32, 9), (33, 0)]

Covered at level 5 : {33, 6, 7, 17, 18, 22, 28}

After reduction : 
 pending  : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]


Before reduction : 
 pending  : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, 0), (8, 128), (9, 64), (10, 1), (11, 256), (12, 64), (13, 64), (14, 64), (15, -1), (16, 5), (17, 0), (18, 0), (19, 2), (20, 12), (21, 18), (22, 0), (23, 16), (24, 5), (25, 12), (26, 16), (27, 16), (28, 0), (29, -1), (30, 16), (31, 16), (32, 9), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, 64), (10, 1), (11, 128), (12, 64), (13, 64), (14, 64), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, 12), (21, 18), (22, -1), (23, 16), (24, 5), (25, 12), (26, 16), (27, 16), (28, -1), (29, -1), (30, 16), (31, 16), (32, 9), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]


Solution : [0, 4, 2, 5] has cost 33.


Before backtrack at level 5
 pending : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24]
 solution : [0, 4, 2, 5]

After backtrack at level 5
 pending : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 5]


Invert decision for 5 at level 4


New level: 5
 pending : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, 64), (10, 1), (11, 128), (12, 64), (13, 64), (14, 64), (15, -1), (16, 5), (17, -1), (18, -1), (19, 2), (20, 12), (21, 18), (22, -1), (23, 16), (24, 5), (25, 12), (26, 16), (27, 16), (28, -1), (29, -1), (30, 16), (31, 16), (32, 9), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 5 among pending : [14, 23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 14 with phase True at level 5

After decision at level 5
 pending : [23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]


New level: 6
 pending : [23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]


Before reduction : 
 pending  : [23, 21, 31, 11, 8, 10, 30, 16, 32, 9, 27, 19, 20, 25, 26, 3, 13, 12, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, 512), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 64), (8, 512), (9, 256), (10, 512), (11, 512), (12, 0), (13, 0), (14, -1), (15, -1), (16, 194), (17, 6), (18, 5), (19, 128), (20, 0), (21, 0), (22, 18), (23, 144), (24, 40), (25, 7), (26, 0), (27, 0), (28, 8), (29, -1), (30, 0), (31, 0), (32, 80), (33, 16)]

Covered at level 6 : {12, 13, 20, 21, 26, 27, 30, 31}

After reduction : 
 pending  : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]


Before reduction : 
 pending  : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 64), (8, 512), (9, 256), (10, 512), (11, 512), (12, 0), (13, 0), (14, -1), (15, -1), (16, 194), (17, 6), (18, 5), (19, 128), (20, 0), (21, 0), (22, 18), (23, 144), (24, 40), (25, 7), (26, 0), (27, 0), (28, 8), (29, -1), (30, 0), (31, 0), (32, 80), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 64), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, 194), (17, 6), (18, 5), (19, 128), (20, -1), (21, -1), (22, 18), (23, 144), (24, 40), (25, 7), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, -1), (32, 80), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]


Solution : [0, 4, 2, 14] has cost 26.


Before backtrack at level 6
 pending : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28]
 solution : [0, 4, 2, 14]

After backtrack at level 6
 pending : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 14]


Invert decision for 14 at level 5


New level: 6
 pending : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 64), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, -1), (15, -1), (16, 194), (17, 6), (18, 5), (19, 128), (20, -1), (21, -1), (22, 18), (23, 144), (24, 40), (25, 7), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, -1), (32, 80), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 6 : set()

After reduction : 
 pending  : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 6 among pending : [23, 11, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]


New level: 7
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, 512), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Covered at level 7 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]


Solution : [0, 4, 2, 11] has cost 22.


Decide in level 7 among pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 7, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, 512), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]


New level: 8
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, 512), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, 1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 97), (23, 36), (24, 5), (25, 400), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 20), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]


Solution : [0, 4, 2, 11, 7] has cost 27.


Before backtrack at level 8
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]

After backtrack at level 8
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, 1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 97), (23, 36), (24, 5), (25, 400), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 20), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Covered at level 8 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11]


Solution : [0, 4, 2, 11] has cost 22.


Decide in level 8 among pending : [23, 8, 10, 16, 32, 9, 19, 25, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Decide 25 with phase True at level 8

After decision at level 8
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]


New level: 9
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 24, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 20, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 36), (24, 5), (25, 400), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 260), (13, 128), (14, -1), (15, -1), (16, 2), (17, 161), (18, 48), (19, 2), (20, 0), (21, 74), (22, 36), (23, 34), (24, 0), (25, -1), (26, 8), (27, 32), (28, 4), (29, -1), (30, 16), (31, 64), (32, 10), (33, 32)]

Covered at level 9 : {24, 20}

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 260), (13, 128), (14, -1), (15, -1), (16, 2), (17, 161), (18, 48), (19, 2), (20, 0), (21, 74), (22, 36), (23, 34), (24, 0), (25, -1), (26, 8), (27, 32), (28, 4), (29, -1), (30, 16), (31, 64), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 260), (13, 128), (14, -1), (15, -1), (16, 2), (17, 161), (18, 48), (19, 2), (20, -1), (21, 74), (22, 36), (23, 34), (24, -1), (25, -1), (26, 8), (27, 32), (28, 4), (29, -1), (30, 16), (31, 64), (32, 10), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]


Solution : [0, 4, 2, 11, 25] has cost 51.


Before backtrack at level 9
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12]
 solution : [0, 4, 2, 11, 25]

After backtrack at level 9
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12, 24, 20]
 solution : [0, 4, 2, 11, 25]


Invert decision for 25 at level 8


New level: 9
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12, 24, 20]
 solution : [0, 4, 2, 11]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12, 24, 20]
 solution : [0, 4, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 260), (13, 128), (14, -1), (15, -1), (16, 2), (17, 161), (18, 48), (19, 2), (20, -1), (21, 74), (22, 36), (23, 34), (24, -1), (25, -1), (26, 8), (27, 32), (28, 4), (29, -1), (30, 16), (31, 64), (32, 10), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 160), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 97), (23, 36), (24, 5), (25, -1), (26, 32), (27, 128), (28, 32), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Covered at level 9 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12, 24, 20]
 solution : [0, 4, 2, 11]


Solution : [0, 4, 2, 11] has cost 22.


Decide in level 9 among pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 12, 24, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 160), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 97), (23, 36), (24, 5), (25, -1), (26, 32), (27, 128), (28, 32), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

Decide 12 with phase True at level 9

After decision at level 9
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 24, 20]
 solution : [0, 4, 2, 11, 12]


New level: 10
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 24, 20]
 solution : [0, 4, 2, 11, 12]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 30, 27, 26, 13, 24, 20]
 solution : [0, 4, 2, 11, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 256), (7, -1), (8, 256), (9, 128), (10, 256), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 160), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 97), (23, 36), (24, 5), (25, -1), (26, 32), (27, 128), (28, 32), (29, -1), (30, 64), (31, 256), (32, 20), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, 128), (10, 4), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 18), (23, 36), (24, 5), (25, -1), (26, 0), (27, 8), (28, 8), (29, -1), (30, 0), (31, 8), (32, 20), (33, 16)]

Covered at level 10 : {26, 13, 30}

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20]
 solution : [0, 4, 2, 11, 12]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20]
 solution : [0, 4, 2, 11, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, 128), (10, 4), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 18), (23, 36), (24, 5), (25, -1), (26, 0), (27, 8), (28, 8), (29, -1), (30, 0), (31, 8), (32, 20), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, 128), (10, 4), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 18), (23, 36), (24, 5), (25, -1), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, 8), (32, 20), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20]
 solution : [0, 4, 2, 11, 12]


Solution : [0, 4, 2, 11, 12] has cost 32.


Before backtrack at level 10
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20]
 solution : [0, 4, 2, 11, 12]

After backtrack at level 10
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20, 30, 26, 13]
 solution : [0, 4, 2, 11, 12]


Invert decision for 12 at level 9


New level: 10
 pending : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20, 30, 26, 13]
 solution : [0, 4, 2, 11]


Before reduction : 
 pending  : [23, 8, 10, 16, 32, 9, 19, 3, 22, 17, 33, 6, 18, 28, 21, 31, 27, 24, 20, 30, 26, 13]
 solution : [0, 4, 2, 11]

Essensial at level 10 : {13, 21, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, 128), (10, 4), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 112), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 18), (23, 36), (24, 5), (25, -1), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, 8), (32, 20), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, 2), (10, 1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [8, 10, 9, 3]
 solution : [0, 4, 2, 11, 13, 21, 6]


Before reduction : 
 pending  : [8, 10, 9, 3]
 solution : [0, 4, 2, 11, 13, 21, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, 2), (10, 1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, 2), (10, 1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 10, 9, 3]
 solution : [0, 4, 2, 11, 13, 21, 6]


Solution : [0, 4, 2, 11, 13, 21, 6] has cost 71.


Before backtrack at level 10
 pending : [8, 10, 9, 3]
 solution : [0, 4, 2, 11, 13, 21, 6]

After backtrack at level 10
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26]
 solution : [0, 4, 2, 11]


Before backtrack at level 9
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26]
 solution : [0, 4, 2, 11]

After backtrack at level 9
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12]
 solution : [0, 4, 2, 11]


Before backtrack at level 8
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12]
 solution : [0, 4, 2, 11]

After backtrack at level 8
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25]
 solution : [0, 4, 2, 11]


Before backtrack at level 7
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25]
 solution : [0, 4, 2, 11]

After backtrack at level 7
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, 2), (10, 1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 7 among pending : [8, 10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]


New level: 8
 pending : [10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]


Before reduction : 
 pending  : [10, 9, 3, 6, 21, 13, 23, 16, 32, 19, 22, 17, 33, 18, 28, 31, 27, 24, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, 512), (8, -1), (9, 0), (10, 4), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 14), (17, 26), (18, 16), (19, 4), (20, 64), (21, 198), (22, 9), (23, 0), (24, 0), (25, 258), (26, 32), (27, 128), (28, 2), (29, -1), (30, 64), (31, 256), (32, 0), (33, 64)]

Covered at level 8 : {32, 3, 9, 23, 24}

After reduction : 
 pending  : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]


Before reduction : 
 pending  : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, 512), (8, -1), (9, 0), (10, 4), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 14), (17, 26), (18, 16), (19, 4), (20, 64), (21, 198), (22, 9), (23, 0), (24, 0), (25, 258), (26, 32), (27, 128), (28, 2), (29, -1), (30, 64), (31, 256), (32, 0), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, 512), (8, -1), (9, -1), (10, 4), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 14), (17, 26), (18, 16), (19, 4), (20, 64), (21, 198), (22, 9), (23, -1), (24, -1), (25, 258), (26, 32), (27, 128), (28, 2), (29, -1), (30, 64), (31, 256), (32, -1), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]


Solution : [0, 4, 2, 8] has cost 26.


Before backtrack at level 8
 pending : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7]
 solution : [0, 4, 2, 8]

After backtrack at level 8
 pending : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, 512), (8, -1), (9, -1), (10, 4), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 14), (17, 26), (18, 16), (19, 4), (20, 64), (21, 198), (22, 9), (23, -1), (24, -1), (25, 258), (26, 32), (27, 128), (28, 2), (29, -1), (30, 64), (31, 256), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, -1), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2]


Solution : [0, 4, 2] has cost 20.


Decide in level 8 among pending : [10, 6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, -1), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]


New level: 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 512), (8, -1), (9, 256), (10, 512), (11, -1), (12, 272), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 193), (23, 144), (24, 40), (25, 448), (26, 32), (27, 128), (28, 64), (29, -1), (30, 64), (31, 256), (32, 80), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 49), (23, 132), (24, 40), (25, 400), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 80), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]


Solution : [0, 4, 2, 10] has cost 25.


Before backtrack at level 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]

After backtrack at level 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 7, 9, 3, 23, 32, 24]
 solution : [0, 4, 2]

Essensial at level 9 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, 258), (13, 128), (14, -1), (15, -1), (16, 256), (17, 194), (18, 100), (19, 128), (20, 96), (21, 198), (22, 49), (23, 132), (24, 40), (25, 400), (26, 32), (27, 128), (28, 16), (29, -1), (30, 64), (31, 256), (32, 80), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 256), (10, -1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 193), (23, 144), (24, 40), (25, 448), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 80), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 7]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 256), (10, -1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 193), (23, 144), (24, 40), (25, 448), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 80), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 256), (10, -1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 193), (23, 144), (24, 40), (25, 448), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 80), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 7]


Solution : [0, 4, 2, 7] has cost 25.


Before backtrack at level 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24]
 solution : [0, 4, 2, 7]

After backtrack at level 9
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7]
 solution : [0, 4, 2]


Before backtrack at level 8
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7]
 solution : [0, 4, 2]

After backtrack at level 8
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10]
 solution : [0, 4, 2]


Before backtrack at level 7
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10]
 solution : [0, 4, 2]

After backtrack at level 7
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8]
 solution : [0, 4, 2]


Before backtrack at level 6
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8]
 solution : [0, 4, 2]

After backtrack at level 6
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11]
 solution : [0, 4, 2]


Before backtrack at level 5
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11]
 solution : [0, 4, 2]

After backtrack at level 5
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14]
 solution : [0, 4, 2]


Before backtrack at level 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14]
 solution : [0, 4, 2]

After backtrack at level 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 2]


Before backtrack at level 3
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 2]

After backtrack at level 3
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4, 2]


Invert decision for 2 at level 2


New level: 3
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 3, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4]

Essensial at level 3 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 256), (10, -1), (11, -1), (12, 130), (13, 64), (14, -1), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 96), (21, 197), (22, 193), (23, 144), (24, 40), (25, 448), (26, 16), (27, 128), (28, 64), (29, -1), (30, 32), (31, 128), (32, 80), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4, 3]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]
 solution : [0, 4, 3]


Solution : [0, 4, 3] has cost 13.


Decide in level 3 among pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]


New level: 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, 768), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, -1), (16, 32), (17, 104), (18, 96), (19, 32), (20, 40), (21, 144), (22, 70), (23, 44), (24, 10), (25, 48), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 52), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]


Solution : [0, 4, 3, 15] has cost 34.


Before backtrack at level 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]

After backtrack at level 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, -1), (16, 32), (17, 104), (18, 96), (19, 32), (20, 40), (21, 144), (22, 70), (23, 44), (24, 10), (25, 48), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 52), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, -1), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3]


Solution : [0, 4, 3] has cost 13.


Decide in level 4 among pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 12, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, -1), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 12]


New level: 5
 pending : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 12]


Before reduction : 
 pending  : [6, 21, 13, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 30, 26, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 29]
 solution : [0, 4, 3, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 520), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, 640), (13, 512), (14, 512), (15, -1), (16, 320), (17, 400), (18, 224), (19, 128), (20, 384), (21, 584), (22, 204), (23, 276), (24, 96), (25, 448), (26, 128), (27, 256), (28, 128), (29, 64), (30, 128), (31, 256), (32, 112), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 256), (6, 128), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, 0), (14, 128), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 36), (23, 72), (24, 10), (25, 112), (26, 0), (27, 8), (28, 16), (29, 0), (30, 0), (31, 32), (32, 40), (33, 64)]

Covered at level 5 : {26, 29, 13, 30}

After reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 3, 12]


Before reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 3, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 256), (6, 128), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, 0), (14, 128), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 36), (23, 72), (24, 10), (25, 112), (26, 0), (27, 8), (28, 16), (29, 0), (30, 0), (31, 32), (32, 40), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 256), (6, 128), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 128), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 36), (23, 72), (24, 10), (25, 112), (26, -1), (27, 8), (28, 16), (29, -1), (30, -1), (31, 32), (32, 40), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 3, 12]


Solution : [0, 4, 3, 12] has cost 23.


Before backtrack at level 5
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5]
 solution : [0, 4, 3, 12]

After backtrack at level 5
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 13, 30, 26, 29]
 solution : [0, 4, 3, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 13, 30, 26, 29]
 solution : [0, 4, 3]


Before reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 13, 30, 26, 29]
 solution : [0, 4, 3]

Essensial at level 5 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 256), (6, 128), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 128), (15, -1), (16, 208), (17, 48), (18, 20), (19, 128), (20, 5), (21, 24), (22, 36), (23, 72), (24, 10), (25, 112), (26, -1), (27, 8), (28, 16), (29, -1), (30, -1), (31, 32), (32, 40), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 256), (17, 192), (18, 80), (19, 128), (20, 40), (21, 288), (22, 197), (23, 265), (24, 96), (25, 448), (26, 0), (27, 64), (28, 128), (29, 32), (30, 64), (31, 256), (32, 104), (33, 256)]

Covered at level 5 : {26}

After reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 30, 29]
 solution : [0, 4, 3, 13]


Before reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 30, 29]
 solution : [0, 4, 3, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 256), (17, 192), (18, 80), (19, 128), (20, 40), (21, 288), (22, 197), (23, 265), (24, 96), (25, 448), (26, 0), (27, 64), (28, 128), (29, 32), (30, 64), (31, 256), (32, 104), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 256), (17, 192), (18, 80), (19, 128), (20, 40), (21, 288), (22, 197), (23, 265), (24, 96), (25, 448), (26, -1), (27, 64), (28, 128), (29, 32), (30, 64), (31, 256), (32, 104), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 30, 29]
 solution : [0, 4, 3, 13]


Solution : [0, 4, 3, 13] has cost 19.


Decide in level 5 among pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 5, 30, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 256), (17, 192), (18, 80), (19, 128), (20, 40), (21, 288), (22, 197), (23, 265), (24, 96), (25, 448), (26, -1), (27, 64), (28, 128), (29, 32), (30, 64), (31, 256), (32, 104), (33, 256)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 5]


New level: 6
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 5]


Before reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 514), (6, 256), (7, 512), (8, 512), (9, 256), (10, 512), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 256), (17, 192), (18, 80), (19, 128), (20, 40), (21, 288), (22, 197), (23, 265), (24, 96), (25, 448), (26, -1), (27, 64), (28, 128), (29, 32), (30, 64), (31, 256), (32, 104), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 4, 3, 13, 5]


Before reduction : 
 pending  : []
 solution : [0, 4, 3, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 4, 3, 13, 5]


Solution : [0, 4, 3, 13, 5] has cost 32.


Before backtrack at level 6
 pending : []
 solution : [0, 4, 3, 13, 5]

After backtrack at level 6
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13]


Before reduction : 
 pending  : [6, 21, 16, 19, 22, 17, 33, 18, 28, 31, 27, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13]

Essensial at level 6 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 512), (9, 8), (10, 128), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 81), (17, 192), (18, 4), (19, 2), (20, 2), (21, 224), (22, 133), (23, 37), (24, 9), (25, 304), (26, -1), (27, 0), (28, 16), (29, 8), (30, 32), (31, 32), (32, 4), (33, 128)]

Covered at level 6 : {27}

After reduction : 
 pending  : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 6]


Before reduction : 
 pending  : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 512), (9, 8), (10, 128), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 81), (17, 192), (18, 4), (19, 2), (20, 2), (21, 224), (22, 133), (23, 37), (24, 9), (25, 304), (26, -1), (27, 0), (28, 16), (29, 8), (30, 32), (31, 32), (32, 4), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 512), (9, 8), (10, 128), (11, 512), (12, -1), (13, -1), (14, 512), (15, -1), (16, 81), (17, 192), (18, 4), (19, 2), (20, 2), (21, 224), (22, 133), (23, 37), (24, 9), (25, 304), (26, -1), (27, -1), (28, 16), (29, 8), (30, 32), (31, 32), (32, 4), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 6]


Solution : [0, 4, 3, 13, 6] has cost 28.


Before backtrack at level 6
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29]
 solution : [0, 4, 3, 13, 6]

After backtrack at level 6
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27]
 solution : [0, 4, 3, 13]


Before backtrack at level 5
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27]
 solution : [0, 4, 3, 13]

After backtrack at level 5
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5]
 solution : [0, 4, 3]


Before backtrack at level 4
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5]
 solution : [0, 4, 3]

After backtrack at level 4
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12]
 solution : [0, 4, 3]


Before backtrack at level 3
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12]
 solution : [0, 4, 3]

After backtrack at level 3
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12, 3, 15]
 solution : [0, 4]


Before backtrack at level 2
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12, 3, 15]
 solution : [0, 4]

After backtrack at level 2
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12, 3, 15, 2]
 solution : [0, 4]


Before backtrack at level 1
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12, 3, 15, 2]
 solution : [0, 4]

After backtrack at level 1
 pending : [21, 16, 19, 22, 17, 33, 18, 28, 31, 20, 25, 9, 23, 32, 24, 7, 10, 8, 11, 14, 30, 29, 6, 27, 13, 26, 5, 12, 3, 15, 2, 1]
 solution : [0, 4]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 4, 1, 13, 14] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_4] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0) # qcost: 3

invariant [invar_13] forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_14] forall NODE0,NODE1. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 11.241 seconds

[QRM NOTE]: Time elapsed since last: 2.314 seconds

[QRM NOTE]: Peak memory: 2302483 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_4
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_13
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_14

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_4 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_13 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_14 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_4 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_13 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_14 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_4 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_13 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_14 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~internal(NODE0) | ~allowed_in(NODE0)) & (forall NODE0,NODE1. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1) & (forall NODE0,NODE1. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 13.610 seconds

[QRM NOTE]: Time elapsed since last: 2.369 seconds

[QRM NOTE]: Peak memory: 1303719 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

