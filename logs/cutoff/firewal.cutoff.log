
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.427 seconds

[QRM NOTE]: Time elapsed since last: 6.427 seconds

[QRM NOTE]: Peak memory: 1173173 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: allowed_in('node',)
predicate: internal('node',)
predicate: sent('node', 'node')
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000101000000000
lex min decimal: 1536
states:
000011000000000
000110000000000
000101000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000001000000000
000100000000000
000010000000000




=== State Orbit 4 =====================
size : 6
repr state: 010101010000000
lex min decimal: 7176
states:
001110001000000
100011000100000
001110000001000
010101000000010
010101010000000
100011000000100




=== State Orbit 5 =====================
size : 3
repr state: 010101010000010
lex min decimal: 7240
states:
001110001001000
100011000100100
010101010000010




=== State Orbit 6 =====================
size : 6
repr state: 010101010100010
lex min decimal: 7242
states:
010101010001010
001110001001100
100011010100100
100011001100100
001110001001010
010101010100010




=== State Orbit 7 =====================
size : 3
repr state: 010101010101010
lex min decimal: 7246
states:
010101010101010
001110001001110
100011011100100




=== State Orbit 8 =====================
size : 6
repr state: 010101010100000
lex min decimal: 7178
states:
010101010100000
100011010100000
100011001000100
001110000001010
010101000001010
001110001000100




=== State Orbit 9 =====================
size : 6
repr state: 010101010101000
lex min decimal: 7182
states:
100011011000100
100011011100000
010101000101010
001110001000110
010101010101000
001110000001110




=== State Orbit 10 =====================
size : 6
repr state: 010101010001000
lex min decimal: 7180
states:
001110001000010
100011010000100
010101000100010
010101010001000
100011001100000
001110000001100




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010100010000000
001100001000000
100010000100000
001010000001000
010001000000010
100001000000100




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
101010000101000
110001000000110
011100011000000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
101010000101010
011100011000100
110001000001110
011100011100000
110001001000110
101010010101000




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
101010010101010
110001001001110
011100011100100




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
010001000001010
010100010100000
001100001000100
100001001000100
100010010100000
001010000001010



[QRM NOTE]: Time elapsed since start: 6.525 seconds

[QRM NOTE]: Time elapsed since last: 0.098 seconds

[QRM NOTE]: Peak memory: 1223285 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.528 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 186411 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : -0-1-----1-----
6     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
7     : --01--------1--
7     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
8     : 0---1--1-------
8     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
9     : --0-1--------1-
9     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
10     : 0----1--1------
10     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
11     : -0---1-----1---
11     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
12 (*) : -0-1---1-------
12     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
13     : --01----1------
13     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
14     : 0---1----1-----
14     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
15     : --0-1------1---
15     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
16     : 0----1------1--
16     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
17     : -0---1-------1-
17     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : 00-------1-----
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
19     : 0-0---------1--
19     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
20     : 00-----1-------
20     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
21     : -00----------1-
21     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
22     : 0-0-----1------
22     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
23     : -00--------1---
23     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
24 (*) : -1-0-----1-----
24     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
25     : --10--------1--
25     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
26     : 1---0--1-------
26     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
27     : --1-0--------1-
27     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
28     : 1----0--1------
28     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
29     : -1---0-----1---
29     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
33 (*) : -1-0---1-------
33     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
34     : --10----1------
34     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
35     : 1---0----1-----
35     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36     : --1-0------1---
36     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
37     : 1----0------1--
37     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
38     : -1---0-------1-
38     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : -1-----0-----0-
30     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
31     : --1-----0--0---
31     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
32     : 1--------0--0--
32     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
39 (*) : -1-0---------0-
39     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
40     : --10-------0---
40     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
41     : 1---0-------0--
41     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
42     : --1-0---0------
42     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
43     : 1----0---0-----
43     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
44     : -1---0-0-------
44     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
45 (*) : 0--0---1-------
45     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
46     : 0--0----1------
46     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0----1-----
47     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48     : -0--0------1---
48     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
49     : --0--0------1--
49     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
50     : --0--0-------1-
50     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
51 (*) : 0--0-----1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : 0--0--------1--
52     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
53     : -0--0--1-------
53     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
54     : -0--0--------1-
54     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
55     : --0--0--1------
55     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
56     : --0--0-----1---
56     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
57 (*) : 1-1--------0---
57     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
58     : 11-----------0-
58     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
59     : -11-----0------
59     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
60     : 11----------0--
60     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
61     : -11----0-------
61     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
62     : 1-1------0-----
62     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
63 (*) : ---00----1-----
63     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
64     : ---0-0------1--
64     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
65     : ---00--1-------
65     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
66     : ----00-------1-
66     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
67     : ---0-0--1------
67     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
68     : ----00-----1---
68     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
69 (*) : ---11----1-----
69     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
70     : ---1-1------1--
70     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
71     : ---11--1-------
71     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
72     : ----11-------1-
72     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
73     : ---1-1--1------
73     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
74     : ----11-----1---
74     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
75 (*) : 11-------1-----
75     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
76     : 1-1---------1--
76     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
77     : 11-----1-------
77     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
78     : -11----------1-
78     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
79     : 1-1-----1------
79     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
80     : -11--------1---
80     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
81 (*) : 1---00---------
81     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
82     : -1-0-0---------
82     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
83     : --100----------
83     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
84 (*) : 11---0---------
84     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
85     : 1-1-0----------
85     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
86     : -110-----------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 1
num_suborbits: 1
87 (*) : 111------------
87     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11-1---
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
89     : -------1----11-
89     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
90     : -------11--1---
90     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
91     : ---------1--11-
91     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
92     : -------11----1-
92     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
93     : ---------1-11--
93     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
94 (*) : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
95     : --------11---1-
95     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : --1----1-0---1-
96     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
97     : -1------1--10--
97     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
98     : --1----0-1--1--
98     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
99     : 1-------1--1-0-
99     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
100     : -1------01--1--
100     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
101     : 1------1---0-1-
101     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
102 (*) : --1----1---0-1-
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
103     : -1------1--1-0-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
104     : --1-----01--1--
104     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
105     : 1-------1--10--
105     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
106     : -1-----0-1--1--
106     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
107     : 1------1-0---1-
107     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
156 (*) : --1----1-0-1---
156     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
157     : -1------1---01-
157     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
158     : --1----011-----
158     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
159     : 1----------110-
159     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
160     : -1-----10---1--
160     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
161     : 1--------1-0-1-
161     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
192 (*) : --1----10---1--
192     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
193     : -1-----011-----
193     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
194     : --1------1-0-1-
194     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
195     : 1------1-0-1---
195     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
196     : -1---------110-
196     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
197     : 1-------1---01-
197     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
108 (*) : ----1--1-0---1-
108     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
109     : -----1--1--10--
109     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
110     : ---1---0-1--1--
110     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
111     : -----1--1--1-0-
111     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
112     : ---1----01--1--
112     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
113     : ----1--1---0-1-
113     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
246 (*) : ----1--1-0-1---
246     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
247     : -----1--1---01-
247     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
248     : ---1---011-----
248     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
249     : -----1-----110-
249     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
250     : ---1---10---1--
250     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
251     : ----1----1-0-1-
251     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : -0-----1-0---1-
114     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
115     : --0-----1--10--
115     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
116     : 0------0-1--1--
116     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
117     : --0-----1--1-0-
117     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
118     : 0-------01--1--
118     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
119     : -0-----1---0-1-
119     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
252 (*) : -0-----1-0-1---
252     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
253     : --0-----1---01-
253     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
254     : 0------011-----
254     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
255     : --0--------110-
255     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
256     : 0------10---1--
256     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
257     : -0-------1-0-1-
257     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : -----0-1-0---1-
120     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
121     : ----0---1--10--
121     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
122     : -----0-0-1--1--
122     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
123     : ---0----1--1-0-
123     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
124     : ----0---01--1--
124     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
125     : ---0---1---0-1-
125     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
126 (*) : -----0-1---0-1-
126     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
127     : ----0---1--1-0-
127     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
128     : -----0--01--1--
128     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
129     : ---0----1--10--
129     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
130     : ----0--0-1--1--
130     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
131     : ---0---1-0---1-
131     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
132 (*) : ----0--10---1--
132     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
133     : -----0-011-----
133     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
134     : ---0-----1-0-1-
134     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
135     : -----0-1-0-1---
135     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
136     : ---0-------110-
136     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
137     : ----0---1---01-
137     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
204 (*) : -----0-10---1--
204     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
205     : ----0--011-----
205     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
206     : -----0---1-0-1-
206     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
207     : ---0---1-0-1---
207     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
208     : ----0------110-
208     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
209     : ---0----1---01-
209     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
138 (*) : ----01-1----1--
138     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
139     : ----10--11-----
139     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
140     : ---0-1---1---1-
140     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
141     : ---1-0-1---1---
141     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
142     : ---01------11--
142     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
143     : ---10---1----1-
143     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
210 (*) : ----10-1----1--
210     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
211     : ----01--11-----
211     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
212     : ---1-0---1---1-
212     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
213     : ---0-1-1---1---
213     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
214     : ---10------11--
214     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
215     : ---01---1----1-
215     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
300 (*) : ----01-11------
300     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
301     : ----10-11------
301     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
302     : ---0-1---1-1---
302     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
303     : ---1-0---1-1---
303     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
304     : ---01-------11-
304     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
305     : ---10-------11-
305     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
318 (*) : ---1-0-1-----1-
318     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
319     : ---10---1--1---
319     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
320     : ----10---1--1--
320     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
321     : ---01---1--1---
321     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
322     : ----01---1--1--
322     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
323     : ---0-1-1-----1-
323     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
144 (*) : --0-0--1----1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
145     : -0---0--11-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
146     : --00-----1---1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
147     : 0----0-1---1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
148     : -0-0-------11--
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
149     : 0---0---1----1-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
216 (*) : -0---0-1----1--
216     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
217     : --0-0---11-----
217     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
218     : 0----0---1---1-
218     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
219     : --00---1---1---
219     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
220     : 0---0------11--
220     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
221     : -0-0----1----1-
221     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
294 (*) : --0-0--11------
294     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
295     : -0---0-11------
295     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
296     : --00-----1-1---
296     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
297     : 0----0---1-1---
297     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
298     : -0-0--------11-
298     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
299     : 0---0-------11-
299     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
312 (*) : 0----0-1-----1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
313     : 0---0---1--1---
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
314     : -0---0---1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
315     : -0-0----1--1---
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
316     : --0-0----1--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
317     : --00---1-----1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : --1----100-----
150     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
151     : -1-----01---0--
151     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
152     : --1----0-1-0---
152     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
153     : 1--------0-1-0-
153     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
154     : -1------0---10-
154     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
155     : 1----------001-
155     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 3
162 (*) : --1-1--1---0---
162     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
163     : -1---1--1----0-
163     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
164     : --11----01-----
164     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
165     : 1----1-----10--
165     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
166     : -1-1---0----1--
166     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
167     : 1---1----0---1-
167     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
168 (*) : --1-1--1-0-----
168     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
169     : -1---1--1---0--
169     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
170     : --11---0-1-----
170     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
171     : 1----1-----1-0-
171     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
172     : -1-1----0---1--
172     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
173     : 1---1------0-1-
173     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
336 (*) : --11---10------
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
337     : -1-1---01------
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
338     : --1-1----1-0---
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
339     : 1---1----0-1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
340     : -1---1------10-
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
341     : 1----1------01-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 3
174 (*) : -01----1---0---
174     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
175     : -10-----1----0-
175     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
176     : 0-1-----01-----
176     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
177     : 1-0--------10--
177     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
178     : 01-----0----1--
178     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
179     : 10-------0---1-
179     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
180 (*) : -01----1-0-----
180     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
181     : -10-----1---0--
181     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
182     : 0-1----0-1-----
182     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
183     : 1-0--------1-0-
183     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
184     : 01------0---1--
184     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
185     : 10---------0-1-
185     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
270 (*) : 0-1----10------
270     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
271     : 01-----01------
271     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
272     : -01------1-0---
272     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
273     : 10-------0-1---
273     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
274     : -10---------10-
274     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
275     : 1-0---------01-
275     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -01----1----1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
187     : -10-----11-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
188     : 0-1------1---1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
189     : 1-0----1---1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
190     : 01---------11--
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
191     : 10------1----1-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
258 (*) : -10----1----1--
258     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
259     : -01-----11-----
259     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
260     : 1-0------1---1-
260     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
261     : 0-1----1---1---
261     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
262     : 10---------11--
262     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
263     : 01------1----1-
263     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
282 (*) : -01----11------
282     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
283     : -10----11------
283     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
284     : 0-1------1-1---
284     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
285     : 1-0------1-1---
285     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
286     : 01----------11-
286     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
287     : 10----------11-
287     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
288 (*) : 0-1----1-----1-
288     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
289     : 01------1--1---
289     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
290     : -01------1--1--
290     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
291     : 10------1--1---
291     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
292     : -10------1--1--
292     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
293     : 1-0----1-----1-
293     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
198 (*) : --1-1--1----1--
198     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
199     : -1---1--11-----
199     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
200     : --11-----1---1-
200     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
201     : 1----1-1---1---
201     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
202     : -1-1-------11--
202     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
203     : 1---1---1----1-
203     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
264 (*) : -1---1-1----1--
264     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
265     : --1-1---11-----
265     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
266     : 1----1---1---1-
266     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
267     : --11---1---1---
267     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
268     : 1---1------11--
268     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
269     : -1-1----1----1-
269     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
276 (*) : --1-1--11------
276     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
277     : -1---1-11------
277     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
278     : --11-----1-1---
278     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
279     : 1----1---1-1---
279     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
280     : -1-1--------11-
280     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
281     : 1---1-------11-
281     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
306 (*) : 1----1-1-----1-
306     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
307     : 1---1---1--1---
307     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
308     : -1---1---1--1--
308     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
309     : -1-1----1--1---
309     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
310     : --1-1----1--1--
310     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
311     : --11---1-----1-
311     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
222 (*) : ----10-1-0-----
222     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
223     : ----01--1---0--
223     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
224     : ---1-0-0-1-----
224     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
225     : ---0-1-----1-0-
225     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
226     : ---10---0---1--
226     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
227     : ---01------0-1-
227     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
228 (*) : -0---0-1-0-----
228     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
229     : --0-0---1---0--
229     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
230     : 0----0-0-1-----
230     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
231     : --00-------1-0-
231     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
232     : 0---0---0---1--
232     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
233     : -0-0-------0-1-
233     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
234 (*) : ----1--1-0--0--
234     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
235     : -----1--10--0--
235     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
236     : ---1---0-1---0-
236     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
237     : -----1-0---1-0-
237     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
238     : ---1----0--01--
238     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
239     : ----1---0--0-1-
239     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
240 (*) : -0-----1-0--0--
240     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
241     : --0-----10--0--
241     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
242     : 0------0-1---0-
242     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
243     : --0----0---1-0-
243     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
244     : 0-------0--01--
244     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
245     : -0------0--0-1-
245     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
324 (*) : ---0-0-1-0-----
324     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
325     : ---00---1---0--
325     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
326     : ----00-0-1-----
326     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
327     : ---00------1-0-
327     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
328     : ----00--0---1--
328     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
329     : ---0-0-----0-1-
329     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
330 (*) : ---0---1-0--0--
330     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
331     : ---0----10--0--
331     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
332     : ----0--0-1---0-
332     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
333     : ----0--0---1-0-
333     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
334     : -----0--0--01--
334     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
335     : -----0--0--0-1-
335     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : --10---1-0-----
342     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
343     : -1-0----1---0--
343     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
344     : --1-0--0-1-----
344     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
345     : 1---0------1-0-
345     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
346     : -1---0--0---1--
346     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
347     : 1----0-----0-1-
347     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 6.599 seconds

[QRM NOTE]: Time elapsed since last: 0.071 seconds

[QRM NOTE]: Peak memory: 1552535 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]


Before reduction : 
 pending  : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]

[QRM NOTE]: Time elapsed since start: 6.614 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 492021 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : -1-----0-----0-
30     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
31     : --1-----0--0---
31     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
32     : 1--------0--0--
32     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : -0-1-----1-----
6     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
7     : --01--------1--
7     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
8     : 0---1--1-------
8     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
9     : --0-1--------1-
9     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
10     : 0----1--1------
10     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
11     : -0---1-----1---
11     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
12 (*) : -0-1---1-------
12     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
13     : --01----1------
13     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
14     : 0---1----1-----
14     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
15     : --0-1------1---
15     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
16     : 0----1------1--
16     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
17     : -0---1-------1-
17     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node0)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node0)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'internal(NODE0)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : 00-------1-----
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
19     : 0-0---------1--
19     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
20     : 00-----1-------
20     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
21     : -00----------1-
21     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
22     : 0-0-----1------
22     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
23     : -00--------1---
23     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$1], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$1, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
24 (*) : -1-0-----1-----
24     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
25     : --10--------1--
25     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
26     : 1---0--1-------
26     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
27     : --1-0--------1-
27     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
28     : 1----0--1------
28     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
29     : -1---0-----1---
29     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
33 (*) : -1-0---1-------
33     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
34     : --10----1------
34     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
35     : 1---0----1-----
35     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36     : --1-0------1---
36     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
37     : 1----0------1--
37     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
38     : -1---0-------1-
38     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~internal(NODE3)', 'allowed_in(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE1,NODE2) | internal(NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
39 (*) : -1-0---------0-
39     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
40     : --10-------0---
40     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
41     : 1---0-------0--
41     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
42     : --1-0---0------
42     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
43     : 1----0---0-----
43     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
44     : -1---0-0-------
44     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
45 (*) : 0--0---1-------
45     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
46     : 0--0----1------
46     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0----1-----
47     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48     : -0--0------1---
48     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
49     : --0--0------1--
49     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
50     : --0--0-------1-
50     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
51 (*) : 0--0-----1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : 0--0--------1--
52     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
53     : -0--0--1-------
53     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
54     : -0--0--------1-
54     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
55     : --0--0--1------
55     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
56     : --0--0-----1---
56     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
57 (*) : 1-1--------0---
57     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
58     : 11-----------0-
58     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
59     : -11-----0------
59     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
60     : 11----------0--
60     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
61     : -11----0-------
61     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
62     : 1-1------0-----
62     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE1)', 'allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE1) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
63 (*) : ---00----1-----
63     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
64     : ---0-0------1--
64     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
65     : ---00--1-------
65     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
66     : ----00-------1-
66     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
67     : ---0-0--1------
67     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
68     : ----00-----1---
68     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1 | node$0$sent$1$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$1], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$1, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
69 (*) : ---11----1-----
69     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
70     : ---1-1------1--
70     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
71     : ---11--1-------
71     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
72     : ----11-------1-
72     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
73     : ---1-1--1------
73     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
74     : ----11-----1---
74     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$internal$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$internal$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1': [node$0$internal$0$0; node$0$sent$1$0], 'node$0$internal$0; node$0$sent$0': [node$0$internal$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1': node$0$internal$0$0; node$0$sent$1$0, 'node$0$internal$0; node$0$sent$0': node$0$internal$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
75 (*) : 11-------1-----
75     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
76     : 1-1---------1--
76     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
77     : 11-----1-------
77     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
78     : -11----------1-
78     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
79     : 1-1-----1------
79     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
80     : -11--------1---
80     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$allowed_in$0$1; node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$allowed_in$0$1; node$0$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$0; node$0$sent$1$0], 'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$1; node$0$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$0; node$0$sent$1$0, 'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$1; node$0$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', 'allowed_in(NODE0)', 'sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
81 (*) : 1---00---------
81     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
82     : -1-0-0---------
82     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
83     : --100----------
83     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
84 (*) : 11---0---------
84     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
85     : 1-1-0----------
85     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
86     : -110-----------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 14 =====================
size : 1
num_suborbits: 1
87 (*) : 111------------
87     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11-1---
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
89     : -------1----11-
89     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
90     : -------11--1---
90     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
91     : ---------1--11-
91     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
92     : -------11----1-
92     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
93     : ---------1-11--
93     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
94 (*) : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
95     : --------11---1-
95     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$0$2, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$2, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$0$2; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE4)', 'sent(NODE0,NODE3)', 'sent(NODE2,NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : --1----1-0---1-
96     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
97     : -1------1--10--
97     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
98     : --1----0-1--1--
98     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
99     : 1-------1--1-0-
99     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
100     : -1------01--1--
100     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
101     : 1------1---0-1-
101     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
102 (*) : --1----1---0-1-
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
103     : -1------1--1-0-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
104     : --1-----01--1--
104     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
105     : 1-------1--10--
105     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
106     : -1-----0-1--1--
106     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
107     : 1------1-0---1-
107     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
156 (*) : --1----1-0-1---
156     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
157     : -1------1---01-
157     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
158     : --1----011-----
158     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
159     : 1----------110-
159     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
160     : -1-----10---1--
160     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
161     : 1--------1-0-1-
161     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
192 (*) : --1----10---1--
192     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
193     : -1-----011-----
193     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
194     : --1------1-0-1-
194     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
195     : 1------1-0-1---
195     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
196     : -1---------110-
196     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
197     : 1-------1---01-
197     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', 'allowed_in(NODE0)', '~sent(NODE5,NODE6)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE2:node = NODE6', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE2:node = NODE6', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE6', 'NODE1:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE6,NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | sent(NODE5,NODE6) | ((NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
108 (*) : ----1--1-0---1-
108     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
109     : -----1--1--10--
109     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
110     : ---1---0-1--1--
110     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
111     : -----1--1--1-0-
111     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
112     : ---1----01--1--
112     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
113     : ----1--1---0-1-
113     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
246 (*) : ----1--1-0-1---
246     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
247     : -----1--1---01-
247     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
248     : ---1---011-----
248     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
249     : -----1-----110-
249     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
250     : ---1---10---1--
250     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
251     : ----1----1-0-1-
251     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE3)', 'sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : -0-----1-0---1-
114     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
115     : --0-----1--10--
115     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
116     : 0------0-1--1--
116     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
117     : --0-----1--1-0-
117     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
118     : 0-------01--1--
118     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
119     : -0-----1---0-1-
119     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
252 (*) : -0-----1-0-1---
252     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
253     : --0-----1---01-
253     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
254     : 0------011-----
254     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
255     : --0--------110-
255     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
256     : 0------10---1--
256     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
257     : -0-------1-0-1-
257     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', '~sent(NODE2,NODE0)', '~allowed_in(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE2,NODE0) | allowed_in(NODE2) | ((NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : -----0-1-0---1-
120     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
121     : ----0---1--10--
121     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
122     : -----0-0-1--1--
122     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
123     : ---0----1--1-0-
123     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
124     : ----0---01--1--
124     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
125     : ---0---1---0-1-
125     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
126 (*) : -----0-1---0-1-
126     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
127     : ----0---1--1-0-
127     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
128     : -----0--01--1--
128     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
129     : ---0----1--10--
129     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
130     : ----0--0-1--1--
130     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
131     : ---0---1-0---1-
131     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
132 (*) : ----0--10---1--
132     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
133     : -----0-011-----
133     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
134     : ---0-----1-0-1-
134     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
135     : -----0-1-0-1---
135     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
136     : ---0-------110-
136     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
137     : ----0---1---01-
137     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
204 (*) : -----0-10---1--
204     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
205     : ----0--011-----
205     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
206     : -----0---1-0-1-
206     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
207     : ---0---1-0-1---
207     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
208     : ----0------110-
208     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
209     : ---0----1---01-
209     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0, node$1$internal$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', '~sent(NODE3,NODE5)', '~internal(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4', 'NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | internal(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
138 (*) : ----01-1----1--
138     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
139     : ----10--11-----
139     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
140     : ---0-1---1---1-
140     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
141     : ---1-0-1---1---
141     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
142     : ---01------11--
142     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
143     : ---10---1----1-
143     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
210 (*) : ----10-1----1--
210     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
211     : ----01--11-----
211     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
212     : ---1-0---1---1-
212     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
213     : ---0-1-1---1---
213     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
214     : ---10------11--
214     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
215     : ---01---1----1-
215     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
300 (*) : ----01-11------
300     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
301     : ----10-11------
301     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
302     : ---0-1---1-1---
302     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
303     : ---1-0---1-1---
303     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
304     : ---01-------11-
304     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
305     : ---10-------11-
305     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
318 (*) : ---1-0-1-----1-
318     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
319     : ---10---1--1---
319     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
320     : ----10---1--1--
320     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
321     : ---01---1--1---
321     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
322     : ----01---1--1--
322     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
323     : ---0-1-1-----1-
323     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', 'internal(NODE0)', '~internal(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~internal(NODE0) | internal(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
144 (*) : --0-0--1----1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
145     : -0---0--11-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
146     : --00-----1---1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
147     : 0----0-1---1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
148     : -0-0-------11--
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
149     : 0---0---1----1-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
216 (*) : -0---0-1----1--
216     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
217     : --0-0---11-----
217     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
218     : 0----0---1---1-
218     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
219     : --00---1---1---
219     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
220     : 0---0------11--
220     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
221     : -0-0----1----1-
221     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
294 (*) : --0-0--11------
294     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
295     : -0---0-11------
295     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
296     : --00-----1-1---
296     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
297     : 0----0---1-1---
297     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
298     : -0-0--------11-
298     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
299     : 0---0-------11-
299     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
312 (*) : 0----0-1-----1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
313     : 0---0---1--1---
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
314     : -0---0---1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
315     : -0-0----1--1---
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
316     : --0-0----1--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
317     : --00---1-----1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', '~allowed_in(NODE4)', '~internal(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | internal(NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : --1----100-----
150     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
151     : -1-----01---0--
151     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
152     : --1----0-1-0---
152     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
153     : 1--------0-1-0-
153     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
154     : -1------0---10-
154     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
155     : 1----------001-
155     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$0$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~sent(NODE2,NODE1)', 'allowed_in(NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 23 =====================
size : 18
num_suborbits: 3
162 (*) : --1-1--1---0---
162     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
163     : -1---1--1----0-
163     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
164     : --11----01-----
164     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
165     : 1----1-----10--
165     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
166     : -1-1---0----1--
166     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
167     : 1---1----0---1-
167     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
168 (*) : --1-1--1-0-----
168     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
169     : -1---1--1---0--
169     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
170     : --11---0-1-----
170     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
171     : 1----1-----1-0-
171     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
172     : -1-1----0---1--
172     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
173     : 1---1------0-1-
173     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
336 (*) : --11---10------
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
337     : -1-1---01------
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
338     : --1-1----1-0---
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
339     : 1---1----0-1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
340     : -1---1------10-
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
341     : 1----1------01-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE3)', 'allowed_in(NODE0)', 'internal(NODE1)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 24 =====================
size : 18
num_suborbits: 3
174 (*) : -01----1---0---
174     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
175     : -10-----1----0-
175     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
176     : 0-1-----01-----
176     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
177     : 1-0--------10--
177     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
178     : 01-----0----1--
178     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
179     : 10-------0---1-
179     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
180 (*) : -01----1-0-----
180     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
181     : -10-----1---0--
181     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
182     : 0-1----0-1-----
182     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
183     : 1-0--------1-0-
183     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
184     : 01------0---1--
184     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
185     : 10---------0-1-
185     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
270 (*) : 0-1----10------
270     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
271     : 01-----01------
271     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
272     : -01------1-0---
272     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
273     : 10-------0-1---
273     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
274     : -10---------10-
274     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
275     : 1-0---------01-
275     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~sent(NODE3,NODE4)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE0,NODE4,NODE1,NODE3. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | allowed_in(NODE3) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -01----1----1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
187     : -10-----11-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
188     : 0-1------1---1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
189     : 1-0----1---1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
190     : 01---------11--
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
191     : 10------1----1-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
258 (*) : -10----1----1--
258     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
259     : -01-----11-----
259     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
260     : 1-0------1---1-
260     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
261     : 0-1----1---1---
261     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
262     : 10---------11--
262     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
263     : 01------1----1-
263     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
282 (*) : -01----11------
282     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
283     : -10----11------
283     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
284     : 0-1------1-1---
284     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
285     : 1-0------1-1---
285     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
286     : 01----------11-
286     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
287     : 10----------11-
287     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
288 (*) : 0-1----1-----1-
288     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
289     : 01------1--1---
289     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
290     : -01------1--1--
290     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
291     : 10------1--1---
291     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
292     : -10------1--1--
292     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
293     : 1-0----1-----1-
293     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', 'allowed_in(NODE0)', '~allowed_in(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | allowed_in(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
198 (*) : --1-1--1----1--
198     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
199     : -1---1--11-----
199     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
200     : --11-----1---1-
200     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
201     : 1----1-1---1---
201     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
202     : -1-1-------11--
202     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
203     : 1---1---1----1-
203     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
264 (*) : -1---1-1----1--
264     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
265     : --1-1---11-----
265     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
266     : 1----1---1---1-
266     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
267     : --11---1---1---
267     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
268     : 1---1------11--
268     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
269     : -1-1----1----1-
269     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
276 (*) : --1-1--11------
276     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
277     : -1---1-11------
277     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
278     : --11-----1-1---
278     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
279     : 1----1---1-1---
279     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
280     : -1-1--------11-
280     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
281     : 1---1-------11-
281     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
306 (*) : 1----1-1-----1-
306     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
307     : 1---1---1--1---
307     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
308     : -1---1---1--1--
308     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
309     : -1-1----1--1---
309     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
310     : --1-1----1--1--
310     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
311     : --11---1-----1-
311     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE3,NODE5)', 'sent(NODE2,NODE4)', 'allowed_in(NODE0)', 'internal(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE5', 'NODE3:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ~internal(NODE1) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
222 (*) : ----10-1-0-----
222     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
223     : ----01--1---0--
223     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
224     : ---1-0-0-1-----
224     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
225     : ---0-1-----1-0-
225     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
226     : ---10---0---1--
226     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
227     : ---01------0-1-
227     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
228 (*) : -0---0-1-0-----
228     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
229     : --0-0---1---0--
229     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
230     : 0----0-0-1-----
230     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
231     : --00-------1-0-
231     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
232     : 0---0---0---1--
232     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
233     : -0-0-------0-1-
233     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', '~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE2) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
234 (*) : ----1--1-0--0--
234     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
235     : -----1--10--0--
235     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
236     : ---1---0-1---0-
236     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
237     : -----1-0---1-0-
237     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
238     : ---1----0--01--
238     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
239     : ----1---0--0-1-
239     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'sent(NODE1,NODE0)', 'internal(NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
240 (*) : -0-----1-0--0--
240     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
241     : --0-----10--0--
241     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
242     : 0------0-1---0-
242     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
243     : --0----0---1-0-
243     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
244     : 0-------0--01--
244     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
245     : -0------0--0-1-
245     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~allowed_in(NODE1)', 'sent(NODE0,NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
324 (*) : ---0-0-1-0-----
324     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
325     : ---00---1---0--
325     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
326     : ----00-0-1-----
326     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
327     : ---00------1-0-
327     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
328     : ----00--0---1--
328     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
329     : ---0-0-----0-1-
329     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', '~internal(NODE2)', 'sent(NODE0,NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
330 (*) : ---0---1-0--0--
330     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
331     : ---0----10--0--
331     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
332     : ----0--0-1---0-
332     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
333     : ----0--0---1-0-
333     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
334     : -----0--0--01--
334     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
335     : -----0--0--0-1-
335     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)', '~sent(NODE2,NODE0)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : --10---1-0-----
342     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
343     : -1-0----1---0--
343     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
344     : --1-0--0-1-----
344     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
345     : 1---0------1-0-
345     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
346     : -1---0--0---1--
346     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
347     : 1----0-----0-1-
347     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~sent(NODE2,NODE1)', 'allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 5 =====================
size : 3
num_suborbits: 1
30 (*) : -1-----0-----0-
30     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
31     : --1-----0--0---
31     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
32     : 1--------0--0--
32     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : -0-1-----1-----
6     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
7     : --01--------1--
7     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
8     : 0---1--1-------
8     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
9     : --0-1--------1-
9     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
10     : 0----1--1------
10     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
11     : -0---1-----1---
11     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
12 (*) : -0-1---1-------
12     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
13     : --01----1------
13     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
14     : 0---1----1-----
14     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
15     : --0-1------1---
15     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
16     : 0----1------1--
16     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
17     : -0---1-------1-
17     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
18 (*) : 00-------1-----
18     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
19     : 0-0---------1--
19     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
20     : 00-----1-------
20     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
21     : -00----------1-
21     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
22     : 0-0-----1------
22     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
23     : -00--------1---
23     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
24 (*) : -1-0-----1-----
24     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
25     : --10--------1--
25     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
26     : 1---0--1-------
26     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
27     : --1-0--------1-
27     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
28     : 1----0--1------
28     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
29     : -1---0-----1---
29     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
33 (*) : -1-0---1-------
33     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
34     : --10----1------
34     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
35     : 1---0----1-----
35     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
36     : --1-0------1---
36     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
37     : 1----0------1--
37     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
38     : -1---0-------1-
38     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE1,NODE2) | internal(NODE3) | ~allowed_in(NODE0) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
39 (*) : -1-0---------0-
39     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
40     : --10-------0---
40     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
41     : 1---0-------0--
41     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
42     : --1-0---0------
42     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
43     : 1----0---0-----
43     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
44     : -1---0-0-------
44     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
45 (*) : 0--0---1-------
45     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
46     : 0--0----1------
46     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
47     : -0--0----1-----
47     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48     : -0--0------1---
48     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
49     : --0--0------1--
49     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
50     : --0--0-------1-
50     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
51 (*) : 0--0-----1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : 0--0--------1--
52     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
53     : -0--0--1-------
53     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
54     : -0--0--------1-
54     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
55     : --0--0--1------
55     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
56     : --0--0-----1---
56     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE0,NODE1) | allowed_in(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
57 (*) : 1-1--------0---
57     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
58     : 11-----------0-
58     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
59     : -11-----0------
59     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
60     : 11----------0--
60     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
61     : -11----0-------
61     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
62     : 1-1------0-----
62     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE1) | ~allowed_in(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 9




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
63 (*) : ---00----1-----
63     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
64     : ---0-0------1--
64     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
65     : ---00--1-------
65     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
66     : ----00-------1-
66     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
67     : ---0-0--1------
67     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
68     : ----00-----1---
68     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
69 (*) : ---11----1-----
69     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
70     : ---1-1------1--
70     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
71     : ---11--1-------
71     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
72     : ----11-------1-
72     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
73     : ---1-1--1------
73     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
74     : ----11-----1---
74     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~sent(NODE1,NODE0) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
75 (*) : 11-------1-----
75     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
76     : 1-1---------1--
76     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
77     : 11-----1-------
77     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
78     : -11----------1-
78     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
79     : 1-1-----1------
79     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
80     : -11--------1---
80     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~allowed_in(NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 12 =====================
size : 3
num_suborbits: 1
81 (*) : 1---00---------
81     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
82     : -1-0-0---------
82     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
83     : --100----------
83     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
84 (*) : 11---0---------
84     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
85     : 1-1-0----------
85     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
86     : -110-----------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 14 =====================
size : 1
num_suborbits: 1
87 (*) : 111------------
87     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 15 =====================
size : 8
num_suborbits: 2
88 (*) : --------11-1---
88     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
89     : -------1----11-
89     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
90     : -------11--1---
90     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
91     : ---------1--11-
91     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
92     : -------11----1-
92     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
93     : ---------1-11--
93     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
94 (*) : -------1---11--
94     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
95     : --------11---1-
95     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 21




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : --1----1-0---1-
96     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
97     : -1------1--10--
97     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
98     : --1----0-1--1--
98     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
99     : 1-------1--1-0-
99     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
100     : -1------01--1--
100     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
101     : 1------1---0-1-
101     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
102 (*) : --1----1---0-1-
102     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
103     : -1------1--1-0-
103     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
104     : --1-----01--1--
104     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
105     : 1-------1--10--
105     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
106     : -1-----0-1--1--
106     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
107     : 1------1-0---1-
107     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
156 (*) : --1----1-0-1---
156     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
157     : -1------1---01-
157     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
158     : --1----011-----
158     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
159     : 1----------110-
159     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
160     : -1-----10---1--
160     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
161     : 1--------1-0-1-
161     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
192 (*) : --1----10---1--
192     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
193     : -1-----011-----
193     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
194     : --1------1-0-1-
194     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
195     : 1------1-0-1---
195     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
196     : -1---------110-
196     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
197     : 1-------1---01-
197     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   7
num_exists :   0
num_literals : 32
quantified form : forall NODE6,NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | sent(NODE5,NODE6) | ((NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 39




=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
108 (*) : ----1--1-0---1-
108     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
109     : -----1--1--10--
109     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
110     : ---1---0-1--1--
110     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
111     : -----1--1--1-0-
111     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
112     : ---1----01--1--
112     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
113     : ----1--1---0-1-
113     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
246 (*) : ----1--1-0-1---
246     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
247     : -----1--1---01-
247     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
248     : ---1---011-----
248     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
249     : -----1-----110-
249     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
250     : ---1---10---1--
250     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
251     : ----1----1-0-1-
251     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | ((NODE0 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : -0-----1-0---1-
114     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
115     : --0-----1--10--
115     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
116     : 0------0-1--1--
116     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
117     : --0-----1--1-0-
117     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
118     : 0-------01--1--
118     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
119     : -0-----1---0-1-
119     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
252 (*) : -0-----1-0-1---
252     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
253     : --0-----1---01-
253     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
254     : 0------011-----
254     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
255     : --0--------110-
255     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
256     : 0------10---1--
256     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
257     : -0-------1-0-1-
257     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE1,NODE0,NODE2,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE2,NODE0) | allowed_in(NODE2) | ((NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 16




=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : -----0-1-0---1-
120     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
121     : ----0---1--10--
121     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
122     : -----0-0-1--1--
122     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
123     : ---0----1--1-0-
123     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
124     : ----0---01--1--
124     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
125     : ---0---1---0-1-
125     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
126 (*) : -----0-1---0-1-
126     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
127     : ----0---1--1-0-
127     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
128     : -----0--01--1--
128     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
129     : ---0----1--10--
129     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
130     : ----0--0-1--1--
130     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
131     : ---0---1-0---1-
131     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
132 (*) : ----0--10---1--
132     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
133     : -----0-011-----
133     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
134     : ---0-----1-0-1-
134     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
135     : -----0-1-0-1---
135     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
136     : ---0-------110-
136     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
137     : ----0---1---01-
137     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
204 (*) : -----0-10---1--
204     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
205     : ----0--011-----
205     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
206     : -----0---1-0-1-
206     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
207     : ---0---1-0-1---
207     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
208     : ----0------110-
208     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
209     : ---0----1---01-
209     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | sent(NODE3,NODE5) | internal(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
138 (*) : ----01-1----1--
138     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
139     : ----10--11-----
139     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
140     : ---0-1---1---1-
140     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
141     : ---1-0-1---1---
141     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
142     : ---01------11--
142     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
143     : ---10---1----1-
143     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
210 (*) : ----10-1----1--
210     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
211     : ----01--11-----
211     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
212     : ---1-0---1---1-
212     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
213     : ---0-1-1---1---
213     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
214     : ---10------11--
214     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
215     : ---01---1----1-
215     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
300 (*) : ----01-11------
300     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
301     : ----10-11------
301     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
302     : ---0-1---1-1---
302     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
303     : ---1-0---1-1---
303     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
304     : ---01-------11-
304     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
305     : ---10-------11-
305     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
318 (*) : ---1-0-1-----1-
318     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
319     : ---10---1--1---
319     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
320     : ----10---1--1--
320     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
321     : ---01---1--1---
321     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
322     : ----01---1--1--
322     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
323     : ---0-1-1-----1-
323     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~internal(NODE0) | internal(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))
qcost : 34




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
144 (*) : --0-0--1----1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
145     : -0---0--11-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
146     : --00-----1---1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
147     : 0----0-1---1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
148     : -0-0-------11--
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
149     : 0---0---1----1-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
216 (*) : -0---0-1----1--
216     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
217     : --0-0---11-----
217     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
218     : 0----0---1---1-
218     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
219     : --00---1---1---
219     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
220     : 0---0------11--
220     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
221     : -0-0----1----1-
221     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
294 (*) : --0-0--11------
294     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
295     : -0---0-11------
295     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
296     : --00-----1-1---
296     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
297     : 0----0---1-1---
297     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
298     : -0-0--------11-
298     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
299     : 0---0-------11-
299     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
312 (*) : 0----0-1-----1-
312     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
313     : 0---0---1--1---
313     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
314     : -0---0---1--1--
314     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
315     : -0-0----1--1---
315     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
316     : --0-0----1--1--
316     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
317     : --00---1-----1-
317     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | internal(NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
150 (*) : --1----100-----
150     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
151     : -1-----01---0--
151     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
152     : --1----0-1-0---
152     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
153     : 1--------0-1-0-
153     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
154     : -1------0---10-
154     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
155     : 1----------001-
155     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 23 =====================
size : 18
num_suborbits: 3
162 (*) : --1-1--1---0---
162     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
163     : -1---1--1----0-
163     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
164     : --11----01-----
164     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
165     : 1----1-----10--
165     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
166     : -1-1---0----1--
166     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
167     : 1---1----0---1-
167     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
168 (*) : --1-1--1-0-----
168     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
169     : -1---1--1---0--
169     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
170     : --11---0-1-----
170     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
171     : 1----1-----1-0-
171     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
172     : -1-1----0---1--
172     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
173     : 1---1------0-1-
173     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
336 (*) : --11---10------
336     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
337     : -1-1---01------
337     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
338     : --1-1----1-0---
338     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
339     : 1---1----0-1---
339     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
340     : -1---1------10-
340     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
341     : 1----1------01-
341     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE2,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE3) | ~allowed_in(NODE0) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 24 =====================
size : 18
num_suborbits: 3
174 (*) : -01----1---0---
174     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
175     : -10-----1----0-
175     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
176     : 0-1-----01-----
176     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
177     : 1-0--------10--
177     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
178     : 01-----0----1--
178     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
179     : 10-------0---1-
179     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
180 (*) : -01----1-0-----
180     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
181     : -10-----1---0--
181     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
182     : 0-1----0-1-----
182     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
183     : 1-0--------1-0-
183     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
184     : 01------0---1--
184     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
185     : 10---------0-1-
185     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
270 (*) : 0-1----10------
270     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
271     : 01-----01------
271     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
272     : -01------1-0---
272     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
273     : 10-------0-1---
273     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
274     : -10---------10-
274     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
275     : 1-0---------01-
275     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE2,NODE0,NODE4,NODE1,NODE3. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | sent(NODE3,NODE4) | allowed_in(NODE3) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
186 (*) : -01----1----1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
187     : -10-----11-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
188     : 0-1------1---1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
189     : 1-0----1---1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
190     : 01---------11--
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
191     : 10------1----1-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
258 (*) : -10----1----1--
258     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
259     : -01-----11-----
259     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
260     : 1-0------1---1-
260     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
261     : 0-1----1---1---
261     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
262     : 10---------11--
262     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
263     : 01------1----1-
263     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
282 (*) : -01----11------
282     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
283     : -10----11------
283     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
284     : 0-1------1-1---
284     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
285     : 1-0------1-1---
285     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
286     : 01----------11-
286     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
287     : 10----------11-
287     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
288 (*) : 0-1----1-----1-
288     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
289     : 01------1--1---
289     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
290     : -01------1--1--
290     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
291     : 10------1--1---
291     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
292     : -10------1--1--
292     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
293     : 1-0----1-----1-
293     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ~allowed_in(NODE0) | allowed_in(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
198 (*) : --1-1--1----1--
198     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
199     : -1---1--11-----
199     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
200     : --11-----1---1-
200     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
201     : 1----1-1---1---
201     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
202     : -1-1-------11--
202     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
203     : 1---1---1----1-
203     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
264 (*) : -1---1-1----1--
264     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
265     : --1-1---11-----
265     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
266     : 1----1---1---1-
266     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
267     : --11---1---1---
267     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
268     : 1---1------11--
268     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
269     : -1-1----1----1-
269     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
276 (*) : --1-1--11------
276     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
277     : -1---1-11------
277     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
278     : --11-----1-1---
278     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
279     : 1----1---1-1---
279     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
280     : -1-1--------11-
280     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
281     : 1---1-------11-
281     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
306 (*) : 1----1-1-----1-
306     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
307     : 1---1---1--1---
307     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
308     : -1---1---1--1--
308     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
309     : -1-1----1--1---
309     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
310     : --1-1----1--1--
310     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
311     : --11---1-----1-
311     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE2,NODE5,NODE0,NODE4,NODE1,NODE3. ~sent(NODE3,NODE5) | ~sent(NODE2,NODE4) | ~allowed_in(NODE0) | ~internal(NODE1) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE1 = NODE4 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
222 (*) : ----10-1-0-----
222     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
223     : ----01--1---0--
223     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
224     : ---1-0-0-1-----
224     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
225     : ---0-1-----1-0-
225     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
226     : ---10---0---1--
226     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
227     : ---01------0-1-
227     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
228 (*) : -0---0-1-0-----
228     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
229     : --0-0---1---0--
229     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
230     : 0----0-0-1-----
230     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
231     : --00-------1-0-
231     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
232     : 0---0---0---1--
232     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
233     : -0-0-------0-1-
233     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE2) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
234 (*) : ----1--1-0--0--
234     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
235     : -----1--10--0--
235     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
236     : ---1---0-1---0-
236     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
237     : -----1-0---1-0-
237     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
238     : ---1----0--01--
238     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
239     : ----1---0--0-1-
239     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | ~internal(NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
240 (*) : -0-----1-0--0--
240     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
241     : --0-----10--0--
241     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
242     : 0------0-1---0-
242     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
243     : --0----0---1-0-
243     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
244     : 0-------0--01--
244     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
245     : -0------0--0-1-
245     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | allowed_in(NODE1) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
324 (*) : ---0-0-1-0-----
324     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
325     : ---00---1---0--
325     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
326     : ----00-0-1-----
326     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
327     : ---00------1-0-
327     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
328     : ----00--0---1--
328     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
329     : ---0-0-----0-1-
329     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
330 (*) : ---0---1-0--0--
330     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
331     : ---0----10--0--
331     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
332     : ----0--0-1---0-
332     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
333     : ----0--0---1-0-
333     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
334     : -----0--0--01--
334     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
335     : -----0--0--0-1-
335     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
342 (*) : --10---1-0-----
342     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
343     : -1-0----1---0--
343     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
344     : --1-0--0-1-----
344     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
345     : 1---0------1-0-
345     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
346     : -1---0--0---1--
346     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
347     : 1----0-----0-1-
347     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | ~allowed_in(NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE1 = NODE2 | NODE0 = NODE1)
qcost : 10



[QRM NOTE]: Time elapsed since start: 8.042 seconds

[QRM NOTE]: Time elapsed since last: 1.428 seconds

[QRM NOTE]: Peak memory: 2314582 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]


Before reduction : 
 pending  : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5]


Solution : [0, 5] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1]


New level: 2
 pending : [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1]


Before reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 608), (21, 592), (22, 128), (23, 288), (24, 272), (25, 528), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, 640), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 304), (21, 592), (22, 64), (23, 72), (24, 132), (25, 264), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1]


Solution : [0, 5, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, 640), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 304), (21, 592), (22, 64), (23, 72), (24, 132), (25, 264), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Decide 7 with phase True at level 2

After decision at level 2
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1, 7]


New level: 3
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 5, 1, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, 640), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 304), (21, 592), (22, 64), (23, 72), (24, 132), (25, 264), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, 0), (33, 32)]

Covered at level 3 : {32}

After reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 3 among pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15]


New level: 4
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 4 among pending : [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]


New level: 5
 pending : [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]


Before reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, 0), (14, 0), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]


Before reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, 0), (14, 0), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12]


Solution : [0, 5, 1, 7, 15, 12] has cost 46.


Decide in level 5 among pending : [2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


New level: 6
 pending : [3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : {3, 10, 17, 18, 29, 30}

After reduction : 
 pending  : [4, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [4, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Solution : [0, 5, 1, 7, 15, 12, 2] has cost 59.


Decide in level 6 among pending : [4, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 4]


New level: 7
 pending : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 4]


Before reduction : 
 pending  : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 4]


Solution : [0, 5, 1, 7, 15, 12, 2, 4] has cost 72.


Before backtrack at level 7
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 2, 4]

After backtrack at level 7
 pending : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Solution : [0, 5, 1, 7, 15, 12, 2] has cost 59.


Decide in level 7 among pending : [6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 9]


New level: 8
 pending : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 9]


Before reduction : 
 pending  : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 9]


Solution : [0, 5, 1, 7, 15, 12, 2, 9] has cost 65.


Before backtrack at level 8
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 2, 9]

After backtrack at level 8
 pending : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Solution : [0, 5, 1, 7, 15, 12, 2] has cost 59.


Decide in level 8 among pending : [6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 11]


New level: 9
 pending : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 11]


Before reduction : 
 pending  : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 11]


Solution : [0, 5, 1, 7, 15, 12, 2, 11] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 2, 11]

After backtrack at level 9
 pending : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Solution : [0, 5, 1, 7, 15, 12, 2] has cost 59.


Decide in level 9 among pending : [6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 6]


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 6]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 6]


Solution : [0, 5, 1, 7, 15, 12, 2, 6] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 2, 6]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

Essensial at level 10 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 2, 8]


Solution : [0, 5, 1, 7, 15, 12, 2, 8] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 2, 8]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 2]

After backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 12, 2]

After backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 2]

After backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 2]


Before backtrack at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 2]

After backtrack at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12]


Solution : [0, 5, 1, 7, 15, 12] has cost 46.


Decide in level 6 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Decide 27 with phase True at level 6

After decision at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]


New level: 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, 0), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 28, 31}

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, 0), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]


Solution : [0, 5, 1, 7, 15, 12, 27] has cost 56.


Decide in level 7 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 3, 10, 17, 18, 29, 30, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


New level: 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {10, 17, 18, 29, 30}

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Solution : [0, 5, 1, 7, 15, 12, 27, 3] has cost 62.


Decide in level 8 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]


New level: 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {4, 6, 8, 9, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]


Solution : [0, 5, 1, 7, 15, 12, 27, 3, 11] has cost 68.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]

After backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Solution : [0, 5, 1, 7, 15, 12, 27, 3] has cost 62.


Decide in level 9 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {4, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]


Solution : [0, 5, 1, 7, 15, 12, 27, 3, 9] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Solution : [0, 5, 1, 7, 15, 12, 27, 3] has cost 62.


Decide in level 10 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]


New level: 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]


Solution : [0, 5, 1, 7, 15, 12, 27, 3, 4] has cost 75.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]

After backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Solution : [0, 5, 1, 7, 15, 12, 27, 3] has cost 62.


Decide in level 11 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {6, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]


Solution : [0, 5, 1, 7, 15, 12, 27, 3, 8] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]

After backtrack at level 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 6]


Solution : [0, 5, 1, 7, 15, 12, 27, 3, 6] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 3, 6]

After backtrack at level 12
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

After backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

After backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

After backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Before backtrack at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]

After backtrack at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 10, 17, 18, 29, 30, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 10, 17, 18, 29, 30, 11]
 solution : [0, 5, 1, 7, 15, 12, 27]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 10, 17, 18, 29, 30, 11]
 solution : [0, 5, 1, 7, 15, 12, 27]

Essensial at level 8 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {17, 18, 29, 30}

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Solution : [0, 5, 1, 7, 15, 12, 27, 10] has cost 62.


Decide in level 8 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]


New level: 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]


Solution : [0, 5, 1, 7, 15, 12, 27, 10, 4] has cost 75.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]

After backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Solution : [0, 5, 1, 7, 15, 12, 27, 10] has cost 62.


Decide in level 9 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]


New level: 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]


Solution : [0, 5, 1, 7, 15, 12, 27, 10, 9] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]

After backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Solution : [0, 5, 1, 7, 15, 12, 27, 10] has cost 62.


Decide in level 10 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]


New level: 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]


Solution : [0, 5, 1, 7, 15, 12, 27, 10, 11] has cost 68.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]

After backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Solution : [0, 5, 1, 7, 15, 12, 27, 10] has cost 62.


Decide in level 11 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {8, 16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]


Solution : [0, 5, 1, 7, 15, 12, 27, 10, 6] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]

After backtrack at level 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 8]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

Essensial at level 12 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {16, 19, 20, 21, 22, 23, 24, 25, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 8]


Solution : [0, 5, 1, 7, 15, 12, 27, 10, 8] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 27, 10, 8]

After backtrack at level 12
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

After backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

After backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]


Before backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 27, 10]

After backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]


Before backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12, 27]

After backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12, 27]


Invert decision for 27 at level 6


New level: 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12]


Solution : [0, 5, 1, 7, 15, 12] has cost 46.


Decide in level 7 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 10, 17, 18, 29, 30, 4, 28, 31, 33, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Decide 10 with phase True at level 7

After decision at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12, 10]


New level: 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 17, 18, 29, 30, 4, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : {3, 17, 18, 29, 30}

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Solution : [0, 5, 1, 7, 15, 12, 10] has cost 52.


Decide in level 8 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 11, 9, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 11]


New level: 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 11]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 4, 6, 8, 9, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 11]


Solution : [0, 5, 1, 7, 15, 12, 10, 11] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 10, 11]

After backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Solution : [0, 5, 1, 7, 15, 12, 10] has cost 52.


Decide in level 9 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 9, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 9]


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 9]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 4, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 9]


Solution : [0, 5, 1, 7, 15, 12, 10, 9] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 10, 9]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Solution : [0, 5, 1, 7, 15, 12, 10] has cost 52.


Decide in level 10 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 4]


New level: 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 4]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 4]


Solution : [0, 5, 1, 7, 15, 12, 10, 4] has cost 65.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 10, 4]

After backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Solution : [0, 5, 1, 7, 15, 12, 10] has cost 52.


Decide in level 11 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 8]


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 8]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 8]


Solution : [0, 5, 1, 7, 15, 12, 10, 8] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 10, 8]

After backtrack at level 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 6, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 10, 6]


Solution : [0, 5, 1, 7, 15, 12, 10, 6] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 10, 6]

After backtrack at level 12
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 10]

After backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 10]

After backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4]
 solution : [0, 5, 1, 7, 15, 12, 10]

After backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9]
 solution : [0, 5, 1, 7, 15, 12, 10]


Before backtrack at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9]
 solution : [0, 5, 1, 7, 15, 12, 10]

After backtrack at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 17, 18, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 15, 12, 10]


Invert decision for 10 at level 7


New level: 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 17, 18, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 15, 12]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 17, 18, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 15, 12]

Essensial at level 8 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : {17, 18, 29, 30}

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Solution : [0, 5, 1, 7, 15, 12, 3] has cost 52.


Decide in level 8 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 4]


New level: 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 4]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 6, 8, 9, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 4]


Solution : [0, 5, 1, 7, 15, 12, 3, 4] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 3, 4]

After backtrack at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Solution : [0, 5, 1, 7, 15, 12, 3] has cost 52.


Decide in level 9 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 9]


New level: 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 9]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 8, 11, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 9]


Solution : [0, 5, 1, 7, 15, 12, 3, 9] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 3, 9]

After backtrack at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Solution : [0, 5, 1, 7, 15, 12, 3] has cost 52.


Decide in level 10 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 11]


New level: 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 11]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 11]


Solution : [0, 5, 1, 7, 15, 12, 3, 11] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 3, 11]

After backtrack at level 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3]


Solution : [0, 5, 1, 7, 15, 12, 3] has cost 52.


Decide in level 11 among pending : [6, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 6]


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 6]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 6]


Solution : [0, 5, 1, 7, 15, 12, 3, 6] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 3, 6]

After backtrack at level 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before reduction : 
 pending  : [16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 12, 3]

Essensial at level 12 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 12, 3, 8]


Solution : [0, 5, 1, 7, 15, 12, 3, 8] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 12, 3, 8]

After backtrack at level 12
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 15, 12, 3]

After backtrack at level 11
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 12, 3]

After backtrack at level 10
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11]
 solution : [0, 5, 1, 7, 15, 12, 3]

After backtrack at level 9
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 3]


Before backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9]
 solution : [0, 5, 1, 7, 15, 12, 3]

After backtrack at level 8
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12]


Before backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4]
 solution : [0, 5, 1, 7, 15, 12]

After backtrack at level 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 15, 12]


Before backtrack at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 15, 12]

After backtrack at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27]
 solution : [0, 5, 1, 7, 15, 12]


Before backtrack at level 5
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27]
 solution : [0, 5, 1, 7, 15, 12]

After backtrack at level 5
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 5 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]


New level: 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 27, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, 0), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : {27}

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, 0), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28]


Solution : [0, 5, 1, 7, 15, 28] has cost 51.


Decide in level 6 among pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 11, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


New level: 7
 pending : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before reduction : 
 pending  : [8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31, 33, 6, 9, 3, 17, 18, 29, 30, 4, 10, 13, 14, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 4, 6, 8, 9, 13, 14, 16, 19, 22, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 3, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 3, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 3, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Solution : [0, 5, 1, 7, 15, 28, 11] has cost 57.


Decide in level 7 among pending : [20, 21, 23, 24, 25, 26, 3, 17, 18, 29, 30, 10, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 3]


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {2, 10, 17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 3]


Solution : [0, 5, 1, 7, 15, 28, 11, 3] has cost 63.


Before backtrack at level 8
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 11, 3]

After backtrack at level 8
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Solution : [0, 5, 1, 7, 15, 28, 11] has cost 57.


Decide in level 8 among pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 8

After decision at level 8
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 10]


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {2, 17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 10]


Solution : [0, 5, 1, 7, 15, 28, 11, 10] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 11, 10]

After backtrack at level 9
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11, 10]


Invert decision for 10 at level 8


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 2]
 solution : [0, 5, 1, 7, 15, 28, 11]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 11, 2]


Solution : [0, 5, 1, 7, 15, 28, 11, 2] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 11, 2]

After backtrack at level 9
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before backtrack at level 8
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 28, 11]

After backtrack at level 8
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 28, 11]


Before backtrack at level 7
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 28, 11]

After backtrack at level 7
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28]


Solution : [0, 5, 1, 7, 15, 28] has cost 51.


Decide in level 7 among pending : [2, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28, 2]


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 3]
 solution : [0, 5, 1, 7, 15, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : {3, 10, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 2]


Solution : [0, 5, 1, 7, 15, 28, 2] has cost 64.


Before backtrack at level 8
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 2]

After backtrack at level 8
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28]


Solution : [0, 5, 1, 7, 15, 28] has cost 51.


Decide in level 8 among pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 9, 4, 13, 14, 17, 18, 29, 30, 10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 4, 6, 8, 13, 14, 16, 19, 22, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]


Solution : [0, 5, 1, 7, 15, 28, 9] has cost 57.


Decide in level 9 among pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9, 10]


New level: 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {3, 17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 10]


Solution : [0, 5, 1, 7, 15, 28, 9, 10] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 9, 10]

After backtrack at level 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3]
 solution : [0, 5, 1, 7, 15, 28, 9]

Essensial at level 10 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : {17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 9, 3]


Solution : [0, 5, 1, 7, 15, 28, 9, 3] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 9, 3]

After backtrack at level 10
 pending : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 28, 9]


Before backtrack at level 9
 pending : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 28, 9]

After backtrack at level 9
 pending : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28]


Solution : [0, 5, 1, 7, 15, 28] has cost 51.


Decide in level 9 among pending : [3, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28, 3]


New level: 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14, 10]
 solution : [0, 5, 1, 7, 15, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : {10, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Solution : [0, 5, 1, 7, 15, 28, 3] has cost 57.


Decide in level 10 among pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 4, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 4]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 4]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 8, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 4]


Solution : [0, 5, 1, 7, 15, 28, 3, 4] has cost 70.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 3, 4]

After backtrack at level 11
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Solution : [0, 5, 1, 7, 15, 28, 3] has cost 57.


Decide in level 11 among pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 14, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]


Solution : [0, 5, 1, 7, 15, 28, 3, 13] has cost 62.


Before backtrack at level 12
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]

After backtrack at level 12
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Solution : [0, 5, 1, 7, 15, 28, 3] has cost 57.


Decide in level 12 among pending : [20, 21, 23, 24, 25, 26, 8, 16, 19, 22, 6, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 8]


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 8]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 8]


Solution : [0, 5, 1, 7, 15, 28, 3, 8] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 3, 8]

After backtrack at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]

Essensial at level 13 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 3, 6]


Solution : [0, 5, 1, 7, 15, 28, 3, 6] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 3, 6]

After backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 3]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 28, 3]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 28, 3]


Before backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 28, 3]

After backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 17, 18, 29, 30, 10, 4]
 solution : [0, 5, 1, 7, 15, 28, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 17, 18, 29, 30, 10, 4]
 solution : [0, 5, 1, 7, 15, 28]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 17, 18, 29, 30, 10, 4]
 solution : [0, 5, 1, 7, 15, 28]

Essensial at level 10 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : {17, 18, 29, 30}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 4]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 4]
 solution : [0, 5, 1, 7, 15, 28, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 4]
 solution : [0, 5, 1, 7, 15, 28, 10]


Solution : [0, 5, 1, 7, 15, 28, 10] has cost 57.


Decide in level 10 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]


New level: 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 14, 31}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]


Solution : [0, 5, 1, 7, 15, 28, 10, 13] has cost 62.


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Solution : [0, 5, 1, 7, 15, 28, 10] has cost 57.


Decide in level 11 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 4, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 4]


New level: 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 4]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 4]


Solution : [0, 5, 1, 7, 15, 28, 10, 4] has cost 70.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 10, 4]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Solution : [0, 5, 1, 7, 15, 28, 10] has cost 57.


Decide in level 12 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 6]


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 6]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 6]


Solution : [0, 5, 1, 7, 15, 28, 10, 6] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 10, 6]

After backtrack at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]

Essensial at level 13 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 28, 10, 8]


Solution : [0, 5, 1, 7, 15, 28, 10, 8] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 28, 10, 8]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 28, 10]

After backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before backtrack at level 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 28, 10]

After backtrack at level 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4]
 solution : [0, 5, 1, 7, 15, 28, 10]


Before backtrack at level 10
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4]
 solution : [0, 5, 1, 7, 15, 28, 10]

After backtrack at level 10
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13]
 solution : [0, 5, 1, 7, 15, 28]


Before backtrack at level 9
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13]
 solution : [0, 5, 1, 7, 15, 28]

After backtrack at level 9
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3]
 solution : [0, 5, 1, 7, 15, 28]


Before backtrack at level 8
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3]
 solution : [0, 5, 1, 7, 15, 28]

After backtrack at level 8
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9]
 solution : [0, 5, 1, 7, 15, 28]


Before backtrack at level 7
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9]
 solution : [0, 5, 1, 7, 15, 28]

After backtrack at level 7
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2]
 solution : [0, 5, 1, 7, 15, 28]


Before backtrack at level 6
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2]
 solution : [0, 5, 1, 7, 15, 28]

After backtrack at level 6
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 6 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 6 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 4, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15, 4]


New level: 7
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15, 4]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 10, 17, 18, 29, 30, 13, 3, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 15, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 128), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

Covered at level 7 : {33, 6, 8, 9, 11, 13, 14, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 10, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 10, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 128), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 128), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 10, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]


Solution : [0, 5, 1, 7, 15, 4] has cost 54.


Decide in level 7 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 10, 17, 18, 29, 30, 3, 2, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 128), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 7

After decision at level 7
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 10]


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 128), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : {2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 10]


Solution : [0, 5, 1, 7, 15, 4, 10] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 5, 1, 7, 15, 4, 10]

After backtrack at level 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 10]


Invert decision for 10 at level 7


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]


Solution : [0, 5, 1, 7, 15, 4] has cost 54.


Decide in level 8 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 3, 2, 27]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 8

After decision at level 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 3]


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 3]


Solution : [0, 5, 1, 7, 15, 4, 3] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 4, 3]

After backtrack at level 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4, 3]


Invert decision for 3 at level 8


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 2, 27]
 solution : [0, 5, 1, 7, 15, 4]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 4, 2]


Solution : [0, 5, 1, 7, 15, 4, 2] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 5, 1, 7, 15, 4, 2]

After backtrack at level 9
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27]
 solution : [0, 5, 1, 7, 15, 4]


Before backtrack at level 8
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27]
 solution : [0, 5, 1, 7, 15, 4]

After backtrack at level 8
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3]
 solution : [0, 5, 1, 7, 15, 4]


Before backtrack at level 7
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3]
 solution : [0, 5, 1, 7, 15, 4]

After backtrack at level 7
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 7 among pending : [2, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15, 2]


New level: 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 27, 3, 8, 31, 33, 14, 6, 13, 9, 11, 10]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : {3, 10, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 13, 9, 11]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 13, 9, 11]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 13, 9, 11]
 solution : [0, 5, 1, 7, 15, 2]


Solution : [0, 5, 1, 7, 15, 2] has cost 54.


Decide in level 8 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 13, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 14, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : {14}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]


Solution : [0, 5, 1, 7, 15, 2, 13] has cost 59.


Before backtrack at level 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11]
 solution : [0, 5, 1, 7, 15, 2, 13]

After backtrack at level 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11, 14]
 solution : [0, 5, 1, 7, 15, 2, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]


Solution : [0, 5, 1, 7, 15, 2] has cost 54.


Decide in level 9 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 9, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2, 9]


New level: 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 8, 11, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 9]


Solution : [0, 5, 1, 7, 15, 2, 9] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 5, 1, 7, 15, 2, 9]

After backtrack at level 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]
 solution : [0, 5, 1, 7, 15, 2]


Solution : [0, 5, 1, 7, 15, 2] has cost 54.


Decide in level 10 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 11]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 6, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 11]


Solution : [0, 5, 1, 7, 15, 2, 11] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 2, 11]

After backtrack at level 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2]


Solution : [0, 5, 1, 7, 15, 2] has cost 54.


Decide in level 11 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 8, 31, 33, 6, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 8]


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 8]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, 1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 8]


Solution : [0, 5, 1, 7, 15, 2, 8] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 2, 8]

After backtrack at level 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 2]

Essensial at level 12 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 2, 6]


Solution : [0, 5, 1, 7, 15, 2, 6] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 2, 6]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 2]


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 2]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 2]


Before backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 2]

After backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 2]


Before backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 2]

After backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9]
 solution : [0, 5, 1, 7, 15, 2]


Before backtrack at level 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9]
 solution : [0, 5, 1, 7, 15, 2]

After backtrack at level 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 8 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 27, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 27 with phase True at level 8

After decision at level 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27]


New level: 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, 128), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27]


Solution : [0, 5, 1, 7, 15, 27] has cost 51.


Decide in level 9 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 9, 17, 18, 29, 30, 3, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 9

After decision at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27, 11]


New level: 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27, 11]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 17, 18, 29, 30, 3, 10, 13]
 solution : [0, 5, 1, 7, 15, 27, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 8, 9, 13, 14, 16, 19, 22, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 15, 27, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 15, 27, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, 3), (18, 3), (19, 0), (20, 2), (21, 2), (22, 0), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 15, 27, 11]


Solution : [0, 5, 1, 7, 15, 27, 11] has cost 57.


Decide in level 10 among pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 3, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11, 3]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, 3), (19, -1), (20, 2), (21, 2), (22, -1), (23, 2), (24, 2), (25, 2), (26, 2), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {10, 17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 3]


Solution : [0, 5, 1, 7, 15, 27, 11, 3] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 11, 3]

After backtrack at level 11
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 27, 11]

Essensial at level 11 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {17, 18, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 11, 10]


Solution : [0, 5, 1, 7, 15, 27, 11, 10] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 11, 10]

After backtrack at level 11
 pending : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 27, 11]


Before backtrack at level 10
 pending : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 27, 11]

After backtrack at level 10
 pending : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27, 11]


Invert decision for 11 at level 9


New level: 10
 pending : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27]


Before reduction : 
 pending  : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27]


Solution : [0, 5, 1, 7, 15, 27] has cost 51.


Decide in level 10 among pending : [10, 20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 10 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27, 10]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 17, 18, 29, 30, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13, 3]
 solution : [0, 5, 1, 7, 15, 27, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 3), (18, 3), (19, 2), (20, 16), (21, 16), (22, 2), (23, 10), (24, 10), (25, 20), (26, 20), (27, -1), (28, -1), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : {3, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]


Solution : [0, 5, 1, 7, 15, 27, 10] has cost 57.


Decide in level 11 among pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 9, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10, 9]


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 8, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 9]


Solution : [0, 5, 1, 7, 15, 27, 10, 9] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 10, 9]

After backtrack at level 12
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]


Solution : [0, 5, 1, 7, 15, 27, 10] has cost 57.


Decide in level 12 among pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 13 with phase True at level 12

After decision at level 12
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 14, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]


Solution : [0, 5, 1, 7, 15, 27, 10, 13] has cost 62.


Before backtrack at level 13
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]

After backtrack at level 13
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10, 13]


Invert decision for 13 at level 12


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]


Solution : [0, 5, 1, 7, 15, 27, 10] has cost 57.


Decide in level 13 among pending : [20, 21, 23, 24, 25, 26, 6, 16, 19, 22, 8, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10, 6]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10, 6]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 6]


Solution : [0, 5, 1, 7, 15, 27, 10, 6] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 10, 6]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]

Essensial at level 14 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 10, 8]


Solution : [0, 5, 1, 7, 15, 27, 10, 8] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 10, 8]

After backtrack at level 14
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 10]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 27, 10]

After backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]


Before backtrack at level 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13]
 solution : [0, 5, 1, 7, 15, 27, 10]

After backtrack at level 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 17, 18, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 15, 27, 10]


Invert decision for 10 at level 10


New level: 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 17, 18, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 15, 27]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 17, 18, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 15, 27]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : {17, 18, 29, 30}

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 9]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 9]
 solution : [0, 5, 1, 7, 15, 27, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 9]
 solution : [0, 5, 1, 7, 15, 27, 3]


Solution : [0, 5, 1, 7, 15, 27, 3] has cost 57.


Decide in level 11 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 13, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]


New level: 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 14, 31}

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]


Solution : [0, 5, 1, 7, 15, 27, 3, 13] has cost 62.


Before backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]

After backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Solution : [0, 5, 1, 7, 15, 27, 3] has cost 57.


Decide in level 12 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 9, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 9]


New level: 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 9]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 9]


Solution : [0, 5, 1, 7, 15, 27, 3, 9] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 3, 9]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Solution : [0, 5, 1, 7, 15, 27, 3] has cost 57.


Decide in level 13 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 8]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 8]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 4), (21, 4), (22, 2), (23, 4), (24, 4), (25, 5), (26, 5), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 8]


Solution : [0, 5, 1, 7, 15, 27, 3, 8] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 3, 8]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 27, 3, 6]


Solution : [0, 5, 1, 7, 15, 27, 3, 6] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 27, 3, 6]

After backtrack at level 14
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 27, 3]

After backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 27, 3]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9]
 solution : [0, 5, 1, 7, 15, 27, 3]


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9]
 solution : [0, 5, 1, 7, 15, 27, 3]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13]
 solution : [0, 5, 1, 7, 15, 27]


Before backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13]
 solution : [0, 5, 1, 7, 15, 27]

After backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10]
 solution : [0, 5, 1, 7, 15, 27]


Before backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10]
 solution : [0, 5, 1, 7, 15, 27]

After backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15, 27]


Invert decision for 27 at level 8


New level: 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 9 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 9, 3, 17, 18, 29, 30, 13, 10, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15, 9]


New level: 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15, 9]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 3, 17, 18, 29, 30, 13, 10, 11]
 solution : [0, 5, 1, 7, 15, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, -1), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 8, 11, 13, 14, 31}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 3, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 3, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, -1), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 3, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9]


Solution : [0, 5, 1, 7, 15, 9] has cost 47.


Decide in level 10 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 3, 17, 18, 29, 30, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9, 3]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 12), (19, 2), (20, 6), (21, 6), (22, 2), (23, 6), (24, 6), (25, 7), (26, 7), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 3]


Solution : [0, 5, 1, 7, 15, 9, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 9, 3]

After backtrack at level 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 10]
 solution : [0, 5, 1, 7, 15, 9]

Essensial at level 11 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 9, 10]


Solution : [0, 5, 1, 7, 15, 9, 10] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 5, 1, 7, 15, 9, 10]

After backtrack at level 11
 pending : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 9]


Before backtrack at level 10
 pending : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30]
 solution : [0, 5, 1, 7, 15, 9]

After backtrack at level 10
 pending : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15]


Solution : [0, 5, 1, 7, 15] has cost 41.


Decide in level 10 among pending : [10, 20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Decide 10 with phase True at level 10

After decision at level 10
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15, 10]


New level: 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 17, 18, 29, 30, 6, 31, 33, 14, 8, 13, 11, 3]
 solution : [0, 5, 1, 7, 15, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 8), (17, 12), (18, 12), (19, 8), (20, 21), (21, 21), (22, 8), (23, 20), (24, 20), (25, 25), (26, 25), (27, -1), (28, -1), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : {3, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 13, 11]
 solution : [0, 5, 1, 7, 15, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 13, 11]
 solution : [0, 5, 1, 7, 15, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 13, 11]
 solution : [0, 5, 1, 7, 15, 10]


Solution : [0, 5, 1, 7, 15, 10] has cost 47.


Decide in level 11 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]


New level: 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : {14}

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]


Solution : [0, 5, 1, 7, 15, 10, 13] has cost 52.


Decide in level 12 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 11]


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 11]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 11]


Solution : [0, 5, 1, 7, 15, 10, 13, 11] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 13, 11]

After backtrack at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13]


Solution : [0, 5, 1, 7, 15, 10, 13] has cost 52.


Decide in level 13 among pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 6, 31, 33, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 6]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 6]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 6]


Solution : [0, 5, 1, 7, 15, 10, 13, 6] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 13, 6]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 10, 13]

Essensial at level 14 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 13, 8]


Solution : [0, 5, 1, 7, 15, 10, 13, 8] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 13, 8]

After backtrack at level 14
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33]
 solution : [0, 5, 1, 7, 15, 10, 13]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 10, 13]


Before backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6]
 solution : [0, 5, 1, 7, 15, 10, 13]

After backtrack at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 15, 10, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 15, 10]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 15, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 15, 10]


Solution : [0, 5, 1, 7, 15, 10] has cost 47.


Decide in level 12 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 11]


New level: 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 11]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 8, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 11]


Solution : [0, 5, 1, 7, 15, 10, 11] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 11]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10]


Solution : [0, 5, 1, 7, 15, 10] has cost 47.


Decide in level 13 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 8]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 8]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 8]


Solution : [0, 5, 1, 7, 15, 10, 8] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 8]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 15, 10]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 10, 6]


Solution : [0, 5, 1, 7, 15, 10, 6] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 10, 6]

After backtrack at level 14
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 10]


Before backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 10]

After backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 10]


Before backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 10]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 10]


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11]
 solution : [0, 5, 1, 7, 15, 10]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 17, 18, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 15, 10]


Invert decision for 10 at level 10


New level: 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 17, 18, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 15]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 17, 18, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 15]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : {17, 18, 29, 30}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 13]
 solution : [0, 5, 1, 7, 15, 3]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 13]
 solution : [0, 5, 1, 7, 15, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, 0), (18, 0), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, 0), (30, 0), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 13]
 solution : [0, 5, 1, 7, 15, 3]


Solution : [0, 5, 1, 7, 15, 3] has cost 47.


Decide in level 11 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 11, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3, 11]


New level: 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3, 11]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 8, 13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 11]


Solution : [0, 5, 1, 7, 15, 3, 11] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 15, 3, 11]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3]


Solution : [0, 5, 1, 7, 15, 3] has cost 47.


Decide in level 12 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 13 with phase True at level 12

After decision at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]


New level: 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : {14}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]


Solution : [0, 5, 1, 7, 15, 3, 13] has cost 52.


Decide in level 13 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13, 6]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13, 6]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 8, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 6]


Solution : [0, 5, 1, 7, 15, 3, 13, 6] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 3, 13, 6]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8]
 solution : [0, 5, 1, 7, 15, 3, 13]

Essensial at level 14 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 13, 8]


Solution : [0, 5, 1, 7, 15, 3, 13, 8] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 3, 13, 8]

After backtrack at level 14
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33]
 solution : [0, 5, 1, 7, 15, 3, 13]


Before backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33]
 solution : [0, 5, 1, 7, 15, 3, 13]

After backtrack at level 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3, 13]


Invert decision for 13 at level 12


New level: 13
 pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3]


Before reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3]


Solution : [0, 5, 1, 7, 15, 3] has cost 47.


Decide in level 13 among pending : [8, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3, 8]


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3, 8]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 2), (17, -1), (18, -1), (19, 2), (20, 5), (21, 5), (22, 2), (23, 6), (24, 6), (25, 6), (26, 6), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 8]


Solution : [0, 5, 1, 7, 15, 3, 8] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 3, 8]

After backtrack at level 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3]


Before reduction : 
 pending  : [20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 6]
 solution : [0, 5, 1, 7, 15, 3]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 6]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 15, 3, 6]


Solution : [0, 5, 1, 7, 15, 3, 6] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 15, 3, 6]

After backtrack at level 14
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 3]


Before backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 15, 3]

After backtrack at level 13
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 3]


Before backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8]
 solution : [0, 5, 1, 7, 15, 3]

After backtrack at level 12
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3]


Before backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13]
 solution : [0, 5, 1, 7, 15, 3]

After backtrack at level 11
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 10
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 9
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 8
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 7
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 7
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 6
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 6
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 5
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 5
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 15]


Before backtrack at level 4
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 15]

After backtrack at level 4
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 12]
 solution : [0, 5, 1, 7, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 12]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 12]
 solution : [0, 5, 1, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 4 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 12]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 4 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 12]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]


New level: 5
 pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 14, 8, 13, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, 0), (14, 0), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, 0), (14, 0), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 5 among pending : [6, 20, 21, 23, 24, 25, 26, 16, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 16 with phase True at level 5

After decision at level 5
 pending : [6, 20, 21, 23, 24, 25, 26, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]


New level: 6
 pending : [6, 20, 21, 23, 24, 25, 26, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 19, 22, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 0), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 49), (26, 49), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : {19, 22}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, 0), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 49), (26, 49), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 49), (26, 49), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]


Solution : [0, 5, 1, 7, 12, 16] has cost 64.


Before backtrack at level 6
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 16]

After backtrack at level 6
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 19, 22]
 solution : [0, 5, 1, 7, 12, 16]


Invert decision for 16 at level 5


New level: 6
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 19, 22]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 19, 22]
 solution : [0, 5, 1, 7, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 49), (26, 49), (27, 128), (28, 128), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 19, 22]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 6 among pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 19, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 19 with phase True at level 6

After decision at level 6
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 19]


New level: 7
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 19]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 19]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, 200), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 49), (26, 49), (27, 32), (28, 32), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 7 : {22}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 19]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 19]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 49), (26, 49), (27, 32), (28, 32), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 49), (26, 49), (27, 32), (28, 32), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 19]


Solution : [0, 5, 1, 7, 12, 19] has cost 59.


Before backtrack at level 7
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 19]

After backtrack at level 7
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 19]


Invert decision for 19 at level 6


New level: 7
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 49), (26, 49), (27, 32), (28, 32), (29, 32), (30, 32), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 7 among pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 17, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]


New level: 8
 pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 18, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 130), (22, 64), (23, 66), (24, 66), (25, 130), (26, 130), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 69), (21, 129), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : {18}

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, -1), (20, 69), (21, 129), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 129), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17]


Solution : [0, 5, 1, 7, 12, 17] has cost 41.


Decide in level 8 among pending : [6, 20, 21, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 129), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 21 with phase True at level 8

After decision at level 8
 pending : [6, 20, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17, 21]


New level: 9
 pending : [6, 20, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17, 21]


Before reduction : 
 pending  : [6, 20, 23, 24, 25, 26, 31, 33, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 22]
 solution : [0, 5, 1, 7, 12, 17, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 129), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 128), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 1), (28, 1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 20, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 21]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 21]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 128), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 1), (28, 1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 21]


Solution : [0, 5, 1, 7, 12, 17, 21] has cost 75.


Before backtrack at level 9
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 21]

After backtrack at level 9
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 25, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 21]


Invert decision for 21 at level 8


New level: 9
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 25, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 25, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 25, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Solution : [0, 5, 1, 7, 12, 17] has cost 41.


Decide in level 9 among pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 25, 26, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 25 with phase True at level 9

After decision at level 9
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 25]


New level: 10
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 25]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, 129), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 1), (28, 1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 20, 22, 23, 24, 26, 31}

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 25]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 1), (28, 1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 4), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 25]


Solution : [0, 5, 1, 7, 12, 17, 25] has cost 75.


Before backtrack at level 10
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 25]

After backtrack at level 10
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 25]


Invert decision for 25 at level 9


New level: 10
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 4), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Solution : [0, 5, 1, 7, 12, 17] has cost 41.


Decide in level 10 among pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 26, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 26 with phase True at level 10

After decision at level 10
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 26]


New level: 11
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 26]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 26]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, 129), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 20, 22, 23, 24, 31}

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 26]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 26]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 26]


Solution : [0, 5, 1, 7, 12, 17, 26] has cost 75.


Before backtrack at level 11
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28]
 solution : [0, 5, 1, 7, 12, 17, 26]

After backtrack at level 11
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 26]


Invert decision for 26 at level 10


New level: 11
 pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17]


Solution : [0, 5, 1, 7, 12, 17] has cost 41.


Decide in level 11 among pending : [6, 8, 3, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [6, 8, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


New level: 12
 pending : [6, 8, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before reduction : 
 pending  : [6, 8, 29, 30, 11, 10, 9, 27, 2, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : {10, 2, 29, 30}

After reduction : 
 pending  : [6, 8, 11, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before reduction : 
 pending  : [6, 8, 11, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 11, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Solution : [0, 5, 1, 7, 12, 17, 3] has cost 47.


Decide in level 12 among pending : [6, 8, 11, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 11]


New level: 13
 pending : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 11]


Before reduction : 
 pending  : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 4, 6, 8, 9, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 11]


Solution : [0, 5, 1, 7, 12, 17, 3, 11] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 3, 11]

After backtrack at level 13
 pending : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before reduction : 
 pending  : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Solution : [0, 5, 1, 7, 12, 17, 3] has cost 47.


Decide in level 13 among pending : [6, 8, 9, 27, 4, 28, 20, 23, 24, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 9]


New level: 14
 pending : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 9]


Before reduction : 
 pending  : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 4, 6, 8, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 9]


Solution : [0, 5, 1, 7, 12, 17, 3, 9] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 3, 9]

After backtrack at level 14
 pending : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before reduction : 
 pending  : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Solution : [0, 5, 1, 7, 12, 17, 3] has cost 47.


Decide in level 14 among pending : [6, 8, 27, 4, 28, 20, 23, 24, 31, 33, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 4]


New level: 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 4]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 3, 4]


Solution : [0, 5, 1, 7, 12, 17, 3, 4] has cost 60.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 3, 4]

After backtrack at level 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

Essensial at level 15 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 3, 20]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 3, 20]


Solution : [0, 5, 1, 7, 12, 17, 3, 20] has cost 81.


Before backtrack at level 15
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 3, 20]

After backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 3]

After backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4]
 solution : [0, 5, 1, 7, 12, 17, 3]

After backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9]
 solution : [0, 5, 1, 7, 12, 17, 3]


Before backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9]
 solution : [0, 5, 1, 7, 12, 17, 3]

After backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 17, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 17]


Solution : [0, 5, 1, 7, 12, 17] has cost 41.


Decide in level 12 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 10, 2, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


New level: 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, -1), (22, 2), (23, 18), (24, 18), (25, -1), (26, -1), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : {2, 29, 30}

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Solution : [0, 5, 1, 7, 12, 17, 10] has cost 47.


Decide in level 13 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 4]


New level: 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 4]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 8, 9, 11, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 4]


Solution : [0, 5, 1, 7, 12, 17, 10, 4] has cost 60.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 10, 4]

After backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Solution : [0, 5, 1, 7, 12, 17, 10] has cost 47.


Decide in level 14 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 9]


New level: 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 9]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 11, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 9]


Solution : [0, 5, 1, 7, 12, 17, 10, 9] has cost 53.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 10, 9]

After backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Solution : [0, 5, 1, 7, 12, 17, 10] has cost 47.


Decide in level 15 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10, 11]


New level: 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10, 11]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 17, 10, 11]


Solution : [0, 5, 1, 7, 12, 17, 10, 11] has cost 53.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 17, 10, 11]

After backtrack at level 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10]

Essensial at level 16 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 10, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 10, 20]


Solution : [0, 5, 1, 7, 12, 17, 10, 20] has cost 81.


Before backtrack at level 16
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 17, 10, 20]

After backtrack at level 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 17, 10]

After backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11]
 solution : [0, 5, 1, 7, 12, 17, 10]

After backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9]
 solution : [0, 5, 1, 7, 12, 17, 10]


Before backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9]
 solution : [0, 5, 1, 7, 12, 17, 10]

After backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 17, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 17]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 17]

Essensial at level 13 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : {29, 30}

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 17, 2]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 17, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 17, 2]


Solution : [0, 5, 1, 7, 12, 17, 2] has cost 54.


Before backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 17, 2]

After backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30]
 solution : [0, 5, 1, 7, 12, 17]


Before backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30]
 solution : [0, 5, 1, 7, 12, 17]

After backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10]
 solution : [0, 5, 1, 7, 12, 17]


Before backtrack at level 11
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10]
 solution : [0, 5, 1, 7, 12, 17]

After backtrack at level 11
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 17]


Before backtrack at level 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 17]

After backtrack at level 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26]
 solution : [0, 5, 1, 7, 12, 17]


Before backtrack at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26]
 solution : [0, 5, 1, 7, 12, 17]

After backtrack at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25]
 solution : [0, 5, 1, 7, 12, 17]


Before backtrack at level 8
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25]
 solution : [0, 5, 1, 7, 12, 17]

After backtrack at level 8
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 18, 21]
 solution : [0, 5, 1, 7, 12, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 18, 21]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 18, 21]
 solution : [0, 5, 1, 7, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, -1), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 18, 21]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 8 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 18, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 21]
 solution : [0, 5, 1, 7, 12, 18]


New level: 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 21]
 solution : [0, 5, 1, 7, 12, 18]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 21]
 solution : [0, 5, 1, 7, 12, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 129), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 21]
 solution : [0, 5, 1, 7, 12, 18]


Solution : [0, 5, 1, 7, 12, 18] has cost 41.


Decide in level 9 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 25, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 129), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 25 with phase True at level 9

After decision at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 25]


New level: 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 25]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 11, 9, 4, 2, 29, 30, 10, 3, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 129), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 1), (28, 1), (29, 4), (30, 4), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 20, 21, 22, 23, 24, 26, 31}

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18, 25]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 1), (28, 1), (29, 4), (30, 4), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 4), (30, 4), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18, 25]


Solution : [0, 5, 1, 7, 12, 18, 25] has cost 75.


Before backtrack at level 10
 pending : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18, 25]

After backtrack at level 10
 pending : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 25]


Invert decision for 25 at level 9


New level: 10
 pending : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 1), (28, 1), (29, 4), (30, 4), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18]


Solution : [0, 5, 1, 7, 12, 18] has cost 41.


Decide in level 10 among pending : [6, 8, 27, 28, 11, 9, 4, 2, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [6, 8, 27, 28, 11, 9, 4, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]


New level: 11
 pending : [6, 8, 27, 28, 11, 9, 4, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 29, 30, 10, 3, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : {10, 3, 29, 30}

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]


Solution : [0, 5, 1, 7, 12, 18, 2] has cost 54.


Before backtrack at level 11
 pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 2]

After backtrack at level 11
 pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 10, 3]
 solution : [0, 5, 1, 7, 12, 18]


Solution : [0, 5, 1, 7, 12, 18] has cost 41.


Decide in level 11 among pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 10, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 3]
 solution : [0, 5, 1, 7, 12, 18, 10]


New level: 12
 pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 3]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21, 29, 30, 3]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, -1), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : {3, 29, 30}

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Solution : [0, 5, 1, 7, 12, 18, 10] has cost 47.


Decide in level 12 among pending : [6, 8, 27, 28, 11, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 11]


New level: 13
 pending : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 11]


Before reduction : 
 pending  : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 4, 6, 8, 9, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 11]


Solution : [0, 5, 1, 7, 12, 18, 10, 11] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 10, 11]

After backtrack at level 13
 pending : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Solution : [0, 5, 1, 7, 12, 18, 10] has cost 47.


Decide in level 13 among pending : [6, 8, 27, 28, 9, 4, 20, 23, 24, 31, 33, 22, 26, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 9]


New level: 14
 pending : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 9]


Before reduction : 
 pending  : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 4, 6, 8, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 9]


Solution : [0, 5, 1, 7, 12, 18, 10, 9] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 10, 9]

After backtrack at level 14
 pending : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Solution : [0, 5, 1, 7, 12, 18, 10] has cost 47.


Decide in level 14 among pending : [6, 8, 27, 28, 4, 20, 23, 24, 31, 33, 22, 26, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 4]


New level: 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 4]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 10, 4]


Solution : [0, 5, 1, 7, 12, 18, 10, 4] has cost 60.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 10, 4]

After backtrack at level 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Solution : [0, 5, 1, 7, 12, 18, 10] has cost 47.


Decide in level 15 among pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 26, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 26 with phase True at level 15

After decision at level 15
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]


New level: 16
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 20, 21, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]


Solution : [0, 5, 1, 7, 12, 18, 10, 26] has cost 81.


Before backtrack at level 16
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]

After backtrack at level 16
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 26]


Invert decision for 26 at level 15


New level: 16
 pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Solution : [0, 5, 1, 7, 12, 18, 10] has cost 47.


Decide in level 16 among pending : [6, 8, 27, 28, 20, 23, 24, 31, 33, 22, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 20 with phase True at level 16

After decision at level 16
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]


New level: 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]


Before reduction : 
 pending  : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 21, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]


Solution : [0, 5, 1, 7, 12, 18, 10, 20] has cost 81.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]

After backtrack at level 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10, 20]


Invert decision for 20 at level 16


New level: 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before reduction : 
 pending  : [6, 8, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 10]

Essensial at level 17 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 21]


Solution : [0, 5, 1, 7, 12, 18, 10, 21] has cost 81.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 10, 21]

After backtrack at level 17
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before backtrack at level 16
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 18, 10]

After backtrack at level 16
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before backtrack at level 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 10]

After backtrack at level 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before backtrack at level 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 10]

After backtrack at level 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before backtrack at level 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 18, 10]

After backtrack at level 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 18, 10]


Before backtrack at level 12
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 18, 10]

After backtrack at level 12
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 12, 18, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 12, 18]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 29, 30, 3, 11]
 solution : [0, 5, 1, 7, 12, 18]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : {29, 30}

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Solution : [0, 5, 1, 7, 12, 18, 3] has cost 47.


Decide in level 12 among pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 4 with phase True at level 12

After decision at level 12
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 4]


New level: 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 4]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 8, 9, 11, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 4]


Solution : [0, 5, 1, 7, 12, 18, 3, 4] has cost 60.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 3, 4]

After backtrack at level 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 4]


Invert decision for 4 at level 12


New level: 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Solution : [0, 5, 1, 7, 12, 18, 3] has cost 47.


Decide in level 13 among pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 9]


New level: 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 9]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 8, 11, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 9]


Solution : [0, 5, 1, 7, 12, 18, 3, 9] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 3, 9]

After backtrack at level 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Solution : [0, 5, 1, 7, 12, 18, 3] has cost 47.


Decide in level 14 among pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3, 11]


New level: 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3, 11]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 20, 21, 22, 23, 24, 26, 27, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 18, 3, 11]


Solution : [0, 5, 1, 7, 12, 18, 3, 11] has cost 53.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 18, 3, 11]

After backtrack at level 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 18, 3]


Solution : [0, 5, 1, 7, 12, 18, 3] has cost 47.


Decide in level 15 among pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 26 with phase True at level 15

After decision at level 15
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]


New level: 16
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 20, 21, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]


Solution : [0, 5, 1, 7, 12, 18, 3, 26] has cost 81.


Before backtrack at level 16
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]

After backtrack at level 16
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 26]


Invert decision for 26 at level 15


New level: 16
 pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3]


Solution : [0, 5, 1, 7, 12, 18, 3] has cost 47.


Decide in level 16 among pending : [6, 8, 21, 27, 28, 23, 24, 31, 33, 22, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]


New level: 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]


Before reduction : 
 pending  : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 2), (23, 6), (24, 6), (25, -1), (26, -1), (27, 1), (28, 1), (29, -1), (30, -1), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 20, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]


Solution : [0, 5, 1, 7, 12, 18, 3, 21] has cost 81.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]

After backtrack at level 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before reduction : 
 pending  : [6, 8, 27, 28, 23, 24, 31, 33, 22, 20]
 solution : [0, 5, 1, 7, 12, 18, 3]

Essensial at level 17 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 22, 23, 24, 27, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 20]


Solution : [0, 5, 1, 7, 12, 18, 3, 20] has cost 81.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 18, 3, 20]

After backtrack at level 17
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before backtrack at level 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22]
 solution : [0, 5, 1, 7, 12, 18, 3]

After backtrack at level 16
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21]
 solution : [0, 5, 1, 7, 12, 18, 3]

After backtrack at level 15
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 18, 3]

After backtrack at level 14
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 18, 3]

After backtrack at level 13
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 18, 3]


Before backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 18, 3]

After backtrack at level 12
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4]
 solution : [0, 5, 1, 7, 12, 18]


Before backtrack at level 11
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4]
 solution : [0, 5, 1, 7, 12, 18]

After backtrack at level 11
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 12, 18]


Before backtrack at level 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 12, 18]

After backtrack at level 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 18]


Before backtrack at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 18]

After backtrack at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2, 25]
 solution : [0, 5, 1, 7, 12, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2, 25]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2, 25]
 solution : [0, 5, 1, 7, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2, 25]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 9 among pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2, 25]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 25 with phase True at level 9

After decision at level 9
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]


New level: 10
 pending : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]


Before reduction : 
 pending  : [6, 8, 20, 27, 28, 23, 24, 31, 33, 22, 21, 26, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 130), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 16), (28, 16), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 20, 21, 22, 23, 24, 26, 31}

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 16), (28, 16), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16), (28, 16), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]


Solution : [0, 5, 1, 7, 12, 25] has cost 59.


Before backtrack at level 10
 pending : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2]
 solution : [0, 5, 1, 7, 12, 25]

After backtrack at level 10
 pending : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 25]


Invert decision for 25 at level 9


New level: 10
 pending : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, 64), (4, 1), (5, -1), (6, 1), (7, -1), (8, 1), (9, 1), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 16), (28, 16), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 10 among pending : [6, 8, 27, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 27 with phase True at level 10

After decision at level 10
 pending : [6, 8, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]


New level: 11
 pending : [6, 8, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]


Before reduction : 
 pending  : [6, 8, 28, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 31, 33, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, 0), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 28, 31}

After reduction : 
 pending  : [6, 8, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]


Before reduction : 
 pending  : [6, 8, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, 0), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27]


Solution : [0, 5, 1, 7, 12, 27] has cost 35.


Decide in level 11 among pending : [6, 8, 11, 9, 3, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [6, 8, 11, 9, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


New level: 12
 pending : [6, 8, 11, 9, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 11, 9, 29, 30, 4, 10, 2, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {10, 2, 29, 30}

After reduction : 
 pending  : [6, 8, 11, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 11, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 11, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Solution : [0, 5, 1, 7, 12, 27, 3] has cost 41.


Decide in level 12 among pending : [6, 8, 11, 9, 4, 20, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 11]


New level: 13
 pending : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 11]


Before reduction : 
 pending  : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {4, 6, 8, 9, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 11]


Solution : [0, 5, 1, 7, 12, 27, 3, 11] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 3, 11]

After backtrack at level 13
 pending : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Solution : [0, 5, 1, 7, 12, 27, 3] has cost 41.


Decide in level 13 among pending : [6, 8, 9, 4, 20, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 9]


New level: 14
 pending : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 9]


Before reduction : 
 pending  : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {4, 6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 9]


Solution : [0, 5, 1, 7, 12, 27, 3, 9] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 3, 9]

After backtrack at level 14
 pending : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 4, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Solution : [0, 5, 1, 7, 12, 27, 3] has cost 41.


Decide in level 14 among pending : [6, 8, 4, 20, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 4]


New level: 15
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 4]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 3, 4]


Solution : [0, 5, 1, 7, 12, 27, 3, 4] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 3, 4]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Solution : [0, 5, 1, 7, 12, 27, 3] has cost 41.


Decide in level 15 among pending : [6, 8, 20, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]


New level: 16
 pending : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {21, 22, 23, 24, 26}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]


Solution : [0, 5, 1, 7, 12, 27, 3, 20] has cost 75.


Before backtrack at level 16
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]

After backtrack at level 16
 pending : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Solution : [0, 5, 1, 7, 12, 27, 3] has cost 41.


Decide in level 16 among pending : [6, 8, 23, 24, 22, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]


New level: 17
 pending : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {24, 26, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]


Solution : [0, 5, 1, 7, 12, 27, 3, 21] has cost 75.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]

After backtrack at level 17
 pending : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 26]
 solution : [0, 5, 1, 7, 12, 27, 3]

Essensial at level 17 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {24, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 26]


Solution : [0, 5, 1, 7, 12, 27, 3, 26] has cost 75.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 3, 26]

After backtrack at level 17
 pending : [6, 8, 26, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 27, 3]

After backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 27, 3]

After backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before backtrack at level 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 3]

After backtrack at level 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before backtrack at level 13
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4]
 solution : [0, 5, 1, 7, 12, 27, 3]

After backtrack at level 13
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9]
 solution : [0, 5, 1, 7, 12, 27, 3]


Before backtrack at level 12
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9]
 solution : [0, 5, 1, 7, 12, 27, 3]

After backtrack at level 12
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 27, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 27]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 27]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 10, 2, 11]
 solution : [0, 5, 1, 7, 12, 27]


Solution : [0, 5, 1, 7, 12, 27] has cost 35.


Decide in level 12 among pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 10, 2, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


New level: 13
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {2, 29, 30}

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Solution : [0, 5, 1, 7, 12, 27, 10] has cost 41.


Decide in level 13 among pending : [6, 8, 26, 23, 24, 22, 21, 20, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 4]


New level: 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 4]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {6, 8, 9, 11, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 4]


Solution : [0, 5, 1, 7, 12, 27, 10, 4] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 10, 4]

After backtrack at level 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Solution : [0, 5, 1, 7, 12, 27, 10] has cost 41.


Decide in level 14 among pending : [6, 8, 26, 23, 24, 22, 21, 20, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 9]


New level: 15
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 9]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {6, 8, 11, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 9]


Solution : [0, 5, 1, 7, 12, 27, 10, 9] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 10, 9]

After backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Solution : [0, 5, 1, 7, 12, 27, 10] has cost 41.


Decide in level 15 among pending : [6, 8, 26, 23, 24, 22, 21, 20, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 11]


New level: 16
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 11]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 27, 10, 11]


Solution : [0, 5, 1, 7, 12, 27, 10, 11] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 27, 10, 11]

After backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]


Solution : [0, 5, 1, 7, 12, 27, 10] has cost 41.


Decide in level 16 among pending : [6, 8, 26, 23, 24, 22, 21, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 16

After decision at level 16
 pending : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]


New level: 17
 pending : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {20, 21, 22, 23, 24}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]


Solution : [0, 5, 1, 7, 12, 27, 10, 26] has cost 75.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]

After backtrack at level 17
 pending : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 26]


Invert decision for 26 at level 16


New level: 17
 pending : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 23, 24, 22, 21, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]


Solution : [0, 5, 1, 7, 12, 27, 10] has cost 41.


Decide in level 17 among pending : [6, 8, 23, 24, 22, 21, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 21 with phase True at level 17

After decision at level 17
 pending : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]


New level: 18
 pending : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {24, 20, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]


Solution : [0, 5, 1, 7, 12, 27, 10, 21] has cost 75.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]

After backtrack at level 18
 pending : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10, 21]


Invert decision for 21 at level 17


New level: 18
 pending : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 27, 10]

Essensial at level 18 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {24, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 20]


Solution : [0, 5, 1, 7, 12, 27, 10, 20] has cost 75.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 27, 10, 20]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before backtrack at level 17
 pending : [6, 8, 20, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 27, 10]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before backtrack at level 16
 pending : [6, 8, 20, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 27, 10]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before backtrack at level 15
 pending : [6, 8, 20, 23, 24, 22, 21, 26]
 solution : [0, 5, 1, 7, 12, 27, 10]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before backtrack at level 14
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 27, 10]

After backtrack at level 14
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 27, 10]


Before backtrack at level 13
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 27, 10]

After backtrack at level 13
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 27, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 27]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 29, 30, 2, 4]
 solution : [0, 5, 1, 7, 12, 27]

Essensial at level 13 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {29, 30}

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 27, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 27, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 27, 2]


Solution : [0, 5, 1, 7, 12, 27, 2] has cost 48.


Before backtrack at level 13
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 27, 2]

After backtrack at level 13
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30]
 solution : [0, 5, 1, 7, 12, 27]


Before backtrack at level 12
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30]
 solution : [0, 5, 1, 7, 12, 27]

After backtrack at level 12
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10]
 solution : [0, 5, 1, 7, 12, 27]


Before backtrack at level 11
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10]
 solution : [0, 5, 1, 7, 12, 27]

After backtrack at level 11
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12, 27]


Invert decision for 27 at level 10


New level: 11
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 11 among pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 2, 29, 30, 10, 28, 31, 33, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12, 2]


New level: 12
 pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 29, 30, 10, 28, 31, 33, 3]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : {10, 3, 29, 30}

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 12 among pending : [6, 8, 20, 23, 24, 22, 21, 26, 11, 9, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 12

After decision at level 12
 pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]


New level: 13
 pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]


Solution : [0, 5, 1, 7, 12, 2, 22] has cost 48.


Before backtrack at level 13
 pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]

After backtrack at level 13
 pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 22]


Invert decision for 22 at level 12


New level: 13
 pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 13 among pending : [6, 8, 20, 23, 24, 21, 26, 11, 9, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 13

After decision at level 13
 pending : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 11]


New level: 14
 pending : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 11]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 4, 6, 8, 9, 20, 21, 23, 24, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 11]


Solution : [0, 5, 1, 7, 12, 2, 11] has cost 44.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 12, 2, 11]

After backtrack at level 14
 pending : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 11]


Invert decision for 11 at level 13


New level: 14
 pending : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 14 among pending : [6, 8, 20, 23, 24, 21, 26, 9, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 9]


New level: 15
 pending : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 9]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 4, 6, 8, 20, 21, 23, 24, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 9]


Solution : [0, 5, 1, 7, 12, 2, 9] has cost 44.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 2, 9]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 15 among pending : [6, 8, 20, 23, 24, 21, 26, 4, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 4]


New level: 16
 pending : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 4]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 20, 21, 23, 24, 26, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 2, 4]


Solution : [0, 5, 1, 7, 12, 2, 4] has cost 51.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 2, 4]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 16 among pending : [6, 8, 20, 23, 24, 21, 26, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 26 with phase True at level 16

After decision at level 16
 pending : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 26]


New level: 17
 pending : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 26]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 20, 21, 23, 24, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 26]


Solution : [0, 5, 1, 7, 12, 2, 26] has cost 72.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 26]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 26]


Invert decision for 26 at level 16


New level: 17
 pending : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Solution : [0, 5, 1, 7, 12, 2] has cost 38.


Decide in level 17 among pending : [6, 8, 20, 23, 24, 21, 28, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 20 with phase True at level 17

After decision at level 17
 pending : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 20]


New level: 18
 pending : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 21, 23, 24, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 20]


Solution : [0, 5, 1, 7, 12, 2, 20] has cost 72.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 20]

After backtrack at level 18
 pending : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2, 20]


Invert decision for 20 at level 17


New level: 18
 pending : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before reduction : 
 pending  : [6, 8, 23, 24, 21, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

Essensial at level 18 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 23, 24, 28, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 21]


Solution : [0, 5, 1, 7, 12, 2, 21] has cost 72.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 2, 21]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 17
 pending : [6, 8, 21, 23, 24, 28, 31, 33]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 16
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 13
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 13
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 2]


Before backtrack at level 12
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 2]

After backtrack at level 12
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 12 among pending : [6, 8, 21, 23, 24, 28, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 28 with phase True at level 12

After decision at level 12
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]


New level: 13
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, 128), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 31}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]
 solution : [0, 5, 1, 7, 12, 28]


Solution : [0, 5, 1, 7, 12, 28] has cost 35.


Decide in level 13 among pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 10, 3, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 3, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


New level: 14
 pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 3, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 29, 30, 3, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, -1), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Solution : [0, 5, 1, 7, 12, 28, 10] has cost 41.


Decide in level 14 among pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 4]


New level: 15
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 4]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {6, 8, 9, 11, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 4]


Solution : [0, 5, 1, 7, 12, 28, 10, 4] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 10, 4]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Solution : [0, 5, 1, 7, 12, 28, 10] has cost 41.


Decide in level 15 among pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 15

After decision at level 15
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 9]


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 9]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {6, 8, 11, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 9]


Solution : [0, 5, 1, 7, 12, 28, 10, 9] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 10, 9]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 9]


Invert decision for 9 at level 15


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Solution : [0, 5, 1, 7, 12, 28, 10] has cost 41.


Decide in level 16 among pending : [6, 8, 21, 23, 24, 20, 26, 11, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 11]


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 11]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 10, 11]


Solution : [0, 5, 1, 7, 12, 28, 10, 11] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 10, 11]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Solution : [0, 5, 1, 7, 12, 28, 10] has cost 41.


Decide in level 17 among pending : [6, 8, 21, 23, 24, 20, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 21 with phase True at level 17

After decision at level 17
 pending : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]


New level: 18
 pending : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {20, 22, 23, 24, 26}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]


Solution : [0, 5, 1, 7, 12, 28, 10, 21] has cost 75.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]

After backtrack at level 18
 pending : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 21]


Invert decision for 21 at level 17


New level: 18
 pending : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, -1), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 23, 24, 20, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Solution : [0, 5, 1, 7, 12, 28, 10] has cost 41.


Decide in level 18 among pending : [6, 8, 23, 24, 20, 26, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, -1), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 18

After decision at level 18
 pending : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]


New level: 19
 pending : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, -1), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 26, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]


Solution : [0, 5, 1, 7, 12, 28, 10, 20] has cost 75.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]

After backtrack at level 19
 pending : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10, 20]


Invert decision for 20 at level 18


New level: 19
 pending : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 26, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

Essensial at level 19 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 26]


Solution : [0, 5, 1, 7, 12, 28, 10, 26] has cost 75.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 10, 26]

After backtrack at level 19
 pending : [6, 8, 26, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before backtrack at level 18
 pending : [6, 8, 26, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 28, 10]

After backtrack at level 18
 pending : [6, 8, 26, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before backtrack at level 17
 pending : [6, 8, 26, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 28, 10]

After backtrack at level 17
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 10]

After backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11]
 solution : [0, 5, 1, 7, 12, 28, 10]

After backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9]
 solution : [0, 5, 1, 7, 12, 28, 10]


Before backtrack at level 14
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9]
 solution : [0, 5, 1, 7, 12, 28, 10]

After backtrack at level 14
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 29, 30, 3, 4]
 solution : [0, 5, 1, 7, 12, 28, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 29, 30, 3, 4]
 solution : [0, 5, 1, 7, 12, 28]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 29, 30, 3, 4]
 solution : [0, 5, 1, 7, 12, 28]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Solution : [0, 5, 1, 7, 12, 28, 3] has cost 41.


Decide in level 14 among pending : [6, 8, 26, 23, 24, 22, 20, 21, 11, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 11]


New level: 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 11]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : {4, 6, 8, 9, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 11]


Solution : [0, 5, 1, 7, 12, 28, 3, 11] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 3, 11]

After backtrack at level 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Solution : [0, 5, 1, 7, 12, 28, 3] has cost 41.


Decide in level 15 among pending : [6, 8, 26, 23, 24, 22, 20, 21, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 9 with phase True at level 15

After decision at level 15
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 9]


New level: 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 9]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {4, 6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 9]


Solution : [0, 5, 1, 7, 12, 28, 3, 9] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 3, 9]

After backtrack at level 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3, 9]


Invert decision for 9 at level 15


New level: 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Solution : [0, 5, 1, 7, 12, 28, 3] has cost 41.


Decide in level 16 among pending : [6, 8, 26, 23, 24, 22, 20, 21, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 4 with phase True at level 16

After decision at level 16
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 4]


New level: 17
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 4]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : {6, 8, 20, 21, 22, 23, 24, 26}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 28, 3, 4]


Solution : [0, 5, 1, 7, 12, 28, 3, 4] has cost 54.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 12, 28, 3, 4]

After backtrack at level 17
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 4]


Invert decision for 4 at level 16


New level: 17
 pending : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 26, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]


Solution : [0, 5, 1, 7, 12, 28, 3] has cost 41.


Decide in level 17 among pending : [6, 8, 26, 23, 24, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 26 with phase True at level 17

After decision at level 17
 pending : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]


New level: 18
 pending : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : {20, 21, 22, 23, 24}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]


Solution : [0, 5, 1, 7, 12, 28, 3, 26] has cost 75.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]

After backtrack at level 18
 pending : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 26]


Invert decision for 26 at level 17


New level: 18
 pending : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 23, 24, 22, 20, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]


Solution : [0, 5, 1, 7, 12, 28, 3] has cost 41.


Decide in level 18 among pending : [6, 8, 23, 24, 22, 20, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Decide 20 with phase True at level 18

After decision at level 18
 pending : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]


New level: 19
 pending : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 21, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]


Solution : [0, 5, 1, 7, 12, 28, 3, 20] has cost 75.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]

After backtrack at level 19
 pending : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3, 20]


Invert decision for 20 at level 18


New level: 19
 pending : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 22, 21]
 solution : [0, 5, 1, 7, 12, 28, 3]

Essensial at level 19 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : {24, 22, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 21]


Solution : [0, 5, 1, 7, 12, 28, 3, 21] has cost 75.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 28, 3, 21]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before backtrack at level 18
 pending : [6, 8, 21, 23, 24, 22]
 solution : [0, 5, 1, 7, 12, 28, 3]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before backtrack at level 17
 pending : [6, 8, 21, 23, 24, 22, 20]
 solution : [0, 5, 1, 7, 12, 28, 3]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before backtrack at level 16
 pending : [6, 8, 21, 23, 24, 22, 20, 26]
 solution : [0, 5, 1, 7, 12, 28, 3]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 28, 3]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 28, 3]


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 28, 3]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11]
 solution : [0, 5, 1, 7, 12, 28]


Before backtrack at level 13
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11]
 solution : [0, 5, 1, 7, 12, 28]

After backtrack at level 13
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12, 28]


Invert decision for 28 at level 12


New level: 13
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12]


Solution : [0, 5, 1, 7, 12] has cost 25.


Decide in level 13 among pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 3, 29, 30, 11, 31, 33, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12, 3]


New level: 14
 pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 29, 30, 11, 31, 33, 10]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, -1), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {10, 29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 14 among pending : [6, 8, 21, 23, 24, 22, 20, 26, 4, 9, 11, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 14

After decision at level 14
 pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


New level: 15
 pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Solution : [0, 5, 1, 7, 12, 3, 22] has cost 41.


Decide in level 15 among pending : [6, 8, 21, 23, 24, 20, 26, 4, 9, 11, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 4]


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 4]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 9, 11, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 4]


Solution : [0, 5, 1, 7, 12, 3, 22, 4] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 22, 4]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Solution : [0, 5, 1, 7, 12, 3, 22] has cost 41.


Decide in level 16 among pending : [6, 8, 21, 23, 24, 20, 26, 9, 11, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 9 with phase True at level 16

After decision at level 16
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 9]


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 9]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 6, 8, 11, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 9]


Solution : [0, 5, 1, 7, 12, 3, 22, 9] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 22, 9]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 9]


Invert decision for 9 at level 16


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Solution : [0, 5, 1, 7, 12, 3, 22] has cost 41.


Decide in level 17 among pending : [6, 8, 21, 23, 24, 20, 26, 11, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 11 with phase True at level 17

After decision at level 17
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 11]


New level: 18
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 11]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 6, 8, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 22, 11]


Solution : [0, 5, 1, 7, 12, 3, 22, 11] has cost 47.


Before backtrack at level 18
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 22, 11]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 11]


Invert decision for 11 at level 17


New level: 18
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Solution : [0, 5, 1, 7, 12, 3, 22] has cost 41.


Decide in level 18 among pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 26 with phase True at level 18

After decision at level 18
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]


New level: 19
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 20, 21, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]


Solution : [0, 5, 1, 7, 12, 3, 22, 26] has cost 75.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 26]


Invert decision for 26 at level 18


New level: 19
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Solution : [0, 5, 1, 7, 12, 3, 22] has cost 41.


Decide in level 19 among pending : [6, 8, 21, 23, 24, 20, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 21 with phase True at level 19

After decision at level 19
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]


New level: 20
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {33, 20, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]


Solution : [0, 5, 1, 7, 12, 3, 22, 21] has cost 75.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]

After backtrack at level 20
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22, 21]


Invert decision for 21 at level 19


New level: 20
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

Essensial at level 20 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {24, 33, 31, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 20]


Solution : [0, 5, 1, 7, 12, 3, 22, 20] has cost 75.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 22, 20]

After backtrack at level 20
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 3, 22]

After backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 22]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 22]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 3, 22]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 3, 22]


Before backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 3, 22]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 3, 22]


Invert decision for 22 at level 14


New level: 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 15 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3, 11]


New level: 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3, 11]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 4, 6, 8, 9, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 11]


Solution : [0, 5, 1, 7, 12, 3, 11] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 11]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 16 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 16

After decision at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3, 9]


New level: 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3, 9]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 4, 6, 8, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 9]


Solution : [0, 5, 1, 7, 12, 3, 9] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 9]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3, 9]


Invert decision for 9 at level 16


New level: 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 17 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 17

After decision at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 4]


New level: 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 4]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 6, 8, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 3, 4]


Solution : [0, 5, 1, 7, 12, 3, 4] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 5, 1, 7, 12, 3, 4]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3, 4]


Invert decision for 4 at level 17


New level: 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 18 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 26 with phase True at level 18

After decision at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 26]


New level: 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 26]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 20, 21, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 26]


Solution : [0, 5, 1, 7, 12, 3, 26] has cost 65.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 26]

After backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 26]


Invert decision for 26 at level 18


New level: 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3]


Solution : [0, 5, 1, 7, 12, 3] has cost 31.


Decide in level 19 among pending : [6, 8, 20, 23, 24, 31, 33, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 20 with phase True at level 19

After decision at level 19
 pending : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 20]


New level: 20
 pending : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {33, 21, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 20]


Solution : [0, 5, 1, 7, 12, 3, 20] has cost 65.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 20]

After backtrack at level 20
 pending : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3, 20]


Invert decision for 20 at level 19


New level: 20
 pending : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 3]

Essensial at level 20 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {24, 33, 31, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 21]


Solution : [0, 5, 1, 7, 12, 3, 21] has cost 65.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 3, 21]

After backtrack at level 20
 pending : [6, 8, 21, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 19
 pending : [6, 8, 21, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 3]


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 3]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 22]
 solution : [0, 5, 1, 7, 12, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 22]
 solution : [0, 5, 1, 7, 12]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 29, 30, 10, 22]
 solution : [0, 5, 1, 7, 12]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 22]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 14 among pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 14

After decision at level 14
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]


New level: 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]


Solution : [0, 5, 1, 7, 12, 10, 22] has cost 41.


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 22]


Invert decision for 22 at level 14


New level: 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 15 among pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 4, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 4]


New level: 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 4]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 9, 11, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 4]


Solution : [0, 5, 1, 7, 12, 10, 4] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 12, 10, 4]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 16 among pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 16

After decision at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10, 9]


New level: 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10, 9]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 6, 8, 11, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 9]


Solution : [0, 5, 1, 7, 12, 10, 9] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 12, 10, 9]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10, 9]


Invert decision for 9 at level 16


New level: 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 17 among pending : [6, 8, 21, 23, 24, 31, 33, 20, 26, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 17

After decision at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10, 11]


New level: 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10, 11]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 6, 8, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 12, 10, 11]


Solution : [0, 5, 1, 7, 12, 10, 11] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 5, 1, 7, 12, 10, 11]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10, 11]


Invert decision for 11 at level 17


New level: 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 26]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 18 among pending : [6, 8, 21, 23, 24, 31, 33, 20, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 26 with phase True at level 18

After decision at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 26]


New level: 19
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 26]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 20, 21, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 26]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 26]


Solution : [0, 5, 1, 7, 12, 10, 26] has cost 65.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 26]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 26]


Invert decision for 26 at level 18


New level: 19
 pending : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10]


Solution : [0, 5, 1, 7, 12, 10] has cost 31.


Decide in level 19 among pending : [6, 8, 21, 23, 24, 31, 33, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 21 with phase True at level 19

After decision at level 19
 pending : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 21]


New level: 20
 pending : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {33, 20, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 21]


Solution : [0, 5, 1, 7, 12, 10, 21] has cost 65.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 21]

After backtrack at level 20
 pending : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10, 21]


Invert decision for 21 at level 19


New level: 20
 pending : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 31, 33, 20]
 solution : [0, 5, 1, 7, 12, 10]

Essensial at level 20 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {24, 33, 31, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 20]


Solution : [0, 5, 1, 7, 12, 10, 20] has cost 65.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 12, 10, 20]

After backtrack at level 20
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 10]


Before backtrack at level 14
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 12, 10]

After backtrack at level 14
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 13
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 13
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 12
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 12
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 10
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 10
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 9
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 9
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 8
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 8
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19]
 solution : [0, 5, 1, 7, 12]


Before backtrack at level 5
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19]
 solution : [0, 5, 1, 7, 12]

After backtrack at level 5
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19, 14, 13, 16]
 solution : [0, 5, 1, 7, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19, 14, 13, 16]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19, 14, 13, 16]
 solution : [0, 5, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 5 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19, 14, 13, 16]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 5 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 19, 14, 13, 16]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 19 with phase True at level 5

After decision at level 5
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 14, 13, 16]
 solution : [0, 5, 1, 7, 19]


New level: 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 14, 13, 16]
 solution : [0, 5, 1, 7, 19]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 22, 3, 28, 2, 27, 25, 18, 17, 14, 13, 16]
 solution : [0, 5, 1, 7, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, 200), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 0), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 41), (26, 41), (27, 32), (28, 32), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 6 : {16, 22}

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 19]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 19]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 0), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 41), (26, 41), (27, 32), (28, 32), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 41), (26, 41), (27, 32), (28, 32), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 19]


Solution : [0, 5, 1, 7, 19] has cost 54.


Before backtrack at level 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 19]

After backtrack at level 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22, 16]
 solution : [0, 5, 1, 7, 19]


Invert decision for 19 at level 5


New level: 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22, 16]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22, 16]
 solution : [0, 5, 1, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 41), (26, 41), (27, 32), (28, 32), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 6 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22, 16]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 6 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22, 16]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 16 with phase True at level 6

After decision at level 6
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 16]


New level: 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 16]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, 200), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 41), (26, 41), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 7 : {22}

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 16]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, 0), (23, 16), (24, 16), (25, 41), (26, 41), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 41), (26, 41), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 16]


Solution : [0, 5, 1, 7, 16] has cost 59.


Before backtrack at level 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13]
 solution : [0, 5, 1, 7, 16]

After backtrack at level 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 16]


Invert decision for 16 at level 6


New level: 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 10), (18, 10), (19, -1), (20, 37), (21, 37), (22, -1), (23, 16), (24, 16), (25, 41), (26, 41), (27, 128), (28, 128), (29, 32), (30, 32), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 7 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 18, 17, 14, 13, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


New level: 8
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 17, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, 192), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 8 : {17}

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Solution : [0, 5, 1, 7, 18] has cost 36.


Decide in level 8 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 11, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 11]


New level: 9
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 11]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 9, 4, 10, 29, 30, 3, 28, 2, 27, 25, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 32), (28, 32), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 4, 6, 8, 9, 13, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 18, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 18, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 32), (28, 32), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 32), (28, 32), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 18, 11]


Solution : [0, 5, 1, 7, 18, 11] has cost 42.


Before backtrack at level 9
 pending : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25]
 solution : [0, 5, 1, 7, 18, 11]

After backtrack at level 9
 pending : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 32), (28, 32), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Solution : [0, 5, 1, 7, 18] has cost 36.


Decide in level 9 among pending : [20, 23, 24, 21, 26, 10, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [20, 23, 24, 21, 26, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]


New level: 10
 pending : [20, 23, 24, 21, 26, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 29, 30, 3, 28, 2, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 10 : {2, 3, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]


Solution : [0, 5, 1, 7, 18, 10] has cost 42.


Before backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 10]

After backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18]


Solution : [0, 5, 1, 7, 18] has cost 36.


Decide in level 10 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 9, 4, 14, 13, 22, 29, 30, 3, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]


New level: 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 4, 6, 8, 13, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]


Solution : [0, 5, 1, 7, 18, 9] has cost 42.


Before backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 18, 9]

After backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18]


Solution : [0, 5, 1, 7, 18] has cost 36.


Decide in level 11 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 2, 6, 8, 31, 33, 4, 14, 13, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]


New level: 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 2, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : {2, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]


Solution : [0, 5, 1, 7, 18, 3] has cost 42.


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 3]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 18, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 18]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 18]

Essensial at level 12 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : {29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 2]


Solution : [0, 5, 1, 7, 18, 2] has cost 49.


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22]
 solution : [0, 5, 1, 7, 18, 2]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30]
 solution : [0, 5, 1, 7, 18]


Before backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30]
 solution : [0, 5, 1, 7, 18]

After backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3]
 solution : [0, 5, 1, 7, 18]


Before backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3]
 solution : [0, 5, 1, 7, 18]

After backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 18]


Before backtrack at level 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 18]

After backtrack at level 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10]
 solution : [0, 5, 1, 7, 18]


Before backtrack at level 8
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10]
 solution : [0, 5, 1, 7, 18]

After backtrack at level 8
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 17, 11]
 solution : [0, 5, 1, 7, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 17, 11]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 17, 11]
 solution : [0, 5, 1, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 17, 11]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 8 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 17, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17]


New level: 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, 192), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17]


Solution : [0, 5, 1, 7, 17] has cost 36.


Decide in level 9 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 4, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 4 with phase True at level 9

After decision at level 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17, 4]


New level: 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 2, 29, 30, 3, 9, 10, 11]
 solution : [0, 5, 1, 7, 17, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 6, 8, 9, 11, 13, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 4]


Solution : [0, 5, 1, 7, 17, 4] has cost 49.


Before backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 4]

After backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 4]


Invert decision for 4 at level 9


New level: 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17]


Solution : [0, 5, 1, 7, 17] has cost 36.


Decide in level 10 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 2, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]


New level: 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : {10, 3, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]


Solution : [0, 5, 1, 7, 17, 2] has cost 49.


Before backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11]
 solution : [0, 5, 1, 7, 17, 2]

After backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17]


Solution : [0, 5, 1, 7, 17] has cost 36.


Decide in level 11 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 13, 22, 9, 11, 29, 30, 3, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 13 with phase True at level 11

After decision at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]


New level: 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 14, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : {14}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]


Solution : [0, 5, 1, 7, 17, 13] has cost 41.


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 13]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17, 13]


Invert decision for 13 at level 11


New level: 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 2), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 1), (32, -1), (33, 1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17]


Solution : [0, 5, 1, 7, 17] has cost 36.


Decide in level 12 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 9, 11, 29, 30, 3, 10, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17, 9]


New level: 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 29, 30, 3, 10, 14]
 solution : [0, 5, 1, 7, 17, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 6, 8, 11, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, 0), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 9]


Solution : [0, 5, 1, 7, 17, 9] has cost 42.


Before backtrack at level 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 17, 9]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 10), (21, 10), (22, -1), (23, 4), (24, 4), (25, 11), (26, 11), (27, 8), (28, 8), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17]


Solution : [0, 5, 1, 7, 17] has cost 36.


Decide in level 13 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 3, 10, 6, 8, 31, 33, 22, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]


New level: 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 29, 30, 10, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 69), (21, 69), (22, 16), (23, 18), (24, 18), (25, 97), (26, 97), (27, 32), (28, 32), (29, 8), (30, 8), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : {10, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]


Solution : [0, 5, 1, 7, 17, 3] has cost 42.


Before backtrack at level 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 3]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 29, 30, 10]
 solution : [0, 5, 1, 7, 17, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 29, 30, 10]
 solution : [0, 5, 1, 7, 17]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 29, 30, 10]
 solution : [0, 5, 1, 7, 17]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 10]


Solution : [0, 5, 1, 7, 17, 10] has cost 42.


Before backtrack at level 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14]
 solution : [0, 5, 1, 7, 17, 10]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30]
 solution : [0, 5, 1, 7, 17]


Before backtrack at level 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30]
 solution : [0, 5, 1, 7, 17]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3]
 solution : [0, 5, 1, 7, 17]


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3]
 solution : [0, 5, 1, 7, 17]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 17]


Before backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9]
 solution : [0, 5, 1, 7, 17]

After backtrack at level 11
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13]
 solution : [0, 5, 1, 7, 17]


Before backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13]
 solution : [0, 5, 1, 7, 17]

After backtrack at level 10
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2]
 solution : [0, 5, 1, 7, 17]


Before backtrack at level 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2]
 solution : [0, 5, 1, 7, 17]

After backtrack at level 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 17), (21, 17), (22, 16), (23, 6), (24, 6), (25, 24), (26, 24), (27, 1), (28, 1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 9 among pending : [20, 23, 24, 21, 26, 28, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 28 with phase True at level 9

After decision at level 9
 pending : [20, 23, 24, 21, 26, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]


New level: 10
 pending : [20, 23, 24, 21, 26, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 27, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, 128), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, 0), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 10 : {27}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, 0), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28]


Solution : [0, 5, 1, 7, 28] has cost 30.


Decide in level 10 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 11, 14, 10, 29, 30, 3, 9, 13, 2, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28, 11]


New level: 11
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 10, 29, 30, 3, 9, 13, 2, 4]
 solution : [0, 5, 1, 7, 28, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 4, 6, 8, 9, 13, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]


Solution : [0, 5, 1, 7, 28, 11] has cost 36.


Decide in level 11 among pending : [20, 23, 24, 21, 26, 25, 10, 29, 30, 3, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11, 10]


New level: 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : {2, 3, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 10]


Solution : [0, 5, 1, 7, 28, 11, 10] has cost 42.


Before backtrack at level 12
 pending : []
 solution : [0, 5, 1, 7, 28, 11, 10]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]
 solution : [0, 5, 1, 7, 28, 11]


Solution : [0, 5, 1, 7, 28, 11] has cost 36.


Decide in level 12 among pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11, 3]


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {2, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 3]


Solution : [0, 5, 1, 7, 28, 11, 3] has cost 42.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 28, 11, 3]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 2]
 solution : [0, 5, 1, 7, 28, 11]

Essensial at level 13 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 11, 2]


Solution : [0, 5, 1, 7, 28, 11, 2] has cost 49.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 28, 11, 2]

After backtrack at level 13
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30]
 solution : [0, 5, 1, 7, 28, 11]


Before backtrack at level 12
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30]
 solution : [0, 5, 1, 7, 28, 11]

After backtrack at level 12
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3]
 solution : [0, 5, 1, 7, 28, 11]


Before backtrack at level 11
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3]
 solution : [0, 5, 1, 7, 28, 11]

After backtrack at level 11
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28]


Solution : [0, 5, 1, 7, 28] has cost 30.


Decide in level 11 among pending : [2, 20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28, 2]


New level: 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 6, 8, 31, 33, 22, 14, 9, 13, 4, 10]
 solution : [0, 5, 1, 7, 28, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : {10, 3, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4]
 solution : [0, 5, 1, 7, 28, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4]
 solution : [0, 5, 1, 7, 28, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4]
 solution : [0, 5, 1, 7, 28, 2]


Solution : [0, 5, 1, 7, 28, 2] has cost 43.


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4]
 solution : [0, 5, 1, 7, 28, 2]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28]


Solution : [0, 5, 1, 7, 28] has cost 30.


Decide in level 12 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 9, 13, 4, 29, 30, 3, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 4, 6, 8, 13, 14, 22, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 3, 10]
 solution : [0, 5, 1, 7, 28, 9]


Solution : [0, 5, 1, 7, 28, 9] has cost 36.


Decide in level 13 among pending : [20, 23, 24, 21, 26, 25, 29, 30, 3, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9, 3]


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {10, 20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 3]


Solution : [0, 5, 1, 7, 28, 9, 3] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 28, 9, 3]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 10]
 solution : [0, 5, 1, 7, 28, 9]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {20, 21, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 9, 10]


Solution : [0, 5, 1, 7, 28, 9, 10] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 28, 9, 10]

After backtrack at level 14
 pending : [10, 20, 23, 24, 21, 26, 25, 29, 30]
 solution : [0, 5, 1, 7, 28, 9]


Before backtrack at level 13
 pending : [10, 20, 23, 24, 21, 26, 25, 29, 30]
 solution : [0, 5, 1, 7, 28, 9]

After backtrack at level 13
 pending : [10, 20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28, 9]


Invert decision for 9 at level 12


New level: 13
 pending : [10, 20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [10, 20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28]


Solution : [0, 5, 1, 7, 28] has cost 30.


Decide in level 13 among pending : [10, 20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28, 10]


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 6, 8, 31, 33, 22, 14, 13, 4, 3]
 solution : [0, 5, 1, 7, 28, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {3, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4]
 solution : [0, 5, 1, 7, 28, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4]
 solution : [0, 5, 1, 7, 28, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4]
 solution : [0, 5, 1, 7, 28, 10]


Solution : [0, 5, 1, 7, 28, 10] has cost 36.


Decide in level 14 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 13, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 13 with phase True at level 14

After decision at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 22, 14, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 14, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]


Solution : [0, 5, 1, 7, 28, 10, 13] has cost 41.


Before backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4]
 solution : [0, 5, 1, 7, 28, 10, 13]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10, 13]


Invert decision for 13 at level 14


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10]


Solution : [0, 5, 1, 7, 28, 10] has cost 36.


Decide in level 15 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 4, 31, 33, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10, 4]


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 14, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 10, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 10, 4]


Solution : [0, 5, 1, 7, 28, 10, 4] has cost 49.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 28, 10, 4]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 14]
 solution : [0, 5, 1, 7, 28, 10]

Essensial at level 16 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 10, 14]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 10, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 10, 14]


Solution : [0, 5, 1, 7, 28, 10, 14] has cost 38.


Before backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 10, 14]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 10]


Before backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 10]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4]
 solution : [0, 5, 1, 7, 28, 10]


Before backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4]
 solution : [0, 5, 1, 7, 28, 10]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 28, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 28]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 29, 30, 3, 13]
 solution : [0, 5, 1, 7, 28]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 13]
 solution : [0, 5, 1, 7, 28, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 13]
 solution : [0, 5, 1, 7, 28, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 13]
 solution : [0, 5, 1, 7, 28, 3]


Solution : [0, 5, 1, 7, 28, 3] has cost 36.


Decide in level 14 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 4, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3, 4]


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 13, 14, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 3, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 28, 3, 4]


Solution : [0, 5, 1, 7, 28, 3, 4] has cost 49.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 28, 3, 4]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3]


Solution : [0, 5, 1, 7, 28, 3] has cost 36.


Decide in level 15 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 13 with phase True at level 15

After decision at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3, 13]


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, -1), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 14, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 13]


Solution : [0, 5, 1, 7, 28, 3, 13] has cost 41.


Before backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 13]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3, 13]


Invert decision for 13 at level 15


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3]

Essensial at level 16 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 8), (7, -1), (8, 8), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 14]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 14]


Solution : [0, 5, 1, 7, 28, 3, 14] has cost 38.


Before backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22]
 solution : [0, 5, 1, 7, 28, 3, 14]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3]


Before backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33]
 solution : [0, 5, 1, 7, 28, 3]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3]


Before backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13]
 solution : [0, 5, 1, 7, 28, 3]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4]
 solution : [0, 5, 1, 7, 28]


Before backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4]
 solution : [0, 5, 1, 7, 28]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 28]


Before backtrack at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10]
 solution : [0, 5, 1, 7, 28]

After backtrack at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9]
 solution : [0, 5, 1, 7, 28]


Before backtrack at level 11
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9]
 solution : [0, 5, 1, 7, 28]

After backtrack at level 11
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2]
 solution : [0, 5, 1, 7, 28]


Before backtrack at level 10
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2]
 solution : [0, 5, 1, 7, 28]

After backtrack at level 10
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 28]


Invert decision for 28 at level 9


New level: 10
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 10 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 13, 3, 29, 30, 4, 10, 9, 2, 27, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 13 with phase True at level 10

After decision at level 10
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]


New level: 11
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 14, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 11 : {14}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13]


Solution : [0, 5, 1, 7, 13] has cost 25.


Decide in level 11 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 3, 29, 30, 4, 10, 9, 2, 27, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


New level: 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 29, 30, 4, 10, 9, 2, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : {10, 2, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 12 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 22, 31, 33, 4, 9, 27, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]


Solution : [0, 5, 1, 7, 13, 3, 22] has cost 41.


Before backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 22]


Invert decision for 22 at level 12


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 13 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 4, 9, 27, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 4]


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 8, 9, 11, 20, 21, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 4]


Solution : [0, 5, 1, 7, 13, 3, 4] has cost 44.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 13, 3, 4]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 14 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 9, 27, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 9]


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 11, 20, 21, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 9]


Solution : [0, 5, 1, 7, 13, 3, 9] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 13, 3, 9]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 15 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 11]


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 6, 8, 20, 21, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 3, 11]


Solution : [0, 5, 1, 7, 13, 3, 11] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 13, 3, 11]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 16 among pending : [20, 23, 24, 21, 26, 25, 6, 8, 31, 33, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 26 with phase True at level 16

After decision at level 16
 pending : [20, 23, 24, 21, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 26]


New level: 17
 pending : [20, 23, 24, 21, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 26]


Before reduction : 
 pending  : [20, 23, 24, 21, 25, 6, 8, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 20, 21, 23, 24, 25, 27, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 26]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 26]


Solution : [0, 5, 1, 7, 13, 3, 26] has cost 65.


Before backtrack at level 17
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 26]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 21, 25, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 26]


Invert decision for 26 at level 16


New level: 17
 pending : [6, 8, 20, 23, 24, 21, 25, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 25, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 25, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 17 among pending : [6, 8, 20, 23, 24, 21, 25, 31, 33, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 25 with phase True at level 17

After decision at level 17
 pending : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 25]


New level: 18
 pending : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 25]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 20, 21, 23, 24, 27, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 25]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 25]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 25]


Solution : [0, 5, 1, 7, 13, 3, 25] has cost 65.


Before backtrack at level 18
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 25]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 25]


Invert decision for 25 at level 17


New level: 18
 pending : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Solution : [0, 5, 1, 7, 13, 3] has cost 31.


Decide in level 18 among pending : [6, 8, 20, 23, 24, 21, 31, 33, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 20 with phase True at level 18

After decision at level 18
 pending : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 20]


New level: 19
 pending : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 20]


Before reduction : 
 pending  : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 21, 23, 24, 27, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 20]


Solution : [0, 5, 1, 7, 13, 3, 20] has cost 65.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 20]

After backtrack at level 19
 pending : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3, 20]


Invert decision for 20 at level 18


New level: 19
 pending : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Before reduction : 
 pending  : [6, 8, 23, 24, 21, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]

Essensial at level 19 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 23, 24, 27, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 21]


Solution : [0, 5, 1, 7, 13, 3, 21] has cost 65.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 3, 21]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 27]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 13
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 13
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 13, 3]


Before backtrack at level 12
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4]
 solution : [0, 5, 1, 7, 13, 3]

After backtrack at level 12
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 12 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13]


Solution : [0, 5, 1, 7, 13] has cost 25.


Decide in level 12 among pending : [6, 8, 21, 23, 24, 31, 33, 27, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 27 with phase True at level 12

After decision at level 12
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]


New level: 13
 pending : [6, 8, 21, 23, 24, 31, 33, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 31, 33, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 31}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]
 solution : [0, 5, 1, 7, 13, 27]


Solution : [0, 5, 1, 7, 13, 27] has cost 35.


Decide in level 13 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 10, 2, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 2, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]


New level: 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 2, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 29, 30, 2, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 2), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {2, 29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]


Solution : [0, 5, 1, 7, 13, 27, 10] has cost 41.


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 10]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 13, 27, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 13, 27]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 13, 27]

Essensial at level 14 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 2]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 2]


Solution : [0, 5, 1, 7, 13, 27, 2] has cost 48.


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22]
 solution : [0, 5, 1, 7, 13, 27, 2]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30]
 solution : [0, 5, 1, 7, 13, 27]


Before backtrack at level 13
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30]
 solution : [0, 5, 1, 7, 13, 27]

After backtrack at level 13
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13, 27]


Invert decision for 27 at level 12


New level: 13
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 8), (7, -1), (8, 8), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 2), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13]


Solution : [0, 5, 1, 7, 13] has cost 25.


Decide in level 13 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 2, 29, 30, 31, 33, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13, 2]


New level: 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13, 2]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 29, 30, 31, 33, 10]
 solution : [0, 5, 1, 7, 13, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 128), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {10, 29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 2]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, 0), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 2]


Solution : [0, 5, 1, 7, 13, 2] has cost 38.


Before backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 2]

After backtrack at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33, 29, 30, 10]
 solution : [0, 5, 1, 7, 13, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33, 29, 30, 10]
 solution : [0, 5, 1, 7, 13]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33, 29, 30, 10]
 solution : [0, 5, 1, 7, 13]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : {29, 30}

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 14 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 22, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 14

After decision at level 14
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]


New level: 15
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]


Solution : [0, 5, 1, 7, 13, 10, 22] has cost 41.


Before backtrack at level 15
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]

After backtrack at level 15
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 22]


Invert decision for 22 at level 14


New level: 15
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 15 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 11, 9, 4, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 11]


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 11]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 4, 6, 8, 9, 20, 21, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 11]


Solution : [0, 5, 1, 7, 13, 10, 11] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 13, 10, 11]

After backtrack at level 16
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 16 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 9, 4, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 9 with phase True at level 16

After decision at level 16
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 9]


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 9]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, 32), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 4, 6, 8, 20, 21, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 9]


Solution : [0, 5, 1, 7, 13, 10, 9] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 13, 10, 9]

After backtrack at level 17
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 9]


Invert decision for 9 at level 16


New level: 17
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 17 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 4, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 4 with phase True at level 17

After decision at level 17
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 4]


New level: 18
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 4]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 6, 8, 20, 21, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 13, 10, 4]


Solution : [0, 5, 1, 7, 13, 10, 4] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 5, 1, 7, 13, 10, 4]

After backtrack at level 18
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 4]


Invert decision for 4 at level 17


New level: 18
 pending : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 18 among pending : [6, 8, 21, 23, 24, 20, 25, 26, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 25 with phase True at level 18

After decision at level 18
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 25]


New level: 19
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 25]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 25]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 20, 21, 23, 24, 26, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 25]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 25]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 25]


Solution : [0, 5, 1, 7, 13, 10, 25] has cost 65.


Before backtrack at level 19
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 25]

After backtrack at level 19
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 25]


Invert decision for 25 at level 18


New level: 19
 pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 19 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 26, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 19 among pending : [6, 8, 21, 23, 24, 20, 26, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 26 with phase True at level 19

After decision at level 19
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 26]


New level: 20
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 26]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 20 : {33, 20, 21, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 26]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 26]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 26]


Solution : [0, 5, 1, 7, 13, 10, 26] has cost 65.


Before backtrack at level 20
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 26]

After backtrack at level 20
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 26]


Invert decision for 26 at level 19


New level: 20
 pending : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 20 : set()

After reduction : 
 pending  : [6, 8, 21, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Solution : [0, 5, 1, 7, 13, 10] has cost 31.


Decide in level 20 among pending : [6, 8, 21, 23, 24, 20, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 21 with phase True at level 20

After decision at level 20
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 21]


New level: 21
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 21]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 21]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 16), (7, -1), (8, 16), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 21 : {33, 20, 23, 24, 31}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 21]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 21]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 21]


Solution : [0, 5, 1, 7, 13, 10, 21] has cost 65.


Before backtrack at level 21
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 21]

After backtrack at level 21
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10, 21]


Invert decision for 21 at level 20


New level: 21
 pending : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before reduction : 
 pending  : [6, 8, 23, 24, 20, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

Essensial at level 21 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 21 : {24, 33, 31, 23}

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 20]


Before reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 20]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 20]


Solution : [0, 5, 1, 7, 13, 10, 20] has cost 65.


Before backtrack at level 21
 pending : [6, 8]
 solution : [0, 5, 1, 7, 13, 10, 20]

After backtrack at level 21
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 20
 pending : [6, 8, 20, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 20
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 19
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 18
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 17
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 16
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 15
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11]
 solution : [0, 5, 1, 7, 13, 10]


Before backtrack at level 14
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11]
 solution : [0, 5, 1, 7, 13, 10]

After backtrack at level 14
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22]
 solution : [0, 5, 1, 7, 13]


Before backtrack at level 13
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22]
 solution : [0, 5, 1, 7, 13]

After backtrack at level 13
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2]
 solution : [0, 5, 1, 7, 13]


Before backtrack at level 12
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2]
 solution : [0, 5, 1, 7, 13]

After backtrack at level 12
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27]
 solution : [0, 5, 1, 7, 13]


Before backtrack at level 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27]
 solution : [0, 5, 1, 7, 13]

After backtrack at level 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7, 13]


Invert decision for 13 at level 10


New level: 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 1), (7, -1), (8, 1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 11 among pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 4, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7, 4]


New level: 12
 pending : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7, 4]


Before reduction : 
 pending  : [6, 8, 20, 23, 24, 31, 33, 21, 26, 25, 9, 11, 10, 29, 30, 22, 2, 27, 14, 3]
 solution : [0, 5, 1, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 6, 8, 9, 11, 14, 31}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 10, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]


Solution : [0, 5, 1, 7, 4] has cost 33.


Decide in level 12 among pending : [20, 23, 24, 21, 26, 25, 10, 29, 30, 22, 2, 27, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4, 10]


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4, 10]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : {2, 3, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 10]


Solution : [0, 5, 1, 7, 4, 10] has cost 39.


Before backtrack at level 13
 pending : []
 solution : [0, 5, 1, 7, 4, 10]

After backtrack at level 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]
 solution : [0, 5, 1, 7, 4]


Solution : [0, 5, 1, 7, 4] has cost 33.


Decide in level 13 among pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 2, 27, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4, 2]


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4, 2]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, 32), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {3, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 2]


Solution : [0, 5, 1, 7, 4, 2] has cost 46.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 4, 2]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 3]
 solution : [0, 5, 1, 7, 4]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : {20, 21, 22, 23, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 3]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 4, 3]


Solution : [0, 5, 1, 7, 4, 3] has cost 39.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 4, 3]

After backtrack at level 14
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27]
 solution : [0, 5, 1, 7, 4]


Before backtrack at level 13
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27]
 solution : [0, 5, 1, 7, 4]

After backtrack at level 13
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2]
 solution : [0, 5, 1, 7, 4]


Before backtrack at level 12
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2]
 solution : [0, 5, 1, 7, 4]

After backtrack at level 12
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 12 among pending : [3, 20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7, 3]


New level: 13
 pending : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 29, 30, 22, 27, 2, 6, 8, 31, 33, 9, 11, 14, 10]
 solution : [0, 5, 1, 7, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 13 : {2, 10, 29, 30}

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 9, 11, 14]
 solution : [0, 5, 1, 7, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 9, 11, 14]
 solution : [0, 5, 1, 7, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 9, 11, 14]
 solution : [0, 5, 1, 7, 3]


Solution : [0, 5, 1, 7, 3] has cost 26.


Decide in level 13 among pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 9, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3, 9]


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3, 9]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 8, 11, 14, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 9]


Solution : [0, 5, 1, 7, 3, 9] has cost 32.


Before backtrack at level 14
 pending : []
 solution : [0, 5, 1, 7, 3, 9]

After backtrack at level 14
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]
 solution : [0, 5, 1, 7, 3]


Solution : [0, 5, 1, 7, 3] has cost 26.


Decide in level 14 among pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3, 11]


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3, 11]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 14, 20, 21, 22, 23, 24, 25, 26, 27, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 3, 11]


Solution : [0, 5, 1, 7, 3, 11] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 5, 1, 7, 3, 11]

After backtrack at level 15
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33, 14]
 solution : [0, 5, 1, 7, 3]

Essensial at level 15 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Solution : [0, 5, 1, 7, 3, 14] has cost 28.


Decide in level 15 among pending : [20, 23, 24, 21, 26, 25, 22, 27, 6, 8, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]


Solution : [0, 5, 1, 7, 3, 14, 22] has cost 38.


Before backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]

After backtrack at level 16
 pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, 4), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Solution : [0, 5, 1, 7, 3, 14] has cost 28.


Decide in level 16 among pending : [20, 23, 24, 21, 26, 25, 27, 6, 8, 31, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [20, 23, 24, 21, 26, 25, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 6]


New level: 17
 pending : [20, 23, 24, 21, 26, 25, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 6]


Before reduction : 
 pending  : [20, 23, 24, 21, 26, 25, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, 8), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 8, 23, 24, 27, 31}

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 6]


Before reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 6]


Solution : [0, 5, 1, 7, 3, 14, 6] has cost 37.


Before backtrack at level 17
 pending : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 6]

After backtrack at level 17
 pending : [20, 21, 26, 25, 23, 24, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [20, 21, 26, 25, 23, 24, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 27, 8, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]

Essensial at level 17 : {8}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 23, 24, 27, 31}

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 8]


Before reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 8]


Solution : [0, 5, 1, 7, 3, 14, 8] has cost 37.


Before backtrack at level 17
 pending : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 3, 14, 8]

After backtrack at level 17
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]


Before backtrack at level 16
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33]
 solution : [0, 5, 1, 7, 3, 14]

After backtrack at level 16
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6]
 solution : [0, 5, 1, 7, 3, 14]


Before backtrack at level 15
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6]
 solution : [0, 5, 1, 7, 3, 14]

After backtrack at level 15
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22]
 solution : [0, 5, 1, 7, 3]


Before backtrack at level 14
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22]
 solution : [0, 5, 1, 7, 3]

After backtrack at level 14
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11]
 solution : [0, 5, 1, 7, 3]


Before backtrack at level 13
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11]
 solution : [0, 5, 1, 7, 3]

After backtrack at level 13
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 13 among pending : [20, 21, 26, 25, 8, 23, 24, 27, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 27 with phase True at level 13

After decision at level 13
 pending : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27]


New level: 14
 pending : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27]


Before reduction : 
 pending  : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, 128), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27]


Solution : [0, 5, 1, 7, 27] has cost 30.


Decide in level 14 among pending : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 11, 29, 30, 2, 10, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27, 11]


New level: 15
 pending : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27, 11]


Before reduction : 
 pending  : [20, 21, 26, 25, 8, 23, 24, 31, 33, 6, 14, 22, 29, 30, 2, 10, 9]
 solution : [0, 5, 1, 7, 27, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 9, 14, 22, 31}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10]
 solution : [0, 5, 1, 7, 27, 11]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10]
 solution : [0, 5, 1, 7, 27, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, 0), (10, 128), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, 0), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10]
 solution : [0, 5, 1, 7, 27, 11]


Solution : [0, 5, 1, 7, 27, 11] has cost 36.


Before backtrack at level 15
 pending : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10]
 solution : [0, 5, 1, 7, 27, 11]

After backtrack at level 15
 pending : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 4), (24, 4), (25, 10), (26, 10), (27, -1), (28, -1), (29, 8), (30, 8), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27]


Solution : [0, 5, 1, 7, 27] has cost 30.


Decide in level 15 among pending : [20, 21, 26, 25, 23, 24, 29, 30, 2, 10, 8, 31, 33, 6, 14, 22, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

Decide 2 with phase True at level 15

After decision at level 15
 pending : [20, 21, 26, 25, 23, 24, 29, 30, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 29, 30, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 29, 30, 10, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 64), (21, 64), (22, 16), (23, 18), (24, 18), (25, 64), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : {10, 29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 0), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]


Solution : [0, 5, 1, 7, 27, 2] has cost 43.


Before backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 2]

After backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 29, 30, 10]
 solution : [0, 5, 1, 7, 27, 2]


Invert decision for 2 at level 15


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 29, 30, 10]
 solution : [0, 5, 1, 7, 27]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 29, 30, 10]
 solution : [0, 5, 1, 7, 27]

Essensial at level 16 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : {29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 10]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, 0), (30, 0), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 10]


Solution : [0, 5, 1, 7, 27, 10] has cost 36.


Before backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9]
 solution : [0, 5, 1, 7, 27, 10]

After backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30]
 solution : [0, 5, 1, 7, 27]


Before backtrack at level 15
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30]
 solution : [0, 5, 1, 7, 27]

After backtrack at level 15
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2]
 solution : [0, 5, 1, 7, 27]


Before backtrack at level 14
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2]
 solution : [0, 5, 1, 7, 27]

After backtrack at level 14
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 27]


Invert decision for 27 at level 13


New level: 14
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 16), (21, 16), (22, 16), (23, 4), (24, 4), (25, 16), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 14 among pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 9, 10, 29, 30, 2, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 9]


New level: 15
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6, 14, 22, 10, 29, 30, 2, 11]
 solution : [0, 5, 1, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, 128), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, -1), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 6, 8, 11, 14, 31}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 10, 29, 30, 2]
 solution : [0, 5, 1, 7, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 10, 29, 30, 2]
 solution : [0, 5, 1, 7, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, -1), (28, -1), (29, 32), (30, 32), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 10, 29, 30, 2]
 solution : [0, 5, 1, 7, 9]


Solution : [0, 5, 1, 7, 9] has cost 26.


Decide in level 15 among pending : [20, 21, 26, 25, 23, 24, 22, 10, 29, 30, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

Decide 10 with phase True at level 15

After decision at level 15
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9, 10]


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9, 10]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 20), (21, 20), (22, 4), (23, 16), (24, 16), (25, 26), (26, 26), (27, -1), (28, -1), (29, 32), (30, 32), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {2, 20, 21, 22, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 10]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 10]


Solution : [0, 5, 1, 7, 9, 10] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 9, 10]

After backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9, 10]


Invert decision for 10 at level 15


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 29, 30, 2]
 solution : [0, 5, 1, 7, 9]

Essensial at level 16 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : {20, 21, 22, 23, 24, 25, 26, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, 0), (30, 0), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 9, 2]


Solution : [0, 5, 1, 7, 9, 2] has cost 39.


Before backtrack at level 16
 pending : []
 solution : [0, 5, 1, 7, 9, 2]

After backtrack at level 16
 pending : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30]
 solution : [0, 5, 1, 7, 9]


Before backtrack at level 15
 pending : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30]
 solution : [0, 5, 1, 7, 9]

After backtrack at level 15
 pending : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7]


Solution : [0, 5, 1, 7] has cost 20.


Decide in level 15 among pending : [2, 20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

Decide 2 with phase True at level 15

After decision at level 15
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7, 2]


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7, 2]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 29, 30, 8, 31, 33, 6, 14, 11, 10]
 solution : [0, 5, 1, 7, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 128), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 74), (21, 74), (22, 64), (23, 66), (24, 66), (25, 98), (26, 98), (27, -1), (28, -1), (29, 32), (30, 32), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 16 : {10, 29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 2]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 2]


Solution : [0, 5, 1, 7, 2] has cost 33.


Before backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 2]

After backtrack at level 16
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11, 29, 30, 10]
 solution : [0, 5, 1, 7, 2]


Invert decision for 2 at level 15


New level: 16
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11, 29, 30, 10]
 solution : [0, 5, 1, 7]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11, 29, 30, 10]
 solution : [0, 5, 1, 7]

Essensial at level 16 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

Covered at level 16 : {29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 10]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, 0), (30, 0), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]
 solution : [0, 5, 1, 7, 10]


Solution : [0, 5, 1, 7, 10] has cost 26.


Decide in level 16 among pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10, 11]


New level: 17
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10, 11]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 6, 8, 14, 20, 21, 22, 23, 24, 25, 26, 31}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 10, 11]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 10, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 7, 10, 11]


Solution : [0, 5, 1, 7, 10, 11] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 5, 1, 7, 10, 11]

After backtrack at level 17
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6, 14]
 solution : [0, 5, 1, 7, 10]

Essensial at level 17 : {14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]


Solution : [0, 5, 1, 7, 10, 14] has cost 28.


Decide in level 17 among pending : [20, 21, 26, 25, 23, 24, 22, 8, 31, 33, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]


New level: 18
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 64), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 18 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]


Solution : [0, 5, 1, 7, 10, 14, 22] has cost 38.


Before backtrack at level 18
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]

After backtrack at level 18
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 8), (24, 8), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Covered at level 18 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]


Solution : [0, 5, 1, 7, 10, 14] has cost 28.


Decide in level 18 among pending : [20, 21, 26, 25, 23, 24, 8, 31, 33, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

Decide 8 with phase True at level 18

After decision at level 18
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 8]


New level: 19
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 8]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, -1), (23, 12), (24, 12), (25, 24), (26, 24), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, -1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 6, 23, 24, 31}

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 8]


Before reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 8]


Solution : [0, 5, 1, 7, 10, 14, 8] has cost 37.


Before backtrack at level 19
 pending : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 8]

After backtrack at level 19
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14, 8]


Invert decision for 8 at level 18


New level: 19
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 6]
 solution : [0, 5, 1, 7, 10, 14]

Essensial at level 19 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {24, 33, 31, 23}

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 6]


Before reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, 0), (24, 0), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 6]


Solution : [0, 5, 1, 7, 10, 14, 6] has cost 37.


Before backtrack at level 19
 pending : [20, 21, 26, 25]
 solution : [0, 5, 1, 7, 10, 14, 6]

After backtrack at level 19
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 10, 14]


Before backtrack at level 18
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33]
 solution : [0, 5, 1, 7, 10, 14]

After backtrack at level 18
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8]
 solution : [0, 5, 1, 7, 10, 14]


Before backtrack at level 17
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8]
 solution : [0, 5, 1, 7, 10, 14]

After backtrack at level 17
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22]
 solution : [0, 5, 1, 7, 10]


Before backtrack at level 16
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22]
 solution : [0, 5, 1, 7, 10]

After backtrack at level 16
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11]
 solution : [0, 5, 1, 7]


Before backtrack at level 15
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11]
 solution : [0, 5, 1, 7]

After backtrack at level 15
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2]
 solution : [0, 5, 1, 7]


Before backtrack at level 14
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2]
 solution : [0, 5, 1, 7]

After backtrack at level 14
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9]
 solution : [0, 5, 1, 7]


Before backtrack at level 13
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9]
 solution : [0, 5, 1, 7]

After backtrack at level 13
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27]
 solution : [0, 5, 1, 7]


Before backtrack at level 12
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27]
 solution : [0, 5, 1, 7]

After backtrack at level 12
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3]
 solution : [0, 5, 1, 7]


Before backtrack at level 11
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3]
 solution : [0, 5, 1, 7]

After backtrack at level 11
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4]
 solution : [0, 5, 1, 7]


Before backtrack at level 10
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4]
 solution : [0, 5, 1, 7]

After backtrack at level 10
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13]
 solution : [0, 5, 1, 7]


Before backtrack at level 9
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13]
 solution : [0, 5, 1, 7]

After backtrack at level 9
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28]
 solution : [0, 5, 1, 7]


Before backtrack at level 8
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28]
 solution : [0, 5, 1, 7]

After backtrack at level 8
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17]
 solution : [0, 5, 1, 7]


Before backtrack at level 7
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17]
 solution : [0, 5, 1, 7]

After backtrack at level 7
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18]
 solution : [0, 5, 1, 7]


Before backtrack at level 6
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18]
 solution : [0, 5, 1, 7]

After backtrack at level 6
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16]
 solution : [0, 5, 1, 7]


Before backtrack at level 5
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16]
 solution : [0, 5, 1, 7]

After backtrack at level 5
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19]
 solution : [0, 5, 1, 7]


Before backtrack at level 4
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19]
 solution : [0, 5, 1, 7]

After backtrack at level 4
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12]
 solution : [0, 5, 1, 7]


Before backtrack at level 3
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12]
 solution : [0, 5, 1, 7]

After backtrack at level 3
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32, 15]
 solution : [0, 5, 1, 7]


Invert decision for 7 at level 2


New level: 3
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32, 15]
 solution : [0, 5, 1]


Before reduction : 
 pending  : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32, 15]
 solution : [0, 5, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 8), (21, 8), (22, -1), (23, -1), (24, -1), (25, 8), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32, 15]
 solution : [0, 5, 1]


Solution : [0, 5, 1] has cost 10.


Decide in level 3 among pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32, 15]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Decide 15 with phase True at level 3

After decision at level 3
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15]


New level: 4
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15]


Before reduction : 
 pending  : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, 576), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 16), (17, 24), (18, 48), (19, 56), (20, 72), (21, 144), (22, 16), (23, 24), (24, 44), (25, 52), (26, 26), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15]


Solution : [0, 5, 1, 15] has cost 31.


Decide in level 4 among pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 9, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 16), (17, 24), (18, 48), (19, 56), (20, 72), (21, 144), (22, 16), (23, 24), (24, 44), (25, 52), (26, 26), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15, 9]


New level: 5
 pending : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 6, 23, 24, 31, 33, 8, 14, 22, 10, 29, 30, 11, 2, 27, 3, 4, 13, 28, 17, 18, 16, 19, 12, 32]
 solution : [0, 5, 1, 15, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 16), (17, 24), (18, 48), (19, 56), (20, 72), (21, 144), (22, 16), (23, 24), (24, 44), (25, 52), (26, 26), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 512), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 4), (17, 24), (18, 48), (19, 14), (20, 19), (21, 38), (22, 4), (23, 8), (24, 12), (25, 14), (26, 7), (27, 64), (28, 128), (29, 64), (30, 128), (31, 8), (32, 32), (33, 2)]

Covered at level 5 : {4, 6, 8, 11, 12, 13, 14}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32]
 solution : [0, 5, 1, 15, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32]
 solution : [0, 5, 1, 15, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 512), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 128), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 4), (17, 24), (18, 48), (19, 14), (20, 19), (21, 38), (22, 4), (23, 8), (24, 12), (25, 14), (26, 7), (27, 64), (28, 128), (29, 64), (30, 128), (31, 8), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 24), (18, 48), (19, 14), (20, 19), (21, 38), (22, 4), (23, 8), (24, 12), (25, 14), (26, 7), (27, 64), (28, 128), (29, 64), (30, 128), (31, 8), (32, 32), (33, 2)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32]
 solution : [0, 5, 1, 15, 9]


Solution : [0, 5, 1, 15, 9] has cost 37.


Before backtrack at level 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32]
 solution : [0, 5, 1, 15, 9]

After backtrack at level 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 10, 29, 30, 2, 27, 3, 28, 17, 18, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15]

Essensial at level 5 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 24), (18, 48), (19, 14), (20, 19), (21, 38), (22, 4), (23, 8), (24, 12), (25, 14), (26, 7), (27, 64), (28, 128), (29, 64), (30, 128), (31, 8), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 4), (17, 0), (18, 0), (19, 14), (20, 17), (21, 34), (22, 4), (23, 6), (24, 12), (25, 12), (26, 6), (27, 4), (28, 8), (29, 0), (30, 0), (31, 256), (32, 32), (33, 128)]

Covered at level 5 : {2, 10, 17, 18, 29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, 0), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 4), (17, 0), (18, 0), (19, 14), (20, 17), (21, 34), (22, 4), (23, 6), (24, 12), (25, 12), (26, 6), (27, 4), (28, 8), (29, 0), (30, 0), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 4), (17, -1), (18, -1), (19, 14), (20, 17), (21, 34), (22, 4), (23, 6), (24, 12), (25, 12), (26, 6), (27, 4), (28, 8), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15, 3]


Solution : [0, 5, 1, 15, 3] has cost 37.


Before backtrack at level 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 15, 3]

After backtrack at level 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18]
 solution : [0, 5, 1, 15]


Before backtrack at level 4
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18]
 solution : [0, 5, 1, 15]

After backtrack at level 4
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1, 15]


Invert decision for 15 at level 3


New level: 4
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 4), (17, -1), (18, -1), (19, 14), (20, 17), (21, 34), (22, 4), (23, 6), (24, 12), (25, 12), (26, 6), (27, 4), (28, 8), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1]


Solution : [0, 5, 1] has cost 10.


Decide in level 4 among pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 3, 10, 29, 30, 2, 17, 18, 9]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1, 3]


New level: 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 10, 29, 30, 2, 17, 18, 9]
 solution : [0, 5, 1, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 512), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 128), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 208), (17, 192), (18, 384), (19, 420), (20, 240), (21, 464), (22, 64), (23, 72), (24, 132), (25, 200), (26, 138), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 0), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, 0), (30, 0), (31, 256), (32, 32), (33, 128)]

Covered at level 5 : {10, 2, 29, 30}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18, 9]
 solution : [0, 5, 1, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18, 9]
 solution : [0, 5, 1, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, 0), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, 0), (30, 0), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18, 9]
 solution : [0, 5, 1, 3]


Solution : [0, 5, 1, 3] has cost 16.


Decide in level 5 among pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 9]


New level: 6
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 9]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, 512), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {4, 6, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 9]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 9]


Solution : [0, 5, 1, 3, 9] has cost 22.


Before backtrack at level 6
 pending : []
 solution : [0, 5, 1, 3, 9]

After backtrack at level 6
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3]


Solution : [0, 5, 1, 3] has cost 16.


Decide in level 6 among pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 19, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Decide 19 with phase True at level 6

After decision at level 6
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 19]


New level: 7
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 19]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 22, 27, 28, 16, 32, 6, 8, 14, 11, 4, 13, 12, 17, 18]
 solution : [0, 5, 1, 3, 19]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, 393), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 18), (21, 36), (22, 0), (23, 4), (24, 8), (25, 18), (26, 9), (27, 2), (28, 4), (29, -1), (30, -1), (31, 64), (32, 8), (33, 16)]

Covered at level 7 : {16, 17, 18, 22}

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 3, 19]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 3, 19]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 18), (21, 36), (22, 0), (23, 4), (24, 8), (25, 18), (26, 9), (27, 2), (28, 4), (29, -1), (30, -1), (31, 64), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 36), (22, -1), (23, 4), (24, 8), (25, 18), (26, 9), (27, 2), (28, 4), (29, -1), (30, -1), (31, 64), (32, 8), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 3, 19]


Solution : [0, 5, 1, 3, 19] has cost 50.


Before backtrack at level 7
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12]
 solution : [0, 5, 1, 3, 19]

After backtrack at level 7
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3, 19]


Invert decision for 19 at level 6


New level: 7
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 36), (22, -1), (23, 4), (24, 8), (25, 18), (26, 9), (27, 2), (28, 4), (29, -1), (30, -1), (31, 64), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, -1), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3]


Solution : [0, 5, 1, 3] has cost 16.


Decide in level 7 among pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 4, 13, 12, 22, 16, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, -1), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

Decide 4 with phase True at level 7

After decision at level 7
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3, 4]


New level: 8
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3, 4]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, -1), (6, 128), (7, -1), (8, 64), (9, -1), (10, -1), (11, 128), (12, 256), (13, 128), (14, 64), (15, -1), (16, 196), (17, 6), (18, 12), (19, -1), (20, 49), (21, 98), (22, 64), (23, 12), (24, 24), (25, 48), (26, 24), (27, 16), (28, 32), (29, -1), (30, -1), (31, 256), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {6, 8, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 3, 4]


Solution : [0, 5, 1, 3, 4] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 5, 1, 3, 4]

After backtrack at level 8
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3, 4]


Invert decision for 4 at level 7


New level: 8
 pending : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3]


Before reduction : 
 pending  : [20, 21, 26, 25, 23, 24, 31, 33, 27, 28, 32, 6, 8, 14, 11, 13, 12, 22, 16, 17, 18]
 solution : [0, 5, 1, 3]

Essensial at level 8 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 32), (12, 64), (13, 8), (14, 1), (15, -1), (16, 10), (17, 0), (18, 0), (19, -1), (20, 34), (21, 67), (22, 0), (23, 0), (24, 0), (25, 16), (26, 8), (27, 0), (28, 0), (29, -1), (30, -1), (31, 16), (32, 16), (33, 2)]

Covered at level 8 : {8, 17, 18, 22, 23, 24, 27, 28}

After reduction : 
 pending  : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16]
 solution : [0, 5, 1, 3, 6]


Before reduction : 
 pending  : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16]
 solution : [0, 5, 1, 3, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 32), (12, 64), (13, 8), (14, 1), (15, -1), (16, 10), (17, 0), (18, 0), (19, -1), (20, 34), (21, 67), (22, 0), (23, 0), (24, 0), (25, 16), (26, 8), (27, 0), (28, 0), (29, -1), (30, -1), (31, 16), (32, 16), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, 64), (13, 8), (14, 1), (15, -1), (16, 10), (17, -1), (18, -1), (19, -1), (20, 34), (21, 67), (22, -1), (23, -1), (24, -1), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 16), (32, 16), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16]
 solution : [0, 5, 1, 3, 6]


Solution : [0, 5, 1, 3, 6] has cost 25.


Before backtrack at level 8
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16]
 solution : [0, 5, 1, 3, 6]

After backtrack at level 8
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18]
 solution : [0, 5, 1, 3]


Before backtrack at level 7
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18]
 solution : [0, 5, 1, 3]

After backtrack at level 7
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4]
 solution : [0, 5, 1, 3]


Before backtrack at level 6
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4]
 solution : [0, 5, 1, 3]

After backtrack at level 6
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19]
 solution : [0, 5, 1, 3]


Before backtrack at level 5
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19]
 solution : [0, 5, 1, 3]

After backtrack at level 5
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 2, 9]
 solution : [0, 5, 1, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 2, 9]
 solution : [0, 5, 1]


Before reduction : 
 pending  : [20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 2, 9]
 solution : [0, 5, 1]

Essensial at level 5 : {9, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, 64), (13, 8), (14, 1), (15, -1), (16, 10), (17, -1), (18, -1), (19, -1), (20, 34), (21, 67), (22, -1), (23, -1), (24, -1), (25, 16), (26, 8), (27, -1), (28, -1), (29, -1), (30, -1), (31, 16), (32, 16), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {4, 6, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 5, 1, 9, 2]


Before reduction : 
 pending  : []
 solution : [0, 5, 1, 9, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 5, 1, 9, 2]


Solution : [0, 5, 1, 9, 2] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 5, 1, 9, 2]

After backtrack at level 5
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30]
 solution : [0, 5, 1]


Before backtrack at level 4
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30]
 solution : [0, 5, 1]

After backtrack at level 4
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3]
 solution : [0, 5, 1]


Before backtrack at level 3
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3]
 solution : [0, 5, 1]

After backtrack at level 3
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15]
 solution : [0, 5, 1]


Before backtrack at level 2
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15]
 solution : [0, 5, 1]

After backtrack at level 2
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5]


Before reduction : 
 pending  : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 480), (21, 592), (22, 128), (23, 288), (24, 272), (25, 400), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5]


Solution : [0, 5] has cost 7.


Decide in level 2 among pending : [2, 9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]

Coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 480), (21, 592), (22, 128), (23, 288), (24, 272), (25, 400), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

Decide 2 with phase True at level 2

After decision at level 2
 pending : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5, 2]


New level: 3
 pending : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 29, 30, 3, 15, 7]
 solution : [0, 5, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, 512), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 384), (18, 384), (19, 456), (20, 480), (21, 592), (22, 128), (23, 288), (24, 272), (25, 400), (26, 552), (27, 256), (28, 256), (29, 128), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, 0), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 3 : {29}

After reduction : 
 pending  : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, 0), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 3 among pending : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 4, 19, 10, 30, 3, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]


New level: 4
 pending : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]


Before reduction : 
 pending  : [9, 20, 21, 26, 25, 31, 33, 32, 14, 11, 13, 12, 16, 6, 23, 24, 27, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 0), (7, 64), (8, 64), (9, 128), (10, 128), (11, 128), (12, 0), (13, 1), (14, 128), (15, 576), (16, 5), (17, 5), (18, 10), (19, 24), (20, 0), (21, 18), (22, 2), (23, 9), (24, 0), (25, 0), (26, 16), (27, 0), (28, 16), (29, -1), (30, 16), (31, 16), (32, 16), (33, 0)]

Covered at level 4 : {33, 6, 12, 20, 24, 25, 27}

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]


Before reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 0), (7, 64), (8, 64), (9, 128), (10, 128), (11, 128), (12, 0), (13, 1), (14, 128), (15, 576), (16, 5), (17, 5), (18, 10), (19, 24), (20, 0), (21, 18), (22, 2), (23, 9), (24, 0), (25, 0), (26, 16), (27, 0), (28, 16), (29, -1), (30, 16), (31, 16), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 64), (8, 64), (9, 64), (10, 128), (11, 128), (12, -1), (13, 1), (14, 128), (15, 576), (16, 5), (17, 5), (18, 10), (19, 24), (20, -1), (21, 18), (22, 2), (23, 9), (24, -1), (25, -1), (26, 16), (27, -1), (28, 16), (29, -1), (30, 16), (31, 16), (32, 16), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]


Solution : [0, 5, 2, 4] has cost 33.


Before backtrack at level 4
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7]
 solution : [0, 5, 2, 4]

After backtrack at level 4
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, -1), (7, 64), (8, 64), (9, 64), (10, 128), (11, 128), (12, -1), (13, 1), (14, 128), (15, 576), (16, 5), (17, 5), (18, 10), (19, 24), (20, -1), (21, 18), (22, 2), (23, 9), (24, -1), (25, -1), (26, 16), (27, -1), (28, 16), (29, -1), (30, 16), (31, 16), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 4 among pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 15, 7, 20, 25, 33, 12, 6, 24, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]


New level: 5
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]


Before reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 17, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 16), (17, 0), (18, 6), (19, 28), (20, 65), (21, 70), (22, 16), (23, 36), (24, 42), (25, 49), (26, 48), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 5 : {17}

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]


Before reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 16), (17, 0), (18, 6), (19, 28), (20, 65), (21, 70), (22, 16), (23, 36), (24, 42), (25, 49), (26, 48), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 16), (17, -1), (18, 6), (19, 28), (20, 65), (21, 70), (22, 16), (23, 36), (24, 42), (25, 49), (26, 48), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]


Solution : [0, 5, 2, 15] has cost 41.


Before backtrack at level 5
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27]
 solution : [0, 5, 2, 15]

After backtrack at level 5
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 16), (17, -1), (18, 6), (19, 28), (20, 65), (21, 70), (22, 16), (23, 36), (24, 42), (25, 49), (26, 48), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 5 : set()

After reduction : 
 pending  : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 5 among pending : [9, 21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 9 with phase True at level 5

After decision at level 5
 pending : [21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]


New level: 6
 pending : [21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]


Before reduction : 
 pending  : [21, 26, 31, 32, 14, 11, 13, 16, 23, 28, 8, 22, 18, 19, 10, 30, 3, 7, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, 512), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, 0), (8, 256), (9, -1), (10, 128), (11, 512), (12, 64), (13, 512), (14, 512), (15, -1), (16, 384), (17, 48), (18, 0), (19, 8), (20, 18), (21, 0), (22, 128), (23, 82), (24, 6), (25, 6), (26, 192), (27, 8), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 16)]

Covered at level 6 : {32, 3, 7, 18, 21, 28, 30, 31}

After reduction : 
 pending  : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]


Before reduction : 
 pending  : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, 0), (8, 256), (9, -1), (10, 128), (11, 512), (12, 64), (13, 512), (14, 512), (15, -1), (16, 384), (17, 48), (18, 0), (19, 8), (20, 18), (21, 0), (22, 128), (23, 82), (24, 6), (25, 6), (26, 192), (27, 8), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, -1), (10, 128), (11, 512), (12, 64), (13, 512), (14, 512), (15, -1), (16, 384), (17, 48), (18, -1), (19, 8), (20, 18), (21, -1), (22, 128), (23, 82), (24, 6), (25, 6), (26, 192), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]


Solution : [0, 5, 2, 9] has cost 26.


Before backtrack at level 6
 pending : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17]
 solution : [0, 5, 2, 9]

After backtrack at level 6
 pending : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 9]


Invert decision for 9 at level 5


New level: 6
 pending : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 256), (9, -1), (10, 128), (11, 512), (12, 64), (13, 512), (14, 512), (15, -1), (16, 384), (17, 48), (18, -1), (19, 8), (20, 18), (21, -1), (22, 128), (23, 82), (24, 6), (25, 6), (26, 192), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 6 among pending : [26, 14, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 14 with phase True at level 6

After decision at level 6
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]


New level: 7
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, 512), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, 512), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]


Solution : [0, 5, 2, 14] has cost 22.


Decide in level 7 among pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 12, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, 512), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 12 with phase True at level 7

After decision at level 7
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]


New level: 8
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, 512), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 1), (14, -1), (15, -1), (16, 386), (17, 6), (18, 96), (19, 417), (20, 224), (21, 149), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]


Solution : [0, 5, 2, 14, 12] has cost 27.


Before backtrack at level 8
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]

After backtrack at level 8
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 12]


Invert decision for 12 at level 7


New level: 8
 pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 1), (14, -1), (15, -1), (16, 386), (17, 6), (18, 96), (19, 417), (20, 224), (21, 149), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14]


Solution : [0, 5, 2, 14] has cost 22.


Decide in level 8 among pending : [26, 11, 13, 16, 23, 8, 22, 19, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 19 with phase True at level 8

After decision at level 8
 pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]


New level: 9
 pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 17, 21, 31, 32, 28, 18, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, 418), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 260), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, -1), (20, 72), (21, 74), (22, 2), (23, 10), (24, 34), (25, 161), (26, 40), (27, 8), (28, 32), (29, -1), (30, 8), (31, 64), (32, 16), (33, 32)]

Covered at level 9 : {17, 18}

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 260), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 2), (17, 0), (18, 0), (19, -1), (20, 72), (21, 74), (22, 2), (23, 10), (24, 34), (25, 161), (26, 40), (27, 8), (28, 32), (29, -1), (30, 8), (31, 64), (32, 16), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 260), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, 72), (21, 74), (22, 2), (23, 10), (24, 34), (25, 161), (26, 40), (27, 8), (28, 32), (29, -1), (30, 8), (31, 64), (32, 16), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]


Solution : [0, 5, 2, 14, 19] has cost 56.


Before backtrack at level 9
 pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7]
 solution : [0, 5, 2, 14, 19]

After backtrack at level 9
 pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14, 19]


Invert decision for 19 at level 8


New level: 9
 pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14]


Before reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 260), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, 72), (21, 74), (22, 2), (23, 10), (24, 34), (25, 161), (26, 40), (27, 8), (28, 32), (29, -1), (30, 8), (31, 64), (32, 16), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14]


Solution : [0, 5, 2, 14] has cost 22.


Decide in level 9 among pending : [26, 11, 13, 16, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 16 with phase True at level 9

After decision at level 9
 pending : [26, 11, 13, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14, 16]


New level: 10
 pending : [26, 11, 13, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14, 16]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 22, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 17, 18]
 solution : [0, 5, 2, 14, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, 392), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 0), (18, 10), (19, -1), (20, 161), (21, 198), (22, 0), (23, 8), (24, 32), (25, 81), (26, 18), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 32)]

Covered at level 10 : {17, 22}

After reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18]
 solution : [0, 5, 2, 14, 16]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18]
 solution : [0, 5, 2, 14, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 0), (18, 10), (19, -1), (20, 161), (21, 198), (22, 0), (23, 8), (24, 32), (25, 81), (26, 18), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, 161), (21, 198), (22, -1), (23, 8), (24, 32), (25, 81), (26, 18), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18]
 solution : [0, 5, 2, 14, 16]


Solution : [0, 5, 2, 14, 16] has cost 61.


Before backtrack at level 10
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18]
 solution : [0, 5, 2, 14, 16]

After backtrack at level 10
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18, 22, 17]
 solution : [0, 5, 2, 14, 16]


Invert decision for 16 at level 9


New level: 10
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18, 22, 17]
 solution : [0, 5, 2, 14]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18, 22, 17]
 solution : [0, 5, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 264), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, -1), (18, 10), (19, -1), (20, 161), (21, 198), (22, -1), (23, 8), (24, 32), (25, 81), (26, 18), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18, 22, 17]
 solution : [0, 5, 2, 14]


Solution : [0, 5, 2, 14] has cost 22.


Decide in level 10 among pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 7, 18, 22, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]


New level: 11
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 32, 28, 30, 3, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 256), (14, -1), (15, -1), (16, -1), (17, 6), (18, 96), (19, -1), (20, 224), (21, 198), (22, 128), (23, 22), (24, 104), (25, 194), (26, 48), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 4), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, -1), (20, 18), (21, 18), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 8), (28, 8), (29, -1), (30, 0), (31, 8), (32, 0), (33, 16)]

Covered at level 11 : {32, 3, 30}

After reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 4), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, -1), (20, 18), (21, 18), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 8), (28, 8), (29, -1), (30, 0), (31, 8), (32, 0), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 4), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, -1), (20, 18), (21, 18), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 8), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]


Solution : [0, 5, 2, 14, 7] has cost 32.


Before backtrack at level 11
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17]
 solution : [0, 5, 2, 14, 7]

After backtrack at level 11
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17, 32, 30, 3]
 solution : [0, 5, 2, 14, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17, 32, 30, 3]
 solution : [0, 5, 2, 14]


Before reduction : 
 pending  : [26, 11, 13, 23, 8, 10, 20, 25, 33, 6, 24, 27, 21, 31, 28, 18, 22, 17, 32, 30, 3]
 solution : [0, 5, 2, 14]

Essensial at level 11 : {3, 21, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 64), (7, -1), (8, 128), (9, -1), (10, 2), (11, 256), (12, -1), (13, 4), (14, -1), (15, -1), (16, -1), (17, 6), (18, 6), (19, -1), (20, 18), (21, 18), (22, 128), (23, 22), (24, 22), (25, 48), (26, 48), (27, 8), (28, 8), (29, -1), (30, -1), (31, 8), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, 2), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [11, 13, 8, 10]
 solution : [0, 5, 2, 14, 3, 21, 6]


Before reduction : 
 pending  : [11, 13, 8, 10]
 solution : [0, 5, 2, 14, 3, 21, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, 2), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, 0), (18, 0), (19, -1), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, 2), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [11, 13, 8, 10]
 solution : [0, 5, 2, 14, 3, 21, 6]


Solution : [0, 5, 2, 14, 3, 21, 6] has cost 71.


Before backtrack at level 11
 pending : [11, 13, 8, 10]
 solution : [0, 5, 2, 14, 3, 21, 6]

After backtrack at level 11
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30]
 solution : [0, 5, 2, 14]


Before backtrack at level 10
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30]
 solution : [0, 5, 2, 14]

After backtrack at level 10
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7]
 solution : [0, 5, 2, 14]


Before backtrack at level 9
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7]
 solution : [0, 5, 2, 14]

After backtrack at level 9
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16]
 solution : [0, 5, 2, 14]


Before backtrack at level 8
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16]
 solution : [0, 5, 2, 14]

After backtrack at level 8
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19]
 solution : [0, 5, 2, 14]


Before backtrack at level 7
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19]
 solution : [0, 5, 2, 14]

After backtrack at level 7
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 14]


Invert decision for 14 at level 6


New level: 7
 pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, 2), (11, 2), (12, -1), (13, 1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 7 : set()

After reduction : 
 pending  : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 7 among pending : [11, 13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]


New level: 8
 pending : [13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]


Before reduction : 
 pending  : [13, 8, 10, 6, 21, 3, 26, 23, 20, 25, 33, 24, 27, 31, 28, 18, 22, 17, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, 512), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 258), (8, 0), (9, -1), (10, 0), (11, -1), (12, 512), (13, 4), (14, -1), (15, -1), (16, 14), (17, 0), (18, 96), (19, 386), (20, 9), (21, 198), (22, 4), (23, 0), (24, 40), (25, 26), (26, 0), (27, 2), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 8 : {8, 10, 17, 23, 26}

After reduction : 
 pending  : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]


Before reduction : 
 pending  : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 258), (8, 0), (9, -1), (10, 0), (11, -1), (12, 512), (13, 4), (14, -1), (15, -1), (16, 14), (17, 0), (18, 96), (19, 386), (20, 9), (21, 198), (22, 4), (23, 0), (24, 40), (25, 26), (26, 0), (27, 2), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 258), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, 4), (14, -1), (15, -1), (16, 14), (17, -1), (18, 96), (19, 386), (20, 9), (21, 198), (22, 4), (23, -1), (24, 16), (25, 26), (26, -1), (27, 2), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]


Solution : [0, 5, 2, 11] has cost 26.


Before backtrack at level 8
 pending : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12]
 solution : [0, 5, 2, 11]

After backtrack at level 8
 pending : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 64), (7, 258), (8, -1), (9, -1), (10, -1), (11, -1), (12, 512), (13, 4), (14, -1), (15, -1), (16, 14), (17, -1), (18, 96), (19, 386), (20, 9), (21, 198), (22, 4), (23, -1), (24, 16), (25, 26), (26, -1), (27, 2), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, -1), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Covered at level 8 : set()

After reduction : 
 pending  : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2]


Solution : [0, 5, 2] has cost 20.


Decide in level 8 among pending : [13, 6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, -1), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]


New level: 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 256), (7, 272), (8, 256), (9, -1), (10, 128), (11, -1), (12, 512), (13, 512), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 418), (20, 193), (21, 198), (22, 128), (23, 84), (24, 104), (25, 194), (26, 192), (27, 64), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, 258), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 393), (20, 49), (21, 198), (22, 128), (23, 84), (24, 100), (25, 194), (26, 144), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]


Solution : [0, 5, 2, 13] has cost 25.


Before backtrack at level 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]

After backtrack at level 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 12, 8, 10, 26, 23, 17]
 solution : [0, 5, 2]

Essensial at level 9 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, 258), (8, 128), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 392), (17, 48), (18, 96), (19, 393), (20, 49), (21, 198), (22, 128), (23, 84), (24, 100), (25, 194), (26, 144), (27, 16), (28, 128), (29, -1), (30, 32), (31, 256), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 256), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 386), (17, 48), (18, 96), (19, 417), (20, 193), (21, 149), (22, 128), (23, 84), (24, 22), (25, 48), (26, 192), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 12]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 256), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 386), (17, 48), (18, 96), (19, 417), (20, 193), (21, 149), (22, 128), (23, 84), (24, 22), (25, 48), (26, 192), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 256), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 386), (17, 48), (18, 96), (19, 417), (20, 193), (21, 149), (22, 128), (23, 84), (24, 22), (25, 48), (26, 192), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 32)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 12]


Solution : [0, 5, 2, 12] has cost 25.


Before backtrack at level 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17]
 solution : [0, 5, 2, 12]

After backtrack at level 9
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12]
 solution : [0, 5, 2]


Before backtrack at level 8
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12]
 solution : [0, 5, 2]

After backtrack at level 8
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13]
 solution : [0, 5, 2]


Before backtrack at level 7
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13]
 solution : [0, 5, 2]

After backtrack at level 7
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11]
 solution : [0, 5, 2]


Before backtrack at level 6
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11]
 solution : [0, 5, 2]

After backtrack at level 6
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14]
 solution : [0, 5, 2]


Before backtrack at level 5
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14]
 solution : [0, 5, 2]

After backtrack at level 5
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9]
 solution : [0, 5, 2]


Before backtrack at level 4
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9]
 solution : [0, 5, 2]

After backtrack at level 4
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9, 15]
 solution : [0, 5, 2]


Before backtrack at level 3
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9, 15]
 solution : [0, 5, 2]

After backtrack at level 3
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5, 2]


Invert decision for 2 at level 2


New level: 3
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 10, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5]

Essensial at level 3 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, 130), (8, 256), (9, -1), (10, 128), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 386), (17, 48), (18, 96), (19, 417), (20, 193), (21, 149), (22, 128), (23, 84), (24, 22), (25, 48), (26, 192), (27, 64), (28, 128), (29, -1), (30, 16), (31, 128), (32, 32), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 3 : set()

After reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]
 solution : [0, 5, 10]


Solution : [0, 5, 10] has cost 13.


Decide in level 3 among pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29]
 solution : [0, 5, 10, 4]


New level: 4
 pending : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29]
 solution : [0, 5, 10, 4]


Before reduction : 
 pending  : [6, 21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 8, 26, 23, 17, 12, 13, 11, 14, 9, 15, 29]
 solution : [0, 5, 10, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 768), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 0), (7, 288), (8, 0), (9, 64), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 576), (16, 2), (17, 24), (18, 384), (19, 133), (20, 27), (21, 212), (22, 2), (23, 2), (24, 6), (25, 7), (26, 0), (27, 32), (28, 128), (29, 32), (30, 128), (31, 64), (32, 64), (33, 2)]

Covered at level 4 : {6, 8, 11, 12, 13, 14, 26}

After reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29]
 solution : [0, 5, 10, 4]


Before reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29]
 solution : [0, 5, 10, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 0), (7, 288), (8, 0), (9, 64), (10, -1), (11, 0), (12, 0), (13, 0), (14, 0), (15, 576), (16, 2), (17, 24), (18, 384), (19, 133), (20, 27), (21, 212), (22, 2), (23, 2), (24, 6), (25, 7), (26, 0), (27, 32), (28, 128), (29, 32), (30, 128), (31, 64), (32, 64), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, 288), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 576), (16, 2), (17, 24), (18, 384), (19, 133), (20, 27), (21, 212), (22, 2), (23, 2), (24, 6), (25, 7), (26, -1), (27, 32), (28, 128), (29, 32), (30, 128), (31, 64), (32, 64), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29]
 solution : [0, 5, 10, 4]


Solution : [0, 5, 10, 4] has cost 26.


Before backtrack at level 4
 pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29]
 solution : [0, 5, 10, 4]

After backtrack at level 4
 pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, 288), (8, -1), (9, 64), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 576), (16, 2), (17, 24), (18, 384), (19, 133), (20, 27), (21, 212), (22, 2), (23, 2), (24, 6), (25, 7), (26, -1), (27, 32), (28, 128), (29, 32), (30, 128), (31, 64), (32, 64), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

Covered at level 4 : set()

After reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10]


Solution : [0, 5, 10] has cost 13.


Decide in level 4 among pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 7, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]


New level: 5
 pending : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]


Before reduction : 
 pending  : [21, 3, 20, 25, 33, 24, 27, 31, 28, 18, 22, 32, 30, 16, 19, 23, 17, 9, 15, 29, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 256), (7, 640), (8, 256), (9, 512), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 416), (17, 96), (18, 384), (19, 420), (20, 202), (21, 592), (22, 128), (23, 128), (24, 272), (25, 400), (26, 276), (27, 128), (28, 256), (29, 64), (30, 128), (31, 256), (32, 128), (33, 256)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 386), (17, 12), (18, 6), (19, 196), (20, 36), (21, 18), (22, 128), (23, 40), (24, 22), (25, 48), (26, 96), (27, 16), (28, 8), (29, 0), (30, 0), (31, 32), (32, 0), (33, 64)]

Covered at level 5 : {32, 3, 29, 30}

After reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]


Before reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 386), (17, 12), (18, 6), (19, 196), (20, 36), (21, 18), (22, 128), (23, 40), (24, 22), (25, 48), (26, 96), (27, 16), (28, 8), (29, 0), (30, 0), (31, 32), (32, 0), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 386), (17, 12), (18, 6), (19, 196), (20, 36), (21, 18), (22, 128), (23, 40), (24, 22), (25, 48), (26, 96), (27, 16), (28, 8), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]


Solution : [0, 5, 10, 7] has cost 23.


Before backtrack at level 5
 pending : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14]
 solution : [0, 5, 10, 7]

After backtrack at level 5
 pending : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14, 3, 32, 30, 29]
 solution : [0, 5, 10, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14, 3, 32, 30, 29]
 solution : [0, 5, 10]


Before reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 28, 18, 22, 16, 19, 23, 17, 9, 15, 6, 8, 26, 12, 13, 11, 14, 3, 32, 30, 29]
 solution : [0, 5, 10]

Essensial at level 5 : {3, 6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 256), (9, 128), (10, -1), (11, 512), (12, 512), (13, 512), (14, 512), (15, 576), (16, 386), (17, 12), (18, 6), (19, 196), (20, 36), (21, 18), (22, 128), (23, 40), (24, 22), (25, 48), (26, 96), (27, 16), (28, 8), (29, -1), (30, -1), (31, 32), (32, -1), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8), (9, 512), (10, -1), (11, 512), (12, 128), (13, 128), (14, 512), (15, 512), (16, 258), (17, 16), (18, 2), (19, 97), (20, 133), (21, 161), (22, 2), (23, 4), (24, 4), (25, 192), (26, 65), (27, 16), (28, 0), (29, 8), (30, 0), (31, 32), (32, 32), (33, 128)]

Covered at level 5 : {28, 30}

After reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29]
 solution : [0, 5, 10, 3, 6]


Before reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29]
 solution : [0, 5, 10, 3, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8), (9, 512), (10, -1), (11, 512), (12, 128), (13, 128), (14, 512), (15, 512), (16, 258), (17, 16), (18, 2), (19, 97), (20, 133), (21, 161), (22, 2), (23, 4), (24, 4), (25, 192), (26, 65), (27, 16), (28, 0), (29, 8), (30, 0), (31, 32), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 8), (9, 512), (10, -1), (11, 512), (12, 128), (13, 128), (14, 512), (15, 512), (16, 258), (17, 16), (18, 2), (19, 97), (20, 133), (21, 161), (22, 2), (23, 4), (24, 4), (25, 192), (26, 65), (27, 16), (28, -1), (29, 8), (30, -1), (31, 32), (32, 32), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29]
 solution : [0, 5, 10, 3, 6]


Solution : [0, 5, 10, 3, 6] has cost 28.


Before backtrack at level 5
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29]
 solution : [0, 5, 10, 3, 6]

After backtrack at level 5
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30]
 solution : [0, 5, 10]


Before backtrack at level 4
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30]
 solution : [0, 5, 10]

After backtrack at level 4
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7]
 solution : [0, 5, 10]


Before backtrack at level 3
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7]
 solution : [0, 5, 10]

After backtrack at level 3
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7, 10, 4]
 solution : [0, 5]


Before backtrack at level 2
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7, 10, 4]
 solution : [0, 5]

After backtrack at level 2
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7, 10, 4, 2]
 solution : [0, 5]


Before backtrack at level 1
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7, 10, 4, 2]
 solution : [0, 5]

After backtrack at level 1
 pending : [21, 20, 25, 33, 24, 27, 31, 18, 22, 16, 19, 23, 17, 9, 15, 8, 26, 12, 13, 11, 14, 32, 29, 6, 3, 28, 30, 7, 10, 4, 2, 1]
 solution : [0, 5]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 5, 1, 3, 9] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_5] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_3] forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_9] forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 10.341 seconds

[QRM NOTE]: Time elapsed since last: 2.299 seconds

[QRM NOTE]: Peak memory: 2284443 bytes


===========================================================================================

	[MIN_CHECK] Minimization Sanity Check on [ivybench/sym/ivy/firewall: node=3]

===========================================================================================

Minimization check for Solution 0

[MIN_CHECK RESULT]: PASS

[QRM NOTE]: Time elapsed since start: 10.388 seconds

[QRM NOTE]: Time elapsed since last: 0.047 seconds

[QRM NOTE]: Peak memory: 1257521 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_5
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_5 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_5 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_5 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_3 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE1,NODE0. allowed_in(NODE1) | ~sent(NODE0,NODE1) | allowed_in(NODE0) | NODE0 = NODE1) & (forall NODE1,NODE0. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 12.345 seconds

[QRM NOTE]: Time elapsed since last: 1.956 seconds

[QRM NOTE]: Peak memory: 1305233 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

