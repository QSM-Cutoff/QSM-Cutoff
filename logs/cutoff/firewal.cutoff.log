
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 21.290 seconds

[QRM NOTE]: Time elapsed since last: 21.290 seconds

[QRM NOTE]: Peak memory: 1180232 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: sent('node', 'node')
predicate: internal('node',)
predicate: allowed_in('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000011000000000
lex min decimal: 1536
states:
000011000000000
000110000000000
000101000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000010000000000
000001000000000
000100000000000




=== State Orbit 4 =====================
size : 6
repr state: 100011000100000
lex min decimal: 7176
states:
100011000100000
001110001000000
010101010000000
001110000001000
010101000000010
100011000000100




=== State Orbit 5 =====================
size : 3
repr state: 100011000100100
lex min decimal: 7240
states:
100011000100100
010101010000010
001110001001000




=== State Orbit 6 =====================
size : 6
repr state: 100011010100100
lex min decimal: 7242
states:
010101010001010
001110001001100
010101010100010
100011001100100
001110001001010
100011010100100




=== State Orbit 7 =====================
size : 3
repr state: 100011011100100
lex min decimal: 7246
states:
001110001001110
100011011100100
010101010101010




=== State Orbit 8 =====================
size : 6
repr state: 100011010100000
lex min decimal: 7178
states:
001110000001010
100011010100000
010101010100000
100011001000100
010101000001010
001110001000100




=== State Orbit 9 =====================
size : 6
repr state: 100011011100000
lex min decimal: 7182
states:
100011011100000
100011011000100
001110001000110
001110000001110
010101000101010
010101010101000




=== State Orbit 10 =====================
size : 6
repr state: 100011001100000
lex min decimal: 7180
states:
001110000001100
010101010001000
010101000100010
100011001100000
100011010000100
001110001000010




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010100010000000
100001000000100
010001000000010
001100001000000
001010000001000
100010000100000




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
101010000101000
110001000000110
011100011000000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
011100011100000
011100011000100
101010000101010
110001000001110
110001001000110
101010010101000




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
110001001001110
101010010101010
011100011100100




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
001010000001010
100010010100000
010100010100000
001100001000100
010001000001010
100001001000100



[QRM NOTE]: Time elapsed since start: 21.600 seconds

[QRM NOTE]: Time elapsed since last: 0.310 seconds

[QRM NOTE]: Peak memory: 1230430 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 21.603 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 193556 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : -1-----0-----0-
6     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
7     : --1-----0--0---
7     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
8     : 1--------0--0--
8     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : 11-----------0-
9     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
10     : 1-1--------0---
10     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
11     : 11----------0--
11     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
12     : -11-----0------
12     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
13     : 1-1------0-----
13     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
14     : -11----0-------
14     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : -1-0---------0-
15     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
16     : --10-------0---
16     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
17     : 1---0-------0--
17     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
18     : --1-0---0------
18     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
19     : 1----0---0-----
19     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
20     : -1---0-0-------
20     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
21 (*) : --01----1------
21     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
22     : -0-1---1-------
22     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
23     : --0-1------1---
23     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
24     : 0---1----1-----
24     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
25     : -0---1-------1-
25     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
26     : 0----1------1--
26     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
45 (*) : 0----1--1------
45     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
46     : 0---1--1-------
46     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
47     : -0---1-----1---
47     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
48     : -0-1-----1-----
48     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
49     : --0-1--------1-
49     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
50     : --01--------1--
50     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
27 (*) : ---1-1--1------
27     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
28     : ---11--1-------
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
29     : ----11-----1---
29     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ----11-------1-
31     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
32     : ---1-1------1--
32     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
33 (*) : --10----1------
33     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
34     : -1-0---1-------
34     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
35     : --1-0------1---
35     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
36     : 1---0----1-----
36     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
37     : -1---0-------1-
37     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
38     : 1----0------1--
38     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
75 (*) : 1----0--1------
75     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
76     : 1---0--1-------
76     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
77     : -1---0-----1---
77     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
78     : -1-0-----1-----
78     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
79     : --1-0--------1-
79     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
80     : --10--------1--
80     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
39 (*) : 1-1-----1------
39     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
40     : 11-----1-------
40     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
41     : -11--------1---
41     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
42     : 11-------1-----
42     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
43     : -11----------1-
43     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
44     : 1-1---------1--
44     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : 0-0-----1------
51     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
52     : 00-----1-------
52     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
53     : -00--------1---
53     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
54     : 00-------1-----
54     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
55     : -00----------1-
55     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
56     : 0-0---------1--
56     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : 0--0----1------
57     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
58     : 0--0---1-------
58     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
59     : -0--0------1---
59     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
60     : -0--0----1-----
60     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
61     : --0--0-------1-
61     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
62     : --0--0------1--
62     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
63 (*) : --0--0--1------
63     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
64     : -0--0--1-------
64     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
65     : --0--0-----1---
65     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
66     : 0--0-----1-----
66     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
67     : -0--0--------1-
67     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
68     : 0--0--------1--
68     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
69 (*) : ---0-0--1------
69     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
70     : ---00--1-------
70     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
71     : ----00-----1---
71     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
72     : ---00----1-----
72     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
73     : ----00-------1-
73     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
74     : ---0-0------1--
74     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 8
num_suborbits: 2
81 (*) : --------11-1---
81     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
82     : -------1----11-
82     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
83     : -------11--1---
83     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
84     : ---------1--11-
84     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
85     : -------11----1-
85     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
86     : ---------1-11--
86     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
87 (*) : --------11---1-
87     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
88     : -------1---11--
88     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-0----1-----1-
96     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
97     : 10------1--1---
97     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
98     : -10------1--1--
98     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
99     : 01------1--1---
99     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
100     : -01------1--1--
100     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
101     : 0-1----1-----1-
101     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
114 (*) : 1-0----1---1---
114     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
115     : 10------1----1-
115     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
116     : -10-----11-----
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
117     : 01---------11--
117     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
118     : -01----1----1--
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
119     : 0-1------1---1-
119     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
300 (*) : 0-1----1---1---
300     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01------1----1-
301     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01-----11-----
302     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
303     : 10---------11--
303     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
304     : -10----1----1--
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
305     : 1-0------1---1-
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
342 (*) : -01----11------
342     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
343     : -10----11------
343     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
344     : 0-1------1-1---
344     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
345     : 1-0------1-1---
345     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
346     : 01----------11-
346     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
347     : 10----------11-
347     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00---1-----1-
102     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0----1--1---
103     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0----1--1--
104     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1--1---
105     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0---1--1--
106     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1-----1-
107     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00---1---1---
108     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0----1----1-
109     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0---11-----
110     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0------11--
111     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-1----1--
112     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1---1-
113     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
276 (*) : --0-0--1----1--
276     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0--11-----
277     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1---1-
278     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0-1---1---
279     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0-------11--
280     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0---1----1-
281     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
324 (*) : -0---0-11------
324     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
325     : --0-0--11------
325     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
326     : 0----0---1-1---
326     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
327     : --00-----1-1---
327     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
328     : 0---0-------11-
328     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
329     : -0-0--------11-
329     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
120 (*) : ---0-1-1---1---
120     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
121     : ---01---1----1-
121     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
122     : ----01--11-----
122     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
123     : ---10------11--
123     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
124     : ----10-1----1--
124     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
125     : ---1-0---1---1-
125     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
132 (*) : ---0-1-1-----1-
132     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
133     : ---01---1--1---
133     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
134     : ----01---1--1--
134     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
135     : ---10---1--1---
135     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
136     : ----10---1--1--
136     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
137     : ---1-0-1-----1-
137     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
282 (*) : ----01-1----1--
282     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
283     : ----10--11-----
283     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
284     : ---0-1---1---1-
284     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
285     : ---1-0-1---1---
285     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
286     : ---01------11--
286     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
287     : ---10---1----1-
287     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
330 (*) : ----10-11------
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
331     : ----01-11------
331     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
332     : ---1-0---1-1---
332     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
333     : ---0-1---1-1---
333     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
334     : ---10-------11-
334     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
335     : ---01-------11-
335     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
126 (*) : 1----1-1---1---
126     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
127     : 1---1---1----1-
127     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
128     : -1---1--11-----
128     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
129     : -1-1-------11--
129     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
130     : --1-1--1----1--
130     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
131     : --11-----1---1-
131     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
138 (*) : 1----1-1-----1-
138     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
139     : 1---1---1--1---
139     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
140     : -1---1---1--1--
140     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
141     : -1-1----1--1---
141     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
142     : --1-1----1--1--
142     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
143     : --11---1-----1-
143     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
318 (*) : --11---1---1---
318     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
319     : -1-1----1----1-
319     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
320     : --1-1---11-----
320     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
321     : 1---1------11--
321     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
322     : -1---1-1----1--
322     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
323     : 1----1---1---1-
323     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
336 (*) : --1-1--11------
336     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
337     : -1---1-11------
337     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
338     : --11-----1-1---
338     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
339     : 1----1---1-1---
339     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
340     : -1-1--------11-
340     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
341     : 1---1-------11-
341     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
144 (*) : -----0-10---1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
145     : ----0--011-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
146     : -----0---1-0-1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
147     : ---0---1-0-1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
148     : ----0------110-
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
149     : ---0----1---01-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
156 (*) : -----0-1-0-1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
157     : ----0---1---01-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
158     : -----0-011-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
159     : ---0-------110-
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
160     : ----0--10---1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
161     : ---0-----1-0-1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
246 (*) : -----0-1-0---1-
246     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
247     : ----0---1--10--
247     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
248     : -----0-0-1--1--
248     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
249     : ---0----1--1-0-
249     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
250     : ----0---01--1--
250     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
251     : ---0---1---0-1-
251     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
252 (*) : ---0---1-0---1-
252     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
253     : ---0----1--10--
253     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
254     : ----0--0-1--1--
254     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
255     : ----0---1--1-0-
255     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
256     : -----0--01--1--
256     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
257     : -----0-1---0-1-
257     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
150 (*) : --1----10---1--
150     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
151     : -1-----011-----
151     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
152     : --1------1-0-1-
152     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
153     : 1------1-0-1---
153     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
154     : -1---------110-
154     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
155     : 1-------1---01-
155     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
216 (*) : --1----1-0-1---
216     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
217     : -1------1---01-
217     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
218     : --1----011-----
218     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
219     : 1----------110-
219     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
220     : -1-----10---1--
220     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
221     : 1--------1-0-1-
221     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
240 (*) : --1----1-0---1-
240     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
241     : -1------1--10--
241     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
242     : --1----0-1--1--
242     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
243     : 1-------1--1-0-
243     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
244     : -1------01--1--
244     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
245     : 1------1---0-1-
245     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
270 (*) : 1------1-0---1-
270     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
271     : 1-------1--10--
271     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
272     : -1-----0-1--1--
272     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
273     : -1------1--1-0-
273     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
274     : --1-----01--1--
274     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
275     : --1----1---0-1-
275     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
162 (*) : ---0-0-1-0-----
162     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
163     : ---00---1---0--
163     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
164     : ----00-0-1-----
164     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
165     : ---00------1-0-
165     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
166     : ----00--0---1--
166     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
167     : ---0-0-----0-1-
167     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---0---1-0--0--
168     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
169     : ---0----10--0--
169     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
170     : ----0--0-1---0-
170     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
171     : ----0--0---1-0-
171     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
172     : -----0--0--01--
172     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
173     : -----0--0--0-1-
173     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : ----1--1-0--0--
174     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
175     : -----1--10--0--
175     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
176     : ---1---0-1---0-
176     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
177     : -----1-0---1-0-
177     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
178     : ---1----0--01--
178     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
179     : ----1---0--0-1-
179     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
180 (*) : ----10-1-0-----
180     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
181     : ----01--1---0--
181     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
182     : ---1-0-0-1-----
182     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
183     : ---0-1-----1-0-
183     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
184     : ---10---0---1--
184     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
185     : ---01------0-1-
185     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 12
num_suborbits: 2
186 (*) : ----1--1-0-1---
186     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
187     : -----1--1---01-
187     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
188     : ---1---011-----
188     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
189     : -----1-----110-
189     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
190     : ---1---10---1--
190     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
191     : ----1----1-0-1-
191     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
258 (*) : ----1--1-0---1-
258     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
259     : -----1--1--10--
259     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
260     : ---1---0-1--1--
260     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
261     : -----1--1--1-0-
261     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
262     : ---1----01--1--
262     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
263     : ----1--1---0-1-
263     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
192 (*) : -0-----1-0--0--
192     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : --0-----10--0--
193     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : 0------0-1---0-
194     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : --0----0---1-0-
195     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : 0-------0--01--
196     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -0------0--0-1-
197     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
198 (*) : -0---0-1-0-----
198     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
199     : --0-0---1---0--
199     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
200     : 0----0-0-1-----
200     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
201     : --00-------1-0-
201     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
202     : 0---0---0---1--
202     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
203     : -0-0-------0-1-
203     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
204 (*) : -0-----1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
205     : --0-----1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
206     : 0------011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
207     : --0--------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
208     : 0------10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
209     : -0-------1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
264 (*) : -0-----1-0---1-
264     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
265     : --0-----1--10--
265     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
266     : 0------0-1--1--
266     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
267     : --0-----1--1-0-
267     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
268     : 0-------01--1--
268     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
269     : -0-----1---0-1-
269     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
210 (*) : --1----100-----
210     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
211     : -1-----01---0--
211     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
212     : --1----0-1-0---
212     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
213     : 1--------0-1-0-
213     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
214     : -1------0---10-
214     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
215     : 1----------001-
215     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
222 (*) : --10---1-0-----
222     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
223     : -1-0----1---0--
223     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
224     : --1-0--0-1-----
224     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
225     : 1---0------1-0-
225     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
226     : -1---0--0---1--
226     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
227     : 1----0-----0-1-
227     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
228 (*) : --1-1--1-0-----
228     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
229     : -1---1--1---0--
229     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
230     : --11---0-1-----
230     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
231     : 1----1-----1-0-
231     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
232     : -1-1----0---1--
232     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
233     : 1---1------0-1-
233     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
288 (*) : --1-1--1---0---
288     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
289     : -1---1--1----0-
289     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
290     : --11----01-----
290     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
291     : 1----1-----10--
291     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
292     : -1-1---0----1--
292     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
293     : 1---1----0---1-
293     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
312 (*) : --11---10------
312     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
313     : -1-1---01------
313     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
314     : --1-1----1-0---
314     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
315     : 1---1----0-1---
315     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
316     : -1---1------10-
316     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
317     : 1----1------01-
317     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
234 (*) : -01----1-0-----
234     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
235     : -10-----1---0--
235     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
236     : 0-1----0-1-----
236     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
237     : 1-0--------1-0-
237     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
238     : 01------0---1--
238     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
239     : 10---------0-1-
239     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
294 (*) : -01----1---0---
294     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
295     : -10-----1----0-
295     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
296     : 0-1-----01-----
296     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
297     : 1-0--------10--
297     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
298     : 01-----0----1--
298     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
299     : 10-------0---1-
299     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
306 (*) : 0-1----10------
306     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
307     : 01-----01------
307     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
308     : -01------1-0---
308     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
309     : 10-------0-1---
309     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
310     : -10---------10-
310     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
311     : 1-0---------01-
311     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 21.677 seconds

[QRM NOTE]: Time elapsed since last: 0.074 seconds

[QRM NOTE]: Peak memory: 1556927 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

After removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]

[QRM NOTE]: Time elapsed since start: 21.692 seconds

[QRM NOTE]: Time elapsed since last: 0.015 seconds

[QRM NOTE]: Peak memory: 496240 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : -1-----0-----0-
6     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
7     : --1-----0--0---
7     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
8     : 1--------0--0--
8     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : 11-----------0-
9     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
10     : 1-1--------0---
10     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
11     : 11----------0--
11     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
12     : -11-----0------
12     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
13     : 1-1------0-----
13     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
14     : -11----0-------
14     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE1)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : -1-0---------0-
15     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
16     : --10-------0---
16     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
17     : 1---0-------0--
17     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
18     : --1-0---0------
18     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
19     : 1----0---0-----
19     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
20     : -1---0-0-------
20     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)', '~sent(NODE2,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
21 (*) : --01----1------
21     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
22     : -0-1---1-------
22     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
23     : --0-1------1---
23     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
24     : 0---1----1-----
24     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
25     : -0---1-------1-
25     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
26     : 0----1------1--
26     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
45 (*) : 0----1--1------
45     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
46     : 0---1--1-------
46     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
47     : -0---1-----1---
47     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
48     : -0-1-----1-----
48     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
49     : --0-1--------1-
49     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
50     : --01--------1--
50     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'internal(node0)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'internal(NODE0)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
27 (*) : ---1-1--1------
27     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
28     : ---11--1-------
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
29     : ----11-----1---
29     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ----11-------1-
31     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
32     : ---1-1------1--
32     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', 'internal(NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
33 (*) : --10----1------
33     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
34     : -1-0---1-------
34     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
35     : --1-0------1---
35     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
36     : 1---0----1-----
36     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
37     : -1---0-------1-
37     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
38     : 1----0------1--
38     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
75 (*) : 1----0--1------
75     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
76     : 1---0--1-------
76     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
77     : -1---0-----1---
77     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
78     : -1-0-----1-----
78     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
79     : --1-0--------1-
79     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
80     : --10--------1--
80     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~internal(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
39 (*) : 1-1-----1------
39     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
40     : 11-----1-------
40     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
41     : -11--------1---
41     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
42     : 11-------1-----
42     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
43     : -11----------1-
43     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
44     : 1-1---------1--
44     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$0; node$0$sent$0$0], 'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$0; node$0$sent$0$0, 'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE0,NODE1)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~allowed_in(NODE0) | ~sent(NODE0,NODE1) | ~allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : 0-0-----1------
51     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
52     : 00-----1-------
52     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
53     : -00--------1---
53     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
54     : 00-------1-----
54     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
55     : -00----------1-
55     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
56     : 0-0---------1--
56     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE0)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | allowed_in(NODE0) | allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : 0--0----1------
57     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
58     : 0--0---1-------
58     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
59     : -0--0------1---
59     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
60     : -0--0----1-----
60     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
61     : --0--0-------1-
61     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
62     : --0--0------1--
62     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
63 (*) : --0--0--1------
63     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
64     : -0--0--1-------
64     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
65     : --0--0-----1---
65     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
66     : 0--0-----1-----
66     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
67     : -0--0--------1-
67     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
68     : 0--0--------1--
68     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~allowed_in(NODE2)', '~internal(NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE2) | internal(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
69 (*) : ---0-0--1------
69     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
70     : ---00--1-------
70     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
71     : ----00-----1---
71     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
72     : ---00----1-----
72     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
73     : ----00-------1-
73     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
74     : ---0-0------1--
74     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 12 =====================
size : 8
num_suborbits: 2
81 (*) : --------11-1---
81     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
82     : -------1----11-
82     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
83     : -------11--1---
83     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
84     : ---------1--11-
84     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
85     : -------11----1-
85     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
86     : ---------1-11--
86     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
87 (*) : --------11---1-
87     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
88     : -------1---11--
88     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$0$2, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$1], 'node$0$sent$0': [node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$2]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$1}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE1,NODE0)', 'sent(NODE0,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$2

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$0$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE0,NODE3,NODE2. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE0) | ~sent(NODE0,NODE3) | ((NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-0----1-----1-
96     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
97     : 10------1--1---
97     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
98     : -10------1--1--
98     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
99     : 01------1--1---
99     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
100     : -01------1--1--
100     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
101     : 0-1----1-----1-
101     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
114 (*) : 1-0----1---1---
114     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
115     : 10------1----1-
115     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
116     : -10-----11-----
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
117     : 01---------11--
117     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
118     : -01----1----1--
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
119     : 0-1------1---1-
119     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
300 (*) : 0-1----1---1---
300     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01------1----1-
301     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01-----11-----
302     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
303     : 10---------11--
303     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
304     : -10----1----1--
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
305     : 1-0------1---1-
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
342 (*) : -01----11------
342     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
343     : -10----11------
343     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
344     : 0-1------1-1---
344     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
345     : 1-0------1-1---
345     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
346     : 01----------11-
346     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
347     : 10----------11-
347     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~allowed_in(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE2 | NODE2 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00---1-----1-
102     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0----1--1---
103     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0----1--1--
104     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1--1---
105     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0---1--1--
106     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1-----1-
107     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00---1---1---
108     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0----1----1-
109     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0---11-----
110     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0------11--
111     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-1----1--
112     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1---1-
113     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
276 (*) : --0-0--1----1--
276     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0--11-----
277     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1---1-
278     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0-1---1---
279     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0-------11--
280     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0---1----1-
281     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
324 (*) : -0---0-11------
324     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
325     : --0-0--11------
325     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
326     : 0----0---1-1---
326     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
327     : --00-----1-1---
327     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
328     : 0---0-------11-
328     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
329     : -0-0--------11-
329     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE3)', '~allowed_in(NODE4)', '~internal(NODE5)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE0:node ~= NODE4', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE3']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~sent(NODE1,NODE3) | allowed_in(NODE4) | internal(NODE5) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
120 (*) : ---0-1-1---1---
120     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
121     : ---01---1----1-
121     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
122     : ----01--11-----
122     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
123     : ---10------11--
123     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
124     : ----10-1----1--
124     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
125     : ---1-0---1---1-
125     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
132 (*) : ---0-1-1-----1-
132     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
133     : ---01---1--1---
133     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
134     : ----01---1--1--
134     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
135     : ---10---1--1---
135     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
136     : ----10---1--1--
136     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
137     : ---1-0-1-----1-
137     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
282 (*) : ----01-1----1--
282     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
283     : ----10--11-----
283     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
284     : ---0-1---1---1-
284     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
285     : ---1-0-1---1---
285     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
286     : ---01------11--
286     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
287     : ---10---1----1-
287     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
330 (*) : ----10-11------
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
331     : ----01-11------
331     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
332     : ---1-0---1-1---
332     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
333     : ---0-1---1-1---
333     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
334     : ---10-------11-
334     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
335     : ---01-------11-
335     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~internal(NODE5)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE0:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE4', 'NODE0:node = NODE5', 'NODE0:node = NODE2']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ~internal(NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4))


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
126 (*) : 1----1-1---1---
126     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
127     : 1---1---1----1-
127     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
128     : -1---1--11-----
128     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
129     : -1-1-------11--
129     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
130     : --1-1--1----1--
130     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
131     : --11-----1---1-
131     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
138 (*) : 1----1-1-----1-
138     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
139     : 1---1---1--1---
139     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
140     : -1---1---1--1--
140     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
141     : -1-1----1--1---
141     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
142     : --1-1----1--1--
142     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
143     : --11---1-----1-
143     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
318 (*) : --11---1---1---
318     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
319     : -1-1----1----1-
319     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
320     : --1-1---11-----
320     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
321     : 1---1------11--
321     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
322     : -1---1-1----1--
322     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
323     : 1----1---1---1-
323     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
336 (*) : --1-1--11------
336     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
337     : -1---1-11------
337     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
338     : --11-----1-1---
338     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
339     : 1----1---1-1---
339     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
340     : -1-1--------11-
340     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
341     : 1---1-------11-
341     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'internal(NODE1)', 'sent(NODE3,NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~internal(NODE1) | ~sent(NODE3,NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
144 (*) : -----0-10---1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
145     : ----0--011-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
146     : -----0---1-0-1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
147     : ---0---1-0-1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
148     : ----0------110-
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
149     : ---0----1---01-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
156 (*) : -----0-1-0-1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
157     : ----0---1---01-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
158     : -----0-011-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
159     : ---0-------110-
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
160     : ----0--10---1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
161     : ---0-----1-0-1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
246 (*) : -----0-1-0---1-
246     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
247     : ----0---1--10--
247     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
248     : -----0-0-1--1--
248     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
249     : ---0----1--1-0-
249     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
250     : ----0---01--1--
250     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
251     : ---0---1---0-1-
251     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
252 (*) : ---0---1-0---1-
252     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
253     : ---0----1--10--
253     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
254     : ----0--0-1--1--
254     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
255     : ----0---1--1-0-
255     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
256     : -----0--01--1--
256     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
257     : -----0-1---0-1-
257     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE5,NODE6)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)', '~internal(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE6']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE6', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE6', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE6']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE6', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE6']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE6']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE6', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$1$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE0:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE0:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE6,NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | internal(NODE4) | ((NODE0 ~= NODE3 | NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE1 ~= NODE6 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE6 | NODE1 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE0 ~= NODE6 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
150 (*) : --1----10---1--
150     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
151     : -1-----011-----
151     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
152     : --1------1-0-1-
152     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
153     : 1------1-0-1---
153     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
154     : -1---------110-
154     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
155     : 1-------1---01-
155     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
216 (*) : --1----1-0-1---
216     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
217     : -1------1---01-
217     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
218     : --1----011-----
218     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
219     : 1----------110-
219     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
220     : -1-----10---1--
220     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
221     : 1--------1-0-1-
221     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
240 (*) : --1----1-0---1-
240     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
241     : -1------1--10--
241     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
242     : --1----0-1--1--
242     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
243     : 1-------1--1-0-
243     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
244     : -1------01--1--
244     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
245     : 1------1---0-1-
245     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
270 (*) : 1------1-0---1-
270     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
271     : 1-------1--10--
271     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
272     : -1-----0-1--1--
272     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
273     : -1------1--1-0-
273     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
274     : --1-----01--1--
274     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
275     : --1----1---0-1-
275     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', '~sent(NODE5,NODE6)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE3:node = NODE6', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE3:node = NODE6', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE4:node = NODE6', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node', 'NODE6:node']

eq_terms: ['NODE5:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE5:node = NODE6', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE6,NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
162 (*) : ---0-0-1-0-----
162     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
163     : ---00---1---0--
163     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
164     : ----00-0-1-----
164     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
165     : ---00------1-0-
165     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
166     : ----00--0---1--
166     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
167     : ---0-0-----0-1-
167     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~internal(NODE2)', '~sent(NODE1,NODE0)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---0---1-0--0--
168     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
169     : ---0----10--0--
169     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
170     : ----0--0-1---0-
170     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
171     : ----0--0---1-0-
171     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
172     : -----0--0--01--
172     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
173     : -----0--0--0-1-
173     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE2,NODE0)', '~sent(NODE1,NODE0)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : ----1--1-0--0--
174     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
175     : -----1--10--0--
175     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
176     : ---1---0-1---0-
176     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
177     : -----1-0---1-0-
177     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
178     : ---1----0--01--
178     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
179     : ----1---0--0-1-
179     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
180 (*) : ----10-1-0-----
180     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
181     : ----01--1---0--
181     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
182     : ---1-0-0-1-----
182     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
183     : ---0-1-----1-0-
183     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
184     : ---10---0---1--
184     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
185     : ---01------0-1-
185     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE0)', '~internal(NODE2)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 26 =====================
size : 12
num_suborbits: 2
186 (*) : ----1--1-0-1---
186     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
187     : -----1--1---01-
187     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
188     : ---1---011-----
188     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
189     : -----1-----110-
189     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
190     : ---1---10---1--
190     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
191     : ----1----1-0-1-
191     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
258 (*) : ----1--1-0---1-
258     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
259     : -----1--1--10--
259     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
260     : ---1---0-1--1--
260     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
261     : -----1--1--1-0-
261     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
262     : ---1----01--1--
262     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
263     : ----1--1---0-1-
263     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE3)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
192 (*) : -0-----1-0--0--
192     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : --0-----10--0--
193     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : 0------0-1---0-
194     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : --0----0---1-0-
195     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : 0-------0--01--
196     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -0------0--0-1-
197     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~sent(NODE2,NODE0)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | sent(NODE2,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
198 (*) : -0---0-1-0-----
198     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
199     : --0-0---1---0--
199     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
200     : 0----0-0-1-----
200     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
201     : --00-------1-0-
201     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
202     : 0---0---0---1--
202     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
203     : -0-0-------0-1-
203     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~allowed_in(NODE1)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
204 (*) : -0-----1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
205     : --0-----1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
206     : 0------011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
207     : --0--------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
208     : 0------10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
209     : -0-------1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
264 (*) : -0-----1-0---1-
264     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
265     : --0-----1--10--
265     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
266     : 0------0-1--1--
266     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
267     : --0-----1--1-0-
267     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
268     : 0-------01--1--
268     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
269     : -0-----1---0-1-
269     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'sent(node0,node1)', '~sent(node1,node0)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$0': [node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$0': node$0$sent$0$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE2)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)', '~sent(NODE2,NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2,NODE3. allowed_in(NODE2) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE0) | ((NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
210 (*) : --1----100-----
210     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
211     : -1-----01---0--
211     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
212     : --1----0-1-0---
212     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
213     : 1--------0-1-0-
213     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
214     : -1------0---10-
214     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
215     : 1----------001-
215     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$0$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~sent(NODE2,NODE1)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
222 (*) : --10---1-0-----
222     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
223     : -1-0----1---0--
223     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
224     : --1-0--0-1-----
224     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
225     : 1---0------1-0-
225     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
226     : -1---0--0---1--
226     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
227     : 1----0-----0-1-
227     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~internal(NODE1)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
228 (*) : --1-1--1-0-----
228     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
229     : -1---1--1---0--
229     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
230     : --11---0-1-----
230     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
231     : 1----1-----1-0-
231     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
232     : -1-1----0---1--
232     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
233     : 1---1------0-1-
233     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
288 (*) : --1-1--1---0---
288     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
289     : -1---1--1----0-
289     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
290     : --11----01-----
290     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
291     : 1----1-----10--
291     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
292     : -1-1---0----1--
292     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
293     : 1---1----0---1-
293     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
312 (*) : --11---10------
312     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
313     : -1-1---01------
313     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
314     : --1-1----1-0---
314     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
315     : 1---1----0-1---
315     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
316     : -1---1------10-
316     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
317     : 1----1------01-
317     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE3)', 'internal(NODE1)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
234 (*) : -01----1-0-----
234     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
235     : -10-----1---0--
235     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
236     : 0-1----0-1-----
236     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
237     : 1-0--------1-0-
237     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
238     : 01------0---1--
238     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
239     : 10---------0-1-
239     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
294 (*) : -01----1---0---
294     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
295     : -10-----1----0-
295     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
296     : 0-1-----01-----
296     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
297     : 1-0--------10--
297     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
298     : 01-----0----1--
298     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
299     : 10-------0---1-
299     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
306 (*) : 0-1----10------
306     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
307     : 01-----01------
307     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
308     : -01------1-0---
308     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
309     : 10-------0-1---
309     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
310     : -10---------10-
310     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
311     : 1-0---------01-
311     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', '~sent(node1,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~sent(NODE3,NODE4)', '~allowed_in(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1']

use present constraint


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE4,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE3,NODE4) | allowed_in(NODE3) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 2 =====================
size : 3
num_suborbits: 1
6 (*) : -1-----0-----0-
6     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
7     : --1-----0--0---
7     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
8     : 1--------0--0--
8     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
9 (*) : 11-----------0-
9     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
10     : 1-1--------0---
10     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
11     : 11----------0--
11     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
12     : -11-----0------
12     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
13     : 1-1------0-----
13     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
14     : -11----0-------
14     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE1) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 4 =====================
size : 6
num_suborbits: 1
15 (*) : -1-0---------0-
15     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
16     : --10-------0---
16     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
17     : 1---0-------0--
17     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
18     : --1-0---0------
18     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
19     : 1----0---0-----
19     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
20     : -1---0-0-------
20     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
21 (*) : --01----1------
21     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
22     : -0-1---1-------
22     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
23     : --0-1------1---
23     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
24     : 0---1----1-----
24     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
25     : -0---1-------1-
25     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
26     : 0----1------1--
26     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
45 (*) : 0----1--1------
45     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
46     : 0---1--1-------
46     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
47     : -0---1-----1---
47     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
48     : -0-1-----1-----
48     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
49     : --0-1--------1-
49     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
50     : --01--------1--
50     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE1,NODE2) | ~internal(NODE0) | allowed_in(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 6 =====================
size : 6
num_suborbits: 1
27 (*) : ---1-1--1------
27     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
28     : ---11--1-------
28     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
29     : ----11-----1---
29     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
30     : ---11----1-----
30     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
31     : ----11-------1-
31     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
32     : ---1-1------1--
32     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | ~internal(NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 7 =====================
size : 12
num_suborbits: 2
33 (*) : --10----1------
33     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
34     : -1-0---1-------
34     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
35     : --1-0------1---
35     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
36     : 1---0----1-----
36     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
37     : -1---0-------1-
37     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
38     : 1----0------1--
38     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
75 (*) : 1----0--1------
75     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
76     : 1---0--1-------
76     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
77     : -1---0-----1---
77     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
78     : -1-0-----1-----
78     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
79     : --1-0--------1-
79     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
80     : --10--------1--
80     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
39 (*) : 1-1-----1------
39     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
40     : 11-----1-------
40     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
41     : -11--------1---
41     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
42     : 11-------1-----
42     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
43     : -11----------1-
43     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
44     : 1-1---------1--
44     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~allowed_in(NODE0) | ~sent(NODE0,NODE1) | ~allowed_in(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 6
num_suborbits: 1
51 (*) : 0-0-----1------
51     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
52     : 00-----1-------
52     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
53     : -00--------1---
53     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
54     : 00-------1-----
54     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
55     : -00----------1-
55     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
56     : 0-0---------1--
56     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | allowed_in(NODE0) | allowed_in(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 10 =====================
size : 12
num_suborbits: 2
57 (*) : 0--0----1------
57     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
58     : 0--0---1-------
58     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
59     : -0--0------1---
59     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
60     : -0--0----1-----
60     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
61     : --0--0-------1-
61     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
62     : --0--0------1--
62     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
63 (*) : --0--0--1------
63     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
64     : -0--0--1-------
64     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
65     : --0--0-----1---
65     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
66     : 0--0-----1-----
66     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
67     : -0--0--------1-
67     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
68     : 0--0--------1--
68     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | allowed_in(NODE2) | internal(NODE2) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 11 =====================
size : 6
num_suborbits: 1
69 (*) : ---0-0--1------
69     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
70     : ---00--1-------
70     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
71     : ----00-----1---
71     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
72     : ---00----1-----
72     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
73     : ----00-------1-
73     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
74     : ---0-0------1--
74     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 12 =====================
size : 8
num_suborbits: 2
81 (*) : --------11-1---
81     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
82     : -------1----11-
82     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
83     : -------11--1---
83     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
84     : ---------1--11-
84     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
85     : -------11----1-
85     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
86     : ---------1-11--
86     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
87 (*) : --------11---1-
87     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
88     : -------1---11--
88     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 13
quantified form : forall NODE1,NODE4,NODE0,NODE3,NODE2. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE0) | ~sent(NODE0,NODE3) | ((NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 18




=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -110-----------
92     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
93     : 1-1-0----------
93     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
94     : 11---0---------
94     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-0----1-----1-
96     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
97     : 10------1--1---
97     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
98     : -10------1--1--
98     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
99     : 01------1--1---
99     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
100     : -01------1--1--
100     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
101     : 0-1----1-----1-
101     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
114 (*) : 1-0----1---1---
114     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
115     : 10------1----1-
115     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
116     : -10-----11-----
116     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
117     : 01---------11--
117     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
118     : -01----1----1--
118     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
119     : 0-1------1---1-
119     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
300 (*) : 0-1----1---1---
300     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
301     : 01------1----1-
301     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
302     : -01-----11-----
302     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
303     : 10---------11--
303     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
304     : -10----1----1--
304     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
305     : 1-0------1---1-
305     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
342 (*) : -01----11------
342     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
343     : -10----11------
343     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
344     : 0-1------1-1---
344     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
345     : 1-0------1-1---
345     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
346     : 01----------11-
346     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
347     : 10----------11-
347     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE2 | NODE2 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 17 =====================
size : 24
num_suborbits: 4
102 (*) : --00---1-----1-
102     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
103     : -0-0----1--1---
103     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
104     : --0-0----1--1--
104     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
105     : 0---0---1--1---
105     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
106     : -0---0---1--1--
106     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
107     : 0----0-1-----1-
107     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
108 (*) : --00---1---1---
108     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
109     : -0-0----1----1-
109     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
110     : --0-0---11-----
110     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
111     : 0---0------11--
111     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
112     : -0---0-1----1--
112     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
113     : 0----0---1---1-
113     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
276 (*) : --0-0--1----1--
276     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
277     : -0---0--11-----
277     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
278     : --00-----1---1-
278     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
279     : 0----0-1---1---
279     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
280     : -0-0-------11--
280     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
281     : 0---0---1----1-
281     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
324 (*) : -0---0-11------
324     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
325     : --0-0--11------
325     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
326     : 0----0---1-1---
326     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
327     : --00-----1-1---
327     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
328     : 0---0-------11-
328     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
329     : -0-0--------11-
329     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~sent(NODE1,NODE3) | allowed_in(NODE4) | internal(NODE5) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))
qcost : 34




=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
120 (*) : ---0-1-1---1---
120     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
121     : ---01---1----1-
121     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
122     : ----01--11-----
122     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
123     : ---10------11--
123     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
124     : ----10-1----1--
124     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
125     : ---1-0---1---1-
125     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
132 (*) : ---0-1-1-----1-
132     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
133     : ---01---1--1---
133     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
134     : ----01---1--1--
134     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
135     : ---10---1--1---
135     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
136     : ----10---1--1--
136     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
137     : ---1-0-1-----1-
137     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
282 (*) : ----01-1----1--
282     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
283     : ----10--11-----
283     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
284     : ---0-1---1---1-
284     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
285     : ---1-0-1---1---
285     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
286     : ---01------11--
286     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
287     : ---10---1----1-
287     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
330 (*) : ----10-11------
330     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
331     : ----01-11------
331     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
332     : ---1-0---1-1---
332     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
333     : ---0-1---1-1---
333     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
334     : ---10-------11-
334     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
335     : ---01-------11-
335     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | internal(NODE5) | ~internal(NODE0) | ((NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4))
qcost : 34




=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
126 (*) : 1----1-1---1---
126     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
127     : 1---1---1----1-
127     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
128     : -1---1--11-----
128     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
129     : -1-1-------11--
129     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
130     : --1-1--1----1--
130     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
131     : --11-----1---1-
131     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
138 (*) : 1----1-1-----1-
138     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
139     : 1---1---1--1---
139     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
140     : -1---1---1--1--
140     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
141     : -1-1----1--1---
141     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
142     : --1-1----1--1--
142     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
143     : --11---1-----1-
143     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
318 (*) : --11---1---1---
318     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
319     : -1-1----1----1-
319     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
320     : --1-1---11-----
320     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
321     : 1---1------11--
321     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
322     : -1---1-1----1--
322     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
323     : 1----1---1---1-
323     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
336 (*) : --1-1--11------
336     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
337     : -1---1-11------
337     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
338     : --11-----1-1---
338     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
339     : 1----1---1-1---
339     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
340     : -1-1--------11-
340     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
341     : 1---1-------11-
341     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~internal(NODE1) | ~sent(NODE3,NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 34




=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
144 (*) : -----0-10---1--
144     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
145     : ----0--011-----
145     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
146     : -----0---1-0-1-
146     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
147     : ---0---1-0-1---
147     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
148     : ----0------110-
148     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
149     : ---0----1---01-
149     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
156 (*) : -----0-1-0-1---
156     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
157     : ----0---1---01-
157     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
158     : -----0-011-----
158     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
159     : ---0-------110-
159     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
160     : ----0--10---1--
160     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
161     : ---0-----1-0-1-
161     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
246 (*) : -----0-1-0---1-
246     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
247     : ----0---1--10--
247     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
248     : -----0-0-1--1--
248     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
249     : ---0----1--1-0-
249     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
250     : ----0---01--1--
250     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
251     : ---0---1---0-1-
251     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
252 (*) : ---0---1-0---1-
252     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
253     : ---0----1--10--
253     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
254     : ----0--0-1--1--
254     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
255     : ----0---1--1-0-
255     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
256     : -----0--01--1--
256     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
257     : -----0-1---0-1-
257     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   7
num_exists :   0
num_literals : 32
quantified form : forall NODE6,NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | internal(NODE4) | ((NODE0 ~= NODE3 | NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE1 ~= NODE6 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE6 | NODE1 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE0 ~= NODE6 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 39




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
150 (*) : --1----10---1--
150     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
151     : -1-----011-----
151     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
152     : --1------1-0-1-
152     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
153     : 1------1-0-1---
153     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
154     : -1---------110-
154     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
155     : 1-------1---01-
155     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
216 (*) : --1----1-0-1---
216     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
217     : -1------1---01-
217     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
218     : --1----011-----
218     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
219     : 1----------110-
219     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
220     : -1-----10---1--
220     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
221     : 1--------1-0-1-
221     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
240 (*) : --1----1-0---1-
240     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
241     : -1------1--10--
241     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
242     : --1----0-1--1--
242     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
243     : 1-------1--1-0-
243     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
244     : -1------01--1--
244     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
245     : 1------1---0-1-
245     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
270 (*) : 1------1-0---1-
270     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
271     : 1-------1--10--
271     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
272     : -1-----0-1--1--
272     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
273     : -1------1--1-0-
273     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
274     : --1-----01--1--
274     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
275     : --1----1---0-1-
275     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   7
num_exists :   0
num_literals : 32
quantified form : forall NODE6,NODE1,NODE4,NODE5,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE3 | NODE0 = NODE2 | NODE2 = NODE3))
qcost : 39




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
162 (*) : ---0-0-1-0-----
162     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
163     : ---00---1---0--
163     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
164     : ----00-0-1-----
164     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
165     : ---00------1-0-
165     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
166     : ----00--0---1--
166     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
167     : ---0-0-----0-1-
167     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | internal(NODE2) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---0---1-0--0--
168     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
169     : ---0----10--0--
169     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
170     : ----0--0-1---0-
170     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
171     : ----0--0---1-0-
171     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
172     : -----0--0--01--
172     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
173     : -----0--0--0-1-
173     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE2,NODE0) | sent(NODE1,NODE0) | internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : ----1--1-0--0--
174     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
175     : -----1--10--0--
175     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
176     : ---1---0-1---0-
176     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
177     : -----1-0---1-0-
177     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
178     : ---1----0--01--
178     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
179     : ----1---0--0-1-
179     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
180 (*) : ----10-1-0-----
180     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
181     : ----01--1---0--
181     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
182     : ---1-0-0-1-----
182     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
183     : ---0-1-----1-0-
183     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
184     : ---10---0---1--
184     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
185     : ---01------0-1-
185     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE1,NODE0) | internal(NODE2) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 26 =====================
size : 12
num_suborbits: 2
186 (*) : ----1--1-0-1---
186     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
187     : -----1--1---01-
187     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
188     : ---1---011-----
188     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
189     : -----1-----110-
189     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
190     : ---1---10---1--
190     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
191     : ----1----1-0-1-
191     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
258 (*) : ----1--1-0---1-
258     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
259     : -----1--1--10--
259     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
260     : ---1---0-1--1--
260     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
261     : -----1--1--1-0-
261     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
262     : ---1----01--1--
262     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
263     : ----1--1---0-1-
263     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE0,NODE1,NODE2,NODE3. ~sent(NODE2,NODE3) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 27 =====================
size : 6
num_suborbits: 1
192 (*) : -0-----1-0--0--
192     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : --0-----10--0--
193     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : 0------0-1---0-
194     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : --0----0---1-0-
195     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : 0-------0--01--
196     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -0------0--0-1-
197     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | sent(NODE2,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
198 (*) : -0---0-1-0-----
198     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
199     : --0-0---1---0--
199     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
200     : 0----0-0-1-----
200     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
201     : --00-------1-0-
201     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
202     : 0---0---0---1--
202     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
203     : -0-0-------0-1-
203     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | internal(NODE2) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 29 =====================
size : 12
num_suborbits: 2
204 (*) : -0-----1-0-1---
204     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
205     : --0-----1---01-
205     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
206     : 0------011-----
206     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
207     : --0--------110-
207     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
208     : 0------10---1--
208     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
209     : -0-------1-0-1-
209     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
264 (*) : -0-----1-0---1-
264     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
265     : --0-----1--10--
265     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
266     : 0------0-1--1--
266     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
267     : --0-----1--1-0-
267     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
268     : 0-------01--1--
268     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
269     : -0-----1---0-1-
269     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE0,NODE1,NODE2,NODE3. allowed_in(NODE2) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | sent(NODE2,NODE0) | ((NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1) & (NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
210 (*) : --1----100-----
210     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
211     : -1-----01---0--
211     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
212     : --1----0-1-0---
212     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
213     : 1--------0-1-0-
213     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
214     : -1------0---10-
214     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
215     : 1----------001-
215     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE2,NODE1) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 31 =====================
size : 6
num_suborbits: 1
222 (*) : --10---1-0-----
222     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
223     : -1-0----1---0--
223     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
224     : --1-0--0-1-----
224     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
225     : 1---0------1-0-
225     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
226     : -1---0--0---1--
226     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
227     : 1----0-----0-1-
227     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE0,NODE1,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 32 =====================
size : 18
num_suborbits: 3
228 (*) : --1-1--1-0-----
228     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
229     : -1---1--1---0--
229     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
230     : --11---0-1-----
230     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
231     : 1----1-----1-0-
231     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
232     : -1-1----0---1--
232     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
233     : 1---1------0-1-
233     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
288 (*) : --1-1--1---0---
288     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
289     : -1---1--1----0-
289     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
290     : --11----01-----
290     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
291     : 1----1-----10--
291     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
292     : -1-1---0----1--
292     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
293     : 1---1----0---1-
293     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
312 (*) : --11---10------
312     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
313     : -1-1---01------
313     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
314     : --1-1----1-0---
314     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
315     : 1---1----0-1---
315     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
316     : -1---1------10-
316     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
317     : 1----1------01-
317     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE1,NODE4,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE3 | NODE1 = NODE3 | NODE0 = NODE1))
qcost : 24




=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
234 (*) : -01----1-0-----
234     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
235     : -10-----1---0--
235     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
236     : 0-1----0-1-----
236     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
237     : 1-0--------1-0-
237     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
238     : 01------0---1--
238     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
239     : 10---------0-1-
239     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
294 (*) : -01----1---0---
294     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
295     : -10-----1----0-
295     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
296     : 0-1-----01-----
296     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
297     : 1-0--------10--
297     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
298     : 01-----0----1--
298     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
299     : 10-------0---1-
299     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
306 (*) : 0-1----10------
306     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
307     : 01-----01------
307     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
308     : -01------1-0---
308     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
309     : 10-------0-1---
309     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
310     : -10---------10-
310     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
311     : 1-0---------01-
311     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE1,NODE4,NODE0,NODE3,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE3,NODE4) | allowed_in(NODE3) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 24



[QRM NOTE]: Time elapsed since start: 23.404 seconds

[QRM NOTE]: Time elapsed since last: 1.712 seconds

[QRM NOTE]: Peak memory: 2373164 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]


Before reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

After removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2]


Solution : [0, 2] has cost 7.


Decide in level 1 among pending : [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1]


New level: 2
 pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 520), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, 640), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 260), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Covered at level 2 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1]


Solution : [0, 2, 1] has cost 10.


Decide in level 2 among pending : [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, 640), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 260), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Decide 10 with phase True at level 2

After decision at level 2
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]


New level: 3
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, 640), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 260), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, 576), (13, 256), (14, 128), (15, 64), (16, 129), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, 0), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 3 : {23}

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, 576), (13, 256), (14, 128), (15, 64), (16, 129), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, 0), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, 576), (13, 256), (14, 128), (15, 64), (16, 129), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 3 among pending : [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, 576), (13, 256), (14, 128), (15, 64), (16, 129), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12]


New level: 4
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, 576), (13, 256), (14, 128), (15, 64), (16, 129), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 4 among pending : [3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]


New level: 5
 pending : [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, 0), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Covered at level 5 : {14, 15}

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]


Before reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, 0), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13]


Solution : [0, 2, 1, 10, 12, 13] has cost 43.


Decide in level 5 among pending : [3, 4, 5, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Decide 5 with phase True at level 5

After decision at level 5
 pending : [3, 4, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


New level: 6
 pending : [3, 4, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [3, 4, 6, 7, 8, 9, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, 1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 6 : {6, 9, 24, 26, 27, 29}

After reduction : 
 pending  : [3, 4, 7, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [3, 4, 7, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, 1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 4, 7, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Solution : [0, 2, 1, 10, 12, 13, 5] has cost 56.


Decide in level 6 among pending : [3, 4, 7, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 7]


New level: 7
 pending : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 7]


Before reduction : 
 pending  : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 7]


Solution : [0, 2, 1, 10, 12, 13, 5, 7] has cost 69.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 5, 7]

After backtrack at level 7
 pending : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Solution : [0, 2, 1, 10, 12, 13, 5] has cost 56.


Decide in level 7 among pending : [3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 8]


New level: 8
 pending : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 8]


Before reduction : 
 pending  : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 8]


Solution : [0, 2, 1, 10, 12, 13, 5, 8] has cost 62.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 5, 8]

After backtrack at level 8
 pending : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Solution : [0, 2, 1, 10, 12, 13, 5] has cost 56.


Decide in level 8 among pending : [3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 11]


New level: 9
 pending : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 11]


Before reduction : 
 pending  : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 11]


Solution : [0, 2, 1, 10, 12, 13, 5, 11] has cost 62.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 5, 11]

After backtrack at level 9
 pending : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Solution : [0, 2, 1, 10, 12, 13, 5] has cost 56.


Decide in level 9 among pending : [3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 3]


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 3]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 3]


Solution : [0, 2, 1, 10, 12, 13, 5, 3] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 5, 3]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

Essensial at level 10 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 5, 4]


Solution : [0, 2, 1, 10, 12, 13, 5, 4] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 5, 4]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 5]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 5]

After backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 5]

After backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 5]


Before backtrack at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 5]

After backtrack at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 5]


Invert decision for 5 at level 5


New level: 6
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13]


Solution : [0, 2, 1, 10, 12, 13] has cost 43.


Decide in level 6 among pending : [4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Decide 25 with phase True at level 6

After decision at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]


New level: 7
 pending : [4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, 0), (29, 3), (30, 2), (31, 0), (32, 10), (33, 10)]

Covered at level 7 : {28, 22, 31}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, 0), (29, 3), (30, 2), (31, 0), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, -1), (32, 10), (33, 10)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]


Solution : [0, 2, 1, 10, 12, 13, 25] has cost 53.


Decide in level 7 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 6, 9, 24, 26, 27, 29, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, -1), (32, 10), (33, 10)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


New level: 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, -1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 8 : {9, 24, 26, 27, 29}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Solution : [0, 2, 1, 10, 12, 13, 25, 6] has cost 59.


Decide in level 8 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]


New level: 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 7, 8, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]


Solution : [0, 2, 1, 10, 12, 13, 25, 6, 11] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Solution : [0, 2, 1, 10, 12, 13, 25, 6] has cost 59.


Decide in level 9 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 7, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]


Solution : [0, 2, 1, 10, 12, 13, 25, 6, 8] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Solution : [0, 2, 1, 10, 12, 13, 25, 6] has cost 59.


Decide in level 10 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]


New level: 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]


Solution : [0, 2, 1, 10, 12, 13, 25, 6, 7] has cost 72.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Solution : [0, 2, 1, 10, 12, 13, 25, 6] has cost 59.


Decide in level 11 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]


Solution : [0, 2, 1, 10, 12, 13, 25, 6, 4] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]

After backtrack at level 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 3]


Solution : [0, 2, 1, 10, 12, 13, 25, 6, 3] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 6, 3]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Before backtrack at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]

After backtrack at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 9, 24, 26, 27, 29, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 9, 24, 26, 27, 29, 11]
 solution : [0, 2, 1, 10, 12, 13, 25]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 9, 24, 26, 27, 29, 11]
 solution : [0, 2, 1, 10, 12, 13, 25]

Essensial at level 8 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 8 : {24, 26, 27, 29}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Solution : [0, 2, 1, 10, 12, 13, 25, 9] has cost 59.


Decide in level 8 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]


New level: 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]


Solution : [0, 2, 1, 10, 12, 13, 25, 9, 7] has cost 72.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Solution : [0, 2, 1, 10, 12, 13, 25, 9] has cost 59.


Decide in level 9 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]


New level: 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 11, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]


Solution : [0, 2, 1, 10, 12, 13, 25, 9, 8] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Solution : [0, 2, 1, 10, 12, 13, 25, 9] has cost 59.


Decide in level 10 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]


New level: 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]


Solution : [0, 2, 1, 10, 12, 13, 25, 9, 11] has cost 65.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Solution : [0, 2, 1, 10, 12, 13, 25, 9] has cost 59.


Decide in level 11 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 4, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]


Solution : [0, 2, 1, 10, 12, 13, 25, 9, 3] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]

After backtrack at level 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 4]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

Essensial at level 12 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 4]


Solution : [0, 2, 1, 10, 12, 13, 25, 9, 4] has cost 68.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 25, 9, 4]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]


Before backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 25, 9]

After backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]


Before backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13, 25]

After backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13, 25]


Invert decision for 25 at level 6


New level: 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Covered at level 7 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13]


Solution : [0, 2, 1, 10, 12, 13] has cost 43.


Decide in level 7 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 9, 24, 26, 27, 29, 7, 22, 28, 31, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13, 9]


New level: 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 24, 26, 27, 29, 7, 22, 28, 31, 6]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 1), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : {6, 24, 26, 27, 29}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Solution : [0, 2, 1, 10, 12, 13, 9] has cost 49.


Decide in level 8 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 11, 8, 7, 22, 28, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 11]


New level: 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 11]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 7, 8, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 11]


Solution : [0, 2, 1, 10, 12, 13, 9, 11] has cost 55.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 9, 11]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Solution : [0, 2, 1, 10, 12, 13, 9] has cost 49.


Decide in level 9 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 8, 7, 22, 28, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 8]


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 8]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 7, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 8]


Solution : [0, 2, 1, 10, 12, 13, 9, 8] has cost 55.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 9, 8]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Solution : [0, 2, 1, 10, 12, 13, 9] has cost 49.


Decide in level 10 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 7, 22, 28, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 7]


New level: 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 7]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 7]


Solution : [0, 2, 1, 10, 12, 13, 9, 7] has cost 62.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 9, 7]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Solution : [0, 2, 1, 10, 12, 13, 9] has cost 49.


Decide in level 11 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 4]


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 4]


Solution : [0, 2, 1, 10, 12, 13, 9, 4] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 9, 4]

After backtrack at level 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 3, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 9, 3]


Solution : [0, 2, 1, 10, 12, 13, 9, 3] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 9, 3]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 9]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 9]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7]
 solution : [0, 2, 1, 10, 12, 13, 9]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8]
 solution : [0, 2, 1, 10, 12, 13, 9]


Before backtrack at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8]
 solution : [0, 2, 1, 10, 12, 13, 9]

After backtrack at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 24, 26, 27, 29, 6, 11]
 solution : [0, 2, 1, 10, 12, 13, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 24, 26, 27, 29, 6, 11]
 solution : [0, 2, 1, 10, 12, 13]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 24, 26, 27, 29, 6, 11]
 solution : [0, 2, 1, 10, 12, 13]

Essensial at level 8 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : {24, 26, 27, 29}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 1), (29, 0), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Solution : [0, 2, 1, 10, 12, 13, 6] has cost 49.


Decide in level 8 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 7]


New level: 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 7]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 7]


Solution : [0, 2, 1, 10, 12, 13, 6, 7] has cost 62.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 6, 7]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Solution : [0, 2, 1, 10, 12, 13, 6] has cost 49.


Decide in level 9 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 8]


New level: 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 8]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 8]


Solution : [0, 2, 1, 10, 12, 13, 6, 8] has cost 55.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 6, 8]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Solution : [0, 2, 1, 10, 12, 13, 6] has cost 49.


Decide in level 10 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 11]


New level: 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 11]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 11]


Solution : [0, 2, 1, 10, 12, 13, 6, 11] has cost 55.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 6, 11]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6]


Solution : [0, 2, 1, 10, 12, 13, 6] has cost 49.


Decide in level 11 among pending : [3, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 3]


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 4, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 3]


Solution : [0, 2, 1, 10, 12, 13, 6, 3] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 6, 3]

After backtrack at level 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 4]
 solution : [0, 2, 1, 10, 12, 13, 6]

Essensial at level 12 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 13, 6, 4]


Solution : [0, 2, 1, 10, 12, 13, 6, 4] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 13, 6, 4]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31]
 solution : [0, 2, 1, 10, 12, 13, 6]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3]
 solution : [0, 2, 1, 10, 12, 13, 6]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11]
 solution : [0, 2, 1, 10, 12, 13, 6]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 6]


Before backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8]
 solution : [0, 2, 1, 10, 12, 13, 6]

After backtrack at level 8
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13]


Before backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7]
 solution : [0, 2, 1, 10, 12, 13]

After backtrack at level 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9]
 solution : [0, 2, 1, 10, 12, 13]


Before backtrack at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9]
 solution : [0, 2, 1, 10, 12, 13]

After backtrack at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25]
 solution : [0, 2, 1, 10, 12, 13]


Before backtrack at level 5
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25]
 solution : [0, 2, 1, 10, 12, 13]

After backtrack at level 5
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 5 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 5 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 28, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 28 with phase True at level 5

After decision at level 5
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]


New level: 6
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 25, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, 128), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, 0), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 6 : {25}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, 0), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28]


Solution : [0, 2, 1, 10, 12, 28] has cost 48.


Decide in level 6 among pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 11, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


New level: 7
 pending : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 20, 21, 30, 32, 33, 22, 31, 3, 8, 6, 24, 26, 27, 29, 7, 9, 14, 15, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

Covered at level 7 : {3, 4, 7, 8, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 6, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 6, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 6, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Solution : [0, 2, 1, 10, 12, 28, 11] has cost 54.


Decide in level 7 among pending : [16, 17, 18, 19, 32, 33, 6, 24, 26, 27, 29, 9, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 6]


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 5, 9, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 6]


Solution : [0, 2, 1, 10, 12, 28, 11, 6] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 11, 6]

After backtrack at level 8
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Solution : [0, 2, 1, 10, 12, 28, 11] has cost 54.


Decide in level 8 among pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 9]


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 5, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 9]


Solution : [0, 2, 1, 10, 12, 28, 11, 9] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 11, 9]

After backtrack at level 9
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 5]
 solution : [0, 2, 1, 10, 12, 28, 11]

Essensial at level 9 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 11, 5]


Solution : [0, 2, 1, 10, 12, 28, 11, 5] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 11, 5]

After backtrack at level 9
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before backtrack at level 8
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 28, 11]

After backtrack at level 8
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 28, 11]


Before backtrack at level 7
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 28, 11]

After backtrack at level 7
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28]


Solution : [0, 2, 1, 10, 12, 28] has cost 48.


Decide in level 7 among pending : [5, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28, 5]


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 6]
 solution : [0, 2, 1, 10, 12, 28, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 8 : {6, 9, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 5]


Solution : [0, 2, 1, 10, 12, 28, 5] has cost 61.


Before backtrack at level 8
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 5]

After backtrack at level 8
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28]


Solution : [0, 2, 1, 10, 12, 28] has cost 48.


Decide in level 8 among pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 8, 7, 14, 15, 24, 26, 27, 29, 9, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, 0), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

Covered at level 9 : {3, 4, 7, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, 0), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]


Solution : [0, 2, 1, 10, 12, 28, 8] has cost 54.


Decide in level 9 among pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Decide 9 with phase True at level 9

After decision at level 9
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8, 9]


New level: 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 6, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 9]


Solution : [0, 2, 1, 10, 12, 28, 8, 9] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 8, 9]

After backtrack at level 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8, 9]


Invert decision for 9 at level 9


New level: 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6]
 solution : [0, 2, 1, 10, 12, 28, 8]

Essensial at level 10 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 8, 6]


Solution : [0, 2, 1, 10, 12, 28, 8, 6] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 8, 6]

After backtrack at level 10
 pending : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 28, 8]


Before backtrack at level 9
 pending : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 28, 8]

After backtrack at level 9
 pending : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 9 : set()

After reduction : 
 pending  : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28]


Solution : [0, 2, 1, 10, 12, 28] has cost 48.


Decide in level 9 among pending : [6, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28, 6]


New level: 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15, 9]
 solution : [0, 2, 1, 10, 12, 28, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 10 : {9, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Solution : [0, 2, 1, 10, 12, 28, 6] has cost 54.


Decide in level 10 among pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 7, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 7]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 7]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 7]


Solution : [0, 2, 1, 10, 12, 28, 6, 7] has cost 67.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 6, 7]

After backtrack at level 11
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Solution : [0, 2, 1, 10, 12, 28, 6] has cost 54.


Decide in level 11 among pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 14, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 12 : {15, 22, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]


Solution : [0, 2, 1, 10, 12, 28, 6, 14] has cost 59.


Before backtrack at level 12
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]

After backtrack at level 12
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Solution : [0, 2, 1, 10, 12, 28, 6] has cost 54.


Decide in level 12 among pending : [16, 17, 18, 19, 32, 33, 4, 20, 21, 30, 3, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 4 with phase True at level 12

After decision at level 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 4]


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 4]


Solution : [0, 2, 1, 10, 12, 28, 6, 4] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 6, 4]

After backtrack at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6, 4]


Invert decision for 4 at level 12


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]

Essensial at level 13 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 6, 3]


Solution : [0, 2, 1, 10, 12, 28, 6, 3] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 6, 3]

After backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 6]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 28, 6]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 28, 6]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 28, 6]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 24, 26, 27, 29, 9, 7]
 solution : [0, 2, 1, 10, 12, 28, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 24, 26, 27, 29, 9, 7]
 solution : [0, 2, 1, 10, 12, 28]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 24, 26, 27, 29, 9, 7]
 solution : [0, 2, 1, 10, 12, 28]

Essensial at level 10 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 10 : {24, 26, 27, 29}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 7]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 7]
 solution : [0, 2, 1, 10, 12, 28, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 7]
 solution : [0, 2, 1, 10, 12, 28, 9]


Solution : [0, 2, 1, 10, 12, 28, 9] has cost 54.


Decide in level 10 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]


New level: 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 11 : {15, 22, 31}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]


Solution : [0, 2, 1, 10, 12, 28, 9, 14] has cost 59.


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Solution : [0, 2, 1, 10, 12, 28, 9] has cost 54.


Decide in level 11 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 7, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 7]


New level: 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 7]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 7]


Solution : [0, 2, 1, 10, 12, 28, 9, 7] has cost 67.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 9, 7]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Solution : [0, 2, 1, 10, 12, 28, 9] has cost 54.


Decide in level 12 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 3]


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 4, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 3]


Solution : [0, 2, 1, 10, 12, 28, 9, 3] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 9, 3]

After backtrack at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]

Essensial at level 13 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 28, 9, 4]


Solution : [0, 2, 1, 10, 12, 28, 9, 4] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 28, 9, 4]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 28, 9]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before backtrack at level 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 28, 9]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7]
 solution : [0, 2, 1, 10, 12, 28, 9]


Before backtrack at level 10
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7]
 solution : [0, 2, 1, 10, 12, 28, 9]

After backtrack at level 10
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14]
 solution : [0, 2, 1, 10, 12, 28]


Before backtrack at level 9
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14]
 solution : [0, 2, 1, 10, 12, 28]

After backtrack at level 9
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6]
 solution : [0, 2, 1, 10, 12, 28]


Before backtrack at level 8
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6]
 solution : [0, 2, 1, 10, 12, 28]

After backtrack at level 8
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8]
 solution : [0, 2, 1, 10, 12, 28]


Before backtrack at level 7
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8]
 solution : [0, 2, 1, 10, 12, 28]

After backtrack at level 7
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5]
 solution : [0, 2, 1, 10, 12, 28]


Before backtrack at level 6
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5]
 solution : [0, 2, 1, 10, 12, 28]

After backtrack at level 6
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12, 28]


Invert decision for 28 at level 5


New level: 6
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 6 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 7, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 7 with phase True at level 6

After decision at level 6
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12, 7]


New level: 7
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12, 7]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 9, 24, 26, 27, 29, 14, 6, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 12, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, 0), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, 0), (32, 66), (33, 66)]

Covered at level 7 : {3, 4, 8, 11, 14, 15, 22, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 9, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 9, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, 0), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, 0), (32, 66), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 9, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]


Solution : [0, 2, 1, 10, 12, 7] has cost 51.


Decide in level 7 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 9, 24, 26, 27, 29, 6, 5, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 9]


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 5, 6, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 9]


Solution : [0, 2, 1, 10, 12, 7, 9] has cost 57.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 10, 12, 7, 9]

After backtrack at level 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 32), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 18), (33, 18)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]


Solution : [0, 2, 1, 10, 12, 7] has cost 51.


Decide in level 8 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 6, 5, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 32), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 18), (33, 18)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 6]


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, 32), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 5, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 6]


Solution : [0, 2, 1, 10, 12, 7, 6] has cost 57.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 7, 6]

After backtrack at level 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 5, 25]
 solution : [0, 2, 1, 10, 12, 7]

Essensial at level 9 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 7, 5]


Solution : [0, 2, 1, 10, 12, 7, 5] has cost 64.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 12, 7, 5]

After backtrack at level 9
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25]
 solution : [0, 2, 1, 10, 12, 7]


Before backtrack at level 8
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25]
 solution : [0, 2, 1, 10, 12, 7]

After backtrack at level 8
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6]
 solution : [0, 2, 1, 10, 12, 7]


Before backtrack at level 7
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6]
 solution : [0, 2, 1, 10, 12, 7]

After backtrack at level 7
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12, 7]


Invert decision for 7 at level 6


New level: 7
 pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 7 among pending : [5, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12, 5]


New level: 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 25, 6, 4, 22, 31, 15, 3, 14, 8, 11, 9]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, 1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 8 : {6, 9, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 14, 8, 11]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 14, 8, 11]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, 1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 14, 8, 11]
 solution : [0, 2, 1, 10, 12, 5]


Solution : [0, 2, 1, 10, 12, 5] has cost 51.


Decide in level 8 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 14, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 15, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : {15}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]


Solution : [0, 2, 1, 10, 12, 5, 14] has cost 56.


Before backtrack at level 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11]
 solution : [0, 2, 1, 10, 12, 5, 14]

After backtrack at level 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11, 15]
 solution : [0, 2, 1, 10, 12, 5, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]


Solution : [0, 2, 1, 10, 12, 5] has cost 51.


Decide in level 9 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 8, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5, 8]


New level: 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 11, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 8]


Solution : [0, 2, 1, 10, 12, 5, 8] has cost 57.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 12, 5, 8]

After backtrack at level 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]
 solution : [0, 2, 1, 10, 12, 5]


Solution : [0, 2, 1, 10, 12, 5] has cost 51.


Decide in level 10 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 11]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 11]


Solution : [0, 2, 1, 10, 12, 5, 11] has cost 57.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 5, 11]

After backtrack at level 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5]


Solution : [0, 2, 1, 10, 12, 5] has cost 51.


Decide in level 11 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 4, 22, 31, 3, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 4]


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 4]


Solution : [0, 2, 1, 10, 12, 5, 4] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 5, 4]

After backtrack at level 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 5]

Essensial at level 12 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 5, 3]


Solution : [0, 2, 1, 10, 12, 5, 3] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 5, 3]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 5]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 5]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 5]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 5]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 5]


Before backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 5]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8]
 solution : [0, 2, 1, 10, 12, 5]


Before backtrack at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8]
 solution : [0, 2, 1, 10, 12, 5]

After backtrack at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 8 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 25, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 25 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25]


New level: 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, 128), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25]


Solution : [0, 2, 1, 10, 12, 25] has cost 48.


Decide in level 9 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 8, 24, 26, 27, 29, 6, 9, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 11 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25, 11]


New level: 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25, 11]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 24, 26, 27, 29, 6, 9, 14]
 solution : [0, 2, 1, 10, 12, 25, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

Covered at level 10 : {3, 4, 8, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6, 9]
 solution : [0, 2, 1, 10, 12, 25, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6, 9]
 solution : [0, 2, 1, 10, 12, 25, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 2), (17, 2), (18, 2), (19, 2), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 0), (31, 0), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6, 9]
 solution : [0, 2, 1, 10, 12, 25, 11]


Solution : [0, 2, 1, 10, 12, 25, 11] has cost 54.


Decide in level 10 among pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11, 6]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 2), (18, 2), (19, 2), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, -1), (31, -1), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 9, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 6]


Solution : [0, 2, 1, 10, 12, 25, 11, 6] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 11, 6]

After backtrack at level 11
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 25, 11]

Essensial at level 11 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 17, 18, 19, 24, 26, 27, 29}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 11, 9]


Solution : [0, 2, 1, 10, 12, 25, 11, 9] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 11, 9]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 25, 11]


Before backtrack at level 10
 pending : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 25, 11]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25, 11]


Invert decision for 11 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25]


Solution : [0, 2, 1, 10, 12, 25] has cost 48.


Decide in level 10 among pending : [9, 16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25, 9]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 24, 26, 27, 29, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14, 6]
 solution : [0, 2, 1, 10, 12, 25, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 16), (17, 16), (18, 13), (19, 13), (20, 2), (21, 2), (22, 1), (23, -1), (24, 8), (25, -1), (26, 3), (27, 8), (28, -1), (29, 3), (30, 2), (31, 1), (32, 10), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : {6, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]


Solution : [0, 2, 1, 10, 12, 25, 9] has cost 54.


Decide in level 11 among pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9, 8]


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 8]


Solution : [0, 2, 1, 10, 12, 25, 9, 8] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 9, 8]

After backtrack at level 12
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]


Solution : [0, 2, 1, 10, 12, 25, 9] has cost 54.


Decide in level 12 among pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 13 : {15, 22, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]


Solution : [0, 2, 1, 10, 12, 25, 9, 14] has cost 59.


Before backtrack at level 13
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]

After backtrack at level 13
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]


Solution : [0, 2, 1, 10, 12, 25, 9] has cost 54.


Decide in level 13 among pending : [16, 17, 18, 19, 32, 33, 3, 20, 21, 30, 4, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9, 3]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 4, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 3]


Solution : [0, 2, 1, 10, 12, 25, 9, 3] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 9, 3]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]

Essensial at level 14 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 9, 4]


Solution : [0, 2, 1, 10, 12, 25, 9, 4] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 9, 4]

After backtrack at level 14
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 9]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 25, 9]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]


Before backtrack at level 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14]
 solution : [0, 2, 1, 10, 12, 25, 9]

After backtrack at level 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 24, 26, 27, 29, 6, 8]
 solution : [0, 2, 1, 10, 12, 25, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 24, 26, 27, 29, 6, 8]
 solution : [0, 2, 1, 10, 12, 25]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 24, 26, 27, 29, 6, 8]
 solution : [0, 2, 1, 10, 12, 25]

Essensial at level 11 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : {24, 26, 27, 29}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 8]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 8]
 solution : [0, 2, 1, 10, 12, 25, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 8]
 solution : [0, 2, 1, 10, 12, 25, 6]


Solution : [0, 2, 1, 10, 12, 25, 6] has cost 54.


Decide in level 11 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]


New level: 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 12 : {15, 22, 31}

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]


Solution : [0, 2, 1, 10, 12, 25, 6, 14] has cost 59.


Before backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Solution : [0, 2, 1, 10, 12, 25, 6] has cost 54.


Decide in level 12 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 8, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 8]


New level: 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 8]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 4, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 8]


Solution : [0, 2, 1, 10, 12, 25, 6, 8] has cost 60.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 6, 8]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Solution : [0, 2, 1, 10, 12, 25, 6] has cost 54.


Decide in level 13 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 4]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 4), (17, 4), (18, 4), (19, 4), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 3, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 4]


Solution : [0, 2, 1, 10, 12, 25, 6, 4] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 6, 4]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 25, 6, 3]


Solution : [0, 2, 1, 10, 12, 25, 6, 3] has cost 63.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 25, 6, 3]

After backtrack at level 14
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 25, 6]

After backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 25, 6]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8]
 solution : [0, 2, 1, 10, 12, 25, 6]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8]
 solution : [0, 2, 1, 10, 12, 25, 6]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14]
 solution : [0, 2, 1, 10, 12, 25]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14]
 solution : [0, 2, 1, 10, 12, 25]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9]
 solution : [0, 2, 1, 10, 12, 25]


Before backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9]
 solution : [0, 2, 1, 10, 12, 25]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12, 25]


Invert decision for 25 at level 8


New level: 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 9 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 8, 6, 24, 26, 27, 29, 14, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12, 8]


New level: 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12, 8]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 6, 24, 26, 27, 29, 14, 9, 11]
 solution : [0, 2, 1, 10, 12, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, 0), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, 0), (32, 66), (33, 66)]

Covered at level 10 : {3, 4, 11, 14, 15, 22, 31}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 6, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 6, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, 0), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, 0), (32, 66), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 6, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8]


Solution : [0, 2, 1, 10, 12, 8] has cost 44.


Decide in level 10 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 6, 24, 26, 27, 29, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8, 6]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, 6), (18, 6), (19, 6), (20, 2), (21, 2), (22, -1), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 2), (31, -1), (32, 66), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 9, 16, 17, 18, 19, 20, 21, 24, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 6]


Solution : [0, 2, 1, 10, 12, 8, 6] has cost 50.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 8, 6]

After backtrack at level 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 9]
 solution : [0, 2, 1, 10, 12, 8]

Essensial at level 11 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 17, 18, 19, 20, 21, 24, 26, 27, 29, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 8, 9]


Solution : [0, 2, 1, 10, 12, 8, 9] has cost 50.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 12, 8, 9]

After backtrack at level 11
 pending : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 8]


Before backtrack at level 10
 pending : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29]
 solution : [0, 2, 1, 10, 12, 8]

After backtrack at level 10
 pending : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Covered at level 10 : set()

After reduction : 
 pending  : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12]


Solution : [0, 2, 1, 10, 12] has cost 38.


Decide in level 10 among pending : [9, 16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

Decide 9 with phase True at level 10

After decision at level 10
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12, 9]


New level: 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 24, 26, 27, 29, 3, 22, 31, 15, 4, 14, 11, 6]
 solution : [0, 2, 1, 10, 12, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 21), (17, 21), (18, 21), (19, 21), (20, 8), (21, 8), (22, 4), (23, -1), (24, 32), (25, -1), (26, 9), (27, 32), (28, -1), (29, 9), (30, 8), (31, 4), (32, 74), (33, 74)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 11 : {6, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 14, 11]
 solution : [0, 2, 1, 10, 12, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 14, 11]
 solution : [0, 2, 1, 10, 12, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 14, 11]
 solution : [0, 2, 1, 10, 12, 9]


Solution : [0, 2, 1, 10, 12, 9] has cost 44.


Decide in level 11 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 14, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]


New level: 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : {15}

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]


Solution : [0, 2, 1, 10, 12, 9, 14] has cost 49.


Decide in level 12 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 11]


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 11]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 11]


Solution : [0, 2, 1, 10, 12, 9, 14, 11] has cost 55.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 14, 11]

After backtrack at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14]


Solution : [0, 2, 1, 10, 12, 9, 14] has cost 49.


Decide in level 13 among pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 3, 22, 31, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 3]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 4, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 3]


Solution : [0, 2, 1, 10, 12, 9, 14, 3] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 14, 3]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 9, 14]

Essensial at level 14 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 14, 4]


Solution : [0, 2, 1, 10, 12, 9, 14, 4] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 14, 4]

After backtrack at level 14
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31]
 solution : [0, 2, 1, 10, 12, 9, 14]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3]
 solution : [0, 2, 1, 10, 12, 9, 14]


Before backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3]
 solution : [0, 2, 1, 10, 12, 9, 14]

After backtrack at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 12, 9, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 12, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 12, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 12, 9]


Solution : [0, 2, 1, 10, 12, 9] has cost 44.


Decide in level 12 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 11]


New level: 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 11]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 4, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 11]


Solution : [0, 2, 1, 10, 12, 9, 11] has cost 50.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 11]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9]


Solution : [0, 2, 1, 10, 12, 9] has cost 44.


Decide in level 13 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 4]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 3, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 4]


Solution : [0, 2, 1, 10, 12, 9, 4] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 4]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 12, 9]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 9, 3]


Solution : [0, 2, 1, 10, 12, 9, 3] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 9, 3]

After backtrack at level 14
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 9]


Before backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 9]

After backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 9]


Before backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 9]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 9]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11]
 solution : [0, 2, 1, 10, 12, 9]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 24, 26, 27, 29, 6, 14]
 solution : [0, 2, 1, 10, 12, 9]


Invert decision for 9 at level 10


New level: 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 24, 26, 27, 29, 6, 14]
 solution : [0, 2, 1, 10, 12]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 24, 26, 27, 29, 6, 14]
 solution : [0, 2, 1, 10, 12]

Essensial at level 11 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 11 : {24, 26, 27, 29}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 14]
 solution : [0, 2, 1, 10, 12, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 14]
 solution : [0, 2, 1, 10, 12, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 14]
 solution : [0, 2, 1, 10, 12, 6]


Solution : [0, 2, 1, 10, 12, 6] has cost 44.


Decide in level 11 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 11, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6, 11]


New level: 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6, 11]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 11]


Solution : [0, 2, 1, 10, 12, 6, 11] has cost 50.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 12, 6, 11]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6]


Solution : [0, 2, 1, 10, 12, 6] has cost 44.


Decide in level 12 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 14 with phase True at level 12

After decision at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]


New level: 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : {15}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]


Solution : [0, 2, 1, 10, 12, 6, 14] has cost 49.


Decide in level 13 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14, 3]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14, 3]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 4, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 3]


Solution : [0, 2, 1, 10, 12, 6, 14, 3] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 6, 14, 3]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4]
 solution : [0, 2, 1, 10, 12, 6, 14]

Essensial at level 14 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 14, 4]


Solution : [0, 2, 1, 10, 12, 6, 14, 4] has cost 58.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 6, 14, 4]

After backtrack at level 14
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31]
 solution : [0, 2, 1, 10, 12, 6, 14]


Before backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31]
 solution : [0, 2, 1, 10, 12, 6, 14]

After backtrack at level 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6, 14]


Invert decision for 14 at level 12


New level: 13
 pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6]


Before reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6]


Solution : [0, 2, 1, 10, 12, 6] has cost 44.


Decide in level 13 among pending : [4, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6, 4]


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6, 4]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 5), (17, 5), (18, 5), (19, 5), (20, 2), (21, 2), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 4), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 3, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 4]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 4]


Solution : [0, 2, 1, 10, 12, 6, 4] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 6, 4]

After backtrack at level 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6]


Before reduction : 
 pending  : [16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 3]
 solution : [0, 2, 1, 10, 12, 6]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 3]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 12, 6, 3]


Solution : [0, 2, 1, 10, 12, 6, 3] has cost 53.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 12, 6, 3]

After backtrack at level 14
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 6]


Before backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 12, 6]

After backtrack at level 13
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 6]


Before backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4]
 solution : [0, 2, 1, 10, 12, 6]

After backtrack at level 12
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6]


Before backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14]
 solution : [0, 2, 1, 10, 12, 6]

After backtrack at level 11
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 7
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 7
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 6
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 6
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 5
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 5
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 12]


Before backtrack at level 4
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 12]

After backtrack at level 4
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28, 13]
 solution : [0, 2, 1, 10, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28, 13]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28, 13]
 solution : [0, 2, 1, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28, 13]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 4 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]


New level: 5
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 15, 4, 14, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, 256), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, 0), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 5 : {14, 15}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, 0), (15, 0), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 5 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 26, 27, 29, 11, 9, 8, 25, 5, 7, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 26 with phase True at level 5

After decision at level 5
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]


New level: 6
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 29, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, 0), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 6 : {29}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, 0), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26]


Solution : [0, 2, 1, 10, 13, 26] has cost 41.


Decide in level 6 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 6, 24, 27, 11, 9, 8, 25, 5, 7, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


New level: 7
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 24, 27, 11, 9, 8, 25, 5, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 7 : {24, 9, 27, 5}

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 11, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 11, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 11, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 7 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 11, 8, 25, 7, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 7

After decision at level 7
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 11]


New level: 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 11]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 3, 4, 7, 8, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 11]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 11]


Solution : [0, 2, 1, 10, 13, 26, 6, 11] has cost 53.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 6, 11]

After backtrack at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 11]


Invert decision for 11 at level 7


New level: 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 8 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 8, 25, 7, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 8]


New level: 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 8]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 7, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 8]


Solution : [0, 2, 1, 10, 13, 26, 6, 8] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 6, 8]

After backtrack at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 9 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 7, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 7]


New level: 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 7]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 6, 7]


Solution : [0, 2, 1, 10, 13, 26, 6, 7] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 6, 7]

After backtrack at level 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 10 among pending : [3, 16, 17, 18, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 18 with phase True at level 10

After decision at level 10
 pending : [3, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]


New level: 11
 pending : [3, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]


Before reduction : 
 pending  : [3, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 4, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 17, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]


Solution : [0, 2, 1, 10, 13, 26, 6, 18] has cost 81.


Before backtrack at level 11
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]

After backtrack at level 11
 pending : [3, 4, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 18]


Invert decision for 18 at level 10


New level: 11
 pending : [3, 4, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 4, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 11 among pending : [3, 4, 16, 17, 19, 32, 33, 20, 21, 30, 22, 31, 25, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 19 with phase True at level 11

After decision at level 11
 pending : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]


New level: 12
 pending : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]


Before reduction : 
 pending  : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]


Solution : [0, 2, 1, 10, 13, 26, 6, 19] has cost 81.


Before backtrack at level 12
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]

After backtrack at level 12
 pending : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 19]


Invert decision for 19 at level 11


New level: 12
 pending : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Solution : [0, 2, 1, 10, 13, 26, 6] has cost 47.


Decide in level 12 among pending : [3, 4, 16, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 16 with phase True at level 12

After decision at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]


Solution : [0, 2, 1, 10, 13, 26, 6, 16] has cost 81.


Before backtrack at level 13
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]

After backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6, 16]


Invert decision for 16 at level 12


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

Essensial at level 13 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 17]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 17]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 17]


Solution : [0, 2, 1, 10, 13, 26, 6, 17] has cost 81.


Before backtrack at level 13
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 6, 17]

After backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 8
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 8
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8]
 solution : [0, 2, 1, 10, 13, 26, 6]


Before backtrack at level 7
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8]
 solution : [0, 2, 1, 10, 13, 26, 6]

After backtrack at level 7
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 26, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 26]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 26]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 26]


Solution : [0, 2, 1, 10, 13, 26] has cost 41.


Decide in level 7 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 9, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


New level: 8
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : {24, 27, 5}

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 8 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 7]


New level: 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 7]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 7]


Solution : [0, 2, 1, 10, 13, 26, 9, 7] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 9, 7]

After backtrack at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 9 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 8]


New level: 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 8]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 8]


Solution : [0, 2, 1, 10, 13, 26, 9, 8] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 9, 8]

After backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 10 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 11]


New level: 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 11]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 26, 9, 11]


Solution : [0, 2, 1, 10, 13, 26, 9, 11] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 13, 26, 9, 11]

After backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 11 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 19 with phase True at level 11

After decision at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]


New level: 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 18, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]


Solution : [0, 2, 1, 10, 13, 26, 9, 19] has cost 81.


Before backtrack at level 12
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]

After backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9, 19]


Invert decision for 19 at level 11


New level: 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 12 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 18 with phase True at level 12

After decision at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]


Solution : [0, 2, 1, 10, 13, 26, 9, 18] has cost 81.


Before backtrack at level 13
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]

After backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 18]


Invert decision for 18 at level 12


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9]


Solution : [0, 2, 1, 10, 13, 26, 9] has cost 47.


Decide in level 13 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 17 with phase True at level 13

After decision at level 13
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]


New level: 14
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]


Solution : [0, 2, 1, 10, 13, 26, 9, 17] has cost 81.


Before backtrack at level 14
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]

After backtrack at level 14
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9, 17]


Invert decision for 17 at level 13


New level: 14
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 26, 9]

Essensial at level 14 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 16]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 16]


Solution : [0, 2, 1, 10, 13, 26, 9, 16] has cost 81.


Before backtrack at level 14
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 26, 9, 16]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 26, 9]


Before backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 26, 9]

After backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 26, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 26]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 26]

Essensial at level 8 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : {24, 27}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 26, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 26, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 26, 5]


Solution : [0, 2, 1, 10, 13, 26, 5] has cost 54.


Before backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 26, 5]

After backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27]
 solution : [0, 2, 1, 10, 13, 26]


Before backtrack at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27]
 solution : [0, 2, 1, 10, 13, 26]

After backtrack at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9]
 solution : [0, 2, 1, 10, 13, 26]


Before backtrack at level 6
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9]
 solution : [0, 2, 1, 10, 13, 26]

After backtrack at level 6
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 29, 6]
 solution : [0, 2, 1, 10, 13, 26]


Invert decision for 26 at level 5


New level: 6
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 29, 6]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 29, 6]
 solution : [0, 2, 1, 10, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 29, 6]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 6 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 29, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 29 with phase True at level 6

After decision at level 6
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]


New level: 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, 192), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]


Solution : [0, 2, 1, 10, 13, 29] has cost 41.


Decide in level 7 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 5, 24, 27, 9, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29, 5]


New level: 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : {24, 9, 27, 6}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 5]


Solution : [0, 2, 1, 10, 13, 29, 5] has cost 54.


Before backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 5]

After backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]
 solution : [0, 2, 1, 10, 13, 29]


Solution : [0, 2, 1, 10, 13, 29] has cost 41.


Decide in level 8 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 9, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Decide 9 with phase True at level 8

After decision at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 6]
 solution : [0, 2, 1, 10, 13, 29, 9]


New level: 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 6]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7, 24, 27, 6]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 105), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : {24, 27, 6}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 9 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 9

After decision at level 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 11]


New level: 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 11]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 7, 8, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 11]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 11]


Solution : [0, 2, 1, 10, 13, 29, 9, 11] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 9, 11]

After backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 11]


Invert decision for 11 at level 9


New level: 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 10 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 8]


New level: 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 8]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 7, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 8]


Solution : [0, 2, 1, 10, 13, 29, 9, 8] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 9, 8]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 11 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 7]


New level: 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 9, 7]


Solution : [0, 2, 1, 10, 13, 29, 9, 7] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 9, 7]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 12 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 18 with phase True at level 12

After decision at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]


New level: 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]


Solution : [0, 2, 1, 10, 13, 29, 9, 18] has cost 81.


Before backtrack at level 13
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9, 18]


Invert decision for 18 at level 12


New level: 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 13 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 19 with phase True at level 13

After decision at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]


New level: 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]


Solution : [0, 2, 1, 10, 13, 29, 9, 19] has cost 81.


Before backtrack at level 14
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 19]


Invert decision for 19 at level 13


New level: 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9]


Solution : [0, 2, 1, 10, 13, 29, 9] has cost 47.


Decide in level 14 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 16 with phase True at level 14

After decision at level 14
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]


Solution : [0, 2, 1, 10, 13, 29, 9, 16] has cost 81.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]

After backtrack at level 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9, 16]


Invert decision for 16 at level 14


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 9]

Essensial at level 15 : {17}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 17]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 17]


Solution : [0, 2, 1, 10, 13, 29, 9, 17] has cost 81.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 9, 17]

After backtrack at level 15
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 14
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 14
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8]
 solution : [0, 2, 1, 10, 13, 29, 9]


Before backtrack at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8]
 solution : [0, 2, 1, 10, 13, 29, 9]

After backtrack at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 6, 11]
 solution : [0, 2, 1, 10, 13, 29, 9]


Invert decision for 9 at level 8


New level: 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 6, 11]
 solution : [0, 2, 1, 10, 13, 29]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 24, 27, 6, 11]
 solution : [0, 2, 1, 10, 13, 29]

Essensial at level 9 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : {24, 27}

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 9 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 7]


New level: 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 7]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 4, 8, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 7]


Solution : [0, 2, 1, 10, 13, 29, 6, 7] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 6, 7]

After backtrack at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 10 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 8]


New level: 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 8]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 4, 11, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 8]


Solution : [0, 2, 1, 10, 13, 29, 6, 8] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 6, 8]

After backtrack at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 11 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 11]


New level: 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 11]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 16, 17, 18, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 29, 6, 11]


Solution : [0, 2, 1, 10, 13, 29, 6, 11] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 13, 29, 6, 11]

After backtrack at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 12 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 19, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 19 with phase True at level 12

After decision at level 12
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, 26), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 17, 18, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]


Solution : [0, 2, 1, 10, 13, 29, 6, 19] has cost 81.


Before backtrack at level 13
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]

After backtrack at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6, 19]


Invert decision for 19 at level 12


New level: 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 13 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 18 with phase True at level 13

After decision at level 13
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]


New level: 14
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, 26), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 17, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]


Solution : [0, 2, 1, 10, 13, 29, 6, 18] has cost 81.


Before backtrack at level 14
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]

After backtrack at level 14
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 18]


Invert decision for 18 at level 13


New level: 14
 pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6]


Solution : [0, 2, 1, 10, 13, 29, 6] has cost 47.


Decide in level 14 among pending : [3, 4, 17, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, 19), (18, -1), (19, -1), (20, 11), (21, 11), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]


Solution : [0, 2, 1, 10, 13, 29, 6, 17] has cost 81.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]

After backtrack at level 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 22, 31, 25, 28, 16]
 solution : [0, 2, 1, 10, 13, 29, 6]

Essensial at level 15 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 16]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 16]


Solution : [0, 2, 1, 10, 13, 29, 6, 16] has cost 81.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 29, 6, 16]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 29, 6]


Before backtrack at level 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 29, 6]

After backtrack at level 9
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7]
 solution : [0, 2, 1, 10, 13, 29]


Before backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7]
 solution : [0, 2, 1, 10, 13, 29]

After backtrack at level 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9]
 solution : [0, 2, 1, 10, 13, 29]


Before backtrack at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9]
 solution : [0, 2, 1, 10, 13, 29]

After backtrack at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 29]


Invert decision for 29 at level 6


New level: 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 7 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 7 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 17, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 17 with phase True at level 7

After decision at level 7
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]


New level: 8
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 22, 31, 25, 28, 18, 19, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, 129), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]


Before reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]


Solution : [0, 2, 1, 10, 13, 17] has cost 59.


Before backtrack at level 8
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 17]

After backtrack at level 8
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 18, 19]
 solution : [0, 2, 1, 10, 13, 17]


Invert decision for 17 at level 7


New level: 8
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 18, 19]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 18, 19]
 solution : [0, 2, 1, 10, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 8 : set()

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 18, 19]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 8 among pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 18, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 18]


New level: 9
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 18]


Before reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, 129), (19, 129), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 16, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 18]


Before reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 18]


Solution : [0, 2, 1, 10, 13, 18] has cost 59.


Before backtrack at level 9
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5]
 solution : [0, 2, 1, 10, 13, 18]

After backtrack at level 9
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, 128), (6, 128), (7, 1), (8, 1), (9, 128), (10, -1), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 9 among pending : [3, 4, 25, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 25 with phase True at level 9

After decision at level 9
 pending : [3, 4, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 25]


New level: 10
 pending : [3, 4, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 25]


Before reduction : 
 pending  : [3, 4, 28, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, 73), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, 0), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

Covered at level 10 : {28, 22, 31}

After reduction : 
 pending  : [3, 4, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25]


Before reduction : 
 pending  : [3, 4, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, 73), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, 0), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25]


Solution : [0, 2, 1, 10, 13, 25] has cost 35.


Decide in level 10 among pending : [3, 4, 11, 8, 6, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [3, 4, 11, 8, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


New level: 11
 pending : [3, 4, 11, 8, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 11, 8, 24, 27, 7, 9, 5, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : {24, 9, 27, 5}

After reduction : 
 pending  : [3, 4, 11, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 11, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 11, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Solution : [0, 2, 1, 10, 13, 25, 6] has cost 41.


Decide in level 11 among pending : [3, 4, 11, 8, 7, 16, 32, 33, 20, 21, 30, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 11]


New level: 12
 pending : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 11]


Before reduction : 
 pending  : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 4, 7, 8, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 11]


Solution : [0, 2, 1, 10, 13, 25, 6, 11] has cost 47.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 6, 11]

After backtrack at level 12
 pending : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Solution : [0, 2, 1, 10, 13, 25, 6] has cost 41.


Decide in level 12 among pending : [3, 4, 8, 7, 16, 32, 33, 20, 21, 30, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 8]


New level: 13
 pending : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 8]


Before reduction : 
 pending  : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 4, 7, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 8]


Solution : [0, 2, 1, 10, 13, 25, 6, 8] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 6, 8]

After backtrack at level 13
 pending : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Solution : [0, 2, 1, 10, 13, 25, 6] has cost 41.


Decide in level 13 among pending : [3, 4, 7, 16, 32, 33, 20, 21, 30, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 13

After decision at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 7]


New level: 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 3, 4, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 6, 7]


Solution : [0, 2, 1, 10, 13, 25, 6, 7] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 6, 7]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 7]


Invert decision for 7 at level 13


New level: 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Solution : [0, 2, 1, 10, 13, 25, 6] has cost 41.


Decide in level 14 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 16 with phase True at level 14

After decision at level 14
 pending : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 19, 20, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]


Solution : [0, 2, 1, 10, 13, 25, 6, 16] has cost 75.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]

After backtrack at level 15
 pending : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6, 16]


Invert decision for 16 at level 14


New level: 15
 pending : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 6]

Essensial at level 15 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 20, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 19]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 19]


Solution : [0, 2, 1, 10, 13, 25, 6, 19] has cost 75.


Before backtrack at level 15
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 6, 19]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 20, 21, 30]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30]
 solution : [0, 2, 1, 10, 13, 25, 6]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before backtrack at level 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 6]

After backtrack at level 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before backtrack at level 12
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7]
 solution : [0, 2, 1, 10, 13, 25, 6]

After backtrack at level 12
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 25, 6]


Before backtrack at level 11
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 25, 6]

After backtrack at level 11
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 25, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 25]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 17), (21, 17), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 9, 5, 11]
 solution : [0, 2, 1, 10, 13, 25]


Solution : [0, 2, 1, 10, 13, 25] has cost 35.


Decide in level 11 among pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 9, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 17), (21, 17), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


New level: 12
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 17), (21, 17), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : {24, 27, 5}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Solution : [0, 2, 1, 10, 13, 25, 9] has cost 41.


Decide in level 12 among pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 7]


New level: 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 7]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 3, 4, 8, 11, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 7]


Solution : [0, 2, 1, 10, 13, 25, 9, 7] has cost 54.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 9, 7]

After backtrack at level 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Solution : [0, 2, 1, 10, 13, 25, 9] has cost 41.


Decide in level 13 among pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 8]


New level: 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 8]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 3, 4, 11, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 8]


Solution : [0, 2, 1, 10, 13, 25, 9, 8] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 9, 8]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Solution : [0, 2, 1, 10, 13, 25, 9] has cost 41.


Decide in level 14 among pending : [3, 4, 19, 32, 33, 20, 21, 30, 16, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 11]


New level: 15
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 11]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 16, 19, 20, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 25, 9, 11]


Solution : [0, 2, 1, 10, 13, 25, 9, 11] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 13, 25, 9, 11]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9]


Solution : [0, 2, 1, 10, 13, 25, 9] has cost 41.


Decide in level 15 among pending : [3, 4, 19, 32, 33, 20, 21, 30, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 19 with phase True at level 15

After decision at level 15
 pending : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]


New level: 16
 pending : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 16, 20, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]


Solution : [0, 2, 1, 10, 13, 25, 9, 19] has cost 75.


Before backtrack at level 16
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]

After backtrack at level 16
 pending : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9, 19]


Invert decision for 19 at level 15


New level: 16
 pending : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 20, 21, 30, 16]
 solution : [0, 2, 1, 10, 13, 25, 9]

Essensial at level 16 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 20, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 16]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 16]


Solution : [0, 2, 1, 10, 13, 25, 9, 16] has cost 75.


Before backtrack at level 16
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 25, 9, 16]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 20, 21, 30]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before backtrack at level 15
 pending : [3, 4, 16, 32, 33, 20, 21, 30]
 solution : [0, 2, 1, 10, 13, 25, 9]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19]
 solution : [0, 2, 1, 10, 13, 25, 9]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11]
 solution : [0, 2, 1, 10, 13, 25, 9]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 25, 9]


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 25, 9]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 25, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 25]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 24, 27, 5, 7]
 solution : [0, 2, 1, 10, 13, 25]

Essensial at level 12 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : {24, 27}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 25, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 25, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 25, 5]


Solution : [0, 2, 1, 10, 13, 25, 5] has cost 48.


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 25, 5]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27]
 solution : [0, 2, 1, 10, 13, 25]


Before backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27]
 solution : [0, 2, 1, 10, 13, 25]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9]
 solution : [0, 2, 1, 10, 13, 25]


Before backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9]
 solution : [0, 2, 1, 10, 13, 25]

After backtrack at level 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 25]


Invert decision for 25 at level 9


New level: 10
 pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 10 among pending : [3, 4, 16, 32, 33, 20, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 20 with phase True at level 10

After decision at level 10
 pending : [3, 4, 16, 32, 33, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]


New level: 11
 pending : [3, 4, 16, 32, 33, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 21, 30, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, 0), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 32), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

Covered at level 11 : {21, 30}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, 0), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 32), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 32), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]


Solution : [0, 2, 1, 10, 13, 20] has cost 64.


Before backtrack at level 11
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6]
 solution : [0, 2, 1, 10, 13, 20]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13, 20]


Invert decision for 20 at level 10


New level: 11
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 32), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 11 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 11 among pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 5, 24, 27, 9, 28, 22, 31, 6, 21, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]


New level: 12
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 24, 27, 9, 28, 22, 31, 6, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, 104), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 12 : {24, 9, 27, 6}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 0), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, 104), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, 104), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 21, 30]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 12 among pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 21, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, 104), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 21 with phase True at level 12

After decision at level 12
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5, 21]


New level: 13
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5, 21]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, 104), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

Covered at level 13 : {30}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 21]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 21]


Solution : [0, 2, 1, 10, 13, 5, 21] has cost 77.


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 21]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5, 21]


Invert decision for 21 at level 12


New level: 13
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 13 among pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 13

After decision at level 13
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]


New level: 14
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]


Solution : [0, 2, 1, 10, 13, 5, 30] has cost 48.


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 30]


Invert decision for 30 at level 13


New level: 14
 pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 14 among pending : [3, 4, 16, 32, 33, 19, 11, 8, 7, 28, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 11]


New level: 15
 pending : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 11]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 7, 8, 16, 19, 22, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 11]


Solution : [0, 2, 1, 10, 13, 5, 11] has cost 44.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 13, 5, 11]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 15 among pending : [3, 4, 16, 32, 33, 19, 8, 7, 28, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 8]


New level: 16
 pending : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 8]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 7, 16, 19, 22, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 8]


Solution : [0, 2, 1, 10, 13, 5, 8] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 13, 5, 8]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 16 among pending : [3, 4, 16, 32, 33, 19, 7, 28, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 7]


New level: 17
 pending : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 16, 19, 22, 28, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 5, 7]


Solution : [0, 2, 1, 10, 13, 5, 7] has cost 51.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 5, 7]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Solution : [0, 2, 1, 10, 13, 5] has cost 38.


Decide in level 17 among pending : [3, 4, 16, 32, 33, 19, 28, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 16 with phase True at level 17

After decision at level 17
 pending : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 16]


New level: 18
 pending : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 16]


Before reduction : 
 pending  : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 16]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 8), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 19, 22, 28, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 16]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 16]


Solution : [0, 2, 1, 10, 13, 5, 16] has cost 72.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 16]

After backtrack at level 18
 pending : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5, 16]


Invert decision for 16 at level 17


New level: 18
 pending : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before reduction : 
 pending  : [3, 4, 32, 33, 19, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

Essensial at level 18 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 22, 28, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 19]


Solution : [0, 2, 1, 10, 13, 5, 19] has cost 72.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 5, 19]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 17
 pending : [3, 4, 19, 32, 33, 28, 22, 31]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 13
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 13
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30]
 solution : [0, 2, 1, 10, 13, 5]


Before backtrack at level 12
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30]
 solution : [0, 2, 1, 10, 13, 5]

After backtrack at level 12
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 12 among pending : [3, 4, 19, 32, 33, 28, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 28 with phase True at level 12

After decision at level 12
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]


New level: 13
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, -1), (21, 73), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

Covered at level 13 : {22, 31}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, -1), (21, 73), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, -1), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]
 solution : [0, 2, 1, 10, 13, 28]


Solution : [0, 2, 1, 10, 13, 28] has cost 35.


Decide in level 13 among pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 9, 6, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, -1), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 6, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


New level: 14
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 6, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 24, 27, 6, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, -1), (21, 73), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 73), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : {24, 27, 6}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, 0), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 73), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Solution : [0, 2, 1, 10, 13, 28, 9] has cost 41.


Decide in level 14 among pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 30, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 7]


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 7]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 8, 11, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 7]


Solution : [0, 2, 1, 10, 13, 28, 9, 7] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 9, 7]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Solution : [0, 2, 1, 10, 13, 28, 9] has cost 41.


Decide in level 15 among pending : [3, 4, 19, 32, 33, 16, 8, 11, 30, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 8]


New level: 16
 pending : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 8]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 11, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 8]


Solution : [0, 2, 1, 10, 13, 28, 9, 8] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 9, 8]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Solution : [0, 2, 1, 10, 13, 28, 9] has cost 41.


Decide in level 16 among pending : [3, 4, 19, 32, 33, 16, 11, 30, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 11]


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 11]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 9, 11]


Solution : [0, 2, 1, 10, 13, 28, 9, 11] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 9, 11]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Solution : [0, 2, 1, 10, 13, 28, 9] has cost 41.


Decide in level 17 among pending : [3, 4, 19, 32, 33, 16, 30, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 19 with phase True at level 17

After decision at level 17
 pending : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]


New level: 18
 pending : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 16, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]


Solution : [0, 2, 1, 10, 13, 28, 9, 19] has cost 75.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]

After backtrack at level 18
 pending : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9, 19]


Invert decision for 19 at level 17


New level: 18
 pending : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

Essensial at level 18 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 16]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 16]


Solution : [0, 2, 1, 10, 13, 28, 9, 16] has cost 75.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 9, 16]

After backtrack at level 18
 pending : [3, 4, 16, 32, 33, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before backtrack at level 17
 pending : [3, 4, 16, 32, 33, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 9]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before backtrack at level 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 9]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before backtrack at level 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11]
 solution : [0, 2, 1, 10, 13, 28, 9]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 28, 9]


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 28, 9]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 24, 27, 6, 7]
 solution : [0, 2, 1, 10, 13, 28, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 24, 27, 6, 7]
 solution : [0, 2, 1, 10, 13, 28]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 24, 27, 6, 7]
 solution : [0, 2, 1, 10, 13, 28]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : {24, 27}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Solution : [0, 2, 1, 10, 13, 28, 6] has cost 41.


Decide in level 14 among pending : [3, 4, 16, 32, 33, 30, 21, 19, 11, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 11 with phase True at level 14

After decision at level 14
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 11]


New level: 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 11]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 7, 8, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 11]


Solution : [0, 2, 1, 10, 13, 28, 6, 11] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 6, 11]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 11]


Invert decision for 11 at level 14


New level: 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Solution : [0, 2, 1, 10, 13, 28, 6] has cost 41.


Decide in level 15 among pending : [3, 4, 16, 32, 33, 30, 21, 19, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 8]


New level: 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 8]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 7, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 8]


Solution : [0, 2, 1, 10, 13, 28, 6, 8] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 6, 8]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Solution : [0, 2, 1, 10, 13, 28, 6] has cost 41.


Decide in level 16 among pending : [3, 4, 16, 32, 33, 30, 21, 19, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 7]


New level: 17
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 16, 19, 21, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 28, 6, 7]


Solution : [0, 2, 1, 10, 13, 28, 6, 7] has cost 54.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 28, 6, 7]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6]


Solution : [0, 2, 1, 10, 13, 28, 6] has cost 41.


Decide in level 17 among pending : [3, 4, 16, 32, 33, 30, 21, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Decide 16 with phase True at level 17

After decision at level 17
 pending : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]


New level: 18
 pending : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]


Before reduction : 
 pending  : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, -1), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 19, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]


Solution : [0, 2, 1, 10, 13, 28, 6, 16] has cost 75.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]

After backtrack at level 18
 pending : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6, 16]


Invert decision for 16 at level 17


New level: 18
 pending : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before reduction : 
 pending  : [3, 4, 32, 33, 30, 21, 19]
 solution : [0, 2, 1, 10, 13, 28, 6]

Essensial at level 18 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 21, 30}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 19]


Solution : [0, 2, 1, 10, 13, 28, 6, 19] has cost 75.


Before backtrack at level 18
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 28, 6, 19]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before backtrack at level 17
 pending : [3, 4, 19, 32, 33, 30, 21]
 solution : [0, 2, 1, 10, 13, 28, 6]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 30, 21, 16]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 30, 21, 16]
 solution : [0, 2, 1, 10, 13, 28, 6]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7]
 solution : [0, 2, 1, 10, 13, 28, 6]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 28, 6]


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 28, 6]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11]
 solution : [0, 2, 1, 10, 13, 28]


Before backtrack at level 13
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11]
 solution : [0, 2, 1, 10, 13, 28]

After backtrack at level 13
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 28]


Invert decision for 28 at level 12


New level: 13
 pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 13 among pending : [3, 4, 19, 32, 33, 30, 21, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 21 with phase True at level 13

After decision at level 13
 pending : [3, 4, 19, 32, 33, 30, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]


New level: 14
 pending : [3, 4, 19, 32, 33, 30, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 30, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, 128), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

Covered at level 14 : {30}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]


Solution : [0, 2, 1, 10, 13, 21] has cost 64.


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9]
 solution : [0, 2, 1, 10, 13, 21]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13, 21]


Invert decision for 21 at level 13


New level: 14
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13]


Solution : [0, 2, 1, 10, 13] has cost 25.


Decide in level 14 among pending : [3, 4, 19, 32, 33, 16, 7, 8, 6, 24, 27, 11, 22, 31, 9, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13, 6]


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 24, 27, 11, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : {24, 9, 27}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31, 30]
 solution : [0, 2, 1, 10, 13, 6]


Solution : [0, 2, 1, 10, 13, 6] has cost 31.


Decide in level 15 among pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


New level: 16
 pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Solution : [0, 2, 1, 10, 13, 6, 30] has cost 41.


Decide in level 16 among pending : [3, 4, 19, 32, 33, 16, 7, 8, 11, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 7]


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 7]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 8, 11, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 7]


Solution : [0, 2, 1, 10, 13, 6, 30, 7] has cost 54.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 30, 7]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Solution : [0, 2, 1, 10, 13, 6, 30] has cost 41.


Decide in level 17 among pending : [3, 4, 19, 32, 33, 16, 8, 11, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Decide 8 with phase True at level 17

After decision at level 17
 pending : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 8]


New level: 18
 pending : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 8]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 3, 4, 11, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 8]


Solution : [0, 2, 1, 10, 13, 6, 30, 8] has cost 47.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 30, 8]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 8]


Invert decision for 8 at level 17


New level: 18
 pending : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Solution : [0, 2, 1, 10, 13, 6, 30] has cost 41.


Decide in level 18 among pending : [3, 4, 19, 32, 33, 16, 11, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Decide 11 with phase True at level 18

After decision at level 18
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 11]


New level: 19
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 11]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 3, 4, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 30, 11]


Solution : [0, 2, 1, 10, 13, 6, 30, 11] has cost 47.


Before backtrack at level 19
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 30, 11]

After backtrack at level 19
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 11]


Invert decision for 11 at level 18


New level: 19
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Solution : [0, 2, 1, 10, 13, 6, 30] has cost 41.


Decide in level 19 among pending : [3, 4, 19, 32, 33, 16, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Decide 19 with phase True at level 19

After decision at level 19
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]


New level: 20
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 16, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]


Solution : [0, 2, 1, 10, 13, 6, 30, 19] has cost 75.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]

After backtrack at level 20
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30, 19]


Invert decision for 19 at level 19


New level: 20
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

Essensial at level 20 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 16]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 16]


Solution : [0, 2, 1, 10, 13, 6, 30, 16] has cost 75.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 30, 16]

After backtrack at level 20
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 6, 30]

After backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 30]

After backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11]
 solution : [0, 2, 1, 10, 13, 6, 30]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 6, 30]


Before backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 6, 30]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 6, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]


Solution : [0, 2, 1, 10, 13, 6] has cost 31.


Decide in level 16 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 11 with phase True at level 16

After decision at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6, 11]


New level: 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6, 11]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 7, 8, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 11]


Solution : [0, 2, 1, 10, 13, 6, 11] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 11]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6, 11]


Invert decision for 11 at level 16


New level: 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]
 solution : [0, 2, 1, 10, 13, 6]


Solution : [0, 2, 1, 10, 13, 6] has cost 31.


Decide in level 17 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 8 with phase True at level 17

After decision at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6, 8]


New level: 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6, 8]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 3, 4, 7, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 8]


Solution : [0, 2, 1, 10, 13, 6, 8] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 8]

After backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6, 8]


Invert decision for 8 at level 17


New level: 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 13, 6]


Solution : [0, 2, 1, 10, 13, 6] has cost 31.


Decide in level 18 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 7 with phase True at level 18

After decision at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 7]


New level: 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 3, 4, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 6, 7]


Solution : [0, 2, 1, 10, 13, 6, 7] has cost 44.


Before backtrack at level 19
 pending : []
 solution : [0, 2, 1, 10, 13, 6, 7]

After backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 7]


Invert decision for 7 at level 18


New level: 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6]


Solution : [0, 2, 1, 10, 13, 6] has cost 31.


Decide in level 19 among pending : [3, 4, 16, 32, 33, 22, 31, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 16 with phase True at level 19

After decision at level 19
 pending : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 16]


New level: 20
 pending : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 16]


Before reduction : 
 pending  : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 16]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 19, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 16]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 16]


Solution : [0, 2, 1, 10, 13, 6, 16] has cost 65.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 16]

After backtrack at level 20
 pending : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6, 16]


Invert decision for 16 at level 19


New level: 20
 pending : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6]


Before reduction : 
 pending  : [3, 4, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 6]

Essensial at level 20 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 19]


Solution : [0, 2, 1, 10, 13, 6, 19] has cost 65.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 6, 19]

After backtrack at level 20
 pending : [3, 4, 19, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 6]


Before backtrack at level 19
 pending : [3, 4, 19, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 6]

After backtrack at level 19
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 6]


Before backtrack at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 6]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7]
 solution : [0, 2, 1, 10, 13, 6]


Before backtrack at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7]
 solution : [0, 2, 1, 10, 13, 6]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 6]


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8]
 solution : [0, 2, 1, 10, 13, 6]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 6]


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 6]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 24, 27, 9, 30]
 solution : [0, 2, 1, 10, 13, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 24, 27, 9, 30]
 solution : [0, 2, 1, 10, 13]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 24, 27, 9, 30]
 solution : [0, 2, 1, 10, 13]

Essensial at level 15 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : {24, 27}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30]
 solution : [0, 2, 1, 10, 13, 9]


Solution : [0, 2, 1, 10, 13, 9] has cost 31.


Decide in level 15 among pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]


New level: 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]


Solution : [0, 2, 1, 10, 13, 9, 30] has cost 41.


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]


Solution : [0, 2, 1, 10, 13, 9] has cost 31.


Decide in level 16 among pending : [3, 4, 19, 32, 33, 22, 31, 16, 7, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 7 with phase True at level 16

After decision at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 7]


New level: 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 7]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 8, 11, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 7]


Solution : [0, 2, 1, 10, 13, 9, 7] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 13, 9, 7]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9, 7]


Invert decision for 7 at level 16


New level: 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]
 solution : [0, 2, 1, 10, 13, 9]


Solution : [0, 2, 1, 10, 13, 9] has cost 31.


Decide in level 17 among pending : [3, 4, 19, 32, 33, 22, 31, 16, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 8 with phase True at level 17

After decision at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9, 8]


New level: 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9, 8]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 3, 4, 11, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 8]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 8]


Solution : [0, 2, 1, 10, 13, 9, 8] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 13, 9, 8]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9, 8]


Invert decision for 8 at level 17


New level: 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 11]
 solution : [0, 2, 1, 10, 13, 9]


Solution : [0, 2, 1, 10, 13, 9] has cost 31.


Decide in level 18 among pending : [3, 4, 19, 32, 33, 22, 31, 16, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 11 with phase True at level 18

After decision at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 11]


New level: 19
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 11]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 3, 4, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 13, 9, 11]


Solution : [0, 2, 1, 10, 13, 9, 11] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 2, 1, 10, 13, 9, 11]

After backtrack at level 19
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 11]


Invert decision for 11 at level 18


New level: 19
 pending : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9]


Solution : [0, 2, 1, 10, 13, 9] has cost 31.


Decide in level 19 among pending : [3, 4, 19, 32, 33, 22, 31, 16]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 19 with phase True at level 19

After decision at level 19
 pending : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 19]


New level: 20
 pending : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 19]


Before reduction : 
 pending  : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 16, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 19]


Solution : [0, 2, 1, 10, 13, 9, 19] has cost 65.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 19]

After backtrack at level 20
 pending : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9, 19]


Invert decision for 19 at level 19


New level: 20
 pending : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 22, 31, 16]
 solution : [0, 2, 1, 10, 13, 9]

Essensial at level 20 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 16]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 16]


Solution : [0, 2, 1, 10, 13, 9, 16] has cost 65.


Before backtrack at level 20
 pending : [3, 4]
 solution : [0, 2, 1, 10, 13, 9, 16]

After backtrack at level 20
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 9]


Before backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 13, 9]

After backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 9]


Before backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 13, 9]

After backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11]
 solution : [0, 2, 1, 10, 13, 9]


Before backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11]
 solution : [0, 2, 1, 10, 13, 9]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 9]


Before backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8]
 solution : [0, 2, 1, 10, 13, 9]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 9]


Before backtrack at level 15
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7]
 solution : [0, 2, 1, 10, 13, 9]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 11
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 11
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 10
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 10
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 9
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 9
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 8
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 8
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 7
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 7
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 6
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 6
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29]
 solution : [0, 2, 1, 10, 13]


Before backtrack at level 5
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29]
 solution : [0, 2, 1, 10, 13]

After backtrack at level 5
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29, 15, 14, 26]
 solution : [0, 2, 1, 10, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29, 15, 14, 26]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29, 15, 14, 26]
 solution : [0, 2, 1, 10]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29, 15, 14, 26]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 5 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 29, 15, 14, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 29 with phase True at level 5

After decision at level 5
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14, 26]
 solution : [0, 2, 1, 10, 29]


New level: 6
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14, 26]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14, 26]
 solution : [0, 2, 1, 10, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, 192), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, 0), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 6 : {26}

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, 0), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29]


Solution : [0, 2, 1, 10, 29] has cost 36.


Decide in level 6 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 11, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29, 11]


New level: 7
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29, 11]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 8, 7, 9, 24, 27, 30, 6, 21, 28, 5, 20, 25, 18, 17, 15, 14]
 solution : [0, 2, 1, 10, 29, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 7 : {3, 4, 7, 8, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17]
 solution : [0, 2, 1, 10, 29, 11]


Before reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17]
 solution : [0, 2, 1, 10, 29, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17]
 solution : [0, 2, 1, 10, 29, 11]


Solution : [0, 2, 1, 10, 29, 11] has cost 42.


Before backtrack at level 7
 pending : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17]
 solution : [0, 2, 1, 10, 29, 11]

After backtrack at level 7
 pending : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]


Solution : [0, 2, 1, 10, 29] has cost 36.


Decide in level 7 among pending : [16, 32, 33, 19, 9, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 9 with phase True at level 7

After decision at level 7
 pending : [16, 32, 33, 19, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]


New level: 8
 pending : [16, 32, 33, 19, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 6, 28, 5, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, 0), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 8 : {24, 27, 5, 6}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, 0), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]


Solution : [0, 2, 1, 10, 29, 9] has cost 42.


Before backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 9]

After backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 9]


Invert decision for 9 at level 7


New level: 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29]


Solution : [0, 2, 1, 10, 29] has cost 36.


Decide in level 8 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 8, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]


New level: 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 9 : {3, 4, 7, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]


Solution : [0, 2, 1, 10, 29, 8] has cost 42.


Before backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5]
 solution : [0, 2, 1, 10, 29, 8]

After backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29]


Solution : [0, 2, 1, 10, 29] has cost 36.


Decide in level 9 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]


New level: 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 5, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 10 : {24, 27, 5}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]


Solution : [0, 2, 1, 10, 29, 6] has cost 42.


Before backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 6]

After backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 5]
 solution : [0, 2, 1, 10, 29, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 5]
 solution : [0, 2, 1, 10, 29]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 24, 27, 5]
 solution : [0, 2, 1, 10, 29]

Essensial at level 10 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 10 : {24, 27}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 5]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 5]


Solution : [0, 2, 1, 10, 29, 5] has cost 49.


Before backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14]
 solution : [0, 2, 1, 10, 29, 5]

After backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27]
 solution : [0, 2, 1, 10, 29]


Before backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27]
 solution : [0, 2, 1, 10, 29]

After backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6]
 solution : [0, 2, 1, 10, 29]


Before backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6]
 solution : [0, 2, 1, 10, 29]

After backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8]
 solution : [0, 2, 1, 10, 29]


Before backtrack at level 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8]
 solution : [0, 2, 1, 10, 29]

After backtrack at level 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9]
 solution : [0, 2, 1, 10, 29]


Before backtrack at level 6
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9]
 solution : [0, 2, 1, 10, 29]

After backtrack at level 6
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 26, 11]
 solution : [0, 2, 1, 10, 29]


Invert decision for 29 at level 5


New level: 6
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 26, 11]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 26, 11]
 solution : [0, 2, 1, 10]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 6 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 26, 11]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 6 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 26, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 26 with phase True at level 6

After decision at level 6
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26]


New level: 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, 192), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26]


Solution : [0, 2, 1, 10, 26] has cost 36.


Decide in level 7 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 7, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26, 7]


New level: 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 5, 24, 27, 6, 8, 9, 11]
 solution : [0, 2, 1, 10, 26, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 8 : {3, 4, 8, 11, 14, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, 0), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 7]


Solution : [0, 2, 1, 10, 26, 7] has cost 49.


Before backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 7]

After backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 8), (26, -1), (27, 8), (28, 8), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 8 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26]


Solution : [0, 2, 1, 10, 26] has cost 36.


Decide in level 8 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 5, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]


New level: 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 9 : {24, 9, 27, 6}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]


Solution : [0, 2, 1, 10, 26, 5] has cost 49.


Before backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11]
 solution : [0, 2, 1, 10, 26, 5]

After backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 9 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26]


Solution : [0, 2, 1, 10, 26] has cost 36.


Decide in level 9 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 14, 8, 11, 24, 27, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]


New level: 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 15, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, -1), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 85), (17, 101), (18, 105), (19, 89), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 10 : {15}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, -1), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 85), (17, 101), (18, 105), (19, 89), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, -1), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 89), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]


Solution : [0, 2, 1, 10, 26, 14] has cost 41.


Before backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 14]

After backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, 128), (7, -1), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 85), (17, 101), (18, 105), (19, 89), (20, 11), (21, 11), (22, 1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 10 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26]


Solution : [0, 2, 1, 10, 26] has cost 36.


Decide in level 10 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 8, 11, 24, 27, 6, 9, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26, 8]


New level: 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 24, 27, 6, 9, 15]
 solution : [0, 2, 1, 10, 26, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 11 : {3, 4, 11, 15, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 8), (17, 8), (18, 11), (19, 11), (20, 0), (21, 0), (22, 0), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 8]


Solution : [0, 2, 1, 10, 26, 8] has cost 42.


Before backtrack at level 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 26, 8]

After backtrack at level 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, 8), (18, 11), (19, 11), (20, -1), (21, -1), (22, -1), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26]


Solution : [0, 2, 1, 10, 26] has cost 36.


Decide in level 11 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 6, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]


New level: 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 24, 27, 9, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 85), (17, 101), (18, 105), (19, 89), (20, 28), (21, 28), (22, 32), (23, -1), (24, 8), (25, 32), (26, -1), (27, 8), (28, 32), (29, -1), (30, 16), (31, 32), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 12 : {24, 9, 27}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]


Solution : [0, 2, 1, 10, 26, 6] has cost 42.


Before backtrack at level 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 6]

After backtrack at level 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 24, 27, 9]
 solution : [0, 2, 1, 10, 26, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 24, 27, 9]
 solution : [0, 2, 1, 10, 26]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 24, 27, 9]
 solution : [0, 2, 1, 10, 26]

Essensial at level 12 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 12 : {24, 27}

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 9]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, 0), (25, 1), (26, -1), (27, 0), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 9]


Solution : [0, 2, 1, 10, 26, 9] has cost 42.


Before backtrack at level 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15]
 solution : [0, 2, 1, 10, 26, 9]

After backtrack at level 12
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27]
 solution : [0, 2, 1, 10, 26]


Before backtrack at level 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27]
 solution : [0, 2, 1, 10, 26]

After backtrack at level 11
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6]
 solution : [0, 2, 1, 10, 26]


Before backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6]
 solution : [0, 2, 1, 10, 26]

After backtrack at level 10
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8]
 solution : [0, 2, 1, 10, 26]


Before backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8]
 solution : [0, 2, 1, 10, 26]

After backtrack at level 9
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14]
 solution : [0, 2, 1, 10, 26]


Before backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14]
 solution : [0, 2, 1, 10, 26]

After backtrack at level 8
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5]
 solution : [0, 2, 1, 10, 26]


Before backtrack at level 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5]
 solution : [0, 2, 1, 10, 26]

After backtrack at level 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 26]


Invert decision for 26 at level 6


New level: 7
 pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 19), (17, 19), (18, 26), (19, 26), (20, 28), (21, 28), (22, 32), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, 1), (29, -1), (30, 16), (31, 32), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 7 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 7 among pending : [16, 32, 33, 19, 28, 25, 18, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [16, 32, 33, 19, 28, 25, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]


New level: 8
 pending : [16, 32, 33, 19, 28, 25, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]


Before reduction : 
 pending  : [16, 32, 33, 19, 28, 25, 17, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, 129), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 0), (17, 0), (18, -1), (19, 0), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 16, 17, 19}

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]


Before reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 0), (17, 0), (18, -1), (19, 0), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]


Solution : [0, 2, 1, 10, 18] has cost 54.


Before backtrack at level 8
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 18]

After backtrack at level 8
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19, 17]
 solution : [0, 2, 1, 10, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19, 17]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19, 17]
 solution : [0, 2, 1, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 8 : set()

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19, 17]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 8 among pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 17]


New level: 9
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 17]


Before reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, 129), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 0), (17, -1), (18, -1), (19, 0), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, 0), (33, 0)]

Covered at level 9 : {16, 33, 32, 19}

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 17]


Before reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 0), (17, -1), (18, -1), (19, 0), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 17]


Solution : [0, 2, 1, 10, 17] has cost 54.


Before backtrack at level 9
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7]
 solution : [0, 2, 1, 10, 17]

After backtrack at level 9
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 8), (23, -1), (24, 32), (25, 1), (26, -1), (27, 32), (28, 1), (29, -1), (30, 2), (31, 8), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 9 : set()

After reduction : 
 pending  : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 9 among pending : [28, 25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 28 with phase True at level 9

After decision at level 9
 pending : [25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]


New level: 10
 pending : [25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [25, 3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, 128), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, 0), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 10 : {25}

After reduction : 
 pending  : [3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, 0), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28]


Solution : [0, 2, 1, 10, 28] has cost 30.


Decide in level 10 among pending : [3, 4, 22, 31, 30, 21, 20, 11, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [3, 4, 22, 31, 30, 21, 20, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


New level: 11
 pending : [3, 4, 22, 31, 30, 21, 20, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Before reduction : 
 pending  : [3, 4, 22, 31, 30, 21, 20, 15, 9, 24, 27, 6, 8, 14, 5, 7, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 11 : {3, 4, 7, 8, 14, 15, 22, 30, 31}

After reduction : 
 pending  : [21, 20, 9, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Before reduction : 
 pending  : [21, 20, 9, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, 0), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [21, 20, 9, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Solution : [0, 2, 1, 10, 28, 11] has cost 36.


Decide in level 11 among pending : [21, 20, 9, 24, 27, 6, 5, 16, 32, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Decide 9 with phase True at level 11

After decision at level 11
 pending : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 9]


New level: 12
 pending : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 9]


Before reduction : 
 pending  : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 5, 6, 16, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 9]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 9]


Solution : [0, 2, 1, 10, 28, 11, 9] has cost 42.


Before backtrack at level 12
 pending : []
 solution : [0, 2, 1, 10, 28, 11, 9]

After backtrack at level 12
 pending : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 9]


Invert decision for 9 at level 11


New level: 12
 pending : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Before reduction : 
 pending  : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Solution : [0, 2, 1, 10, 28, 11] has cost 36.


Decide in level 12 among pending : [21, 20, 24, 27, 6, 5, 16, 32, 33, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 6]


New level: 13
 pending : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 6]


Before reduction : 
 pending  : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 5, 16, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 6]


Solution : [0, 2, 1, 10, 28, 11, 6] has cost 42.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 28, 11, 6]

After backtrack at level 13
 pending : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Before reduction : 
 pending  : [21, 20, 24, 27, 5, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]

Essensial at level 13 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 11, 5]


Solution : [0, 2, 1, 10, 28, 11, 5] has cost 49.


Before backtrack at level 13
 pending : []
 solution : [0, 2, 1, 10, 28, 11, 5]

After backtrack at level 13
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]


Before backtrack at level 12
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19]
 solution : [0, 2, 1, 10, 28, 11]

After backtrack at level 12
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6]
 solution : [0, 2, 1, 10, 28, 11]


Before backtrack at level 11
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6]
 solution : [0, 2, 1, 10, 28, 11]

After backtrack at level 11
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 11 : set()

After reduction : 
 pending  : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28]


Solution : [0, 2, 1, 10, 28] has cost 30.


Decide in level 11 among pending : [5, 21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28, 5]


New level: 12
 pending : [21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28, 5]


Before reduction : 
 pending  : [21, 20, 24, 27, 16, 32, 33, 19, 6, 3, 4, 22, 31, 30, 15, 8, 14, 7, 9]
 solution : [0, 2, 1, 10, 28, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 12 : {24, 9, 27, 6}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7]
 solution : [0, 2, 1, 10, 28, 5]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7]
 solution : [0, 2, 1, 10, 28, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7]
 solution : [0, 2, 1, 10, 28, 5]


Solution : [0, 2, 1, 10, 28, 5] has cost 43.


Before backtrack at level 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7]
 solution : [0, 2, 1, 10, 28, 5]

After backtrack at level 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 12 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28]


Solution : [0, 2, 1, 10, 28] has cost 30.


Decide in level 12 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 8, 14, 7, 24, 27, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]


New level: 13
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, 0), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 13 : {3, 4, 7, 14, 15, 22, 30, 31}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 128), (7, 0), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 6, 9]
 solution : [0, 2, 1, 10, 28, 8]


Solution : [0, 2, 1, 10, 28, 8] has cost 36.


Decide in level 13 among pending : [21, 20, 16, 32, 33, 19, 24, 27, 6, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8, 6]


New level: 14
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8, 6]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, 2), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 9, 16, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 6]


Solution : [0, 2, 1, 10, 28, 8, 6] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 28, 8, 6]

After backtrack at level 14
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 9]
 solution : [0, 2, 1, 10, 28, 8]

Essensial at level 14 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 19, 20, 21, 24, 27}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 8, 9]


Solution : [0, 2, 1, 10, 28, 8, 9] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 28, 8, 9]

After backtrack at level 14
 pending : [9, 21, 20, 16, 32, 33, 19, 24, 27]
 solution : [0, 2, 1, 10, 28, 8]


Before backtrack at level 13
 pending : [9, 21, 20, 16, 32, 33, 19, 24, 27]
 solution : [0, 2, 1, 10, 28, 8]

After backtrack at level 13
 pending : [9, 21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [9, 21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [9, 21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 13 : set()

After reduction : 
 pending  : [9, 21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28]


Solution : [0, 2, 1, 10, 28] has cost 30.


Decide in level 13 among pending : [9, 21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28, 9]


New level: 14
 pending : [21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28, 9]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 24, 27, 3, 4, 22, 31, 30, 15, 14, 7, 6]
 solution : [0, 2, 1, 10, 28, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 128), (7, 128), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, 76), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 14 : {24, 27, 6}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7]
 solution : [0, 2, 1, 10, 28, 9]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7]
 solution : [0, 2, 1, 10, 28, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, 0), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7]
 solution : [0, 2, 1, 10, 28, 9]


Solution : [0, 2, 1, 10, 28, 9] has cost 36.


Decide in level 14 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 14, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Decide 14 with phase True at level 14

After decision at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]


New level: 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 22, 31, 30, 15, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 15 : {15, 22, 31}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]


Solution : [0, 2, 1, 10, 28, 9, 14] has cost 41.


Before backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7]
 solution : [0, 2, 1, 10, 28, 9, 14]

After backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9, 14]


Invert decision for 14 at level 14


New level: 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9]


Solution : [0, 2, 1, 10, 28, 9] has cost 36.


Decide in level 15 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 7, 22, 31, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Decide 7 with phase True at level 15

After decision at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9, 7]


New level: 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9, 7]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 15, 16, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 9, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 9, 7]


Solution : [0, 2, 1, 10, 28, 9, 7] has cost 49.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 28, 9, 7]

After backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9, 7]


Invert decision for 7 at level 15


New level: 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 22, 31, 15]
 solution : [0, 2, 1, 10, 28, 9]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 16 : {22, 31}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 9, 15]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 9, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 9, 15]


Solution : [0, 2, 1, 10, 28, 9, 15] has cost 38.


Before backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 9, 15]

After backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 9]


Before backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 9]

After backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7]
 solution : [0, 2, 1, 10, 28, 9]


Before backtrack at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7]
 solution : [0, 2, 1, 10, 28, 9]

After backtrack at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 24, 27, 6, 14]
 solution : [0, 2, 1, 10, 28, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 24, 27, 6, 14]
 solution : [0, 2, 1, 10, 28]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 24, 27, 6, 14]
 solution : [0, 2, 1, 10, 28]

Essensial at level 14 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 14 : {24, 27}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 14]
 solution : [0, 2, 1, 10, 28, 6]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 14]
 solution : [0, 2, 1, 10, 28, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 14]
 solution : [0, 2, 1, 10, 28, 6]


Solution : [0, 2, 1, 10, 28, 6] has cost 36.


Decide in level 14 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 7, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6, 7]


New level: 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6, 7]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 14, 15, 16, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 6, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 28, 6, 7]


Solution : [0, 2, 1, 10, 28, 6, 7] has cost 49.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 28, 6, 7]

After backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6]


Solution : [0, 2, 1, 10, 28, 6] has cost 36.


Decide in level 15 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Decide 14 with phase True at level 15

After decision at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6, 14]


New level: 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6, 14]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 128), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, 28), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 16 : {31, 22, 15}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 14]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 14]


Solution : [0, 2, 1, 10, 28, 6, 14] has cost 41.


Before backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 14]

After backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6, 14]


Invert decision for 14 at level 15


New level: 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

Covered at level 16 : {22, 31}

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 15]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 15]


Solution : [0, 2, 1, 10, 28, 6, 15] has cost 38.


Before backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30]
 solution : [0, 2, 1, 10, 28, 6, 15]

After backtrack at level 16
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6]


Before backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31]
 solution : [0, 2, 1, 10, 28, 6]

After backtrack at level 15
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6]


Before backtrack at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14]
 solution : [0, 2, 1, 10, 28, 6]

After backtrack at level 14
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7]
 solution : [0, 2, 1, 10, 28]


Before backtrack at level 13
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7]
 solution : [0, 2, 1, 10, 28]

After backtrack at level 13
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9]
 solution : [0, 2, 1, 10, 28]


Before backtrack at level 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9]
 solution : [0, 2, 1, 10, 28]

After backtrack at level 12
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8]
 solution : [0, 2, 1, 10, 28]


Before backtrack at level 11
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8]
 solution : [0, 2, 1, 10, 28]

After backtrack at level 11
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5]
 solution : [0, 2, 1, 10, 28]


Before backtrack at level 10
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5]
 solution : [0, 2, 1, 10, 28]

After backtrack at level 10
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 28]


Invert decision for 28 at level 9


New level: 10
 pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, 11), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 10 : set()

After reduction : 
 pending  : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 10 among pending : [21, 20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 21 with phase True at level 10

After decision at level 10
 pending : [20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]


New level: 11
 pending : [20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]


Before reduction : 
 pending  : [20, 16, 32, 33, 19, 3, 4, 30, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, 128), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, 0), (21, -1), (22, 4), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 4), (32, 16), (33, 16)]

Covered at level 11 : {20, 30}

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, 0), (21, -1), (22, 4), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 4), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 4), (32, 16), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]


Solution : [0, 2, 1, 10, 21] has cost 59.


Before backtrack at level 11
 pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11]
 solution : [0, 2, 1, 10, 21]

After backtrack at level 11
 pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 21]


Invert decision for 21 at level 10


New level: 11
 pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 4), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 11 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 11 among pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 14, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]


New level: 12
 pending : [16, 32, 33, 19, 3, 4, 15, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 15, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, 128), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 12 : {15}

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, 0), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 12 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14]


Solution : [0, 2, 1, 10, 14] has cost 25.


Decide in level 12 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 6, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 6 with phase True at level 12

After decision at level 12
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]


New level: 13
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 24, 27, 7, 9, 8, 5, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, 128), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, 0), (25, 8), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 13 : {24, 9, 27, 5}

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 0), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, 0), (25, 8), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 20, 30]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 13 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 20, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 20 with phase True at level 13

After decision at level 13
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6, 20]


New level: 14
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6, 20]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

Covered at level 14 : {30}

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 20]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

Covered at level 14 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 20]


Solution : [0, 2, 1, 10, 14, 6, 20] has cost 70.


Before backtrack at level 14
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 20]

After backtrack at level 14
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6, 20]


Invert decision for 20 at level 13


New level: 14
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 14 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 14

After decision at level 14
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]


New level: 15
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 4), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 15 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]


Solution : [0, 2, 1, 10, 14, 6, 30] has cost 41.


Before backtrack at level 15
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]

After backtrack at level 15
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 30]


Invert decision for 30 at level 14


New level: 15
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 4), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 15 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 7, 8, 25, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 7 with phase True at level 15

After decision at level 15
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 7]


New level: 16
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 8, 11, 16, 19, 22, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 7]


Solution : [0, 2, 1, 10, 14, 6, 7] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 14, 6, 7]

After backtrack at level 16
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 7]


Invert decision for 7 at level 15


New level: 16
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 16 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 8, 25, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 8]


New level: 17
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 4, 11, 16, 19, 22, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 8]


Solution : [0, 2, 1, 10, 14, 6, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 2, 1, 10, 14, 6, 8]

After backtrack at level 17
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 17 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 25, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 11 with phase True at level 17

After decision at level 17
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 11]


New level: 18
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 11]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 3, 4, 16, 19, 22, 25, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 6, 11]


Solution : [0, 2, 1, 10, 14, 6, 11] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 14, 6, 11]

After backtrack at level 18
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 11]


Invert decision for 11 at level 17


New level: 18
 pending : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]


Solution : [0, 2, 1, 10, 14, 6] has cost 31.


Decide in level 18 among pending : [16, 32, 33, 19, 3, 4, 22, 31, 25]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 16 with phase True at level 18

After decision at level 18
 pending : [32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 16]


New level: 19
 pending : [32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 16]


Before reduction : 
 pending  : [32, 33, 19, 3, 4, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 16]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 19, 22, 25, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 16]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 16]


Solution : [0, 2, 1, 10, 14, 6, 16] has cost 65.


Before backtrack at level 19
 pending : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 16]

After backtrack at level 19
 pending : [3, 4, 32, 33, 19, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6, 16]


Invert decision for 16 at level 18


New level: 19
 pending : [3, 4, 32, 33, 19, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]


Before reduction : 
 pending  : [3, 4, 32, 33, 19, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]

Essensial at level 19 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 22, 25, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 19]


Solution : [0, 2, 1, 10, 14, 6, 19] has cost 65.


Before backtrack at level 19
 pending : [3, 4]
 solution : [0, 2, 1, 10, 14, 6, 19]

After backtrack at level 19
 pending : [3, 4, 19, 32, 33, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 25]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30]
 solution : [0, 2, 1, 10, 14, 6]


Before backtrack at level 13
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30]
 solution : [0, 2, 1, 10, 14, 6]

After backtrack at level 13
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 6]


Invert decision for 6 at level 12


New level: 13
 pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 13 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14]


Solution : [0, 2, 1, 10, 14] has cost 25.


Decide in level 13 among pending : [3, 4, 19, 32, 33, 22, 31, 25, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 25 with phase True at level 13

After decision at level 13
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]


New level: 14
 pending : [3, 4, 19, 32, 33, 22, 31, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 22, 31, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, -1), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

Covered at level 14 : {22, 31}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, -1), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, 0), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]
 solution : [0, 2, 1, 10, 14, 25]


Solution : [0, 2, 1, 10, 14, 25] has cost 35.


Decide in level 14 among pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 9, 5, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

Decide 9 with phase True at level 14

After decision at level 14
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 5, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 5, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 24, 27, 5, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 80), (17, -1), (18, -1), (19, 56), (20, 73), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 2), (31, -1), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : {24, 27, 5}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, 0), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]


Solution : [0, 2, 1, 10, 14, 25, 9] has cost 41.


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 9]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 24, 27, 5]
 solution : [0, 2, 1, 10, 14, 25, 9]


Invert decision for 9 at level 14


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 24, 27, 5]
 solution : [0, 2, 1, 10, 14, 25]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 24, 27, 5]
 solution : [0, 2, 1, 10, 14, 25]

Essensial at level 15 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : {24, 27}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 5]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 5]


Solution : [0, 2, 1, 10, 14, 25, 5] has cost 48.


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20]
 solution : [0, 2, 1, 10, 14, 25, 5]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27]
 solution : [0, 2, 1, 10, 14, 25]


Before backtrack at level 14
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27]
 solution : [0, 2, 1, 10, 14, 25]

After backtrack at level 14
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 25]


Invert decision for 25 at level 13


New level: 14
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, 8), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 18), (17, -1), (18, -1), (19, 18), (20, 11), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14]


Solution : [0, 2, 1, 10, 14] has cost 25.


Decide in level 14 among pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 20, 5, 24, 27, 22, 31, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 20 with phase True at level 14

After decision at level 14
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 30, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

Covered at level 15 : {30}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]


Solution : [0, 2, 1, 10, 14, 20] has cost 64.


Before backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9]
 solution : [0, 2, 1, 10, 14, 20]

After backtrack at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14, 20]


Invert decision for 20 at level 14


New level: 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 1), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Covered at level 15 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14]


Solution : [0, 2, 1, 10, 14] has cost 25.


Decide in level 15 among pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 5, 24, 27, 22, 31, 9, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14, 5]


New level: 16
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14, 5]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 24, 27, 22, 31, 9, 30]
 solution : [0, 2, 1, 10, 14, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, 128), (6, -1), (7, 32), (8, 32), (9, 128), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 8), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 8), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : {24, 9, 27}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 5]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, 0), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 5]


Solution : [0, 2, 1, 10, 14, 5] has cost 38.


Before backtrack at level 16
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 5]

After backtrack at level 16
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30, 24, 27, 9]
 solution : [0, 2, 1, 10, 14, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30, 24, 27, 9]
 solution : [0, 2, 1, 10, 14]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30, 24, 27, 9]
 solution : [0, 2, 1, 10, 14]

Essensial at level 16 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : {24, 27}

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]
 solution : [0, 2, 1, 10, 14, 9]


Solution : [0, 2, 1, 10, 14, 9] has cost 31.


Decide in level 16 among pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 16

After decision at level 16
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]


Solution : [0, 2, 1, 10, 14, 9, 30] has cost 41.


Before backtrack at level 17
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]

After backtrack at level 17
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 30]


Invert decision for 30 at level 16


New level: 17
 pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Solution : [0, 2, 1, 10, 14, 9] has cost 31.


Decide in level 17 among pending : [3, 4, 19, 32, 33, 16, 11, 8, 7, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 11 with phase True at level 17

After decision at level 17
 pending : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 11]


New level: 18
 pending : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 11]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, 32), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 3, 4, 7, 8, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 11]


Solution : [0, 2, 1, 10, 14, 9, 11] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 14, 9, 11]

After backtrack at level 18
 pending : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 11]


Invert decision for 11 at level 17


New level: 18
 pending : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Solution : [0, 2, 1, 10, 14, 9] has cost 31.


Decide in level 18 among pending : [3, 4, 19, 32, 33, 16, 8, 7, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 8 with phase True at level 18

After decision at level 18
 pending : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 8]


New level: 19
 pending : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 8]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 3, 4, 7, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 8]


Solution : [0, 2, 1, 10, 14, 9, 8] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 2, 1, 10, 14, 9, 8]

After backtrack at level 19
 pending : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 8]


Invert decision for 8 at level 18


New level: 19
 pending : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 7, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Solution : [0, 2, 1, 10, 14, 9] has cost 31.


Decide in level 19 among pending : [3, 4, 19, 32, 33, 16, 7, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 7 with phase True at level 19

After decision at level 19
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 7]


New level: 20
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 7]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 7]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, 32), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 3, 4, 16, 19, 22, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 7]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 14, 9, 7]


Solution : [0, 2, 1, 10, 14, 9, 7] has cost 44.


Before backtrack at level 20
 pending : []
 solution : [0, 2, 1, 10, 14, 9, 7]

After backtrack at level 20
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 7]


Invert decision for 7 at level 19


New level: 20
 pending : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 20 : set()

After reduction : 
 pending  : [3, 4, 19, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Solution : [0, 2, 1, 10, 14, 9] has cost 31.


Decide in level 20 among pending : [3, 4, 19, 32, 33, 16, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 19 with phase True at level 20

After decision at level 20
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 19]


New level: 21
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 19]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 19]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 16), (4, 16), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 16, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 19]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 19]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 19]


Solution : [0, 2, 1, 10, 14, 9, 19] has cost 65.


Before backtrack at level 21
 pending : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 19]

After backtrack at level 21
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9, 19]


Invert decision for 19 at level 20


New level: 21
 pending : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before reduction : 
 pending  : [3, 4, 32, 33, 16, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

Essensial at level 21 : {16}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 22, 31}

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 16]


Before reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 16]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 16]


Solution : [0, 2, 1, 10, 14, 9, 16] has cost 65.


Before backtrack at level 21
 pending : [3, 4]
 solution : [0, 2, 1, 10, 14, 9, 16]

After backtrack at level 21
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]


Before backtrack at level 20
 pending : [3, 4, 16, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 14, 9]

After backtrack at level 20
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 14, 9]


Before backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19]
 solution : [0, 2, 1, 10, 14, 9]

After backtrack at level 19
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 14, 9]


Before backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7]
 solution : [0, 2, 1, 10, 14, 9]

After backtrack at level 18
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8]
 solution : [0, 2, 1, 10, 14, 9]


Before backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8]
 solution : [0, 2, 1, 10, 14, 9]

After backtrack at level 17
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11]
 solution : [0, 2, 1, 10, 14, 9]


Before backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11]
 solution : [0, 2, 1, 10, 14, 9]

After backtrack at level 16
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30]
 solution : [0, 2, 1, 10, 14]


Before backtrack at level 15
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30]
 solution : [0, 2, 1, 10, 14]

After backtrack at level 15
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5]
 solution : [0, 2, 1, 10, 14]


Before backtrack at level 14
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5]
 solution : [0, 2, 1, 10, 14]

After backtrack at level 14
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20]
 solution : [0, 2, 1, 10, 14]


Before backtrack at level 13
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20]
 solution : [0, 2, 1, 10, 14]

After backtrack at level 13
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25]
 solution : [0, 2, 1, 10, 14]


Before backtrack at level 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25]
 solution : [0, 2, 1, 10, 14]

After backtrack at level 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 1), (4, 1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 12 : set()

After reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 12 among pending : [3, 4, 16, 32, 33, 22, 31, 19, 7, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10, 7]


New level: 13
 pending : [3, 4, 16, 32, 33, 22, 31, 19, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10, 7]


Before reduction : 
 pending  : [3, 4, 16, 32, 33, 22, 31, 19, 8, 11, 9, 24, 27, 30, 5, 20, 25, 15, 6]
 solution : [0, 2, 1, 10, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, 128), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, 0), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, 0), (32, 20), (33, 20)]

Covered at level 13 : {3, 4, 8, 11, 15, 22, 31}

After reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, 128), (7, -1), (8, 0), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, 0), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, 0), (32, 20), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Covered at level 13 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 9, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]


Solution : [0, 2, 1, 10, 7] has cost 33.


Decide in level 13 among pending : [16, 32, 33, 19, 9, 24, 27, 30, 5, 20, 25, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Decide 9 with phase True at level 13

After decision at level 13
 pending : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 9]


New level: 14
 pending : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 9]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 5, 6, 16, 19, 20, 24, 25, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 9]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 9]


Solution : [0, 2, 1, 10, 7, 9] has cost 39.


Before backtrack at level 14
 pending : []
 solution : [0, 2, 1, 10, 7, 9]

After backtrack at level 14
 pending : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 9]


Invert decision for 9 at level 13


New level: 14
 pending : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Covered at level 14 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]


Solution : [0, 2, 1, 10, 7] has cost 33.


Decide in level 14 among pending : [16, 32, 33, 19, 24, 27, 30, 5, 20, 25, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 5]


New level: 15
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 5]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, 14), (21, -1), (22, -1), (23, -1), (24, 32), (25, 32), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 6, 16, 19, 20, 24, 25, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 5]


Solution : [0, 2, 1, 10, 7, 5] has cost 46.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 7, 5]

After backtrack at level 15
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 20, 25, 6]
 solution : [0, 2, 1, 10, 7]

Essensial at level 15 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 19, 20, 24, 25, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 7, 6]


Solution : [0, 2, 1, 10, 7, 6] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 7, 6]

After backtrack at level 15
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25]
 solution : [0, 2, 1, 10, 7]


Before backtrack at level 14
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25]
 solution : [0, 2, 1, 10, 7]

After backtrack at level 14
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5]
 solution : [0, 2, 1, 10, 7]


Before backtrack at level 13
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5]
 solution : [0, 2, 1, 10, 7]

After backtrack at level 13
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 13 : set()

After reduction : 
 pending  : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 13 among pending : [6, 16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10, 6]


New level: 14
 pending : [16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 24, 27, 30, 20, 25, 5, 3, 4, 22, 31, 8, 11, 15, 9]
 solution : [0, 2, 1, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, 128), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, -1), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, 0), (25, 8), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 14 : {24, 9, 27, 5}

After reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 8, 11, 15]
 solution : [0, 2, 1, 10, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 8, 11, 15]
 solution : [0, 2, 1, 10, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 0), (6, -1), (7, -1), (8, 128), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, 0), (25, 8), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 8, 11, 15]
 solution : [0, 2, 1, 10, 6]


Solution : [0, 2, 1, 10, 6] has cost 26.


Decide in level 14 among pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 8, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6, 8]


New level: 15
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6, 8]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 4, 11, 15, 16, 19, 20, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 8]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 8]


Solution : [0, 2, 1, 10, 6, 8] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 2, 1, 10, 6, 8]

After backtrack at level 15
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]
 solution : [0, 2, 1, 10, 6]


Solution : [0, 2, 1, 10, 6] has cost 26.


Decide in level 15 among pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6, 11]


New level: 16
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6, 11]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 32), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 3, 4, 15, 16, 19, 20, 22, 25, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 6, 11]


Solution : [0, 2, 1, 10, 6, 11] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 2, 1, 10, 6, 11]

After backtrack at level 16
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31, 15]
 solution : [0, 2, 1, 10, 6]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Solution : [0, 2, 1, 10, 6, 15] has cost 28.


Decide in level 16 among pending : [16, 32, 33, 19, 30, 20, 25, 3, 4, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 20 with phase True at level 16

After decision at level 16
 pending : [16, 32, 33, 19, 30, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]


New level: 17
 pending : [16, 32, 33, 19, 30, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]


Before reduction : 
 pending  : [16, 32, 33, 19, 30, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, 104), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

Covered at level 17 : {30}

After reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]


Before reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]


Solution : [0, 2, 1, 10, 6, 15, 20] has cost 67.


Before backtrack at level 17
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 20]

After backtrack at level 17
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31, 30]
 solution : [0, 2, 1, 10, 6, 15, 20]


Invert decision for 20 at level 16


New level: 17
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31, 30]
 solution : [0, 2, 1, 10, 6, 15]


Before reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31, 30]
 solution : [0, 2, 1, 10, 6, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 6), (17, -1), (18, -1), (19, 9), (20, -1), (21, -1), (22, 1), (23, -1), (24, -1), (25, 1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 1), (32, 3), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31, 30]
 solution : [0, 2, 1, 10, 6, 15]


Solution : [0, 2, 1, 10, 6, 15] has cost 28.


Decide in level 17 among pending : [16, 32, 33, 19, 25, 3, 4, 22, 31, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 17

After decision at level 17
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]


New level: 18
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]


Before reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 4), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 18 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]


Solution : [0, 2, 1, 10, 6, 15, 30] has cost 38.


Before backtrack at level 18
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]

After backtrack at level 18
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 30]


Invert decision for 30 at level 17


New level: 18
 pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Before reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, 4), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [16, 32, 33, 19, 25, 3, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Solution : [0, 2, 1, 10, 6, 15] has cost 28.


Decide in level 18 among pending : [16, 32, 33, 19, 25, 3, 4, 22, 31]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 3 with phase True at level 18

After decision at level 18
 pending : [16, 32, 33, 19, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 3]


New level: 19
 pending : [16, 32, 33, 19, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 3]


Before reduction : 
 pending  : [16, 32, 33, 19, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 4, 22, 25, 31}

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 3]


Before reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 3]


Solution : [0, 2, 1, 10, 6, 15, 3] has cost 37.


Before backtrack at level 19
 pending : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 3]

After backtrack at level 19
 pending : [16, 19, 32, 33, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15, 3]


Invert decision for 3 at level 18


New level: 19
 pending : [16, 19, 32, 33, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Before reduction : 
 pending  : [16, 19, 32, 33, 25, 4, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]

Essensial at level 19 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 22, 25, 31}

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 4]


Before reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 4]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 4]


Solution : [0, 2, 1, 10, 6, 15, 4] has cost 37.


Before backtrack at level 19
 pending : [16, 19]
 solution : [0, 2, 1, 10, 6, 15, 4]

After backtrack at level 19
 pending : [16, 19, 4, 32, 33, 25, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]


Before backtrack at level 18
 pending : [16, 19, 4, 32, 33, 25, 22, 31]
 solution : [0, 2, 1, 10, 6, 15]

After backtrack at level 18
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3]
 solution : [0, 2, 1, 10, 6, 15]


Before backtrack at level 17
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3]
 solution : [0, 2, 1, 10, 6, 15]

After backtrack at level 17
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30]
 solution : [0, 2, 1, 10, 6, 15]


Before backtrack at level 16
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30]
 solution : [0, 2, 1, 10, 6, 15]

After backtrack at level 16
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20]
 solution : [0, 2, 1, 10, 6]


Before backtrack at level 15
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20]
 solution : [0, 2, 1, 10, 6]

After backtrack at level 15
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11]
 solution : [0, 2, 1, 10, 6]


Before backtrack at level 14
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11]
 solution : [0, 2, 1, 10, 6]

After backtrack at level 14
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 14 : set()

After reduction : 
 pending  : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 14 among pending : [16, 19, 4, 32, 33, 25, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 25 with phase True at level 14

After decision at level 14
 pending : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25]


New level: 15
 pending : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25]


Before reduction : 
 pending  : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, 128), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 15 : set()

After reduction : 
 pending  : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25]


Solution : [0, 2, 1, 10, 25] has cost 30.


Decide in level 15 among pending : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 11, 24, 27, 5, 9, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 11 with phase True at level 15

After decision at level 15
 pending : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25, 11]


New level: 16
 pending : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25, 11]


Before reduction : 
 pending  : [16, 19, 4, 32, 33, 22, 31, 3, 30, 15, 20, 24, 27, 5, 9, 8]
 solution : [0, 2, 1, 10, 25, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, -1), (7, -1), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, -1), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

Covered at level 16 : {3, 4, 8, 15, 22, 30, 31}

After reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 5, 9]
 solution : [0, 2, 1, 10, 25, 11]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 5, 9]
 solution : [0, 2, 1, 10, 25, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, -1), (7, -1), (8, 0), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, -1), (22, 0), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 0), (31, 0), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 5, 9]
 solution : [0, 2, 1, 10, 25, 11]


Solution : [0, 2, 1, 10, 25, 11] has cost 36.


Before backtrack at level 16
 pending : [16, 19, 32, 33, 20, 24, 27, 5, 9]
 solution : [0, 2, 1, 10, 25, 11]

After backtrack at level 16
 pending : [16, 19, 32, 33, 20, 24, 27, 5, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 11]


Invert decision for 11 at level 15


New level: 16
 pending : [16, 19, 32, 33, 20, 24, 27, 5, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 5, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 10), (17, -1), (18, -1), (19, 10), (20, 2), (21, -1), (22, -1), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, -1), (31, -1), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 5, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25]


Solution : [0, 2, 1, 10, 25] has cost 30.


Decide in level 16 among pending : [16, 19, 32, 33, 20, 24, 27, 5, 9, 4, 22, 31, 3, 30, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [16, 19, 32, 33, 20, 24, 27, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]


New level: 17
 pending : [16, 19, 32, 33, 20, 24, 27, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 24, 27, 9, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 80), (17, -1), (18, -1), (19, 56), (20, 76), (21, -1), (22, 8), (23, -1), (24, 8), (25, -1), (26, -1), (27, 8), (28, -1), (29, -1), (30, 16), (31, 8), (32, 18), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 17 : {24, 9, 27}

After reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]


Solution : [0, 2, 1, 10, 25, 5] has cost 43.


Before backtrack at level 17
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 5]

After backtrack at level 17
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 24, 27, 9]
 solution : [0, 2, 1, 10, 25, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 24, 27, 9]
 solution : [0, 2, 1, 10, 25]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 24, 27, 9]
 solution : [0, 2, 1, 10, 25]

Essensial at level 17 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 17 : {24, 27}

After reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 9]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 9]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 9]


Solution : [0, 2, 1, 10, 25, 9] has cost 36.


Before backtrack at level 17
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8]
 solution : [0, 2, 1, 10, 25, 9]

After backtrack at level 17
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27]
 solution : [0, 2, 1, 10, 25]


Before backtrack at level 16
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27]
 solution : [0, 2, 1, 10, 25]

After backtrack at level 16
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5]
 solution : [0, 2, 1, 10, 25]


Before backtrack at level 15
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5]
 solution : [0, 2, 1, 10, 25]

After backtrack at level 15
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 25]


Invert decision for 25 at level 14


New level: 15
 pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 64), (16, 18), (17, -1), (18, -1), (19, 18), (20, 28), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 16), (31, 8), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 15 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 15 among pending : [16, 19, 32, 33, 20, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]


New level: 16
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 30, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, 128), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 4), (32, 16), (33, 16)]

Covered at level 16 : {30}

After reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 0), (31, 4), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 4), (32, 16), (33, 16)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]


Solution : [0, 2, 1, 10, 20] has cost 59.


Before backtrack at level 16
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11]
 solution : [0, 2, 1, 10, 20]

After backtrack at level 16
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 29), (17, -1), (18, -1), (19, 41), (20, -1), (21, -1), (22, 4), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, -1), (31, 4), (32, 16), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 16 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 16 among pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 8, 9, 24, 27, 5, 11, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10, 8]


New level: 17
 pending : [16, 19, 32, 33, 4, 22, 31, 3, 15, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10, 8]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3, 15, 9, 24, 27, 5, 11, 30]
 solution : [0, 2, 1, 10, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, 128), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 25), (17, -1), (18, -1), (19, 25), (20, -1), (21, -1), (22, 0), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, 0), (32, 20), (33, 20)]

Covered at level 17 : {3, 4, 11, 15, 22, 31}

After reduction : 
 pending  : [16, 19, 32, 33, 9, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8]


Before reduction : 
 pending  : [16, 19, 32, 33, 9, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 0), (12, -1), (13, -1), (14, -1), (15, 0), (16, 25), (17, -1), (18, -1), (19, 25), (20, -1), (21, -1), (22, 0), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, 0), (32, 20), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Covered at level 17 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 9, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8]


Solution : [0, 2, 1, 10, 8] has cost 26.


Decide in level 17 among pending : [16, 19, 32, 33, 9, 24, 27, 5, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

Decide 9 with phase True at level 17

After decision at level 17
 pending : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8, 9]


New level: 18
 pending : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8, 9]


Before reduction : 
 pending  : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 25), (17, -1), (18, -1), (19, 25), (20, -1), (21, -1), (22, -1), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 4), (31, -1), (32, 20), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 5, 16, 19, 24, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 9]


Solution : [0, 2, 1, 10, 8, 9] has cost 32.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 8, 9]

After backtrack at level 18
 pending : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8, 9]


Invert decision for 9 at level 17


New level: 18
 pending : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8]


Before reduction : 
 pending  : [16, 19, 32, 33, 24, 27, 5, 30]
 solution : [0, 2, 1, 10, 8]

Essensial at level 18 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 16, 19, 24, 27, 30}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, -1), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 8, 5]


Solution : [0, 2, 1, 10, 8, 5] has cost 39.


Before backtrack at level 18
 pending : []
 solution : [0, 2, 1, 10, 8, 5]

After backtrack at level 18
 pending : [5, 16, 19, 32, 33, 24, 27, 30]
 solution : [0, 2, 1, 10, 8]


Before backtrack at level 17
 pending : [5, 16, 19, 32, 33, 24, 27, 30]
 solution : [0, 2, 1, 10, 8]

After backtrack at level 17
 pending : [5, 16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [5, 16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [5, 16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Covered at level 17 : set()

After reduction : 
 pending  : [5, 16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10]


Solution : [0, 2, 1, 10] has cost 20.


Decide in level 17 among pending : [5, 16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

Decide 5 with phase True at level 17

After decision at level 17
 pending : [16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10, 5]


New level: 18
 pending : [16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10, 5]


Before reduction : 
 pending  : [16, 19, 32, 33, 24, 27, 30, 4, 22, 31, 3, 15, 11, 9]
 solution : [0, 2, 1, 10, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, 128), (6, -1), (7, -1), (8, -1), (9, 128), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 113), (17, -1), (18, -1), (19, 113), (20, -1), (21, -1), (22, 32), (23, -1), (24, 32), (25, -1), (26, -1), (27, 32), (28, -1), (29, -1), (30, 64), (31, 32), (32, 82), (33, 82)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 18 : {24, 9, 27}

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 5]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 5]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 0), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 5]


Solution : [0, 2, 1, 10, 5] has cost 33.


Before backtrack at level 18
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 5]

After backtrack at level 18
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11, 24, 27, 9]
 solution : [0, 2, 1, 10, 5]


Invert decision for 5 at level 17


New level: 18
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11, 24, 27, 9]
 solution : [0, 2, 1, 10]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11, 24, 27, 9]
 solution : [0, 2, 1, 10]

Essensial at level 18 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 18 : {24, 27}

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 9]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 9]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, 0), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]
 solution : [0, 2, 1, 10, 9]


Solution : [0, 2, 1, 10, 9] has cost 26.


Decide in level 18 among pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

Decide 11 with phase True at level 18

After decision at level 18
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9, 11]


New level: 19
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9, 11]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 128), (12, -1), (13, -1), (14, -1), (15, 64), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 32), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 3, 4, 15, 16, 19, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 9, 11]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 9, 11]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 10, 9, 11]


Solution : [0, 2, 1, 10, 9, 11] has cost 32.


Before backtrack at level 19
 pending : []
 solution : [0, 2, 1, 10, 9, 11]

After backtrack at level 19
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9, 11]


Invert decision for 11 at level 18


New level: 19
 pending : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3, 15]
 solution : [0, 2, 1, 10, 9]

Essensial at level 19 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]


Before reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 30, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]


Solution : [0, 2, 1, 10, 9, 15] has cost 28.


Decide in level 19 among pending : [16, 19, 32, 33, 30, 4, 22, 31, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

Decide 30 with phase True at level 19

After decision at level 19
 pending : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]


New level: 20
 pending : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 64), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

Covered at level 20 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]


Solution : [0, 2, 1, 10, 9, 15, 30] has cost 38.


Before backtrack at level 20
 pending : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]

After backtrack at level 20
 pending : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 30]


Invert decision for 30 at level 19


New level: 20
 pending : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]


Before reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 19), (17, -1), (18, -1), (19, 21), (20, -1), (21, -1), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 4), (32, 6), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Covered at level 20 : set()

After reduction : 
 pending  : [16, 19, 32, 33, 4, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]


Solution : [0, 2, 1, 10, 9, 15] has cost 28.


Decide in level 20 among pending : [16, 19, 32, 33, 4, 22, 31, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

Decide 4 with phase True at level 20

After decision at level 20
 pending : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 4]


New level: 21
 pending : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 4]


Before reduction : 
 pending  : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 4]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 26), (17, -1), (18, -1), (19, 26), (20, -1), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 8), (32, 12), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 3, 22, 31}

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 4]


Before reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 4]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 4]


Solution : [0, 2, 1, 10, 9, 15, 4] has cost 37.


Before backtrack at level 21
 pending : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 4]

After backtrack at level 21
 pending : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15, 4]


Invert decision for 4 at level 20


New level: 21
 pending : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]


Before reduction : 
 pending  : [16, 19, 32, 33, 22, 31, 3]
 solution : [0, 2, 1, 10, 9, 15]

Essensial at level 21 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 22, 31}

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 3]


Before reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 3]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 3]


Solution : [0, 2, 1, 10, 9, 15, 3] has cost 37.


Before backtrack at level 21
 pending : [16, 19]
 solution : [0, 2, 1, 10, 9, 15, 3]

After backtrack at level 21
 pending : [16, 19, 3, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 9, 15]


Before backtrack at level 20
 pending : [16, 19, 3, 32, 33, 22, 31]
 solution : [0, 2, 1, 10, 9, 15]

After backtrack at level 20
 pending : [16, 19, 3, 32, 33, 22, 31, 4]
 solution : [0, 2, 1, 10, 9, 15]


Before backtrack at level 19
 pending : [16, 19, 3, 32, 33, 22, 31, 4]
 solution : [0, 2, 1, 10, 9, 15]

After backtrack at level 19
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30]
 solution : [0, 2, 1, 10, 9]


Before backtrack at level 18
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30]
 solution : [0, 2, 1, 10, 9]

After backtrack at level 18
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11]
 solution : [0, 2, 1, 10]


Before backtrack at level 17
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11]
 solution : [0, 2, 1, 10]

After backtrack at level 17
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5]
 solution : [0, 2, 1, 10]


Before backtrack at level 16
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5]
 solution : [0, 2, 1, 10]

After backtrack at level 16
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8]
 solution : [0, 2, 1, 10]


Before backtrack at level 15
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8]
 solution : [0, 2, 1, 10]

After backtrack at level 15
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20]
 solution : [0, 2, 1, 10]


Before backtrack at level 14
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20]
 solution : [0, 2, 1, 10]

After backtrack at level 14
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25]
 solution : [0, 2, 1, 10]


Before backtrack at level 13
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25]
 solution : [0, 2, 1, 10]

After backtrack at level 13
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6]
 solution : [0, 2, 1, 10]


Before backtrack at level 12
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6]
 solution : [0, 2, 1, 10]

After backtrack at level 12
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7]
 solution : [0, 2, 1, 10]


Before backtrack at level 11
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7]
 solution : [0, 2, 1, 10]

After backtrack at level 11
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14]
 solution : [0, 2, 1, 10]


Before backtrack at level 10
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14]
 solution : [0, 2, 1, 10]

After backtrack at level 10
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21]
 solution : [0, 2, 1, 10]


Before backtrack at level 9
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21]
 solution : [0, 2, 1, 10]

After backtrack at level 9
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28]
 solution : [0, 2, 1, 10]


Before backtrack at level 8
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28]
 solution : [0, 2, 1, 10]

After backtrack at level 8
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17]
 solution : [0, 2, 1, 10]


Before backtrack at level 7
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17]
 solution : [0, 2, 1, 10]

After backtrack at level 7
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18]
 solution : [0, 2, 1, 10]


Before backtrack at level 6
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18]
 solution : [0, 2, 1, 10]

After backtrack at level 6
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26]
 solution : [0, 2, 1, 10]


Before backtrack at level 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26]
 solution : [0, 2, 1, 10]

After backtrack at level 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29]
 solution : [0, 2, 1, 10]


Before backtrack at level 4
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29]
 solution : [0, 2, 1, 10]

After backtrack at level 4
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13]
 solution : [0, 2, 1, 10]


Before backtrack at level 3
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13]
 solution : [0, 2, 1, 10]

After backtrack at level 3
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23, 12]
 solution : [0, 2, 1, 10]


Invert decision for 10 at level 2


New level: 3
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23, 12]
 solution : [0, 2, 1]


Before reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23, 12]
 solution : [0, 2, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, -1), (19, 8), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Covered at level 3 : set()

After reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23, 12]
 solution : [0, 2, 1]


Solution : [0, 2, 1] has cost 10.


Decide in level 3 among pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Decide 12 with phase True at level 3

After decision at level 3
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12]


New level: 4
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12]


Before reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, 576), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 258), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 44), (17, 136), (18, 68), (19, 22), (20, 56), (21, 16), (22, 256), (23, 128), (24, 64), (25, 128), (26, 20), (27, 128), (28, 256), (29, 40), (30, 16), (31, 128), (32, 76), (33, 148)]

Covered at level 4 : set()

After reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12]


Solution : [0, 2, 1, 12] has cost 28.


Decide in level 4 among pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 9, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 258), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 44), (17, 136), (18, 68), (19, 22), (20, 56), (21, 16), (22, 256), (23, 128), (24, 64), (25, 128), (26, 20), (27, 128), (28, 256), (29, 40), (30, 16), (31, 128), (32, 76), (33, 148)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12, 9]


New level: 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12, 9]


Before reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 24, 27, 11, 5, 8, 20, 25, 6, 7, 14, 21, 28, 17, 18, 26, 29, 13, 23]
 solution : [0, 2, 1, 12, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 258), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 44), (17, 136), (18, 68), (19, 22), (20, 56), (21, 16), (22, 256), (23, 128), (24, 64), (25, 128), (26, 20), (27, 128), (28, 256), (29, 40), (30, 16), (31, 128), (32, 76), (33, 148)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 0), (6, 0), (7, 258), (8, 128), (9, -1), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 10), (17, 32), (18, 16), (19, 5), (20, 14), (21, 4), (22, 256), (23, 32), (24, 0), (25, 4), (26, 0), (27, 0), (28, 8), (29, 0), (30, 4), (31, 128), (32, 5), (33, 10)]

Covered at level 5 : {5, 6, 24, 26, 27, 29}

After reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23]
 solution : [0, 2, 1, 12, 9]


Before reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23]
 solution : [0, 2, 1, 12, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 0), (6, 0), (7, 258), (8, 128), (9, -1), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 10), (17, 32), (18, 16), (19, 5), (20, 14), (21, 4), (22, 256), (23, 32), (24, 0), (25, 4), (26, 0), (27, 0), (28, 8), (29, 0), (30, 4), (31, 128), (32, 5), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 10), (17, 32), (18, 16), (19, 5), (20, 14), (21, 4), (22, 256), (23, 32), (24, -1), (25, 4), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 128), (32, 5), (33, 10)]

Covered at level 5 : set()

After reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23]
 solution : [0, 2, 1, 12, 9]


Solution : [0, 2, 1, 12, 9] has cost 34.


Before backtrack at level 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23]
 solution : [0, 2, 1, 12, 9]

After backtrack at level 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 5, 6, 26, 29]
 solution : [0, 2, 1, 12, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 5, 6, 26, 29]
 solution : [0, 2, 1, 12]


Before reduction : 
 pending  : [16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 11, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 5, 6, 26, 29]
 solution : [0, 2, 1, 12]

Essensial at level 5 : {11, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 10), (17, 32), (18, 16), (19, 5), (20, 14), (21, 4), (22, 256), (23, 32), (24, -1), (25, 4), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 128), (32, 5), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {3, 4, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 12, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 12, 11, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, 0), (7, 0), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 12, 11, 5]


Solution : [0, 2, 1, 12, 11, 5] has cost 47.


Before backtrack at level 5
 pending : []
 solution : [0, 2, 1, 12, 11, 5]

After backtrack at level 5
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29]
 solution : [0, 2, 1, 12]


Before backtrack at level 4
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29]
 solution : [0, 2, 1, 12]

After backtrack at level 4
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 12]


Invert decision for 12 at level 3


New level: 4
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1]


Before reduction : 
 pending  : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Covered at level 4 : set()

After reduction : 
 pending  : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1]


Solution : [0, 2, 1] has cost 10.


Decide in level 4 among pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 17, 18, 13, 23, 24, 27, 6, 26, 29, 9]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Decide 17 with phase True at level 4

After decision at level 4
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]


New level: 5
 pending : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]


Before reduction : 
 pending  : [11, 5, 16, 19, 3, 32, 33, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 18, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, 520), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 256), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 0), (17, -1), (18, 0), (19, 0), (20, 5), (21, 5), (22, 256), (23, 128), (24, 64), (25, 2), (26, 192), (27, 128), (28, 4), (29, 384), (30, 2), (31, 32), (32, 0), (33, 0)]

Covered at level 5 : {32, 33, 16, 18, 19}

After reduction : 
 pending  : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]


Before reduction : 
 pending  : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 256), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 0), (17, -1), (18, 0), (19, 0), (20, 5), (21, 5), (22, 256), (23, 128), (24, 64), (25, 2), (26, 192), (27, 128), (28, 4), (29, 384), (30, 2), (31, 32), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 256), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 256), (23, 128), (24, 64), (25, 2), (26, 192), (27, 128), (28, 4), (29, 384), (30, 2), (31, 32), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]


Solution : [0, 2, 1, 17] has cost 44.


Before backtrack at level 5
 pending : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9]
 solution : [0, 2, 1, 17]

After backtrack at level 5
 pending : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 17]


Invert decision for 17 at level 4


New level: 5
 pending : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1]


Before reduction : 
 pending  : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 256), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, 5), (21, 5), (22, 256), (23, 128), (24, 64), (25, 2), (26, 192), (27, 128), (28, 4), (29, 384), (30, 2), (31, 32), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, -1), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Covered at level 5 : set()

After reduction : 
 pending  : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1]


Solution : [0, 2, 1] has cost 10.


Decide in level 5 among pending : [11, 5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, -1), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

Decide 11 with phase True at level 5

After decision at level 5
 pending : [5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


New level: 6
 pending : [5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


Before reduction : 
 pending  : [5, 3, 22, 31, 4, 15, 30, 8, 20, 25, 7, 14, 21, 28, 13, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 320), (6, 128), (7, 264), (8, 128), (9, 512), (10, -1), (11, 512), (12, -1), (13, 256), (14, 128), (15, 64), (16, 228), (17, -1), (18, 272), (19, 136), (20, 448), (21, 160), (22, 256), (23, 128), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 64), (31, 128), (32, 88), (33, 164)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 320), (6, 128), (7, 0), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 50), (17, -1), (18, 50), (19, 25), (20, 112), (21, 22), (22, 8), (23, 32), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 16), (31, 2), (32, 68), (33, 136)]

Covered at level 6 : {3, 4, 7, 8, 13, 14, 15}

After reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


Before reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 320), (6, 128), (7, 0), (8, 0), (9, 512), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 50), (17, -1), (18, 50), (19, 25), (20, 112), (21, 22), (22, 8), (23, 32), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 16), (31, 2), (32, 68), (33, 136)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 320), (6, 128), (7, -1), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 50), (17, -1), (18, 50), (19, 25), (20, 112), (21, 22), (22, 8), (23, 32), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 16), (31, 2), (32, 68), (33, 136)]

Covered at level 6 : set()

After reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


Solution : [0, 2, 1, 11] has cost 16.


Decide in level 6 among pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 9, 16, 19, 32, 33, 18]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 320), (6, 128), (7, -1), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 50), (17, -1), (18, 50), (19, 25), (20, 112), (21, 22), (22, 8), (23, 32), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 16), (31, 2), (32, 68), (33, 136)]

Decide 9 with phase True at level 6

After decision at level 6
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11, 9]


New level: 7
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11, 9]


Before reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 320), (6, 128), (7, -1), (8, -1), (9, 512), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 50), (17, -1), (18, 50), (19, 25), (20, 112), (21, 22), (22, 8), (23, 32), (24, 64), (25, 128), (26, 192), (27, 128), (28, 256), (29, 384), (30, 16), (31, 2), (32, 68), (33, 136)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {5, 6, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 9]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 9]


Solution : [0, 2, 1, 11, 9] has cost 22.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 1, 11, 9]

After backtrack at level 7
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11, 9]


Invert decision for 9 at level 6


New level: 7
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


Before reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]

Essensial at level 7 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 6, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 5]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 11, 5]


Solution : [0, 2, 1, 11, 5] has cost 29.


Before backtrack at level 7
 pending : []
 solution : [0, 2, 1, 11, 5]

After backtrack at level 7
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]


Before backtrack at level 6
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18]
 solution : [0, 2, 1, 11]

After backtrack at level 6
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 9]
 solution : [0, 2, 1, 11]


Invert decision for 11 at level 5


New level: 6
 pending : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 9]
 solution : [0, 2, 1]


Before reduction : 
 pending  : [5, 22, 31, 30, 20, 25, 21, 28, 23, 24, 27, 6, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 9]
 solution : [0, 2, 1]

Essensial at level 6 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 0), (6, 0), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, 400), (21, 112), (22, 256), (23, 32), (24, 0), (25, 16), (26, 5), (27, 0), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

Covered at level 6 : {24, 27, 5, 6}

After reduction : 
 pending  : [22, 31, 30, 20, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9]


Before reduction : 
 pending  : [22, 31, 30, 20, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, 0), (6, 0), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, 400), (21, 112), (22, 256), (23, 32), (24, 0), (25, 16), (26, 5), (27, 0), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, 400), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 31, 30, 20, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9]


Solution : [0, 2, 1, 9] has cost 16.


Decide in level 6 among pending : [22, 31, 30, 20, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, 400), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

Decide 20 with phase True at level 6

After decision at level 6
 pending : [22, 31, 30, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]


New level: 7
 pending : [22, 31, 30, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]


Before reduction : 
 pending  : [22, 31, 30, 25, 21, 28, 23, 26, 29, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, 400), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 257), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 12), (17, -1), (18, 18), (19, 9), (20, -1), (21, 0), (22, 64), (23, 8), (24, -1), (25, 2), (26, 0), (27, -1), (28, 4), (29, 0), (30, 0), (31, 16), (32, 3), (33, 6)]

Covered at level 7 : {26, 29, 21, 30}

After reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]


Before reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 257), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 12), (17, -1), (18, 18), (19, 9), (20, -1), (21, 0), (22, 64), (23, 8), (24, -1), (25, 2), (26, 0), (27, -1), (28, 4), (29, 0), (30, 0), (31, 16), (32, 3), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 257), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 12), (17, -1), (18, 18), (19, 9), (20, -1), (21, -1), (22, 64), (23, 8), (24, -1), (25, 2), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 16), (32, 3), (33, 6)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]


Solution : [0, 2, 1, 9, 20] has cost 55.


Before backtrack at level 7
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13]
 solution : [0, 2, 1, 9, 20]

After backtrack at level 7
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9, 20]


Invert decision for 20 at level 6


New level: 7
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]


Before reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 257), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 12), (17, -1), (18, 18), (19, 9), (20, -1), (21, -1), (22, 64), (23, 8), (24, -1), (25, 2), (26, -1), (27, -1), (28, 4), (29, -1), (30, -1), (31, 16), (32, 3), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, -1), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]


Solution : [0, 2, 1, 9] has cost 16.


Decide in level 7 among pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 7, 14, 13, 30, 21, 26, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, -1), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9, 7]


New level: 8
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9, 7]


Before reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 128), (5, -1), (6, -1), (7, 258), (8, 128), (9, -1), (10, -1), (11, -1), (12, -1), (13, 256), (14, 128), (15, 64), (16, 52), (17, -1), (18, 52), (19, 26), (20, -1), (21, 112), (22, 256), (23, 32), (24, -1), (25, 16), (26, 5), (27, -1), (28, 32), (29, 10), (30, 64), (31, 128), (32, 12), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {3, 4, 8, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 7]


Solution : [0, 2, 1, 9, 7] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 9, 7]

After backtrack at level 8
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]


Before reduction : 
 pending  : [22, 31, 25, 28, 23, 16, 19, 32, 33, 18, 3, 4, 15, 8, 14, 13, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]

Essensial at level 8 : {18, 4, 13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 3, 8, 14, 15, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 18, 4, 13]


Before reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 18, 4, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 0), (15, 0), (16, 0), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 1, 9, 18, 4, 13]


Solution : [0, 2, 1, 9, 18, 4, 13] has cost 64.


Before backtrack at level 8
 pending : []
 solution : [0, 2, 1, 9, 18, 4, 13]

After backtrack at level 8
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]


Before backtrack at level 7
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29]
 solution : [0, 2, 1, 9]

After backtrack at level 7
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7]
 solution : [0, 2, 1, 9]


Before backtrack at level 6
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7]
 solution : [0, 2, 1, 9]

After backtrack at level 6
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20]
 solution : [0, 2, 1]


Before backtrack at level 5
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20]
 solution : [0, 2, 1]

After backtrack at level 5
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11]
 solution : [0, 2, 1]


Before backtrack at level 4
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11]
 solution : [0, 2, 1]

After backtrack at level 4
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17]
 solution : [0, 2, 1]


Before backtrack at level 3
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17]
 solution : [0, 2, 1]

After backtrack at level 3
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12]
 solution : [0, 2, 1]


Before backtrack at level 2
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12]
 solution : [0, 2, 1]

After backtrack at level 2
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2]


Before reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Covered at level 2 : set()

After reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2]


Solution : [0, 2] has cost 7.


Decide in level 2 among pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 5, 24, 27, 6, 20, 11, 17, 12, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]


New level: 3
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 24, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, 768), (6, 512), (7, 576), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 544), (19, 544), (20, 512), (21, 320), (22, 256), (23, 128), (24, 128), (25, 256), (26, 384), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 352), (33, 336)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, 576), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, 0), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 3 : {24}

After reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, 576), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, 0), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, 576), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 3 : set()

After reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 3 among pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 7, 9, 27, 6, 20, 11, 17, 12, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, 576), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 7 with phase True at level 3

After decision at level 3
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]


New level: 4
 pending : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]


Before reduction : 
 pending  : [18, 4, 13, 22, 31, 25, 28, 23, 16, 19, 32, 33, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, 576), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 0), (5, -1), (6, 128), (7, -1), (8, 128), (9, 64), (10, 64), (11, 64), (12, 576), (13, 0), (14, 1), (15, 512), (16, 0), (17, 21), (18, 0), (19, 16), (20, 12), (21, 5), (22, 32), (23, 16), (24, -1), (25, 0), (26, 5), (27, 16), (28, 16), (29, 12), (30, 2), (31, 0), (32, 9), (33, 0)]

Covered at level 4 : {33, 4, 13, 16, 18, 25, 31}

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, 0), (5, -1), (6, 128), (7, -1), (8, 128), (9, 64), (10, 64), (11, 64), (12, 576), (13, 0), (14, 1), (15, 512), (16, 0), (17, 21), (18, 0), (19, 16), (20, 12), (21, 5), (22, 32), (23, 16), (24, -1), (25, 0), (26, 5), (27, 16), (28, 16), (29, 12), (30, 2), (31, 0), (32, 9), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, 64), (10, 64), (11, 64), (12, 576), (13, -1), (14, 1), (15, 512), (16, -1), (17, 21), (18, -1), (19, 16), (20, 12), (21, 5), (22, 16), (23, 16), (24, -1), (25, -1), (26, 5), (27, 16), (28, 16), (29, 12), (30, 2), (31, -1), (32, 9), (33, -1)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]


Solution : [0, 2, 5, 7] has cost 33.


Before backtrack at level 4
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10]
 solution : [0, 2, 5, 7]

After backtrack at level 4
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 7]


Invert decision for 7 at level 3


New level: 4
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, 64), (10, 64), (11, 64), (12, 576), (13, -1), (14, 1), (15, 512), (16, -1), (17, 21), (18, -1), (19, 16), (20, 12), (21, 5), (22, 16), (23, 16), (24, -1), (25, -1), (26, 5), (27, 16), (28, 16), (29, 12), (30, 2), (31, -1), (32, 9), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 4 : set()

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 4 among pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 12, 10, 18, 4, 13, 31, 25, 16, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]


New level: 5
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 26, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 264), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 41), (17, 66), (18, 52), (19, 34), (20, 24), (21, 16), (22, 256), (23, 64), (24, -1), (25, 16), (26, 0), (27, 32), (28, 128), (29, 5), (30, 16), (31, 256), (32, 28), (33, 152)]

Covered at level 5 : {26}

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 264), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 41), (17, 66), (18, 52), (19, 34), (20, 24), (21, 16), (22, 256), (23, 64), (24, -1), (25, 16), (26, 0), (27, 32), (28, 128), (29, 5), (30, 16), (31, 256), (32, 28), (33, 152)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 264), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 41), (17, 66), (18, 52), (19, 34), (20, 24), (21, 16), (22, 256), (23, 64), (24, -1), (25, 16), (26, -1), (27, 32), (28, 128), (29, 5), (30, 16), (31, 256), (32, 28), (33, 152)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]


Solution : [0, 2, 5, 12] has cost 38.


Before backtrack at level 5
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33]
 solution : [0, 2, 5, 12]

After backtrack at level 5
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 264), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 41), (17, 66), (18, 52), (19, 34), (20, 24), (21, 16), (22, 256), (23, 64), (24, -1), (25, 16), (26, -1), (27, 32), (28, 128), (29, 5), (30, 16), (31, 256), (32, 28), (33, 152)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 5 : set()

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 5 among pending : [22, 28, 23, 19, 32, 3, 15, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 15 with phase True at level 5

After decision at level 5
 pending : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15]


New level: 6
 pending : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 256), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 64), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15]


Solution : [0, 2, 5, 15] has cost 22.


Decide in level 6 among pending : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 11, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 256), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 64), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Decide 11 with phase True at level 6

After decision at level 6
 pending : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15, 11]


New level: 7
 pending : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15, 11]


Before reduction : 
 pending  : [22, 28, 23, 19, 32, 3, 8, 14, 30, 21, 29, 9, 27, 6, 20, 17, 10, 18, 4, 13, 31, 25, 16, 33, 26]
 solution : [0, 2, 5, 15, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 256), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 64), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 16), (5, -1), (6, 2), (7, -1), (8, 256), (9, 0), (10, 0), (11, -1), (12, -1), (13, 64), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 5), (20, 0), (21, 2), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 128), (31, 1), (32, 5), (33, 5)]

Covered at level 7 : {9, 10, 17, 18, 20, 22, 23, 25, 26, 27, 28, 29}

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33]
 solution : [0, 2, 5, 15, 11]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33]
 solution : [0, 2, 5, 15, 11]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 16), (5, -1), (6, 2), (7, -1), (8, 256), (9, 0), (10, 0), (11, -1), (12, -1), (13, 64), (14, 128), (15, -1), (16, 5), (17, 0), (18, 0), (19, 5), (20, 0), (21, 2), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 128), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 16), (5, -1), (6, 2), (7, -1), (8, 256), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 32), (15, -1), (16, 5), (17, -1), (18, -1), (19, 5), (20, -1), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33]
 solution : [0, 2, 5, 15, 11]


Solution : [0, 2, 5, 15, 11] has cost 28.


Before backtrack at level 7
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33]
 solution : [0, 2, 5, 15, 11]

After backtrack at level 7
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 11]


Invert decision for 11 at level 6


New level: 7
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 16), (5, -1), (6, 2), (7, -1), (8, 256), (9, -1), (10, -1), (11, -1), (12, -1), (13, 64), (14, 32), (15, -1), (16, 5), (17, -1), (18, -1), (19, 5), (20, -1), (21, 2), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, 1), (32, 5), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]


Solution : [0, 2, 5, 15] has cost 22.


Decide in level 7 among pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 13, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]


New level: 8
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, 512), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 2), (7, -1), (8, 256), (9, 64), (10, 130), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, 52), (17, 197), (18, 52), (19, 52), (20, 400), (21, 144), (22, 128), (23, 32), (24, -1), (25, 16), (26, 5), (27, 16), (28, 128), (29, 96), (30, 128), (31, 16), (32, 24), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]


Solution : [0, 2, 5, 15, 13] has cost 27.


Before backtrack at level 8
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]

After backtrack at level 8
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 2), (7, -1), (8, 256), (9, 64), (10, 130), (11, -1), (12, -1), (13, -1), (14, 1), (15, -1), (16, 52), (17, 197), (18, 52), (19, 52), (20, 400), (21, 144), (22, 128), (23, 32), (24, -1), (25, 16), (26, 5), (27, 16), (28, 128), (29, 96), (30, 128), (31, 16), (32, 24), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15]


Solution : [0, 2, 5, 15] has cost 22.


Decide in level 8 among pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 20, 17, 10, 18, 25, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Decide 20 with phase True at level 8

After decision at level 8
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 20]


New level: 9
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 20]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 29, 9, 27, 17, 10, 18, 25, 26]
 solution : [0, 2, 5, 15, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, 400), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 260), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 153), (17, 50), (18, 36), (19, 37), (20, -1), (21, 2), (22, 64), (23, 16), (24, -1), (25, 4), (26, 0), (27, 8), (28, 32), (29, 0), (30, 2), (31, 32), (32, 8), (33, 34)]

Covered at level 9 : {26, 29}

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25]
 solution : [0, 2, 5, 15, 20]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25]
 solution : [0, 2, 5, 15, 20]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 260), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 153), (17, 50), (18, 36), (19, 37), (20, -1), (21, 2), (22, 64), (23, 16), (24, -1), (25, 4), (26, 0), (27, 8), (28, 32), (29, 0), (30, 2), (31, 32), (32, 8), (33, 34)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 260), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 153), (17, 50), (18, 36), (19, 37), (20, -1), (21, 2), (22, 64), (23, 16), (24, -1), (25, 4), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 32), (32, 8), (33, 34)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25]
 solution : [0, 2, 5, 15, 20]


Solution : [0, 2, 5, 15, 20] has cost 61.


Before backtrack at level 9
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25]
 solution : [0, 2, 5, 15, 20]

After backtrack at level 9
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 20]


Invert decision for 20 at level 8


New level: 9
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25, 29, 26]
 solution : [0, 2, 5, 15]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25, 29, 26]
 solution : [0, 2, 5, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 260), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 153), (17, 50), (18, 36), (19, 37), (20, -1), (21, 2), (22, 64), (23, 16), (24, -1), (25, 4), (26, -1), (27, 8), (28, 32), (29, -1), (30, 2), (31, 32), (32, 8), (33, 34)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, -1), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25, 29, 26]
 solution : [0, 2, 5, 15]


Solution : [0, 2, 5, 15] has cost 22.


Decide in level 9 among pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 10, 18, 25, 29, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, -1), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]


New level: 10
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 23, 9, 27, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 256), (5, -1), (6, 2), (7, -1), (8, 256), (9, 128), (10, 272), (11, -1), (12, -1), (13, -1), (14, 256), (15, -1), (16, 225), (17, 210), (18, 104), (19, 52), (20, -1), (21, 192), (22, 256), (23, 64), (24, -1), (25, 32), (26, 5), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 24), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 64), (5, -1), (6, 2), (7, -1), (8, 256), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4), (15, -1), (16, 52), (17, 26), (18, 26), (19, 52), (20, -1), (21, 144), (22, 8), (23, 0), (24, -1), (25, 8), (26, 5), (27, 0), (28, 8), (29, 5), (30, 128), (31, 16), (32, 24), (33, 24)]

Covered at level 10 : {9, 27, 23}

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 64), (5, -1), (6, 2), (7, -1), (8, 256), (9, 0), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4), (15, -1), (16, 52), (17, 26), (18, 26), (19, 52), (20, -1), (21, 144), (22, 8), (23, 0), (24, -1), (25, 8), (26, 5), (27, 0), (28, 8), (29, 5), (30, 128), (31, 16), (32, 24), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 64), (5, -1), (6, 2), (7, -1), (8, 256), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4), (15, -1), (16, 52), (17, 26), (18, 26), (19, 52), (20, -1), (21, 144), (22, 8), (23, -1), (24, -1), (25, 8), (26, 5), (27, -1), (28, 8), (29, 5), (30, 128), (31, 16), (32, 24), (33, 24)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]


Solution : [0, 2, 5, 15, 10] has cost 32.


Before backtrack at level 10
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26]
 solution : [0, 2, 5, 15, 10]

After backtrack at level 10
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26, 23, 9, 27]
 solution : [0, 2, 5, 15, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26, 23, 9, 27]
 solution : [0, 2, 5, 15]


Before reduction : 
 pending  : [19, 32, 3, 8, 14, 30, 21, 6, 4, 31, 16, 33, 22, 28, 17, 18, 25, 29, 26, 23, 9, 27]
 solution : [0, 2, 5, 15]

Essensial at level 10 : {17, 4, 9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 64), (5, -1), (6, 2), (7, -1), (8, 256), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 4), (15, -1), (16, 52), (17, 26), (18, 26), (19, 52), (20, -1), (21, 144), (22, 8), (23, -1), (24, -1), (25, 8), (26, 5), (27, -1), (28, 8), (29, 5), (30, 128), (31, 16), (32, 24), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 2), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [3, 8, 14, 6]
 solution : [0, 2, 5, 15, 17, 4, 9]


Before reduction : 
 pending  : [3, 8, 14, 6]
 solution : [0, 2, 5, 15, 17, 4, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 2), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 2), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [3, 8, 14, 6]
 solution : [0, 2, 5, 15, 17, 4, 9]


Solution : [0, 2, 5, 15, 17, 4, 9] has cost 71.


Before backtrack at level 10
 pending : [3, 8, 14, 6]
 solution : [0, 2, 5, 15, 17, 4, 9]

After backtrack at level 10
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27]
 solution : [0, 2, 5, 15]


Before backtrack at level 9
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27]
 solution : [0, 2, 5, 15]

After backtrack at level 9
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10]
 solution : [0, 2, 5, 15]


Before backtrack at level 8
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10]
 solution : [0, 2, 5, 15]

After backtrack at level 8
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20]
 solution : [0, 2, 5, 15]


Before backtrack at level 7
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20]
 solution : [0, 2, 5, 15]

After backtrack at level 7
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13]
 solution : [0, 2, 5, 15]


Before backtrack at level 6
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13]
 solution : [0, 2, 5, 15]

After backtrack at level 6
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 15]


Invert decision for 15 at level 5


New level: 6
 pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, -1), (6, 2), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, 64), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 6 among pending : [3, 8, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [3, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]


New level: 7
 pending : [3, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]


Before reduction : 
 pending  : [3, 14, 6, 4, 17, 9, 19, 32, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 26, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, 512), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 64), (5, -1), (6, 0), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 512), (14, 4), (15, -1), (16, 25), (17, 210), (18, 8), (19, 0), (20, 386), (21, 14), (22, 256), (23, 64), (24, -1), (25, 2), (26, 0), (27, 32), (28, 128), (29, 96), (30, 4), (31, 64), (32, 0), (33, 36)]

Covered at level 7 : {32, 3, 6, 19, 26}

After reduction : 
 pending  : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]


Before reduction : 
 pending  : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 64), (5, -1), (6, 0), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 512), (14, 4), (15, -1), (16, 25), (17, 210), (18, 8), (19, 0), (20, 386), (21, 14), (22, 256), (23, 64), (24, -1), (25, 2), (26, 0), (27, 32), (28, 128), (29, 96), (30, 4), (31, 64), (32, 0), (33, 36)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 512), (14, 4), (15, -1), (16, 25), (17, 210), (18, 8), (19, -1), (20, 386), (21, 14), (22, 256), (23, 64), (24, -1), (25, 2), (26, -1), (27, 32), (28, 128), (29, 96), (30, 4), (31, 64), (32, -1), (33, 36)]

Covered at level 7 : set()

After reduction : 
 pending  : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]


Solution : [0, 2, 5, 8] has cost 26.


Before backtrack at level 7
 pending : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11]
 solution : [0, 2, 5, 8]

After backtrack at level 7
 pending : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 64), (5, -1), (6, -1), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 512), (14, 4), (15, -1), (16, 25), (17, 210), (18, 8), (19, -1), (20, 386), (21, 14), (22, 256), (23, 64), (24, -1), (25, 2), (26, -1), (27, 32), (28, 128), (29, 96), (30, 4), (31, 64), (32, -1), (33, 36)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 7 : set()

After reduction : 
 pending  : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 7 among pending : [14, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 14 with phase True at level 7

After decision at level 7
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]


New level: 8
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]


Before reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, 512), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 128), (14, -1), (15, -1), (16, 225), (17, 210), (18, 52), (19, 160), (20, 400), (21, 256), (22, 256), (23, 64), (24, -1), (25, 16), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 128), (32, 84), (33, 164)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]


Solution : [0, 2, 5, 14] has cost 25.


Before backtrack at level 8
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]

After backtrack at level 8
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 14]


Invert decision for 14 at level 7


New level: 8
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, 64), (7, -1), (8, -1), (9, 128), (10, 258), (11, 512), (12, -1), (13, 128), (14, -1), (15, -1), (16, 225), (17, 210), (18, 52), (19, 160), (20, 400), (21, 256), (22, 256), (23, 64), (24, -1), (25, 16), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 128), (32, 84), (33, 164)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, -1), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Covered at level 8 : set()

After reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]


Solution : [0, 2, 5] has cost 20.


Decide in level 8 among pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 13, 11, 3, 6, 19, 32, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, -1), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

Decide 13 with phase True at level 8

After decision at level 8
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]


New level: 9
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]


Before reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, 128), (7, -1), (8, -1), (9, 128), (10, 272), (11, 512), (12, -1), (13, 512), (14, -1), (15, -1), (16, 225), (17, 210), (18, 256), (19, 208), (20, 448), (21, 256), (22, 256), (23, 64), (24, -1), (25, 64), (26, 40), (27, 32), (28, 128), (29, 96), (30, 128), (31, 256), (32, 84), (33, 168)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, 130), (11, 256), (12, -1), (13, -1), (14, -1), (15, -1), (16, 52), (17, 197), (18, 208), (19, 208), (20, 448), (21, 208), (22, 128), (23, 32), (24, -1), (25, 64), (26, 40), (27, 16), (28, 128), (29, 96), (30, 128), (31, 32), (32, 84), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]


Solution : [0, 2, 5, 13] has cost 25.


Before backtrack at level 9
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]

After backtrack at level 9
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5, 13]


Invert decision for 13 at level 8


New level: 9
 pending : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]


Before reduction : 
 pending  : [4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 18, 25, 29, 23, 27, 10, 20, 11, 3, 6, 19, 32, 26]
 solution : [0, 2, 5]

Essensial at level 9 : {3, 11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, 128), (7, -1), (8, -1), (9, 64), (10, 130), (11, 256), (12, -1), (13, -1), (14, -1), (15, -1), (16, 52), (17, 197), (18, 208), (19, 208), (20, 448), (21, 208), (22, 128), (23, 32), (24, -1), (25, 64), (26, 40), (27, 16), (28, 128), (29, 96), (30, 128), (31, 32), (32, 84), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 2), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 1), (19, 32), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 4, 9, 10, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [18, 6, 19]
 solution : [0, 2, 5, 3, 11]


Before reduction : 
 pending  : [18, 6, 19]
 solution : [0, 2, 5, 3, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, 2), (7, -1), (8, -1), (9, 0), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 1), (19, 32), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 1), (19, 4), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [18, 6, 19]
 solution : [0, 2, 5, 3, 11]


Solution : [0, 2, 5, 3, 11] has cost 35.


Before backtrack at level 9
 pending : [18, 6, 19]
 solution : [0, 2, 5, 3, 11]

After backtrack at level 9
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26]
 solution : [0, 2, 5]


Before backtrack at level 8
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26]
 solution : [0, 2, 5]

After backtrack at level 8
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13]
 solution : [0, 2, 5]


Before backtrack at level 7
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13]
 solution : [0, 2, 5]

After backtrack at level 7
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14]
 solution : [0, 2, 5]


Before backtrack at level 6
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14]
 solution : [0, 2, 5]

After backtrack at level 6
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8]
 solution : [0, 2, 5]


Before backtrack at level 5
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8]
 solution : [0, 2, 5]

After backtrack at level 5
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15]
 solution : [0, 2, 5]


Before backtrack at level 4
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15]
 solution : [0, 2, 5]

After backtrack at level 4
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12]
 solution : [0, 2, 5]


Before backtrack at level 3
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12]
 solution : [0, 2, 5]

After backtrack at level 3
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2]


Before reduction : 
 pending  : [18, 6, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2]

Essensial at level 3 : {6}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 2), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 1), (19, 4), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 520), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 212), (19, 272), (20, 448), (21, 320), (22, 256), (23, 128), (24, 64), (25, 128), (26, 96), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 192), (33, 336)]

Covered at level 3 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 520), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 212), (19, 272), (20, 448), (21, 320), (22, 256), (23, 128), (24, 64), (25, 128), (26, 96), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 192), (33, 336)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 520), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 212), (19, 272), (20, 448), (21, 320), (22, 256), (23, 128), (24, 64), (25, 128), (26, 96), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 192), (33, 336)]

Covered at level 3 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6]


Solution : [0, 2, 6] has cost 13.


Decide in level 3 among pending : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 10, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 520), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 212), (19, 272), (20, 448), (21, 320), (22, 256), (23, 128), (24, 64), (25, 128), (26, 96), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 192), (33, 336)]

Decide 10 with phase True at level 3

After decision at level 3
 pending : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6, 10]


New level: 4
 pending : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6, 10]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 9, 30, 21, 31, 16, 33, 22, 28, 25, 29, 23, 27, 20, 32, 26, 13, 14, 8, 15, 12, 24, 7]
 solution : [0, 2, 6, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 520), (8, 512), (9, 512), (10, 640), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 456), (17, 520), (18, 212), (19, 272), (20, 448), (21, 320), (22, 256), (23, 128), (24, 64), (25, 128), (26, 96), (27, 128), (28, 256), (29, 384), (30, 128), (31, 256), (32, 192), (33, 336)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, -1), (7, 256), (8, 512), (9, 0), (10, -1), (11, 128), (12, 576), (13, 512), (14, 512), (15, 512), (16, 52), (17, 26), (18, 52), (19, 104), (20, 112), (21, 208), (22, 32), (23, 0), (24, 0), (25, 16), (26, 10), (27, 0), (28, 8), (29, 5), (30, 128), (31, 64), (32, 44), (33, 24)]

Covered at level 4 : {24, 9, 27, 23}

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7]
 solution : [0, 2, 6, 10]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7]
 solution : [0, 2, 6, 10]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, -1), (7, 256), (8, 512), (9, 0), (10, -1), (11, 128), (12, 576), (13, 512), (14, 512), (15, 512), (16, 52), (17, 26), (18, 52), (19, 104), (20, 112), (21, 208), (22, 32), (23, 0), (24, 0), (25, 16), (26, 10), (27, 0), (28, 8), (29, 5), (30, 128), (31, 64), (32, 44), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, -1), (7, 256), (8, 512), (9, -1), (10, -1), (11, 128), (12, 576), (13, 512), (14, 512), (15, 512), (16, 52), (17, 26), (18, 52), (19, 104), (20, 112), (21, 208), (22, 32), (23, -1), (24, -1), (25, 16), (26, 10), (27, -1), (28, 8), (29, 5), (30, 128), (31, 64), (32, 44), (33, 24)]

Covered at level 4 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7]
 solution : [0, 2, 6, 10]


Solution : [0, 2, 6, 10] has cost 23.


Before backtrack at level 4
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7]
 solution : [0, 2, 6, 10]

After backtrack at level 4
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 9, 23, 27, 24]
 solution : [0, 2, 6, 10]


Invert decision for 10 at level 3


New level: 4
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 9, 23, 27, 24]
 solution : [0, 2, 6]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 9, 23, 27, 24]
 solution : [0, 2, 6]

Essensial at level 4 : {9}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 128), (5, -1), (6, -1), (7, 256), (8, 512), (9, -1), (10, -1), (11, 128), (12, 576), (13, 512), (14, 512), (15, 512), (16, 52), (17, 26), (18, 52), (19, 104), (20, 112), (21, 208), (22, 32), (23, -1), (24, -1), (25, 16), (26, 10), (27, -1), (28, 8), (29, 5), (30, 128), (31, 64), (32, 44), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, 0), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

Covered at level 4 : {27}

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 23, 24]
 solution : [0, 2, 6, 9]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 23, 24]
 solution : [0, 2, 6, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, 0), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

Covered at level 4 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 23, 24]
 solution : [0, 2, 6, 9]


Solution : [0, 2, 6, 9] has cost 19.


Decide in level 4 among pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 12, 7, 23, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

Decide 12 with phase True at level 4

After decision at level 4
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]


New level: 5
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 29, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, 576), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 40), (17, 64), (18, 53), (19, 36), (20, 24), (21, 16), (22, 256), (23, 64), (24, 32), (25, 128), (26, 5), (27, -1), (28, 16), (29, 0), (30, 16), (31, 256), (32, 148), (33, 40)]

Covered at level 5 : {29}

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 40), (17, 64), (18, 53), (19, 36), (20, 24), (21, 16), (22, 256), (23, 64), (24, 32), (25, 128), (26, 5), (27, -1), (28, 16), (29, 0), (30, 16), (31, 256), (32, 148), (33, 40)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 40), (17, 64), (18, 53), (19, 36), (20, 24), (21, 16), (22, 256), (23, 64), (24, 32), (25, 128), (26, 5), (27, -1), (28, 16), (29, -1), (30, 16), (31, 256), (32, 148), (33, 40)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]


Solution : [0, 2, 6, 9, 12] has cost 37.


Before backtrack at level 5
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24]
 solution : [0, 2, 6, 9, 12]

After backtrack at level 5
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24, 29]
 solution : [0, 2, 6, 9, 12]


Invert decision for 12 at level 4


New level: 5
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24, 29]
 solution : [0, 2, 6, 9]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24, 29]
 solution : [0, 2, 6, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 40), (17, 64), (18, 53), (19, 36), (20, 24), (21, 16), (22, 256), (23, 64), (24, 32), (25, 128), (26, 5), (27, -1), (28, 16), (29, -1), (30, 16), (31, 256), (32, 148), (33, 40)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

Covered at level 5 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24, 29]
 solution : [0, 2, 6, 9]


Solution : [0, 2, 6, 9] has cost 19.


Decide in level 5 among pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 7, 23, 24, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

Decide 7 with phase True at level 5

After decision at level 5
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 7]


New level: 6
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 7]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 256), (4, 256), (5, -1), (6, -1), (7, 514), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 512), (14, 512), (15, 512), (16, 208), (17, 256), (18, 209), (19, 264), (20, 448), (21, 256), (22, 256), (23, 64), (24, 32), (25, 128), (26, 96), (27, -1), (28, 64), (29, 40), (30, 128), (31, 256), (32, 192), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {3, 4, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 2, 6, 9, 7]


Before reduction : 
 pending  : []
 solution : [0, 2, 6, 9, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, -1), (11, 0), (12, -1), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, -1), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 2, 6, 9, 7]


Solution : [0, 2, 6, 9, 7] has cost 32.


Before backtrack at level 6
 pending : []
 solution : [0, 2, 6, 9, 7]

After backtrack at level 6
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 7]


Invert decision for 7 at level 5


New level: 6
 pending : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9]


Before reduction : 
 pending  : [18, 19, 11, 3, 4, 17, 30, 21, 31, 16, 33, 22, 28, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9]

Essensial at level 6 : {4}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 128), (14, 128), (15, 512), (16, 128), (17, 130), (18, 146), (19, 38), (20, 304), (21, 81), (22, 32), (23, 32), (24, 8), (25, 16), (26, 9), (27, -1), (28, 0), (29, 2), (30, 2), (31, 128), (32, 4), (33, 4)]

Covered at level 6 : {28}

After reduction : 
 pending  : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 4]


Before reduction : 
 pending  : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 128), (14, 128), (15, 512), (16, 128), (17, 130), (18, 146), (19, 38), (20, 304), (21, 81), (22, 32), (23, 32), (24, 8), (25, 16), (26, 9), (27, -1), (28, 0), (29, 2), (30, 2), (31, 128), (32, 4), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 8), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, -1), (11, 512), (12, -1), (13, 128), (14, 128), (15, 512), (16, 128), (17, 130), (18, 146), (19, 38), (20, 304), (21, 81), (22, 32), (23, 32), (24, 8), (25, 16), (26, 9), (27, -1), (28, -1), (29, 2), (30, 2), (31, 128), (32, 4), (33, 4)]

Covered at level 6 : set()

After reduction : 
 pending  : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 4]


Solution : [0, 2, 6, 9, 4] has cost 28.


Before backtrack at level 6
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29]
 solution : [0, 2, 6, 9, 4]

After backtrack at level 6
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28]
 solution : [0, 2, 6, 9]


Before backtrack at level 5
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28]
 solution : [0, 2, 6, 9]

After backtrack at level 5
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7]
 solution : [0, 2, 6, 9]


Before backtrack at level 4
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7]
 solution : [0, 2, 6, 9]

After backtrack at level 4
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12]
 solution : [0, 2, 6]


Before backtrack at level 3
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12]
 solution : [0, 2, 6]

After backtrack at level 3
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12, 6, 10]
 solution : [0, 2]


Before backtrack at level 2
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12, 6, 10]
 solution : [0, 2]

After backtrack at level 2
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12, 6, 10, 5]
 solution : [0, 2]


Before backtrack at level 1
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12, 6, 10, 5]
 solution : [0, 2]

After backtrack at level 1
 pending : [18, 19, 11, 3, 17, 30, 21, 31, 16, 33, 22, 25, 20, 32, 26, 13, 14, 8, 15, 23, 24, 29, 4, 28, 7, 9, 27, 12, 6, 10, 5, 1]
 solution : [0, 2]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 2, 1, 11, 9] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_2] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_11] forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1 # qcost: 6

invariant [invar_9] forall NODE0,NODE1. ~sent(NODE0,NODE1) | allowed_in(NODE0) | allowed_in(NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 26.011 seconds

[QRM NOTE]: Time elapsed since last: 2.607 seconds

[QRM NOTE]: Peak memory: 2300881 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_2
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_11
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_2 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_11 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_2 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_2 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_9 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[(R & P) & T & ~(R' & P')]: unsatisfiable

[Strengthening Assertion]: ((forall NODE0. ~sent(NODE0,NODE0)) & (forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE0,NODE1. ~sent(NODE0,NODE1) | internal(NODE1) | internal(NODE0) | NODE0 = NODE1) & (forall NODE0,NODE1. ~sent(NODE0,NODE1) | allowed_in(NODE0) | allowed_in(NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 49.301 seconds

[QRM NOTE]: Time elapsed since last: 23.290 seconds

[QRM NOTE]: Peak memory: 1308757 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

