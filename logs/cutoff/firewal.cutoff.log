
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: symmetric group order: 6

[FW NOTE]: number of branching actions: 18

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[QRM NOTE]: Time elapsed since start: 6.851 seconds

[QRM NOTE]: Time elapsed since last: 6.851 seconds

[QRM NOTE]: Peak memory: 1176973 bytes


===================================

	Forward reachability

===================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: allowed_in('node',)
predicate: sent('node', 'node')
predicate: internal('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000101000000000
lex min decimal: 1536
states:
000011000000000
000110000000000
000101000000000




=== State Orbit 3 =====================
size : 3
repr state: 000001000000000
lex min decimal: 512
states:
000100000000000
000001000000000
000010000000000




=== State Orbit 4 =====================
size : 6
repr state: 010101010000000
lex min decimal: 7176
states:
100011000000100
010101000000010
010101010000000
001110001000000
001110000001000
100011000100000




=== State Orbit 5 =====================
size : 3
repr state: 010101010000010
lex min decimal: 7240
states:
100011000100100
010101010000010
001110001001000




=== State Orbit 6 =====================
size : 6
repr state: 010101010100010
lex min decimal: 7242
states:
100011010100100
010101010001010
010101010100010
001110001001010
100011001100100
001110001001100




=== State Orbit 7 =====================
size : 3
repr state: 010101010101010
lex min decimal: 7246
states:
001110001001110
100011011100100
010101010101010




=== State Orbit 8 =====================
size : 6
repr state: 010101010100000
lex min decimal: 7178
states:
100011010100000
010101010100000
100011001000100
001110001000100
001110000001010
010101000001010




=== State Orbit 9 =====================
size : 6
repr state: 010101010101000
lex min decimal: 7182
states:
010101000101010
001110000001110
010101010101000
100011011000100
001110001000110
100011011100000




=== State Orbit 10 =====================
size : 6
repr state: 010101010001000
lex min decimal: 7180
states:
100011010000100
001110000001100
010101010001000
001110001000010
010101000100010
100011001100000




=== State Orbit 11 =====================
size : 6
repr state: 100001000000100
lex min decimal: 5128
states:
010001000000010
100010000100000
001010000001000
001100001000000
100001000000100
010100010000000




=== State Orbit 12 =====================
size : 3
repr state: 110001000000110
lex min decimal: 14528
states:
011100011000000
110001000000110
101010000101000




=== State Orbit 13 =====================
size : 6
repr state: 110001001000110
lex min decimal: 14532
states:
011100011000100
101010000101010
101010010101000
110001000001110
011100011100000
110001001000110




=== State Orbit 14 =====================
size : 3
repr state: 110001001001110
lex min decimal: 14564
states:
101010010101010
011100011100100
110001001001110




=== State Orbit 15 =====================
size : 6
repr state: 100001001000100
lex min decimal: 5130
states:
100010010100000
010100010100000
001010000001010
010001000001010
100001001000100
001100001000100



[QRM NOTE]: Time elapsed since start: 6.997 seconds

[QRM NOTE]: Time elapsed since last: 0.146 seconds

[QRM NOTE]: Peak memory: 1227130 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 7.001 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 190256 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ----11-----1---
6     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
7     : ----11-------1-
7     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
8     : ---1-1--1------
8     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
9     : ---1-1------1--
9     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
10     : ---11--1-------
10     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
11     : ---11----1-----
11     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ----00-----1---
12     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
13     : ----00-------1-
13     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
14     : ---0-0--1------
14     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
15     : ---0-0------1--
15     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
16     : ---00--1-------
16     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
17     : ---00----1-----
17     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : -0--0------1---
18     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
19     : --0--0-------1-
19     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
20     : 0--0----1------
20     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
21     : --0--0------1--
21     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
22     : 0--0---1-------
22     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
23     : -0--0----1-----
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48 (*) : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : -0--0--------1-
49     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
50     : --0--0--1------
50     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
51     : 0--0--------1--
51     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : -0--0--1-------
52     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
53     : 0--0-----1-----
53     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0---1-----1---
24     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
25     : --0-1--------1-
25     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
26     : 0----1--1------
26     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
27     : --01--------1--
27     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
28     : 0---1--1-------
28     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
29     : -0-1-----1-----
29     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
42 (*) : --0-1------1---
42     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
43     : -0---1-------1-
43     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
44     : --01----1------
44     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
45     : 0----1------1--
45     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
46     : -0-1---1-------
46     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
47     : 0---1----1-----
47     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1---0-----1---
30     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
31     : --1-0--------1-
31     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
32     : 1----0--1------
32     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
33     : --10--------1--
33     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
34     : 1---0--1-------
34     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
35     : -1-0-----1-----
35     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
60 (*) : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : -1---0-------1-
61     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
62     : --10----1------
62     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
63     : 1----0------1--
63     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
64     : -1-0---1-------
64     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
65     : 1---0----1-----
65     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
36 (*) : -00--------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
37     : -00----------1-
37     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
38     : 0-0-----1------
38     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
39     : 0-0---------1--
39     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
40     : 00-----1-------
40     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
41     : 00-------1-----
41     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : -11--------1---
54     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
55     : -11----------1-
55     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
56     : 1-1-----1------
56     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
57     : 1-1---------1--
57     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
58     : 11-----1-------
58     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
59     : 11-------1-----
59     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11--1---
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
67     : -------11----1-
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
68     : --------11-1---
68     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
69     : ---------1-11--
69     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
70     : -------1----11-
70     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : ---------1--11-
71     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : -------1---11--
72     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
73     : --------11---1-
73     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -1-0---------0-
74     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
75     : --10-------0---
75     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
76     : 1---0-------0--
76     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
77     : --1-0---0------
77     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
78     : 1----0---0-----
78     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
79     : -1---0-0-------
79     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : 11-----------0-
83     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
84     : 1-1--------0---
84     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
85     : 11----------0--
85     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
86     : -11-----0------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
87     : 1-1------0-----
87     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
88     : -11----0-------
88     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : -110-----------
90     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
91     : 1-1-0----------
91     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
92     : 11---0---------
92     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : ----0---01--1--
96     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
97     : -----0-0-1--1--
97     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
98     : ---0---1---0-1-
98     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
99     : -----0-1-0---1-
99     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
100     : ---0----1--1-0-
100     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
101     : ----0---1--10--
101     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
102 (*) : ----0--10---1--
102     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
103     : -----0-011-----
103     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
104     : ---0-----1-0-1-
104     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
105     : -----0-1-0-1---
105     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
106     : ---0-------110-
106     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
107     : ----0---1---01-
107     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
168 (*) : -----0--01--1--
168     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
169     : ----0--0-1--1--
169     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
170     : -----0-1---0-1-
170     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
171     : ---0---1-0---1-
171     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
172     : ----0---1--1-0-
172     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
173     : ---0----1--10--
173     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
174 (*) : -----0-10---1--
174     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
175     : ----0--011-----
175     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
176     : -----0---1-0-1-
176     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
177     : ---0---1-0-1---
177     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
178     : ----0------110-
178     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
179     : ---0----1---01-
179     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
108 (*) : 0---0---0---1--
108     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
109     : 0----0-0-1-----
109     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
110     : -0-0-------0-1-
110     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
111     : -0---0-1-0-----
111     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
112     : --00-------1-0-
112     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
113     : --0-0---1---0--
113     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : 0------10---1--
114     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
115     : 0------011-----
115     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
116     : -0-------1-0-1-
116     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
117     : -0-----1-0-1---
117     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
118     : --0--------110-
118     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
119     : --0-----1---01-
119     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
126 (*) : 0-------01--1--
126     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 0------0-1--1--
127     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -0-----1---0-1-
128     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : -0-----1-0---1-
129     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : --0-----1--1-0-
130     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : --0-----1--10--
131     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
120 (*) : 0-------0--01--
120     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
121     : 0------0-1---0-
121     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
122     : -0------0--0-1-
122     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
123     : -0-----1-0--0--
123     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
124     : --0----0---1-0-
124     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
125     : --0-----10--0--
125     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
138 (*) : -----0--0--01--
138     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
139     : ----0--0-1---0-
139     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
140     : -----0--0--0-1-
140     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
141     : ---0---1-0--0--
141     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
142     : ----0--0---1-0-
142     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
143     : ---0----10--0--
143     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
144 (*) : ---10---0---1--
144     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
145     : ---1-0-0-1-----
145     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
146     : ---01------0-1-
146     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
147     : ----10-1-0-----
147     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
148     : ---0-1-----1-0-
148     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
149     : ----01--1---0--
149     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
150 (*) : ----00--0---1--
150     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
151     : ----00-0-1-----
151     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
152     : ---0-0-----0-1-
152     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
153     : ---0-0-1-0-----
153     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
154     : ---00------1-0-
154     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
155     : ---00---1---0--
155     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
156 (*) : ---1----01--1--
156     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
157     : ---1---0-1--1--
157     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
158     : ----1--1---0-1-
158     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
159     : ----1--1-0---1-
159     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
160     : -----1--1--1-0-
160     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
161     : -----1--1--10--
161     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
162 (*) : ---1---10---1--
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
163     : ---1---011-----
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
164     : ----1----1-0-1-
164     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
165     : ----1--1-0-1---
165     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
166     : -----1-----110-
166     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
167     : -----1--1---01-
167     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
180 (*) : --1-----01--1--
180     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
181     : -1-----0-1--1--
181     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
182     : --1----1---0-1-
182     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
183     : 1------1-0---1-
183     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
184     : -1------1--1-0-
184     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
185     : 1-------1--10--
185     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
186 (*) : --1----10---1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
187     : -1-----011-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
188     : --1------1-0-1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
189     : 1------1-0-1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
190     : -1---------110-
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
191     : 1-------1---01-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
264 (*) : 1----------110-
264     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
265     : 1--------1-0-1-
265     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
266     : -1------1---01-
266     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
267     : -1-----10---1--
267     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
268     : --1----1-0-1---
268     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
269     : --1----011-----
269     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
270 (*) : --1----0-1--1--
270     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
271     : -1------01--1--
271     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
272     : --1----1-0---1-
272     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
273     : 1------1---0-1-
273     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
274     : -1------1--10--
274     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
275     : 1-------1--1-0-
275     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
192 (*) : --1-1----1--1--
192     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
193     : -1---1---1--1--
193     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
194     : --11---1-----1-
194     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
195     : 1----1-1-----1-
195     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
196     : -1-1----1--1---
196     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
197     : 1---1---1--1---
197     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
204 (*) : --1-1--1----1--
204     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
205     : -1---1--11-----
205     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
206     : --11-----1---1-
206     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
207     : 1----1-1---1---
207     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
208     : -1-1-------11--
208     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
209     : 1---1---1----1-
209     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
258 (*) : 1---1------11--
258     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
259     : 1----1---1---1-
259     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
260     : -1-1----1----1-
260     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
261     : -1---1-1----1--
261     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
262     : --11---1---1---
262     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
263     : --1-1---11-----
263     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
330 (*) : -1-1--------11-
330     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
331     : --11-----1-1---
331     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
332     : 1---1-------11-
332     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
333     : --1-1--11------
333     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
334     : 1----1---1-1---
334     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
335     : -1---1-11------
335     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
198 (*) : -01------1--1--
198     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
199     : -10------1--1--
199     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
200     : 0-1----1-----1-
200     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
201     : 1-0----1-----1-
201     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
202     : 01------1--1---
202     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
203     : 10------1--1---
203     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
210 (*) : -01----1----1--
210     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
211     : -10-----11-----
211     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
212     : 0-1------1---1-
212     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
213     : 1-0----1---1---
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
214     : 01---------11--
214     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
215     : 10------1----1-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
252 (*) : 10---------11--
252     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
253     : 1-0------1---1-
253     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
254     : 01------1----1-
254     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
255     : -10----1----1--
255     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
256     : 0-1----1---1---
256     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
257     : -01-----11-----
257     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
324 (*) : 01----------11-
324     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
325     : 0-1------1-1---
325     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
326     : 10----------11-
326     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
327     : -01----11------
327     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
328     : 1-0------1-1---
328     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
329     : -10----11------
329     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
216 (*) : ----10-1----1--
216     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
217     : ----01--11-----
217     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
218     : ---1-0---1---1-
218     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
219     : ---0-1-1---1---
219     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
220     : ---10------11--
220     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
221     : ---01---1----1-
221     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
240 (*) : ----10---1--1--
240     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
241     : ----01---1--1--
241     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
242     : ---1-0-1-----1-
242     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
243     : ---0-1-1-----1-
243     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
244     : ---10---1--1---
244     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
245     : ---01---1--1---
245     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
246 (*) : ----01-1----1--
246     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
247     : ----10--11-----
247     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
248     : ---0-1---1---1-
248     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
249     : ---1-0-1---1---
249     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
250     : ---01------11--
250     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
251     : ---10---1----1-
251     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
336 (*) : ---10-------11-
336     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
337     : ---1-0---1-1---
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
338     : ---01-------11-
338     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
339     : ----10-11------
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
340     : ---0-1---1-1---
340     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
341     : ----01-11------
341     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
222 (*) : -0---0-1----1--
222     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
223     : --0-0---11-----
223     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
224     : 0----0---1---1-
224     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
225     : --00---1---1---
225     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
226     : 0---0------11--
226     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
227     : -0-0----1----1-
227     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
228 (*) : --0-0--1----1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
229     : -0---0--11-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
230     : --00-----1---1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
231     : 0----0-1---1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
232     : -0-0-------11--
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
233     : 0---0---1----1-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
234 (*) : --0-0----1--1--
234     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
235     : -0---0---1--1--
235     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
236     : --00---1-----1-
236     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
237     : 0----0-1-----1-
237     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
238     : -0-0----1--1---
238     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
239     : 0---0---1--1---
239     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
342 (*) : 0---0-------11-
342     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
343     : 0----0---1-1---
343     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
344     : -0-0--------11-
344     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
345     : -0---0-11------
345     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
346     : --00-----1-1---
346     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
347     : --0-0--11------
347     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
276 (*) : -1------0---10-
276     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
277     : --1----0-1-0---
277     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
278     : 1----------001-
278     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
279     : --1----100-----
279     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
280     : 1--------0-1-0-
280     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
281     : -1-----01---0--
281     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
282 (*) : 01------0---1--
282     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
283     : 0-1----0-1-----
283     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
284     : 10---------0-1-
284     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
285     : -01----1-0-----
285     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
286     : 1-0--------1-0-
286     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
287     : -10-----1---0--
287     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
300 (*) : -10---------10-
300     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
301     : -01------1-0---
301     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
302     : 1-0---------01-
302     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
303     : 0-1----10------
303     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
304     : 10-------0-1---
304     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
305     : 01-----01------
305     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
312 (*) : 01-----0----1--
312     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
313     : 0-1-----01-----
313     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
314     : 10-------0---1-
314     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
315     : -01----1---0---
315     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
316     : 1-0--------10--
316     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
317     : -10-----1----0-
317     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
288 (*) : -1---0--0---1--
288     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
289     : --1-0--0-1-----
289     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
290     : 1----0-----0-1-
290     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
291     : --10---1-0-----
291     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
292     : 1---0------1-0-
292     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
293     : -1-0----1---0--
293     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
294 (*) : -1-1----0---1--
294     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
295     : --11---0-1-----
295     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
296     : 1---1------0-1-
296     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
297     : --1-1--1-0-----
297     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
298     : 1----1-----1-0-
298     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
299     : -1---1--1---0--
299     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
306 (*) : -1---1------10-
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
307     : --1-1----1-0---
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
308     : 1----1------01-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
309     : --11---10------
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
310     : 1---1----0-1---
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
311     : -1-1---01------
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
318 (*) : -1-1---0----1--
318     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
319     : --11----01-----
319     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
320     : 1---1----0---1-
320     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
321     : --1-1--1---0---
321     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
322     : 1----1-----10--
322     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
323     : -1---1--1----0-
323     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 7.083 seconds

[QRM NOTE]: Time elapsed since last: 0.082 seconds

[QRM NOTE]: Peak memory: 1556120 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 11}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

[QRM NOTE]: Time elapsed since start: 7.099 seconds

[QRM NOTE]: Time elapsed since last: 0.016 seconds

[QRM NOTE]: Peak memory: 495366 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ----11-----1---
6     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
7     : ----11-------1-
7     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
8     : ---1-1--1------
8     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
9     : ---1-1------1--
9     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
10     : ---11--1-------
10     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
11     : ---11----1-----
11     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'internal(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~internal(NODE0) | ~internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ----00-----1---
12     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
13     : ----00-------1-
13     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
14     : ---0-0--1------
14     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
15     : ---0-0------1--
15     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
16     : ---00--1-------
16     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
17     : ---00----1-----
17     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', '~internal(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : -0--0------1---
18     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
19     : --0--0-------1-
19     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
20     : 0--0----1------
20     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
21     : --0--0------1--
21     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
22     : 0--0---1-------
22     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
23     : -0--0----1-----
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48 (*) : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : -0--0--------1-
49     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
50     : --0--0--1------
50     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
51     : 0--0--------1--
51     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : -0--0--1-------
52     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
53     : 0--0-----1-----
53     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node1)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE2)', '~internal(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. allowed_in(NODE2) | internal(NODE2) | ~sent(NODE0,NODE1) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0---1-----1---
24     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
25     : --0-1--------1-
25     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
26     : 0----1--1------
26     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
27     : --01--------1--
27     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
28     : 0---1--1-------
28     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
29     : -0-1-----1-----
29     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
42 (*) : --0-1------1---
42     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
43     : -0---1-------1-
43     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
44     : --01----1------
44     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
45     : 0----1------1--
45     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
46     : -0-1---1-------
46     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
47     : 0---1----1-----
47     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', '~allowed_in(NODE3)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1---0-----1---
30     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
31     : --1-0--------1-
31     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
32     : 1----0--1------
32     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
33     : --10--------1--
33     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
34     : 1---0--1-------
34     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
35     : -1-0-----1-----
35     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
60 (*) : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : -1---0-------1-
61     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
62     : --10----1------
62     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
63     : 1----0------1--
63     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
64     : -1-0---1-------
64     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
65     : 1---0----1-----
65     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node1)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~internal(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
36 (*) : -00--------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
37     : -00----------1-
37     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
38     : 0-0-----1------
38     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
39     : 0-0---------1--
39     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
40     : 00-----1-------
40     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
41     : 00-------1-----
41     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~allowed_in(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', '~allowed_in(NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : -11--------1---
54     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
55     : -11----------1-
55     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
56     : 1-1-----1------
56     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
57     : 1-1---------1--
57     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
58     : 11-----1-------
58     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
59     : 11-------1-----
59     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$0; node$0$sent$0$0], 'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$0; node$0$sent$0$0, 'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'allowed_in(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~allowed_in(NODE0) | ~allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11--1---
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
67     : -------11----1-
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
68     : --------11-1---
68     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
69     : ---------1-11--
69     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
70     : -------1----11-
70     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : ---------1--11-
71     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : -------1---11--
72     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
73     : --------11---1-
73     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$0, node$0$sent$1$1; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$2, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$0$2; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE5)', 'sent(NODE0,NODE3)', 'sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ~sent(NODE1,NODE4) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -1-0---------0-
74     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
75     : --10-------0---
75     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
76     : 1---0-------0--
76     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
77     : --1-0---0------
77     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
78     : 1----0---0-----
78     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
79     : -1---0-0-------
79     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE2,NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : 11-----------0-
83     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
84     : 1-1--------0---
84     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
85     : 11----------0--
85     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
86     : -11-----0------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
87     : 1-1------0-----
87     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
88     : -11----0-------
88     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1; node$1$sent$1$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1; node$1$sent$1$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$1; node$1$sent$1$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$1; node$1$sent$1$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : -110-----------
90     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
91     : 1-1-0----------
91     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
92     : 11---0---------
92     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : ----0---01--1--
96     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
97     : -----0-0-1--1--
97     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
98     : ---0---1---0-1-
98     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
99     : -----0-1-0---1-
99     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
100     : ---0----1--1-0-
100     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
101     : ----0---1--10--
101     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
102 (*) : ----0--10---1--
102     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
103     : -----0-011-----
103     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
104     : ---0-----1-0-1-
104     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
105     : -----0-1-0-1---
105     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
106     : ---0-------110-
106     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
107     : ----0---1---01-
107     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
168 (*) : -----0--01--1--
168     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
169     : ----0--0-1--1--
169     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
170     : -----0-1---0-1-
170     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
171     : ---0---1-0---1-
171     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
172     : ----0---1--1-0-
172     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
173     : ---0----1--10--
173     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
174 (*) : -----0-10---1--
174     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
175     : ----0--011-----
175     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
176     : -----0---1-0-1-
176     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
177     : ---0---1-0-1---
177     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
178     : ----0------110-
178     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
179     : ---0----1---01-
179     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$1; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$1; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE3,NODE1)', '~internal(NODE4)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2. sent(NODE3,NODE1) | internal(NODE4) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
108 (*) : 0---0---0---1--
108     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
109     : 0----0-0-1-----
109     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
110     : -0-0-------0-1-
110     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
111     : -0---0-1-0-----
111     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
112     : --00-------1-0-
112     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
113     : --0-0---1---0--
113     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE1)', '~sent(NODE1,NODE0)', '~internal(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. allowed_in(NODE1) | sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : 0------10---1--
114     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
115     : 0------011-----
115     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
116     : -0-------1-0-1-
116     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
117     : -0-----1-0-1---
117     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
118     : --0--------110-
118     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
119     : --0-----1---01-
119     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
126 (*) : 0-------01--1--
126     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 0------0-1--1--
127     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -0-----1---0-1-
128     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : -0-----1-0---1-
129     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : --0-----1--1-0-
130     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : --0-----1--10--
131     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE3,NODE1)', '~allowed_in(NODE3)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. sent(NODE3,NODE1) | allowed_in(NODE3) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
120 (*) : 0-------0--01--
120     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
121     : 0------0-1---0-
121     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
122     : -0------0--0-1-
122     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
123     : -0-----1-0--0--
123     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
124     : --0----0---1-0-
124     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
125     : --0-----10--0--
125     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', '~allowed_in(NODE1)', '~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE0) | allowed_in(NODE1) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'internal(NODE0)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
138 (*) : -----0--0--01--
138     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
139     : ----0--0-1---0-
139     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
140     : -----0--0--0-1-
140     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
141     : ---0---1-0--0--
141     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
142     : ----0--0---1-0-
142     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
143     : ---0----10--0--
143     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$1$sent$1$1, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$sent$0': [node$1$sent$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$sent$0': node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', '~internal(NODE0)', '~sent(NODE1,NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE0) | internal(NODE0) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
144 (*) : ---10---0---1--
144     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
145     : ---1-0-0-1-----
145     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
146     : ---01------0-1-
146     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
147     : ----10-1-0-----
147     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
148     : ---0-1-----1-0-
148     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
149     : ----01--1---0--
149     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~internal(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE0)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', '~internal(NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | internal(NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
150 (*) : ----00--0---1--
150     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
151     : ----00-0-1-----
151     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
152     : ---0-0-----0-1-
152     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
153     : ---0-0-1-0-----
153     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
154     : ---00------1-0-
154     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
155     : ---00---1---0--
155     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', '~internal(node2)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', '~internal(node2)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE0)', '~sent(NODE1,NODE0)', '~internal(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. internal(NODE0) | sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
156 (*) : ---1----01--1--
156     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
157     : ---1---0-1--1--
157     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
158     : ----1--1---0-1-
158     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
159     : ----1--1-0---1-
159     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
160     : -----1--1--1-0-
160     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
161     : -----1--1--10--
161     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
162 (*) : ---1---10---1--
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
163     : ---1---011-----
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
164     : ----1----1-0-1-
164     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
165     : ----1--1-0-1---
165     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
166     : -----1-----110-
166     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
167     : -----1--1---01-
167     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE0)', 'internal(NODE0)', 'sent(NODE1,NODE3)', '~sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE3,NODE0,NODE2. ~sent(NODE2,NODE0) | ~internal(NODE0) | ~sent(NODE1,NODE3) | sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2))


=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
180 (*) : --1-----01--1--
180     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
181     : -1-----0-1--1--
181     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
182     : --1----1---0-1-
182     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
183     : 1------1-0---1-
183     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
184     : -1------1--1-0-
184     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
185     : 1-------1--10--
185     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
186 (*) : --1----10---1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
187     : -1-----011-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
188     : --1------1-0-1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
189     : 1------1-0-1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
190     : -1---------110-
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
191     : 1-------1---01-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
264 (*) : 1----------110-
264     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
265     : 1--------1-0-1-
265     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
266     : -1------1---01-
266     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
267     : -1-----10---1--
267     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
268     : --1----1-0-1---
268     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
269     : --1----011-----
269     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
270 (*) : --1----0-1--1--
270     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
271     : -1------01--1--
271     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
272     : --1----1-0---1-
272     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
273     : 1------1---0-1-
273     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
274     : -1------1--10--
274     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
275     : 1-------1--1-0-
275     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', '~sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', '~sent(NODE5,NODE6)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE6', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE6', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE6']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE6', 'NODE1:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE6', 'NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE4:node = NODE6', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE5', 'NODE3:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE3:node = NODE5', 'NODE3:node = NODE6', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node', 'NODE6:node']

eq_terms: ['NODE5:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE5:node = NODE6', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node', 'NODE6:node']

eq_terms: ['NODE5:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE5:node = NODE6', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']

class signature: node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node', 'NODE6:node']

eq_terms: ['NODE5:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE5:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE6,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))


=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
192 (*) : --1-1----1--1--
192     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
193     : -1---1---1--1--
193     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
194     : --11---1-----1-
194     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
195     : 1----1-1-----1-
195     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
196     : -1-1----1--1---
196     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
197     : 1---1---1--1---
197     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
204 (*) : --1-1--1----1--
204     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
205     : -1---1--11-----
205     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
206     : --11-----1---1-
206     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
207     : 1----1-1---1---
207     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
208     : -1-1-------11--
208     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
209     : 1---1---1----1-
209     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
258 (*) : 1---1------11--
258     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
259     : 1----1---1---1-
259     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
260     : -1-1----1----1-
260     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
261     : -1---1-1----1--
261     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
262     : --11---1---1---
262     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
263     : --1-1---11-----
263     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
330 (*) : -1-1--------11-
330     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
331     : --11-----1-1---
331     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
332     : 1---1-------11-
332     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
333     : --1-1--11------
333     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
334     : 1----1---1-1---
334     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
335     : -1---1-11------
335     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'internal(NODE1)', 'sent(NODE3,NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE1', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3', 'NODE3:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node = NODE3', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~internal(NODE1) | ~sent(NODE3,NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE4 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
198 (*) : -01------1--1--
198     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
199     : -10------1--1--
199     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
200     : 0-1----1-----1-
200     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
201     : 1-0----1-----1-
201     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
202     : 01------1--1---
202     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
203     : 10------1--1---
203     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
210 (*) : -01----1----1--
210     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
211     : -10-----11-----
211     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
212     : 0-1------1---1-
212     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
213     : 1-0----1---1---
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
214     : 01---------11--
214     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
215     : 10------1----1-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
252 (*) : 10---------11--
252     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
253     : 1-0------1---1-
253     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
254     : 01------1----1-
254     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
255     : -10----1----1--
255     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
256     : 0-1----1---1---
256     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
257     : -01-----11-----
257     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
324 (*) : 01----------11-
324     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
325     : 0-1------1-1---
325     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
326     : 10----------11-
326     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
327     : -01----11------
327     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
328     : 1-0------1-1---
328     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
329     : -10----11------
329     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~allowed_in(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))


=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
216 (*) : ----10-1----1--
216     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
217     : ----01--11-----
217     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
218     : ---1-0---1---1-
218     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
219     : ---0-1-1---1---
219     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
220     : ---10------11--
220     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
221     : ---01---1----1-
221     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
240 (*) : ----10---1--1--
240     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
241     : ----01---1--1--
241     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
242     : ---1-0-1-----1-
242     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
243     : ---0-1-1-----1-
243     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
244     : ---10---1--1---
244     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
245     : ---01---1--1---
245     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
246 (*) : ----01-1----1--
246     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
247     : ----10--11-----
247     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
248     : ---0-1---1---1-
248     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
249     : ---1-0-1---1---
249     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
250     : ---01------11--
250     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
251     : ---10---1----1-
251     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
336 (*) : ---10-------11-
336     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
337     : ---1-0---1-1---
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
338     : ---01-------11-
338     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
339     : ----10-11------
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
340     : ---0-1---1-1---
340     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
341     : ----01-11------
341     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE5)', 'internal(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE4']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE5:node']

eq_terms: ['NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE1:node = NODE4', 'NODE1:node ~= NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. internal(NODE5) | ~internal(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE4 | NODE0 = NODE1))


=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
222 (*) : -0---0-1----1--
222     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
223     : --0-0---11-----
223     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
224     : 0----0---1---1-
224     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
225     : --00---1---1---
225     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
226     : 0---0------11--
226     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
227     : -0-0----1----1-
227     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
228 (*) : --0-0--1----1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
229     : -0---0--11-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
230     : --00-----1---1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
231     : 0----0-1---1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
232     : -0-0-------11--
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
233     : 0---0---1----1-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
234 (*) : --0-0----1--1--
234     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
235     : -0---0---1--1--
235     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
236     : --00---1-----1-
236     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
237     : 0----0-1-----1-
237     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
238     : -0-0----1--1---
238     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
239     : 0---0---1--1---
239     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
342 (*) : 0---0-------11-
342     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
343     : 0----0---1-1---
343     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
344     : -0-0--------11-
344     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
345     : -0---0-11------
345     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
346     : --00-----1-1---
346     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
347     : --0-0--11------
347     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$internal$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE5)', '~allowed_in(NODE4)', 'sent(NODE1,NODE3)', 'sent(NODE0,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE1:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. internal(NODE5) | allowed_in(NODE4) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2))


=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
276 (*) : -1------0---10-
276     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
277     : --1----0-1-0---
277     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
278     : 1----------001-
278     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
279     : --1----100-----
279     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
280     : 1--------0-1-0-
280     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
281     : -1-----01---0--
281     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$1$sent$0$1, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$1, node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$1 | node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$1], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$1, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$1; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', '~sent(NODE1,NODE0)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | sent(NODE1,NODE0) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
282 (*) : 01------0---1--
282     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
283     : 0-1----0-1-----
283     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
284     : 10---------0-1-
284     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
285     : -01----1-0-----
285     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
286     : 1-0--------1-0-
286     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
287     : -10-----1---0--
287     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
300 (*) : -10---------10-
300     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
301     : -01------1-0---
301     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
302     : 1-0---------01-
302     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
303     : 0-1----10------
303     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
304     : 10-------0-1---
304     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
305     : 01-----01------
305     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
312 (*) : 01-----0----1--
312     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
313     : 0-1-----01-----
313     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
314     : 10-------0---1-
314     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
315     : -01----1---0---
315     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
316     : 1-0--------10--
316     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
317     : -10-----1----0-
317     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$allowed_in': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE3,NODE4)', 'allowed_in(NODE0)', '~allowed_in(NODE3)', 'sent(NODE1,NODE2)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2. sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
288 (*) : -1---0--0---1--
288     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
289     : --1-0--0-1-----
289     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
290     : 1----0-----0-1-
290     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
291     : --10---1-0-----
291     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
292     : 1---0------1-0-
292     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
293     : -1-0----1---0--
293     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$1$sent$1$0, node$0$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', '~internal(NODE1)', 'sent(NODE1,NODE2)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | internal(NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)


=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
294 (*) : -1-1----0---1--
294     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
295     : --11---0-1-----
295     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
296     : 1---1------0-1-
296     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
297     : --1-1--1-0-----
297     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
298     : 1----1-----1-0-
298     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
299     : -1---1--1---0--
299     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
306 (*) : -1---1------10-
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
307     : --1-1----1-0---
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
308     : 1----1------01-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
309     : --11---10------
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
310     : 1---1----0-1---
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
311     : -1-1---01------
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
318 (*) : -1-1---0----1--
318     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
319     : --11----01-----
319     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
320     : 1---1----0---1-
320     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
321     : --1-1--1---0---
321     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
322     : 1----1-----10--
322     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
323     : -1---1--1----0-
323     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node2)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node2)', 'sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '1$sent': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE3)', 'internal(NODE1)', '~sent(NODE1,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE2', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE2:node']

eq_terms: ['NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE2', 'NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE0:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3', 'NODE1:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE4,NODE1,NODE0,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : -1-----0-----0-
80     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
81     : --1-----0--0---
81     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
82     : 1--------0--0--
82     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : --1--1---------
3     : ['allowed_in(node2)', 'internal(node2)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : 1--1-----------
5     : ['allowed_in(node0)', 'internal(node0)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 6
num_suborbits: 1
6 (*) : ----11-----1---
6     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
7     : ----11-------1-
7     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
8     : ---1-1--1------
8     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
9     : ---1-1------1--
9     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
10     : ---11--1-------
10     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
11     : ---11----1-----
11     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~internal(NODE0) | ~internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ----00-----1---
12     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
13     : ----00-------1-
13     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
14     : ---0-0--1------
14     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
15     : ---0-0------1--
15     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
16     : ---00--1-------
16     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
17     : ---00----1-----
17     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : -0--0------1---
18     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
19     : --0--0-------1-
19     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
20     : 0--0----1------
20     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
21     : --0--0------1--
21     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
22     : 0--0---1-------
22     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
23     : -0--0----1-----
23     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
48 (*) : --0--0-----1---
48     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
49     : -0--0--------1-
49     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
50     : --0--0--1------
50     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
51     : 0--0--------1--
51     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
52     : -0--0--1-------
52     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
53     : 0--0-----1-----
53     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. allowed_in(NODE2) | internal(NODE2) | ~sent(NODE0,NODE1) | ((NODE0 ~= NODE2 | NODE0 = NODE1) & (NODE1 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 5 =====================
size : 12
num_suborbits: 2
24 (*) : -0---1-----1---
24     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
25     : --0-1--------1-
25     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
26     : 0----1--1------
26     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
27     : --01--------1--
27     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
28     : 0---1--1-------
28     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
29     : -0-1-----1-----
29     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
42 (*) : --0-1------1---
42     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
43     : -0---1-------1-
43     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
44     : --01----1------
44     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
45     : 0----1------1--
45     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
46     : -0-1---1-------
46     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
47     : 0---1----1-----
47     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~internal(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
30 (*) : -1---0-----1---
30     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
31     : --1-0--------1-
31     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
32     : 1----0--1------
32     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
33     : --10--------1--
33     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
34     : 1---0--1-------
34     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
35     : -1-0-----1-----
35     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
60 (*) : --1-0------1---
60     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
61     : -1---0-------1-
61     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
62     : --10----1------
62     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
63     : 1----0------1--
63     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
64     : -1-0---1-------
64     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
65     : 1---0----1-----
65     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
36 (*) : -00--------1---
36     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
37     : -00----------1-
37     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
38     : 0-0-----1------
38     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
39     : 0-0---------1--
39     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
40     : 00-----1-------
40     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
41     : 00-------1-----
41     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : -11--------1---
54     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
55     : -11----------1-
55     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
56     : 1-1-----1------
56     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
57     : 1-1---------1--
57     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
58     : 11-----1-------
58     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
59     : 11-------1-----
59     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~allowed_in(NODE0) | ~allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11--1---
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
67     : -------11----1-
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
68     : --------11-1---
68     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
69     : ---------1-11--
69     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
70     : -------1----11-
70     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : ---------1--11-
71     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : -------1---11--
72     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
73     : --------11---1-
73     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~sent(NODE2,NODE5) | ~sent(NODE0,NODE3) | ~sent(NODE1,NODE4) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE2 = NODE4 | NODE0 = NODE4 | NODE0 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 21




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : -1-0---------0-
74     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
75     : --10-------0---
75     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
76     : 1---0-------0--
76     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
77     : --1-0---0------
77     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
78     : 1----0---0-----
78     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
79     : -1---0-0-------
79     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. ~allowed_in(NODE0) | sent(NODE2,NODE0) | internal(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : 11-----------0-
83     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
84     : 1-1--------0---
84     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
85     : 11----------0--
85     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
86     : -11-----0------
86     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
87     : 1-1------0-----
87     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
88     : -11----0-------
88     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 13 =====================
size : 1
num_suborbits: 1
89 (*) : 111------------
89     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
90 (*) : -110-----------
90     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
91     : 1-1-0----------
91     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
92     : 11---0---------
92     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 15 =====================
size : 3
num_suborbits: 1
93 (*) : --100----------
93     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
94     : -1-0-0---------
94     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
95     : 1---00---------
95     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : ----0---01--1--
96     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
97     : -----0-0-1--1--
97     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
98     : ---0---1---0-1-
98     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
99     : -----0-1-0---1-
99     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
100     : ---0----1--1-0-
100     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
101     : ----0---1--10--
101     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
102 (*) : ----0--10---1--
102     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
103     : -----0-011-----
103     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
104     : ---0-----1-0-1-
104     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
105     : -----0-1-0-1---
105     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
106     : ---0-------110-
106     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
107     : ----0---1---01-
107     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
168 (*) : -----0--01--1--
168     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
169     : ----0--0-1--1--
169     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
170     : -----0-1---0-1-
170     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
171     : ---0---1-0---1-
171     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
172     : ----0---1--1-0-
172     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
173     : ---0----1--10--
173     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
174 (*) : -----0-10---1--
174     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
175     : ----0--011-----
175     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
176     : -----0---1-0-1-
176     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
177     : ---0---1-0-1---
177     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
178     : ----0------110-
178     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
179     : ---0----1---01-
179     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   5
num_exists :   0
num_literals : 24
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2. sent(NODE3,NODE1) | internal(NODE4) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 29




=== Prime Orbit 17 =====================
size : 6
num_suborbits: 1
108 (*) : 0---0---0---1--
108     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
109     : 0----0-0-1-----
109     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
110     : -0-0-------0-1-
110     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
111     : -0---0-1-0-----
111     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
112     : --00-------1-0-
112     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
113     : --0-0---1---0--
113     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. allowed_in(NODE1) | sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 18 =====================
size : 12
num_suborbits: 2
114 (*) : 0------10---1--
114     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
115     : 0------011-----
115     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
116     : -0-------1-0-1-
116     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
117     : -0-----1-0-1---
117     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
118     : --0--------110-
118     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
119     : --0-----1---01-
119     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
126 (*) : 0-------01--1--
126     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
127     : 0------0-1--1--
127     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
128     : -0-----1---0-1-
128     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
129     : -0-----1-0---1-
129     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
130     : --0-----1--1-0-
130     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
131     : --0-----1--10--
131     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE1,NODE3,NODE0,NODE2. sent(NODE3,NODE1) | allowed_in(NODE3) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 19 =====================
size : 6
num_suborbits: 1
120 (*) : 0-------0--01--
120     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
121     : 0------0-1---0-
121     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
122     : -0------0--0-1-
122     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
123     : -0-----1-0--0--
123     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
124     : --0----0---1-0-
124     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
125     : --0-----10--0--
125     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE0) | allowed_in(NODE1) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 20 =====================
size : 6
num_suborbits: 1
132 (*) : ---1----0--01--
132     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
133     : ---1---0-1---0-
133     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
134     : ----1---0--0-1-
134     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
135     : ----1--1-0--0--
135     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
136     : -----1-0---1-0-
136     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
137     : -----1--10--0--
137     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 21 =====================
size : 6
num_suborbits: 1
138 (*) : -----0--0--01--
138     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
139     : ----0--0-1---0-
139     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
140     : -----0--0--0-1-
140     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
141     : ---0---1-0--0--
141     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
142     : ----0--0---1-0-
142     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
143     : ---0----10--0--
143     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE0) | internal(NODE0) | sent(NODE1,NODE0) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 22 =====================
size : 6
num_suborbits: 1
144 (*) : ---10---0---1--
144     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
145     : ---1-0-0-1-----
145     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
146     : ---01------0-1-
146     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
147     : ----10-1-0-----
147     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
148     : ---0-1-----1-0-
148     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
149     : ----01--1---0--
149     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. ~internal(NODE0) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | internal(NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
150 (*) : ----00--0---1--
150     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
151     : ----00-0-1-----
151     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
152     : ---0-0-----0-1-
152     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
153     : ---0-0-1-0-----
153     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
154     : ---00------1-0-
154     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
155     : ---00---1---0--
155     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. internal(NODE0) | sent(NODE1,NODE0) | internal(NODE2) | ~sent(NODE0,NODE1) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 24 =====================
size : 12
num_suborbits: 2
156 (*) : ---1----01--1--
156     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
157     : ---1---0-1--1--
157     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
158     : ----1--1---0-1-
158     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
159     : ----1--1-0---1-
159     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
160     : -----1--1--1-0-
160     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
161     : -----1--1--10--
161     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
162 (*) : ---1---10---1--
162     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
163     : ---1---011-----
163     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
164     : ----1----1-0-1-
164     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
165     : ----1--1-0-1---
165     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
166     : -----1-----110-
166     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
167     : -----1--1---01-
167     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE1,NODE3,NODE0,NODE2. ~sent(NODE2,NODE0) | ~internal(NODE0) | ~sent(NODE1,NODE3) | sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2))
qcost : 16




=== Prime Orbit 25 =====================
size : 24
num_suborbits: 4
180 (*) : --1-----01--1--
180     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
181     : -1-----0-1--1--
181     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
182     : --1----1---0-1-
182     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
183     : 1------1-0---1-
183     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
184     : -1------1--1-0-
184     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
185     : 1-------1--10--
185     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
186 (*) : --1----10---1--
186     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
187     : -1-----011-----
187     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
188     : --1------1-0-1-
188     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
189     : 1------1-0-1---
189     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
190     : -1---------110-
190     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
191     : 1-------1---01-
191     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
264 (*) : 1----------110-
264     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
265     : 1--------1-0-1-
265     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
266     : -1------1---01-
266     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
267     : -1-----10---1--
267     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
268     : --1----1-0-1---
268     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
269     : --1----011-----
269     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
270 (*) : --1----0-1--1--
270     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
271     : -1------01--1--
271     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
272     : --1----1-0---1-
272     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
273     : 1------1---0-1-
273     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
274     : -1------1--10--
274     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
275     : 1-------1--1-0-
275     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
num_forall :   7
num_exists :   0
num_literals : 32
quantified form : forall NODE3,NODE4,NODE6,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | sent(NODE5,NODE6) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE0 ~= NODE6 | NODE1 ~= NODE4 | NODE1 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE6 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE6 | NODE3 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))
qcost : 39




=== Prime Orbit 26 =====================
size : 24
num_suborbits: 4
192 (*) : --1-1----1--1--
192     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
193     : -1---1---1--1--
193     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
194     : --11---1-----1-
194     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
195     : 1----1-1-----1-
195     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
196     : -1-1----1--1---
196     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
197     : 1---1---1--1---
197     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
204 (*) : --1-1--1----1--
204     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
205     : -1---1--11-----
205     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
206     : --11-----1---1-
206     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
207     : 1----1-1---1---
207     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
208     : -1-1-------11--
208     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
209     : 1---1---1----1-
209     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
258 (*) : 1---1------11--
258     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
259     : 1----1---1---1-
259     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
260     : -1-1----1----1-
260     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
261     : -1---1-1----1--
261     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
262     : --11---1---1---
262     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
263     : --1-1---11-----
263     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
330 (*) : -1-1--------11-
330     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
331     : --11-----1-1---
331     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
332     : 1---1-------11-
332     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
333     : --1-1--11------
333     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
334     : 1----1---1-1---
334     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
335     : -1---1-11------
335     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~internal(NODE1) | ~sent(NODE3,NODE5) | ((NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE4 | NODE0 = NODE1) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 34




=== Prime Orbit 27 =====================
size : 24
num_suborbits: 4
198 (*) : -01------1--1--
198     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
199     : -10------1--1--
199     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
200     : 0-1----1-----1-
200     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
201     : 1-0----1-----1-
201     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
202     : 01------1--1---
202     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
203     : 10------1--1---
203     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
210 (*) : -01----1----1--
210     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
211     : -10-----11-----
211     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
212     : 0-1------1---1-
212     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
213     : 1-0----1---1---
213     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
214     : 01---------11--
214     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
215     : 10------1----1-
215     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
252 (*) : 10---------11--
252     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
253     : 1-0------1---1-
253     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
254     : 01------1----1-
254     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
255     : -10----1----1--
255     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
256     : 0-1----1---1---
256     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
257     : -01-----11-----
257     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
324 (*) : 01----------11-
324     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
325     : 0-1------1-1---
325     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
326     : 10----------11-
326     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
327     : -01----11------
327     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
328     : 1-0------1-1---
328     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
329     : -10----11------
329     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3))
qcost : 34




=== Prime Orbit 28 =====================
size : 24
num_suborbits: 4
216 (*) : ----10-1----1--
216     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
217     : ----01--11-----
217     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
218     : ---1-0---1---1-
218     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
219     : ---0-1-1---1---
219     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
220     : ---10------11--
220     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
221     : ---01---1----1-
221     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
240 (*) : ----10---1--1--
240     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
241     : ----01---1--1--
241     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
242     : ---1-0-1-----1-
242     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
243     : ---0-1-1-----1-
243     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
244     : ---10---1--1---
244     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
245     : ---01---1--1---
245     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
246 (*) : ----01-1----1--
246     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
247     : ----10--11-----
247     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
248     : ---0-1---1---1-
248     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
249     : ---1-0-1---1---
249     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
250     : ---01------11--
250     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
251     : ---10---1----1-
251     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
336 (*) : ---10-------11-
336     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
337     : ---1-0---1-1---
337     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
338     : ---01-------11-
338     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
339     : ----10-11------
339     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
340     : ---0-1---1-1---
340     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
341     : ----01-11------
341     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. internal(NODE5) | ~internal(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | ((NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE1 = NODE4 | NODE0 = NODE4 | NODE0 = NODE1))
qcost : 34




=== Prime Orbit 29 =====================
size : 24
num_suborbits: 4
222 (*) : -0---0-1----1--
222     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
223     : --0-0---11-----
223     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
224     : 0----0---1---1-
224     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
225     : --00---1---1---
225     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
226     : 0---0------11--
226     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
227     : -0-0----1----1-
227     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
228 (*) : --0-0--1----1--
228     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
229     : -0---0--11-----
229     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
230     : --00-----1---1-
230     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
231     : 0----0-1---1---
231     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
232     : -0-0-------11--
232     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
233     : 0---0---1----1-
233     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
234 (*) : --0-0----1--1--
234     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
235     : -0---0---1--1--
235     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
236     : --00---1-----1-
236     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
237     : 0----0-1-----1-
237     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
238     : -0-0----1--1---
238     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
239     : 0---0---1--1---
239     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
342 (*) : 0---0-------11-
342     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
343     : 0----0---1-1---
343     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
344     : -0-0--------11-
344     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
345     : -0---0-11------
345     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
346     : --00-----1-1---
346     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
347     : --0-0--11------
347     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2,NODE5. internal(NODE5) | allowed_in(NODE4) | ~sent(NODE1,NODE3) | ~sent(NODE0,NODE2) | ((NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE2 = NODE3 | NODE0 = NODE3 | NODE0 = NODE2))
qcost : 34




=== Prime Orbit 30 =====================
size : 6
num_suborbits: 1
276 (*) : -1------0---10-
276     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
277     : --1----0-1-0---
277     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
278     : 1----------001-
278     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
279     : --1----100-----
279     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
280     : 1--------0-1-0-
280     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
281     : -1-----01---0--
281     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | sent(NODE1,NODE0) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
282 (*) : 01------0---1--
282     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
283     : 0-1----0-1-----
283     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
284     : 10---------0-1-
284     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
285     : -01----1-0-----
285     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
286     : 1-0--------1-0-
286     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
287     : -10-----1---0--
287     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
300 (*) : -10---------10-
300     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
301     : -01------1-0---
301     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
302     : 1-0---------01-
302     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
303     : 0-1----10------
303     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
304     : 10-------0-1---
304     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
305     : 01-----01------
305     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
312 (*) : 01-----0----1--
312     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
313     : 0-1-----01-----
313     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
314     : 10-------0---1-
314     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
315     : -01----1---0---
315     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
316     : 1-0--------10--
316     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
317     : -10-----1----0-
317     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2. sent(NODE3,NODE4) | ~allowed_in(NODE0) | allowed_in(NODE3) | ~sent(NODE1,NODE2) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 24




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
288 (*) : -1---0--0---1--
288     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
289     : --1-0--0-1-----
289     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
290     : 1----0-----0-1-
290     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
291     : --10---1-0-----
291     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
292     : 1---0------1-0-
292     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
293     : -1-0----1---0--
293     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE0,NODE2. sent(NODE2,NODE1) | ~allowed_in(NODE0) | internal(NODE1) | ~sent(NODE1,NODE2) | (NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 33 =====================
size : 18
num_suborbits: 3
294 (*) : -1-1----0---1--
294     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
295     : --11---0-1-----
295     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
296     : 1---1------0-1-
296     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
297     : --1-1--1-0-----
297     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
298     : 1----1-----1-0-
298     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
299     : -1---1--1---0--
299     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
306 (*) : -1---1------10-
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
307     : --1-1----1-0---
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
308     : 1----1------01-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
309     : --11---10------
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
310     : 1---1----0-1---
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
311     : -1-1---01------
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
318 (*) : -1-1---0----1--
318     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
319     : --11----01-----
319     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
320     : 1---1----0---1-
320     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
321     : --1-1--1---0---
321     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
322     : 1----1-----10--
322     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
323     : -1---1--1----0-
323     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE3,NODE4,NODE1,NODE0,NODE2. ~allowed_in(NODE0) | ~sent(NODE2,NODE3) | ~internal(NODE1) | sent(NODE1,NODE4) | ((NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE0 = NODE1 | NODE0 = NODE3 | NODE1 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE1 | NODE0 = NODE2 | NODE1 = NODE2))
qcost : 24



[QRM NOTE]: Time elapsed since start: 8.781 seconds

[QRM NOTE]: Time elapsed since last: 1.682 seconds

[QRM NOTE]: Peak memory: 2361985 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11]


Solution : [0, 11] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 520), (28, 544), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 640), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 260), (28, 272), (29, 584), (30, 64), (31, 192), (32, 128), (33, 96)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 640), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 260), (28, 272), (29, 584), (30, 64), (31, 192), (32, 128), (33, 96)]

Decide 4 with phase True at level 2

After decision at level 2
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]


New level: 3
 pending : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 640), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 260), (28, 272), (29, 584), (30, 64), (31, 192), (32, 128), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, 576), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, 0), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 3 : {21}

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, 576), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, 0), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, 576), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 3 among pending : [2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, 576), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9]


New level: 4
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, 576), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 4 among pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]


New level: 5
 pending : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]


Before reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15]


Solution : [0, 11, 1, 4, 9, 15] has cost 46.


Decide in level 5 among pending : [2, 3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


New level: 6
 pending : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [3, 5, 6, 7, 8, 10, 12, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 6 : {5, 7, 18, 19, 20, 24}

After reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 6 : set()

After reduction : 
 pending  : [3, 6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Solution : [0, 11, 1, 4, 9, 15, 2] has cost 52.


Decide in level 6 among pending : [3, 6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 3]


New level: 7
 pending : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 3]


Before reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 3]


Solution : [0, 11, 1, 4, 9, 15, 2, 3] has cost 58.


Before backtrack at level 7
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 2, 3]

After backtrack at level 7
 pending : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 7 : set()

After reduction : 
 pending  : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Solution : [0, 11, 1, 4, 9, 15, 2] has cost 52.


Decide in level 7 among pending : [6, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 6]


New level: 8
 pending : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 6]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 6]


Solution : [0, 11, 1, 4, 9, 15, 2, 6] has cost 65.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 2, 6]

After backtrack at level 8
 pending : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Solution : [0, 11, 1, 4, 9, 15, 2] has cost 52.


Decide in level 8 among pending : [8, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 8]


New level: 9
 pending : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 8]


Before reduction : 
 pending  : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 8]


Solution : [0, 11, 1, 4, 9, 15, 2, 8] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 2, 8]

After backtrack at level 9
 pending : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Solution : [0, 11, 1, 4, 9, 15, 2] has cost 52.


Decide in level 9 among pending : [10, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 10]


New level: 10
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 10]


Before reduction : 
 pending  : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 10]


Solution : [0, 11, 1, 4, 9, 15, 2, 10] has cost 61.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 2, 10]

After backtrack at level 10
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before reduction : 
 pending  : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

Essensial at level 10 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 2, 12]


Solution : [0, 11, 1, 4, 9, 15, 2, 12] has cost 61.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 2, 12]

After backtrack at level 10
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before backtrack at level 9
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 11, 1, 4, 9, 15, 2]

After backtrack at level 9
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before backtrack at level 8
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10]
 solution : [0, 11, 1, 4, 9, 15, 2]

After backtrack at level 8
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before backtrack at level 7
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8]
 solution : [0, 11, 1, 4, 9, 15, 2]

After backtrack at level 7
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 15, 2]


Before backtrack at level 6
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 15, 2]

After backtrack at level 6
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15]


Before reduction : 
 pending  : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15]


Solution : [0, 11, 1, 4, 9, 15] has cost 46.


Decide in level 6 among pending : [12, 16, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Decide 17 with phase True at level 6

After decision at level 6
 pending : [12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]


New level: 7
 pending : [12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]


Before reduction : 
 pending  : [12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, 0), (23, 0), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 0), (33, 16)]

Covered at level 7 : {32, 22, 23}

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, 0), (23, 0), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 0), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17]


Solution : [0, 11, 1, 4, 9, 15, 17] has cost 56.


Decide in level 7 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 5, 7, 18, 19, 20, 24, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]


New level: 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 7, 18, 19, 20, 24, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : {7, 18, 19, 20, 24}

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]


Solution : [0, 11, 1, 4, 9, 15, 17, 5] has cost 69.


Before backtrack at level 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]

After backtrack at level 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15, 17, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15, 17]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15, 17]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : {24, 18, 19, 20}

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 7]


Solution : [0, 11, 1, 4, 9, 15, 17, 7] has cost 62.


Before backtrack at level 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3]
 solution : [0, 11, 1, 4, 9, 15, 17, 7]

After backtrack at level 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15, 17]


Before backtrack at level 7
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15, 17]

After backtrack at level 7
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15, 17]


Invert decision for 17 at level 6


New level: 7
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15]


Solution : [0, 11, 1, 4, 9, 15] has cost 46.


Decide in level 7 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 7, 18, 19, 20, 24, 22, 23, 32, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15, 7]


New level: 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 18, 19, 20, 24, 22, 23, 32, 5]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 8 : {5, 18, 19, 20, 24}

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Solution : [0, 11, 1, 4, 9, 15, 7] has cost 52.


Decide in level 8 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 8, 6, 3, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 8]


New level: 9
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 8]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 6, 10, 12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 8]


Solution : [0, 11, 1, 4, 9, 15, 7, 8] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 7, 8]

After backtrack at level 9
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Solution : [0, 11, 1, 4, 9, 15, 7] has cost 52.


Decide in level 9 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 6, 3, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 9

After decision at level 9
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 6]


New level: 10
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 6]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 10, 12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 6]


Solution : [0, 11, 1, 4, 9, 15, 7, 6] has cost 65.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 7, 6]

After backtrack at level 10
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 6]


Invert decision for 6 at level 9


New level: 10
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Solution : [0, 11, 1, 4, 9, 15, 7] has cost 52.


Decide in level 10 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 3, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 3]


New level: 11
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 3]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 3]


Solution : [0, 11, 1, 4, 9, 15, 7, 3] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 7, 3]

After backtrack at level 11
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Solution : [0, 11, 1, 4, 9, 15, 7] has cost 52.


Decide in level 11 among pending : [12, 16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 12]


New level: 12
 pending : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 12]


Before reduction : 
 pending  : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 12]


Solution : [0, 11, 1, 4, 9, 15, 7, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 7, 12]

After backtrack at level 12
 pending : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before reduction : 
 pending  : [16, 25, 26, 27, 28, 29, 30, 31, 33, 10, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 15, 7, 10]


Solution : [0, 11, 1, 4, 9, 15, 7, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 15, 7, 10]

After backtrack at level 12
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before backtrack at level 11
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 9, 15, 7]

After backtrack at level 11
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before backtrack at level 10
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 15, 7]

After backtrack at level 10
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before backtrack at level 9
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 15, 7]

After backtrack at level 9
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6]
 solution : [0, 11, 1, 4, 9, 15, 7]


Before backtrack at level 8
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6]
 solution : [0, 11, 1, 4, 9, 15, 7]

After backtrack at level 8
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 18, 19, 20, 24, 5, 8]
 solution : [0, 11, 1, 4, 9, 15, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 18, 19, 20, 24, 5, 8]
 solution : [0, 11, 1, 4, 9, 15]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 18, 19, 20, 24, 5, 8]
 solution : [0, 11, 1, 4, 9, 15]

Essensial at level 8 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 8 : {24, 18, 19, 20}

After reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8]
 solution : [0, 11, 1, 4, 9, 15, 5]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8]
 solution : [0, 11, 1, 4, 9, 15, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8]
 solution : [0, 11, 1, 4, 9, 15, 5]


Solution : [0, 11, 1, 4, 9, 15, 5] has cost 59.


Before backtrack at level 8
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8]
 solution : [0, 11, 1, 4, 9, 15, 5]

After backtrack at level 8
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15]


Before backtrack at level 7
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 15]

After backtrack at level 7
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 15]


Before backtrack at level 6
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 15]

After backtrack at level 6
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17]
 solution : [0, 11, 1, 4, 9, 15]


Before backtrack at level 5
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17]
 solution : [0, 11, 1, 4, 9, 15]

After backtrack at level 5
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 5 among pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 22, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 22 with phase True at level 5

After decision at level 5
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]


New level: 6
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 17, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, 128), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 0), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 6 : {17}

After reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 0), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]


Solution : [0, 11, 1, 4, 9, 22] has cost 51.


Decide in level 6 among pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 3, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


New level: 7
 pending : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before reduction : 
 pending  : [10, 16, 25, 26, 27, 28, 29, 30, 31, 33, 23, 32, 12, 6, 8, 5, 18, 19, 20, 24, 7, 13, 14, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

Covered at level 7 : {32, 6, 8, 10, 12, 13, 14, 16, 23, 25, 30}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Solution : [0, 11, 1, 4, 9, 22, 3] has cost 57.


Decide in level 7 among pending : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 5]


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 2, 7, 18, 19, 20, 24, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 5]


Solution : [0, 11, 1, 4, 9, 22, 3, 5] has cost 70.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 3, 5]

After backtrack at level 8
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Solution : [0, 11, 1, 4, 9, 22, 3] has cost 57.


Decide in level 8 among pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 7]


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 2, 18, 19, 20, 24, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 7]


Solution : [0, 11, 1, 4, 9, 22, 3, 7] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 3, 7]

After backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 2]
 solution : [0, 11, 1, 4, 9, 22, 3]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 18, 19, 20, 24, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 3, 2]


Solution : [0, 11, 1, 4, 9, 22, 3, 2] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 3, 2]

After backtrack at level 9
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before backtrack at level 8
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 3]

After backtrack at level 8
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 3]


Before backtrack at level 7
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 3]

After backtrack at level 7
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22]


Solution : [0, 11, 1, 4, 9, 22] has cost 51.


Decide in level 7 among pending : [2, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22, 2]


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14, 5]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 8 : {5, 7, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Solution : [0, 11, 1, 4, 9, 22, 2] has cost 57.


Decide in level 8 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 6, 8, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 6 with phase True at level 8

After decision at level 8
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 6]


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 6]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 8, 10, 12, 13, 14, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 6]


Solution : [0, 11, 1, 4, 9, 22, 2, 6] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 2, 6]

After backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 6]


Invert decision for 6 at level 8


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Solution : [0, 11, 1, 4, 9, 22, 2] has cost 57.


Decide in level 9 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 8]


New level: 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 10, 12, 13, 14, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 8]


Solution : [0, 11, 1, 4, 9, 22, 2, 8] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 2, 8]

After backtrack at level 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Solution : [0, 11, 1, 4, 9, 22, 2] has cost 57.


Decide in level 10 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 0), (33, 4)]

Covered at level 11 : {32, 13, 23}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]


Solution : [0, 11, 1, 4, 9, 22, 2, 14] has cost 62.


Before backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]


Solution : [0, 11, 1, 4, 9, 22, 2] has cost 57.


Decide in level 11 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 12, 23, 32, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 10]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 10]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 12, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 10]


Solution : [0, 11, 1, 4, 9, 22, 2, 10] has cost 66.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 2, 10]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 2, 12]


Solution : [0, 11, 1, 4, 9, 22, 2, 12] has cost 66.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 2, 12]

After backtrack at level 12
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 2]

After backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10]
 solution : [0, 11, 1, 4, 9, 22, 2]

After backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before backtrack at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14]
 solution : [0, 11, 1, 4, 9, 22, 2]

After backtrack at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8]
 solution : [0, 11, 1, 4, 9, 22, 2]


Before backtrack at level 8
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8]
 solution : [0, 11, 1, 4, 9, 22, 2]

After backtrack at level 8
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22]


Solution : [0, 11, 1, 4, 9, 22] has cost 51.


Decide in level 8 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 14, 8, 18, 19, 20, 24, 7, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]


New level: 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 0), (33, 16)]

Covered at level 9 : {32, 13, 23}

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 0), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 7, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14]


Solution : [0, 11, 1, 4, 9, 22, 14] has cost 56.


Decide in level 9 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 7, 5, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]


New level: 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, -1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : {5, 18, 19, 20, 24}

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]


Solution : [0, 11, 1, 4, 9, 22, 14, 7] has cost 62.


Before backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]

After backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 22, 14, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 22, 14]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 22, 14]

Essensial at level 10 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : {24, 18, 19, 20}

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 5]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 5]


Solution : [0, 11, 1, 4, 9, 22, 14, 5] has cost 69.


Before backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6]
 solution : [0, 11, 1, 4, 9, 22, 14, 5]

After backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 14]


Before backtrack at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 14]

After backtrack at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22]


Solution : [0, 11, 1, 4, 9, 22] has cost 51.


Decide in level 9 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 8, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]


New level: 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 6, 5, 18, 19, 20, 24, 23, 32, 13, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

Covered at level 10 : {32, 6, 10, 12, 13, 16, 23, 25, 30}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]


Solution : [0, 11, 1, 4, 9, 22, 8] has cost 57.


Decide in level 10 among pending : [26, 27, 28, 29, 31, 33, 5, 18, 19, 20, 24, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8, 5]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 7, 18, 19, 20, 24, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 5]


Solution : [0, 11, 1, 4, 9, 22, 8, 5] has cost 70.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 8, 5]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22, 8]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 18, 19, 20, 24, 26, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, -1), (26, 0), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 8, 7]


Solution : [0, 11, 1, 4, 9, 22, 8, 7] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 8, 7]

After backtrack at level 11
 pending : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 8]


Before backtrack at level 10
 pending : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22, 8]

After backtrack at level 10
 pending : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22]


Solution : [0, 11, 1, 4, 9, 22] has cost 51.


Decide in level 10 among pending : [7, 26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22, 7]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 12, 16, 25, 30, 10, 6, 23, 32, 13, 5]
 solution : [0, 11, 1, 4, 9, 22, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : {5, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 6, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 6, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 6, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Solution : [0, 11, 1, 4, 9, 22, 7] has cost 57.


Decide in level 11 among pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 6, 23, 32, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 6]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 6]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 6]


Solution : [0, 11, 1, 4, 9, 22, 7, 6] has cost 70.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 7, 6]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Solution : [0, 11, 1, 4, 9, 22, 7] has cost 57.


Decide in level 12 among pending : [26, 27, 28, 29, 31, 33, 12, 16, 25, 30, 10, 23, 32, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 12]


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 12]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 12]


Solution : [0, 11, 1, 4, 9, 22, 7, 12] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 7, 12]

After backtrack at level 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 10, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 22, 7, 10]


Solution : [0, 11, 1, 4, 9, 22, 7, 10] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 9, 22, 7, 10]

After backtrack at level 13
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before backtrack at level 12
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 22, 7]

After backtrack at level 12
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 22, 7]


Before backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 22, 7]

After backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 18, 19, 20, 24, 5, 6]
 solution : [0, 11, 1, 4, 9, 22]

Essensial at level 11 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : {24, 18, 19, 20}

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6]
 solution : [0, 11, 1, 4, 9, 22, 5]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6]
 solution : [0, 11, 1, 4, 9, 22, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6]
 solution : [0, 11, 1, 4, 9, 22, 5]


Solution : [0, 11, 1, 4, 9, 22, 5] has cost 64.


Before backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6]
 solution : [0, 11, 1, 4, 9, 22, 5]

After backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22]


Before backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 22]

After backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22]


Before backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 22]

After backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8]
 solution : [0, 11, 1, 4, 9, 22]


Before backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8]
 solution : [0, 11, 1, 4, 9, 22]

After backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14]
 solution : [0, 11, 1, 4, 9, 22]


Before backtrack at level 7
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14]
 solution : [0, 11, 1, 4, 9, 22]

After backtrack at level 7
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]


Before backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2]
 solution : [0, 11, 1, 4, 9, 22]

After backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9, 22]


Invert decision for 22 at level 5


New level: 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 6 among pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 6, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 6 with phase True at level 6

After decision at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9, 6]


New level: 7
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9, 6]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 5, 18, 19, 20, 24, 7, 8, 14, 2, 17, 3]
 solution : [0, 11, 1, 4, 9, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 2), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, 0), (33, 66)]

Covered at level 7 : {32, 3, 8, 10, 12, 13, 14, 23}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 5, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 5, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 2), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, 0), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 5, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]


Solution : [0, 11, 1, 4, 9, 6] has cost 54.


Decide in level 7 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 5, 18, 19, 20, 24, 7, 2, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 5]


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 2, 7, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 5]


Solution : [0, 11, 1, 4, 9, 6, 5] has cost 67.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 4, 9, 6, 5]

After backtrack at level 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 32), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 18), (32, -1), (33, 18)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]


Solution : [0, 11, 1, 4, 9, 6] has cost 54.


Decide in level 8 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 7, 2, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 32), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 18), (32, -1), (33, 18)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 7]


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 32), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 18), (32, -1), (33, 18)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 2, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 7]


Solution : [0, 11, 1, 4, 9, 6, 7] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 6, 7]

After backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 2, 17]
 solution : [0, 11, 1, 4, 9, 6]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 6, 2]


Solution : [0, 11, 1, 4, 9, 6, 2] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 6, 2]

After backtrack at level 9
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17]
 solution : [0, 11, 1, 4, 9, 6]


Before backtrack at level 8
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17]
 solution : [0, 11, 1, 4, 9, 6]

After backtrack at level 8
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7]
 solution : [0, 11, 1, 4, 9, 6]


Before backtrack at level 7
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7]
 solution : [0, 11, 1, 4, 9, 6]

After backtrack at level 7
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9, 6]


Invert decision for 6 at level 6


New level: 7
 pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 7 among pending : [2, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9, 2]


New level: 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 17, 7, 10, 23, 32, 13, 12, 8, 14, 3, 5]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 8 : {5, 7, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 8, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 8, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 8, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]


Solution : [0, 11, 1, 4, 9, 2] has cost 47.


Decide in level 8 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 8, 14, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2, 8]


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 3, 10, 12, 13, 14, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 8]


Solution : [0, 11, 1, 4, 9, 2, 8] has cost 53.


Before backtrack at level 9
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 8]

After backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]
 solution : [0, 11, 1, 4, 9, 2]


Solution : [0, 11, 1, 4, 9, 2] has cost 47.


Decide in level 9 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 14, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]


New level: 10
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 13, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : {13}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]


Solution : [0, 11, 1, 4, 9, 2, 14] has cost 52.


Decide in level 10 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 3]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 3]


Solution : [0, 11, 1, 4, 9, 2, 14, 3] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 14, 3]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14]


Solution : [0, 11, 1, 4, 9, 2, 14] has cost 52.


Decide in level 11 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 10, 23, 32, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 10]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 10]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 12, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 10]


Solution : [0, 11, 1, 4, 9, 2, 14, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 14, 10]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 2, 14]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 14, 12]


Solution : [0, 11, 1, 4, 9, 2, 14, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 14, 12]

After backtrack at level 12
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32]
 solution : [0, 11, 1, 4, 9, 2, 14]

After backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10]
 solution : [0, 11, 1, 4, 9, 2, 14]


Before backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10]
 solution : [0, 11, 1, 4, 9, 2, 14]

After backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13, 3]
 solution : [0, 11, 1, 4, 9, 2, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13, 3]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13, 3]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13, 3]
 solution : [0, 11, 1, 4, 9, 2]


Solution : [0, 11, 1, 4, 9, 2] has cost 47.


Decide in level 10 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 3]


New level: 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 3]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 13, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 3]


Solution : [0, 11, 1, 4, 9, 2, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 3]

After backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2]


Solution : [0, 11, 1, 4, 9, 2] has cost 47.


Decide in level 11 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 12]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 12]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 13, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 12]


Solution : [0, 11, 1, 4, 9, 2, 12] has cost 56.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 12]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 2]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 13, 16, 17, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 2, 10]


Solution : [0, 11, 1, 4, 9, 2, 10] has cost 56.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 2, 10]

After backtrack at level 12
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 2]


Before backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 2]

After backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 2]


Before backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 2]

After backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3]
 solution : [0, 11, 1, 4, 9, 2]


Before backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3]
 solution : [0, 11, 1, 4, 9, 2]

After backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14]
 solution : [0, 11, 1, 4, 9, 2]


Before backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14]
 solution : [0, 11, 1, 4, 9, 2]

After backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 8 among pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 17, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 17 with phase True at level 8

After decision at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17]


New level: 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, 128), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17]


Solution : [0, 11, 1, 4, 9, 17] has cost 51.


Decide in level 9 among pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 3, 14, 18, 19, 20, 24, 7, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17, 3]


New level: 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17, 3]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 14, 18, 19, 20, 24, 7, 5, 8]
 solution : [0, 11, 1, 4, 9, 17, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

Covered at level 10 : {32, 8, 10, 12, 13, 14, 16, 23, 25, 30}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5]
 solution : [0, 11, 1, 4, 9, 17, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5]
 solution : [0, 11, 1, 4, 9, 17, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, 0), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, 3), (25, 0), (26, 2), (27, 2), (28, 2), (29, 2), (30, 0), (31, 2), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5]
 solution : [0, 11, 1, 4, 9, 17, 3]


Solution : [0, 11, 1, 4, 9, 17, 3] has cost 57.


Before backtrack at level 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5]
 solution : [0, 11, 1, 4, 9, 17, 3]

After backtrack at level 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, 3), (25, -1), (26, 2), (27, 2), (28, 2), (29, 2), (30, -1), (31, 2), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17]


Solution : [0, 11, 1, 4, 9, 17] has cost 51.


Decide in level 10 among pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 7, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 18, 19, 20, 24, 5, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 3), (19, 8), (20, 8), (21, -1), (22, -1), (23, 1), (24, 3), (25, 2), (26, 16), (27, 16), (28, 13), (29, 20), (30, 2), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : {5, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]


Solution : [0, 11, 1, 4, 9, 17, 7] has cost 57.


Before backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 7]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 17, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 17]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 17]

Essensial at level 11 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : {24, 18, 19, 20}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 5]


Solution : [0, 11, 1, 4, 9, 17, 5] has cost 64.


Before backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8]
 solution : [0, 11, 1, 4, 9, 17, 5]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 17]


Before backtrack at level 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 17]

After backtrack at level 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 17]


Before backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 17]

After backtrack at level 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 17]


Invert decision for 17 at level 8


New level: 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 4), (27, 4), (28, 4), (29, 5), (30, 2), (31, 4), (32, 1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 9 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 14, 8, 5, 18, 19, 20, 24, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 14 with phase True at level 9

After decision at level 9
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]


New level: 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 13, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 10 : {13}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 5, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14]


Solution : [0, 11, 1, 4, 9, 14] has cost 46.


Decide in level 10 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 5, 18, 19, 20, 24, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 18, 19, 20, 24, 7, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 1), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 1), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : {7, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]


Solution : [0, 11, 1, 4, 9, 14, 5] has cost 59.


Before backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 5]

After backtrack at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 14, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 14]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 14]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : {24, 18, 19, 20}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 1), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]


Solution : [0, 11, 1, 4, 9, 14, 7] has cost 52.


Decide in level 11 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7, 8]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 3, 10, 12, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 8]


Solution : [0, 11, 1, 4, 9, 14, 7, 8] has cost 58.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 14, 7, 8]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]


Solution : [0, 11, 1, 4, 9, 14, 7] has cost 52.


Decide in level 12 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 3]


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 3]


Solution : [0, 11, 1, 4, 9, 14, 7, 3] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 9, 14, 7, 3]

After backtrack at level 13
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7]


Solution : [0, 11, 1, 4, 9, 14, 7] has cost 52.


Decide in level 13 among pending : [26, 27, 28, 29, 31, 33, 10, 16, 25, 30, 23, 32, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 10]


New level: 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 10]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 1), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 12, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 10]


Solution : [0, 11, 1, 4, 9, 14, 7, 10] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 9, 14, 7, 10]

After backtrack at level 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12]
 solution : [0, 11, 1, 4, 9, 14, 7]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 14, 7, 12]


Solution : [0, 11, 1, 4, 9, 14, 7, 12] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 9, 14, 7, 12]

After backtrack at level 14
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before backtrack at level 13
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32]
 solution : [0, 11, 1, 4, 9, 14, 7]

After backtrack at level 13
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before backtrack at level 12
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10]
 solution : [0, 11, 1, 4, 9, 14, 7]

After backtrack at level 12
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]


Before backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3]
 solution : [0, 11, 1, 4, 9, 14, 7]

After backtrack at level 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8]
 solution : [0, 11, 1, 4, 9, 14]


Before backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8]
 solution : [0, 11, 1, 4, 9, 14]

After backtrack at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9, 14]


Invert decision for 14 at level 9


New level: 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 10 among pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 3, 7, 18, 19, 20, 24, 8, 13, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9, 3]


New level: 11
 pending : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9, 3]


Before reduction : 
 pending  : [12, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 7, 18, 19, 20, 24, 8, 13, 5]
 solution : [0, 11, 1, 4, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, 0), (33, 66)]

Covered at level 11 : {32, 8, 10, 12, 13, 23}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 7, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 7, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 2), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, 0), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

Covered at level 11 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 7, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3]


Solution : [0, 11, 1, 4, 9, 3] has cost 47.


Decide in level 11 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 7, 18, 19, 20, 24, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3, 7]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, 12), (25, 2), (26, 6), (27, 6), (28, 6), (29, 7), (30, 2), (31, 66), (32, -1), (33, 66)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 5, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 7]


Solution : [0, 11, 1, 4, 9, 3, 7] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 3, 7]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 5]
 solution : [0, 11, 1, 4, 9, 3]

Essensial at level 12 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 3, 5]


Solution : [0, 11, 1, 4, 9, 3, 5] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 9, 3, 5]

After backtrack at level 12
 pending : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 3]


Before backtrack at level 11
 pending : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24]
 solution : [0, 11, 1, 4, 9, 3]

After backtrack at level 11
 pending : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Covered at level 11 : set()

After reduction : 
 pending  : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9]


Solution : [0, 11, 1, 4, 9] has cost 41.


Decide in level 11 among pending : [5, 26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9, 5]


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 18, 19, 20, 24, 12, 23, 32, 10, 8, 13, 7]
 solution : [0, 11, 1, 4, 9, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 8), (17, -1), (18, 9), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, 12), (25, 8), (26, 21), (27, 21), (28, 21), (29, 25), (30, 8), (31, 80), (32, 4), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 12 : {7, 18, 19, 20, 24}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 5]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 5]


Solution : [0, 11, 1, 4, 9, 5] has cost 54.


Before backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 5]

After backtrack at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13, 18, 19, 20, 24, 7]
 solution : [0, 11, 1, 4, 9]

Essensial at level 12 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 12 : {24, 18, 19, 20}

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 4), (24, 0), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]
 solution : [0, 11, 1, 4, 9, 7]


Solution : [0, 11, 1, 4, 9, 7] has cost 47.


Decide in level 12 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 8, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 8]


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 8]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 8]


Solution : [0, 11, 1, 4, 9, 7, 8] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 9, 7, 8]

After backtrack at level 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7]


Solution : [0, 11, 1, 4, 9, 7] has cost 47.


Decide in level 13 among pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 12, 23, 32, 10, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 12]


New level: 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 12]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, 2), (26, 5), (27, 5), (28, 5), (29, 6), (30, 2), (31, 5), (32, 4), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 12]


Solution : [0, 11, 1, 4, 9, 7, 12] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 9, 7, 12]

After backtrack at level 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7]


Before reduction : 
 pending  : [26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 9, 7]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 13, 16, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, 0), (14, -1), (15, -1), (16, 0), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 9, 7, 10]


Solution : [0, 11, 1, 4, 9, 7, 10] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 9, 7, 10]

After backtrack at level 14
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 7]


Before backtrack at level 13
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 9, 7]

After backtrack at level 13
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 7]


Before backtrack at level 12
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12]
 solution : [0, 11, 1, 4, 9, 7]

After backtrack at level 12
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 11
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 10
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 9
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 8
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 7
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 7
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 5
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 5
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 9]


Before backtrack at level 4
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 9]

After backtrack at level 4
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22, 15]
 solution : [0, 11, 1, 4, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22, 15]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22, 15]
 solution : [0, 11, 1, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22, 15]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 4 among pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22, 15]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 15 with phase True at level 4

After decision at level 4
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]


New level: 5
 pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 13, 12, 7, 18, 19, 20, 24, 8, 5, 3, 14, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 5 : {13, 14}

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, 0), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 5 among pending : [10, 26, 27, 28, 29, 31, 33, 16, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 16 with phase True at level 5

After decision at level 5
 pending : [10, 26, 27, 28, 29, 31, 33, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]


New level: 6
 pending : [10, 26, 27, 28, 29, 31, 33, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 25, 30, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 1), (24, 10), (25, 0), (26, 37), (27, 37), (28, 49), (29, 49), (30, 0), (31, 16), (32, 1), (33, 16)]

Covered at level 6 : {25, 30}

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 1), (24, 10), (25, 0), (26, 37), (27, 37), (28, 49), (29, 49), (30, 0), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 1), (24, 10), (25, -1), (26, 37), (27, 37), (28, 49), (29, 49), (30, -1), (31, 16), (32, 1), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]


Solution : [0, 11, 1, 4, 15, 16] has cost 54.


Before backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 16]

After backtrack at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 16]


Invert decision for 16 at level 5


New level: 6
 pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 1), (24, 10), (25, -1), (26, 37), (27, 37), (28, 49), (29, 49), (30, -1), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 6 among pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 18, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 18 with phase True at level 6

After decision at level 6
 pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


New level: 7
 pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 24, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 130), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, 0), (25, 12), (26, 101), (27, 101), (28, 105), (29, 129), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 7 : {24}

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


Before reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, 0), (25, 12), (26, 101), (27, 101), (28, 105), (29, 129), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 129), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


Solution : [0, 11, 1, 4, 15, 18] has cost 41.


Decide in level 7 among pending : [10, 26, 27, 28, 29, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 129), (30, 2), (31, 24), (32, 1), (33, 24)]

Decide 29 with phase True at level 7

After decision at level 7
 pending : [10, 26, 27, 28, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 29]


New level: 8
 pending : [10, 26, 27, 28, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 29]


Before reduction : 
 pending  : [10, 26, 27, 28, 31, 33, 23, 32, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 129), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 18, 29]


Before reduction : 
 pending  : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 18, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 1), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 18, 29]


Solution : [0, 11, 1, 4, 15, 18, 29] has cost 75.


Before backtrack at level 8
 pending : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22]
 solution : [0, 11, 1, 4, 15, 18, 29]

After backtrack at level 8
 pending : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 29]


Invert decision for 29 at level 7


New level: 8
 pending : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


Before reduction : 
 pending  : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18]


Solution : [0, 11, 1, 4, 15, 18] has cost 41.


Decide in level 8 among pending : [10, 12, 7, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [10, 12, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


New level: 9
 pending : [10, 12, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 19, 20, 8, 5, 3, 17, 2, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : {2, 19, 20, 5}

After reduction : 
 pending  : [10, 12, 8, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 8, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Solution : [0, 11, 1, 4, 15, 18, 7] has cost 47.


Decide in level 9 among pending : [10, 12, 8, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 8]


New level: 10
 pending : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 8]


Before reduction : 
 pending  : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 6, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 8]


Solution : [0, 11, 1, 4, 15, 18, 7, 8] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 7, 8]

After backtrack at level 10
 pending : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Solution : [0, 11, 1, 4, 15, 18, 7] has cost 47.


Decide in level 10 among pending : [10, 12, 3, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 3]


New level: 11
 pending : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 3]


Before reduction : 
 pending  : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 3]


Solution : [0, 11, 1, 4, 15, 18, 7, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 7, 3]

After backtrack at level 11
 pending : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Solution : [0, 11, 1, 4, 15, 18, 7] has cost 47.


Decide in level 11 among pending : [10, 12, 17, 6, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 6]


New level: 12
 pending : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 6]


Before reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 7, 6]


Solution : [0, 11, 1, 4, 15, 18, 7, 6] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 7, 6]

After backtrack at level 12
 pending : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Solution : [0, 11, 1, 4, 15, 18, 7] has cost 47.


Decide in level 12 among pending : [10, 12, 17, 22, 26, 27, 28, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 28 with phase True at level 12

After decision at level 12
 pending : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]


New level: 13
 pending : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]


Before reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 17, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]


Solution : [0, 11, 1, 4, 15, 18, 7, 28] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]

After backtrack at level 13
 pending : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 28]


Invert decision for 28 at level 12


New level: 13
 pending : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Solution : [0, 11, 1, 4, 15, 18, 7] has cost 47.


Decide in level 13 among pending : [10, 12, 17, 22, 26, 27, 31, 33, 23, 32, 25, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 26 with phase True at level 13

After decision at level 13
 pending : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]


New level: 14
 pending : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]


Before reduction : 
 pending  : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 17, 22, 23, 25, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]


Solution : [0, 11, 1, 4, 15, 18, 7, 26] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]

After backtrack at level 14
 pending : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7, 26]


Invert decision for 26 at level 13


New level: 14
 pending : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before reduction : 
 pending  : [10, 12, 17, 22, 27, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

Essensial at level 14 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 17, 22, 23, 25, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 27]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 27]


Solution : [0, 11, 1, 4, 15, 18, 7, 27] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 7, 27]

After backtrack at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 7]

After backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 7]

After backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 7]

After backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6]
 solution : [0, 11, 1, 4, 15, 18, 7]

After backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3]
 solution : [0, 11, 1, 4, 15, 18, 7]


Before backtrack at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3]
 solution : [0, 11, 1, 4, 15, 18, 7]

After backtrack at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 18, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 18]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 18]


Solution : [0, 11, 1, 4, 15, 18] has cost 41.


Decide in level 9 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 5, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]


New level: 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, -1), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : {2, 19, 20}

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]


Solution : [0, 11, 1, 4, 15, 18, 5] has cost 54.


Before backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 5]

After backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 18, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 18]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 18]

Essensial at level 10 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : {19, 20}

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Solution : [0, 11, 1, 4, 15, 18, 2] has cost 47.


Decide in level 10 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 6]


New level: 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 6]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 8, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 6]


Solution : [0, 11, 1, 4, 15, 18, 2, 6] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 2, 6]

After backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Solution : [0, 11, 1, 4, 15, 18, 2] has cost 47.


Decide in level 11 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 3]


New level: 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 3]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 8, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 3]


Solution : [0, 11, 1, 4, 15, 18, 2, 3] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 2, 3]

After backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Solution : [0, 11, 1, 4, 15, 18, 2] has cost 47.


Decide in level 12 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2, 8]


New level: 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2, 8]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 17, 22, 23, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 18, 2, 8]


Solution : [0, 11, 1, 4, 15, 18, 2, 8] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 15, 18, 2, 8]

After backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]
 solution : [0, 11, 1, 4, 15, 18, 2]


Solution : [0, 11, 1, 4, 15, 18, 2] has cost 47.


Decide in level 13 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 28 with phase True at level 13

After decision at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]


New level: 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 17, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]


Solution : [0, 11, 1, 4, 15, 18, 2, 28] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]

After backtrack at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 28]


Invert decision for 28 at level 13


New level: 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2]


Solution : [0, 11, 1, 4, 15, 18, 2] has cost 47.


Decide in level 14 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 27 with phase True at level 14

After decision at level 14
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]


New level: 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 22, 23, 25, 26, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]


Solution : [0, 11, 1, 4, 15, 18, 2, 27] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]

After backtrack at level 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2, 27]


Invert decision for 27 at level 14


New level: 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 18, 2]

Essensial at level 15 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 22, 23, 25, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 26]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 26]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 26]


Solution : [0, 11, 1, 4, 15, 18, 2, 26] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 18, 2, 26]

After backtrack at level 15
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before backtrack at level 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 18, 2]

After backtrack at level 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before backtrack at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 18, 2]

After backtrack at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before backtrack at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28]
 solution : [0, 11, 1, 4, 15, 18, 2]

After backtrack at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before backtrack at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8]
 solution : [0, 11, 1, 4, 15, 18, 2]

After backtrack at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3]
 solution : [0, 11, 1, 4, 15, 18, 2]


Before backtrack at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3]
 solution : [0, 11, 1, 4, 15, 18, 2]

After backtrack at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 18]


Before backtrack at level 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 18]

After backtrack at level 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 18]


Before backtrack at level 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 18]

After backtrack at level 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7]
 solution : [0, 11, 1, 4, 15, 18]


Before backtrack at level 7
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7]
 solution : [0, 11, 1, 4, 15, 18]

After backtrack at level 7
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 24, 29]
 solution : [0, 11, 1, 4, 15, 18]


Invert decision for 18 at level 6


New level: 7
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 24, 29]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 24, 29]
 solution : [0, 11, 1, 4, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 24, 29]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 7 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 24, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 24 with phase True at level 7

After decision at level 7
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24]


New level: 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, 192), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24]


Solution : [0, 11, 1, 4, 15, 24] has cost 41.


Decide in level 8 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 2, 19, 20, 6, 5, 7, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Decide 2 with phase True at level 8

After decision at level 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


New level: 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 19, 20, 6, 5, 7, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : {19, 20, 5, 7}

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 9 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 8, 3, 6, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 8]


New level: 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 8]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 3, 6, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 8]


Solution : [0, 11, 1, 4, 15, 24, 2, 8] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 2, 8]

After backtrack at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 10 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 3, 6, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 3]


New level: 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 3]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 6, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 3]


Solution : [0, 11, 1, 4, 15, 24, 2, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 2, 3]

After backtrack at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 11 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 6, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 11

After decision at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 6]


New level: 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 6]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 2, 6]


Solution : [0, 11, 1, 4, 15, 24, 2, 6] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 2, 6]

After backtrack at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 6]


Invert decision for 6 at level 11


New level: 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 12 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 28, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 28 with phase True at level 12

After decision at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]


New level: 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 17, 22, 23, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]


Solution : [0, 11, 1, 4, 15, 24, 2, 28] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]

After backtrack at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2, 28]


Invert decision for 28 at level 12


New level: 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 13 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 29 with phase True at level 13

After decision at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]


New level: 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 17, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]


Solution : [0, 11, 1, 4, 15, 24, 2, 29] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]

After backtrack at level 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 29]


Invert decision for 29 at level 13


New level: 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2]


Solution : [0, 11, 1, 4, 15, 24, 2] has cost 47.


Decide in level 14 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 26 with phase True at level 14

After decision at level 14
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]


New level: 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 22, 23, 25, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]


Solution : [0, 11, 1, 4, 15, 24, 2, 26] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]

After backtrack at level 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2, 26]


Invert decision for 26 at level 14


New level: 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 2]

Essensial at level 15 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 22, 23, 25, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 27]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 27]


Solution : [0, 11, 1, 4, 15, 24, 2, 27] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 2, 27]

After backtrack at level 15
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3]
 solution : [0, 11, 1, 4, 15, 24, 2]


Before backtrack at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3]
 solution : [0, 11, 1, 4, 15, 24, 2]

After backtrack at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 5, 7, 8]
 solution : [0, 11, 1, 4, 15, 24, 2]


Invert decision for 2 at level 8


New level: 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 5, 7, 8]
 solution : [0, 11, 1, 4, 15, 24]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 5, 7, 8]
 solution : [0, 11, 1, 4, 15, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 5, 7, 8]
 solution : [0, 11, 1, 4, 15, 24]


Solution : [0, 11, 1, 4, 15, 24] has cost 41.


Decide in level 9 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 5, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 7, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]


New level: 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 7, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 19, 20, 7, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 101), (28, 105), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : {19, 20, 7}

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]


Solution : [0, 11, 1, 4, 15, 24, 5] has cost 54.


Before backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 5]

After backtrack at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 24, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 24]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 24]

Essensial at level 10 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : {19, 20}

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 10 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 6]


New level: 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 6]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 3, 8, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 6]


Solution : [0, 11, 1, 4, 15, 24, 7, 6] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 7, 6]

After backtrack at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 11 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 3]


New level: 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 3]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 8, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 3]


Solution : [0, 11, 1, 4, 15, 24, 7, 3] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 7, 3]

After backtrack at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 12 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7, 8]


New level: 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7, 8]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 24, 7, 8]


Solution : [0, 11, 1, 4, 15, 24, 7, 8] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 15, 24, 7, 8]

After backtrack at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 13 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29, 28]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 28 with phase True at level 13

After decision at level 13
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]


New level: 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, 26), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 17, 22, 23, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]


Solution : [0, 11, 1, 4, 15, 24, 7, 28] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]

After backtrack at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7, 28]


Invert decision for 28 at level 13


New level: 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 14 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 29 with phase True at level 14

After decision at level 14
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]


New level: 15
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, 24), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 17, 22, 23, 25, 26, 27, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, 0), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]


Solution : [0, 11, 1, 4, 15, 24, 7, 29] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]

After backtrack at level 15
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 29]


Invert decision for 29 at level 14


New level: 15
 pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7]


Solution : [0, 11, 1, 4, 15, 24, 7] has cost 47.


Decide in level 15 among pending : [10, 12, 27, 17, 22, 31, 33, 23, 32, 25, 30, 26]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

Decide 27 with phase True at level 15

After decision at level 15
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]


New level: 16
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 1), (24, -1), (25, 12), (26, 19), (27, 19), (28, -1), (29, -1), (30, 2), (31, 5), (32, 1), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 17, 22, 23, 25, 26, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, 0), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]


Solution : [0, 11, 1, 4, 15, 24, 7, 27] has cost 81.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]

After backtrack at level 16
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7, 27]


Invert decision for 27 at level 15


New level: 16
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 26]
 solution : [0, 11, 1, 4, 15, 24, 7]

Essensial at level 16 : {26}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 17, 22, 23, 25, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 26]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 26]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 26]


Solution : [0, 11, 1, 4, 15, 24, 7, 26] has cost 81.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 24, 7, 26]

After backtrack at level 16
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 15
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 15
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 14
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 13
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 12
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 11
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3]
 solution : [0, 11, 1, 4, 15, 24, 7]


Before backtrack at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3]
 solution : [0, 11, 1, 4, 15, 24, 7]

After backtrack at level 10
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 24]


Before backtrack at level 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 24]

After backtrack at level 9
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 24]


Before backtrack at level 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 24]

After backtrack at level 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 24]


Invert decision for 24 at level 7


New level: 8
 pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 8 among pending : [10, 12, 26, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 26 with phase True at level 8

After decision at level 8
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]


New level: 9
 pending : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]


Before reduction : 
 pending  : [10, 12, 17, 22, 31, 33, 23, 32, 25, 30, 27, 29, 28, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, 129), (27, 129), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 23, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]


Before reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]


Solution : [0, 11, 1, 4, 15, 26] has cost 59.


Before backtrack at level 9
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 26]

After backtrack at level 9
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15, 26]


Invert decision for 26 at level 8


New level: 9
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29, 28]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 9 among pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29, 28]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 28 with phase True at level 9

After decision at level 9
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 28]


New level: 10
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 28]


Before reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, 129), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 23, 25, 27, 29, 30, 31}

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 28]


Before reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 28]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 28]


Solution : [0, 11, 1, 4, 15, 28] has cost 59.


Before backtrack at level 10
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2]
 solution : [0, 11, 1, 4, 15, 28]

After backtrack at level 10
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 28]


Invert decision for 28 at level 9


New level: 10
 pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 1), (4, -1), (5, 128), (6, 1), (7, 128), (8, 1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 10 among pending : [10, 12, 17, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 17 with phase True at level 10

After decision at level 10
 pending : [10, 12, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]


New level: 11
 pending : [10, 12, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]


Before reduction : 
 pending  : [10, 12, 22, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 23, 32, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 0), (23, 0), (24, -1), (25, 72), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

Covered at level 11 : {32, 22, 23}

After reduction : 
 pending  : [10, 12, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]


Before reduction : 
 pending  : [10, 12, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, 0), (23, 0), (24, -1), (25, 72), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17]


Solution : [0, 11, 1, 4, 15, 17] has cost 35.


Decide in level 11 among pending : [10, 12, 8, 3, 7, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [10, 12, 8, 3, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


New level: 12
 pending : [10, 12, 8, 3, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 8, 3, 19, 20, 6, 5, 2, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 12 : {2, 19, 20, 5}

After reduction : 
 pending  : [10, 12, 8, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 8, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 8, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Solution : [0, 11, 1, 4, 15, 17, 7] has cost 41.


Decide in level 12 among pending : [10, 12, 8, 3, 6, 31, 33, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 8]


New level: 13
 pending : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 8]


Before reduction : 
 pending  : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 3, 6, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 8]


Solution : [0, 11, 1, 4, 15, 17, 7, 8] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 7, 8]

After backtrack at level 13
 pending : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Solution : [0, 11, 1, 4, 15, 17, 7] has cost 41.


Decide in level 13 among pending : [10, 12, 3, 6, 31, 33, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 3]


New level: 14
 pending : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 3]


Before reduction : 
 pending  : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 6, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 3]


Solution : [0, 11, 1, 4, 15, 17, 7, 3] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 7, 3]

After backtrack at level 14
 pending : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 6, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Solution : [0, 11, 1, 4, 15, 17, 7] has cost 41.


Decide in level 14 among pending : [10, 12, 6, 31, 33, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 6]


New level: 15
 pending : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 6]


Before reduction : 
 pending  : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 7, 6]


Solution : [0, 11, 1, 4, 15, 17, 7, 6] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 7, 6]

After backtrack at level 15
 pending : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 31, 33, 25, 30, 27, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Solution : [0, 11, 1, 4, 15, 17, 7] has cost 41.


Decide in level 15 among pending : [10, 12, 31, 33, 25, 30, 27, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 27 with phase True at level 15

After decision at level 15
 pending : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]


New level: 16
 pending : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]


Before reduction : 
 pending  : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 25, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]


Solution : [0, 11, 1, 4, 15, 17, 7, 27] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]

After backtrack at level 16
 pending : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7, 27]


Invert decision for 27 at level 15


New level: 16
 pending : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before reduction : 
 pending  : [10, 12, 31, 33, 25, 30, 29]
 solution : [0, 11, 1, 4, 15, 17, 7]

Essensial at level 16 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 30, 25, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 29]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 29]


Solution : [0, 11, 1, 4, 15, 17, 7, 29] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 7, 29]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 7]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 7]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6]
 solution : [0, 11, 1, 4, 15, 17, 7]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3]
 solution : [0, 11, 1, 4, 15, 17, 7]


Before backtrack at level 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3]
 solution : [0, 11, 1, 4, 15, 17, 7]

After backtrack at level 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 17, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 17]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 17]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 5, 2, 8]
 solution : [0, 11, 1, 4, 15, 17]


Solution : [0, 11, 1, 4, 15, 17] has cost 35.


Decide in level 12 among pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 5, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]


New level: 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 19, 20, 2, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 24), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : {2, 19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]


Solution : [0, 11, 1, 4, 15, 17, 5] has cost 48.


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 5]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 17, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 17]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8, 19, 20, 2]
 solution : [0, 11, 1, 4, 15, 17]

Essensial at level 13 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : {19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Solution : [0, 11, 1, 4, 15, 17, 2] has cost 41.


Decide in level 13 among pending : [10, 12, 29, 31, 33, 25, 30, 27, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 6 with phase True at level 13

After decision at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 6]


New level: 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 6]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 3, 8, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 6]


Solution : [0, 11, 1, 4, 15, 17, 2, 6] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 2, 6]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 6]


Invert decision for 6 at level 13


New level: 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Solution : [0, 11, 1, 4, 15, 17, 2] has cost 41.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 25, 30, 27, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 3]


New level: 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 3]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 8, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 3]


Solution : [0, 11, 1, 4, 15, 17, 2, 3] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 2, 3]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Solution : [0, 11, 1, 4, 15, 17, 2] has cost 41.


Decide in level 15 among pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2, 8]


New level: 16
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2, 8]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 25, 27, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 17, 2, 8]


Solution : [0, 11, 1, 4, 15, 17, 2, 8] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 15, 17, 2, 8]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2]


Solution : [0, 11, 1, 4, 15, 17, 2] has cost 41.


Decide in level 16 among pending : [10, 12, 29, 31, 33, 25, 30, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Decide 27 with phase True at level 16

After decision at level 16
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]


New level: 17
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 25, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]


Solution : [0, 11, 1, 4, 15, 17, 2, 27] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2, 27]


Invert decision for 27 at level 16


New level: 17
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2]

Essensial at level 17 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 30, 25, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 29]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 29]


Solution : [0, 11, 1, 4, 15, 17, 2, 29] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 17, 2, 29]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 25, 30]
 solution : [0, 11, 1, 4, 15, 17, 2]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27]
 solution : [0, 11, 1, 4, 15, 17, 2]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8]
 solution : [0, 11, 1, 4, 15, 17, 2]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3]
 solution : [0, 11, 1, 4, 15, 17, 2]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3]
 solution : [0, 11, 1, 4, 15, 17, 2]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 17]


Before backtrack at level 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6]
 solution : [0, 11, 1, 4, 15, 17]

After backtrack at level 12
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 17]


Before backtrack at level 11
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4, 15, 17]

After backtrack at level 11
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 17]


Invert decision for 17 at level 10


New level: 11
 pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 11 among pending : [10, 12, 29, 31, 33, 25, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 25 with phase True at level 11

After decision at level 11
 pending : [10, 12, 29, 31, 33, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]


New level: 12
 pending : [10, 12, 29, 31, 33, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 30, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, 128), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, -1), (25, -1), (26, -1), (27, 29), (28, -1), (29, 41), (30, 0), (31, 16), (32, 1), (33, 16)]

Covered at level 12 : {30}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, -1), (25, -1), (26, -1), (27, 29), (28, -1), (29, 41), (30, 0), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, -1), (25, -1), (26, -1), (27, 29), (28, -1), (29, 41), (30, -1), (31, 16), (32, 1), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]


Solution : [0, 11, 1, 4, 15, 25] has cost 64.


Before backtrack at level 12
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7]
 solution : [0, 11, 1, 4, 15, 25]

After backtrack at level 12
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15, 25]


Invert decision for 25 at level 11


New level: 12
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 1), (24, -1), (25, -1), (26, -1), (27, 29), (28, -1), (29, 41), (30, -1), (31, 16), (32, 1), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 12 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 2, 19, 20, 6, 5, 22, 23, 32, 7, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 2 with phase True at level 12

After decision at level 12
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15, 2]


New level: 13
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 19, 20, 6, 5, 22, 23, 32, 7, 30]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 13 : {19, 20, 5, 7}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32, 30]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32, 30]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32, 30]
 solution : [0, 11, 1, 4, 15, 2]


Solution : [0, 11, 1, 4, 15, 2] has cost 31.


Decide in level 13 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 13

After decision at level 13
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


New level: 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Solution : [0, 11, 1, 4, 15, 2, 30] has cost 41.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 8]


New level: 15
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 8]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 6, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 8]


Solution : [0, 11, 1, 4, 15, 2, 30, 8] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 30, 8]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Solution : [0, 11, 1, 4, 15, 2, 30] has cost 41.


Decide in level 15 among pending : [10, 12, 29, 31, 33, 27, 3, 6, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 3]


New level: 16
 pending : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 3]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 6, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 3]


Solution : [0, 11, 1, 4, 15, 2, 30, 3] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 30, 3]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Solution : [0, 11, 1, 4, 15, 2, 30] has cost 41.


Decide in level 16 among pending : [10, 12, 29, 31, 33, 27, 6, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 6]


New level: 17
 pending : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 6]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 30, 6]


Solution : [0, 11, 1, 4, 15, 2, 30, 6] has cost 54.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 30, 6]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Solution : [0, 11, 1, 4, 15, 2, 30] has cost 41.


Decide in level 17 among pending : [10, 12, 29, 31, 33, 27, 22, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Decide 29 with phase True at level 17

After decision at level 17
 pending : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]


New level: 18
 pending : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]


Before reduction : 
 pending  : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 4), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 22, 23, 27, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]


Solution : [0, 11, 1, 4, 15, 2, 30, 29] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]

After backtrack at level 18
 pending : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30, 29]


Invert decision for 29 at level 17


New level: 18
 pending : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before reduction : 
 pending  : [10, 12, 31, 33, 27, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

Essensial at level 18 : {27}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 22, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 27]


Solution : [0, 11, 1, 4, 15, 2, 30, 27] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 30, 27]

After backtrack at level 18
 pending : [10, 12, 27, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before backtrack at level 17
 pending : [10, 12, 27, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2, 30]

After backtrack at level 17
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before backtrack at level 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 30]

After backtrack at level 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before backtrack at level 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6]
 solution : [0, 11, 1, 4, 15, 2, 30]

After backtrack at level 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3]
 solution : [0, 11, 1, 4, 15, 2, 30]


Before backtrack at level 14
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3]
 solution : [0, 11, 1, 4, 15, 2, 30]

After backtrack at level 14
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 2, 30]


Invert decision for 30 at level 13


New level: 14
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]


Solution : [0, 11, 1, 4, 15, 2] has cost 31.


Decide in level 14 among pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 6, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 6 with phase True at level 14

After decision at level 14
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2, 6]


New level: 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2, 6]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 8, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 6]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 6]


Solution : [0, 11, 1, 4, 15, 2, 6] has cost 44.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 6]

After backtrack at level 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2, 6]


Invert decision for 6 at level 14


New level: 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]
 solution : [0, 11, 1, 4, 15, 2]


Solution : [0, 11, 1, 4, 15, 2] has cost 31.


Decide in level 15 among pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 3, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2, 3]


New level: 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2, 3]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 8, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 3]


Solution : [0, 11, 1, 4, 15, 2, 3] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 3]

After backtrack at level 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]
 solution : [0, 11, 1, 4, 15, 2]


Solution : [0, 11, 1, 4, 15, 2] has cost 31.


Decide in level 16 among pending : [10, 12, 27, 31, 33, 22, 23, 32, 29, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 8]


New level: 17
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 8]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 10, 12, 22, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 2, 8]


Solution : [0, 11, 1, 4, 15, 2, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 15, 2, 8]

After backtrack at level 17
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 27, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2]


Solution : [0, 11, 1, 4, 15, 2] has cost 31.


Decide in level 17 among pending : [10, 12, 27, 31, 33, 22, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 27 with phase True at level 17

After decision at level 17
 pending : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 27]


New level: 18
 pending : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 27]


Before reduction : 
 pending  : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 22, 23, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 27]


Solution : [0, 11, 1, 4, 15, 2, 27] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 27]

After backtrack at level 18
 pending : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2, 27]


Invert decision for 27 at level 17


New level: 18
 pending : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2]


Before reduction : 
 pending  : [10, 12, 31, 33, 22, 23, 32, 29]
 solution : [0, 11, 1, 4, 15, 2]

Essensial at level 18 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 22, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 29]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 29]


Solution : [0, 11, 1, 4, 15, 2, 29] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 2, 29]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2]


Before backtrack at level 17
 pending : [10, 12, 29, 31, 33, 22, 23, 32]
 solution : [0, 11, 1, 4, 15, 2]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27]
 solution : [0, 11, 1, 4, 15, 2]


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27]
 solution : [0, 11, 1, 4, 15, 2]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8]
 solution : [0, 11, 1, 4, 15, 2]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8]
 solution : [0, 11, 1, 4, 15, 2]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3]
 solution : [0, 11, 1, 4, 15, 2]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3]
 solution : [0, 11, 1, 4, 15, 2]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6]
 solution : [0, 11, 1, 4, 15, 2]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6]
 solution : [0, 11, 1, 4, 15, 2]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 2]


Invert decision for 2 at level 12


New level: 13
 pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 13 among pending : [10, 12, 29, 31, 33, 22, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 22 with phase True at level 13

After decision at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]


New level: 14
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

Covered at level 14 : {32, 23}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 5, 7, 30]
 solution : [0, 11, 1, 4, 15, 22]


Solution : [0, 11, 1, 4, 15, 22] has cost 35.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 5, 7, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 7, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]


New level: 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 7, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 19, 20, 7, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, -1), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : {19, 20, 7}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]


Solution : [0, 11, 1, 4, 15, 22, 5] has cost 48.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 5]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 22, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 22]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 7]
 solution : [0, 11, 1, 4, 15, 22]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : {19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 7]


Solution : [0, 11, 1, 4, 15, 22, 7] has cost 41.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30]
 solution : [0, 11, 1, 4, 15, 22, 7]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20]
 solution : [0, 11, 1, 4, 15, 22]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20]
 solution : [0, 11, 1, 4, 15, 22]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15, 22]


Invert decision for 22 at level 13


New level: 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, -1), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15]


Solution : [0, 11, 1, 4, 15] has cost 25.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 7, 19, 20, 23, 32, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15, 7]


New level: 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 19, 20, 23, 32, 5]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, -1), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : {19, 20, 5}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Solution : [0, 11, 1, 4, 15, 7] has cost 31.


Decide in level 15 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 30, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]


New level: 16
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]


Solution : [0, 11, 1, 4, 15, 7, 30] has cost 41.


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, -1), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Solution : [0, 11, 1, 4, 15, 7] has cost 31.


Decide in level 16 among pending : [10, 12, 29, 31, 33, 27, 8, 3, 6, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 8]


New level: 17
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 8]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 6, 10, 12, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 8]


Solution : [0, 11, 1, 4, 15, 7, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 15, 7, 8]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Solution : [0, 11, 1, 4, 15, 7] has cost 31.


Decide in level 17 among pending : [10, 12, 29, 31, 33, 27, 3, 6, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 3 with phase True at level 17

After decision at level 17
 pending : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 3]


New level: 18
 pending : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 3]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 6, 10, 12, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 3]


Solution : [0, 11, 1, 4, 15, 7, 3] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 4, 15, 7, 3]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 3]


Invert decision for 3 at level 17


New level: 18
 pending : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 6, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Solution : [0, 11, 1, 4, 15, 7] has cost 31.


Decide in level 18 among pending : [10, 12, 29, 31, 33, 27, 6, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 6 with phase True at level 18

After decision at level 18
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 6]


New level: 19
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 6]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 10, 12, 23, 27, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 6]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 15, 7, 6]


Solution : [0, 11, 1, 4, 15, 7, 6] has cost 44.


Before backtrack at level 19
 pending : []
 solution : [0, 11, 1, 4, 15, 7, 6]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 6]


Invert decision for 6 at level 18


New level: 19
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Solution : [0, 11, 1, 4, 15, 7] has cost 31.


Decide in level 19 among pending : [10, 12, 29, 31, 33, 27, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 27 with phase True at level 19

After decision at level 19
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 27]


New level: 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 27]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 23, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 27]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 27]


Solution : [0, 11, 1, 4, 15, 7, 27] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 27]

After backtrack at level 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7, 27]


Invert decision for 27 at level 19


New level: 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

Essensial at level 20 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 29]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 29]


Solution : [0, 11, 1, 4, 15, 7, 29] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 4, 15, 7, 29]

After backtrack at level 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]


Before backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 15, 7]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32, 27]
 solution : [0, 11, 1, 4, 15, 7]


Before backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 27]
 solution : [0, 11, 1, 4, 15, 7]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6]
 solution : [0, 11, 1, 4, 15, 7]


Before backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6]
 solution : [0, 11, 1, 4, 15, 7]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3]
 solution : [0, 11, 1, 4, 15, 7]


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3]
 solution : [0, 11, 1, 4, 15, 7]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 7]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 15, 7]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 15, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 15]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 15]

Essensial at level 15 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : {19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 15, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 15, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 15, 5]


Solution : [0, 11, 1, 4, 15, 5] has cost 38.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 15, 5]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 11
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 11
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 10
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 10
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 9
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 9
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 8
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 8
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 7
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 7
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18]
 solution : [0, 11, 1, 4, 15]


Before backtrack at level 5
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18]
 solution : [0, 11, 1, 4, 15]

After backtrack at level 5
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14, 16]
 solution : [0, 11, 1, 4, 15]


Invert decision for 15 at level 4


New level: 5
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14, 16]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14, 16]
 solution : [0, 11, 1, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14, 16]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 5 among pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14, 16]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 16 with phase True at level 5

After decision at level 5
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]


New level: 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 30, 5, 19, 20, 7, 22, 2, 25, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, 200), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 4), (24, 10), (25, 0), (26, 37), (27, 29), (28, 41), (29, 41), (30, 0), (31, 16), (32, 4), (33, 16)]

Covered at level 6 : {25, 30}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 4), (24, 10), (25, 0), (26, 37), (27, 29), (28, 41), (29, 41), (30, 0), (31, 16), (32, 4), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 4), (24, 10), (25, -1), (26, 37), (27, 29), (28, 41), (29, 41), (30, -1), (31, 16), (32, 4), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]


Solution : [0, 11, 1, 4, 16] has cost 49.


Before backtrack at level 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14]
 solution : [0, 11, 1, 4, 16]

After backtrack at level 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 16]


Invert decision for 16 at level 5


New level: 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 12), (19, 32), (20, 32), (21, -1), (22, 32), (23, 4), (24, 10), (25, -1), (26, 37), (27, 29), (28, 41), (29, 41), (30, -1), (31, 16), (32, 4), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 6 among pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 24, 18, 13, 14, 30, 25]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 24 with phase True at level 6

After decision at level 6
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


New level: 7
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 18, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, 192), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 0), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 7 : {18}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, 0), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Solution : [0, 11, 1, 4, 24] has cost 36.


Decide in level 7 among pending : [10, 12, 29, 31, 33, 23, 32, 27, 6, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 6]


New level: 8
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 6]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 3, 8, 5, 19, 20, 7, 22, 2, 17, 28, 26, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 8 : {32, 3, 8, 10, 12, 13, 14, 23, 25, 30}

After reduction : 
 pending  : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26]
 solution : [0, 11, 1, 4, 24, 6]


Before reduction : 
 pending  : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26]
 solution : [0, 11, 1, 4, 24, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26]
 solution : [0, 11, 1, 4, 24, 6]


Solution : [0, 11, 1, 4, 24, 6] has cost 49.


Before backtrack at level 8
 pending : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26]
 solution : [0, 11, 1, 4, 24, 6]

After backtrack at level 8
 pending : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Solution : [0, 11, 1, 4, 24] has cost 36.


Decide in level 8 among pending : [29, 31, 33, 27, 5, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [29, 31, 33, 27, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]


New level: 9
 pending : [29, 31, 33, 27, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]


Before reduction : 
 pending  : [29, 31, 33, 27, 19, 20, 7, 22, 2, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 9 : {2, 19, 20, 7}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 9 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]


Solution : [0, 11, 1, 4, 24, 5] has cost 49.


Before backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 5]

After backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24]


Solution : [0, 11, 1, 4, 24] has cost 36.


Decide in level 9 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 3, 8, 13, 14, 30, 25, 19, 20, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]


New level: 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 10 : {32, 8, 10, 12, 13, 14, 23, 25, 30}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 10 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]


Solution : [0, 11, 1, 4, 24, 3] has cost 42.


Before backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 24, 3]

After backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 10 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24]


Solution : [0, 11, 1, 4, 24] has cost 36.


Decide in level 10 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]


New level: 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 2, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 11 : {2, 19, 20}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]


Solution : [0, 11, 1, 4, 24, 7] has cost 42.


Before backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 7]

After backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 2]
 solution : [0, 11, 1, 4, 24, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 2]
 solution : [0, 11, 1, 4, 24]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 19, 20, 2]
 solution : [0, 11, 1, 4, 24]

Essensial at level 11 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 11 : {19, 20}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 2]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 2]


Solution : [0, 11, 1, 4, 24, 2] has cost 42.


Before backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25]
 solution : [0, 11, 1, 4, 24, 2]

After backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20]
 solution : [0, 11, 1, 4, 24]


Before backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20]
 solution : [0, 11, 1, 4, 24]

After backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7]
 solution : [0, 11, 1, 4, 24]


Before backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7]
 solution : [0, 11, 1, 4, 24]

After backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3]
 solution : [0, 11, 1, 4, 24]


Before backtrack at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3]
 solution : [0, 11, 1, 4, 24]

After backtrack at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5]
 solution : [0, 11, 1, 4, 24]


Before backtrack at level 7
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5]
 solution : [0, 11, 1, 4, 24]

After backtrack at level 7
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 18, 6]
 solution : [0, 11, 1, 4, 24]


Invert decision for 24 at level 6


New level: 7
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 18, 6]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 18, 6]
 solution : [0, 11, 1, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 7 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 18, 6]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 7 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 18, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 18 with phase True at level 7

After decision at level 7
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18]


New level: 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, 192), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18]


Solution : [0, 11, 1, 4, 18] has cost 36.


Decide in level 8 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 8, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18, 8]


New level: 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 2, 19, 20, 7, 3, 5, 6]
 solution : [0, 11, 1, 4, 18, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 9 : {32, 3, 6, 10, 12, 13, 14, 23, 25, 30}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 9 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 8]


Solution : [0, 11, 1, 4, 18, 8] has cost 42.


Before backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 8]

After backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18]


Solution : [0, 11, 1, 4, 18] has cost 36.


Decide in level 9 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 2, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 2 with phase True at level 9

After decision at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]


New level: 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, 128), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 10 : {19, 20, 5, 7}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, 128), (7, 0), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 10 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]


Solution : [0, 11, 1, 4, 18, 2] has cost 42.


Before backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6]
 solution : [0, 11, 1, 4, 18, 2]

After backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 2]


Invert decision for 2 at level 9


New level: 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 10 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18]


Solution : [0, 11, 1, 4, 18] has cost 36.


Decide in level 10 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 14, 30, 25, 3, 6, 19, 20, 7, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 14 with phase True at level 10

After decision at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]


New level: 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 13, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 85), (28, 89), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 11 : {13}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 85), (28, 89), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 85), (28, 89), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]


Solution : [0, 11, 1, 4, 18, 14] has cost 41.


Before backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 14]

After backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18, 14]


Invert decision for 14 at level 10


New level: 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 1), (24, -1), (25, 12), (26, 101), (27, 85), (28, 89), (29, 97), (30, 2), (31, 24), (32, 1), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18]


Solution : [0, 11, 1, 4, 18] has cost 36.


Decide in level 11 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 3, 6, 19, 20, 7, 5, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 3 with phase True at level 11

After decision at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18, 3]


New level: 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 19, 20, 7, 5, 13]
 solution : [0, 11, 1, 4, 18, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 12 : {32, 6, 10, 12, 13, 23, 25, 30}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, 0), (24, -1), (25, 0), (26, 8), (27, 8), (28, 11), (29, 11), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 3]


Solution : [0, 11, 1, 4, 18, 3] has cost 42.


Before backtrack at level 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5]
 solution : [0, 11, 1, 4, 18, 3]

After backtrack at level 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 3]


Invert decision for 3 at level 11


New level: 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 8), (20, 8), (21, -1), (22, 8), (23, -1), (24, -1), (25, -1), (26, 8), (27, 8), (28, 11), (29, 11), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Covered at level 12 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18]


Solution : [0, 11, 1, 4, 18] has cost 36.


Decide in level 12 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 7, 5, 10, 12, 23, 32, 30, 25, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]


New level: 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 19, 20, 5, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, 8), (21, -1), (22, 32), (23, 32), (24, -1), (25, 25), (26, 101), (27, 85), (28, 89), (29, 97), (30, 16), (31, 24), (32, 32), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 13 : {19, 20, 5}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]


Solution : [0, 11, 1, 4, 18, 7] has cost 42.


Before backtrack at level 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 7]

After backtrack at level 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 19, 20, 5]
 solution : [0, 11, 1, 4, 18, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 19, 20, 5]
 solution : [0, 11, 1, 4, 18]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 19, 20, 5]
 solution : [0, 11, 1, 4, 18]

Essensial at level 13 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 13 : {19, 20}

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 5]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

Covered at level 13 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 5]


Solution : [0, 11, 1, 4, 18, 5] has cost 49.


Before backtrack at level 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13]
 solution : [0, 11, 1, 4, 18, 5]

After backtrack at level 13
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20]
 solution : [0, 11, 1, 4, 18]


Before backtrack at level 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20]
 solution : [0, 11, 1, 4, 18]

After backtrack at level 12
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7]
 solution : [0, 11, 1, 4, 18]


Before backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7]
 solution : [0, 11, 1, 4, 18]

After backtrack at level 11
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3]
 solution : [0, 11, 1, 4, 18]


Before backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3]
 solution : [0, 11, 1, 4, 18]

After backtrack at level 10
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14]
 solution : [0, 11, 1, 4, 18]


Before backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14]
 solution : [0, 11, 1, 4, 18]

After backtrack at level 9
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2]
 solution : [0, 11, 1, 4, 18]


Before backtrack at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2]
 solution : [0, 11, 1, 4, 18]

After backtrack at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 18]


Invert decision for 18 at level 7


New level: 8
 pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 1), (23, 32), (24, -1), (25, 25), (26, 19), (27, 19), (28, 26), (29, 24), (30, 16), (31, 5), (32, 32), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 8 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 8 among pending : [29, 31, 33, 27, 22, 17, 28, 26, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 26 with phase True at level 8

After decision at level 8
 pending : [29, 31, 33, 27, 22, 17, 28, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]


New level: 9
 pending : [29, 31, 33, 27, 22, 17, 28, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]


Before reduction : 
 pending  : [29, 31, 33, 27, 22, 17, 28, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, 129), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, 8), (24, -1), (25, 5), (26, -1), (27, 0), (28, 0), (29, 0), (30, 2), (31, 0), (32, 8), (33, 0)]

Covered at level 9 : {33, 27, 28, 29, 31}

After reduction : 
 pending  : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]


Before reduction : 
 pending  : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 16), (20, 16), (21, -1), (22, 128), (23, 8), (24, -1), (25, 5), (26, -1), (27, 0), (28, 0), (29, 0), (30, 2), (31, 0), (32, 8), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 16), (20, 16), (21, -1), (22, 1), (23, 8), (24, -1), (25, 5), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 8), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]


Solution : [0, 11, 1, 4, 26] has cost 54.


Before backtrack at level 9
 pending : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8]
 solution : [0, 11, 1, 4, 26]

After backtrack at level 9
 pending : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 26]


Invert decision for 26 at level 8


New level: 9
 pending : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 1), (18, -1), (19, 16), (20, 16), (21, -1), (22, 1), (23, 8), (24, -1), (25, 5), (26, -1), (27, -1), (28, -1), (29, -1), (30, 2), (31, -1), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 9 among pending : [22, 17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 22 with phase True at level 9

After decision at level 9
 pending : [17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]


New level: 10
 pending : [17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [17, 10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, 128), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 0), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 10 : {17}

After reduction : 
 pending  : [10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 0), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22]


Solution : [0, 11, 1, 4, 22] has cost 30.


Decide in level 10 among pending : [10, 12, 23, 32, 30, 25, 6, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [10, 12, 23, 32, 30, 25, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]


New level: 11
 pending : [10, 12, 23, 32, 30, 25, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]


Before reduction : 
 pending  : [10, 12, 23, 32, 30, 25, 13, 5, 19, 20, 7, 3, 14, 2, 8, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 11 : {32, 3, 8, 10, 12, 13, 14, 23, 30}

After reduction : 
 pending  : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]


Before reduction : 
 pending  : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 11 : set()

After reduction : 
 pending  : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]


Solution : [0, 11, 1, 4, 22, 6] has cost 43.


Before backtrack at level 11
 pending : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28]
 solution : [0, 11, 1, 4, 22, 6]

After backtrack at level 11
 pending : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 11 : set()

After reduction : 
 pending  : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22]


Solution : [0, 11, 1, 4, 22] has cost 30.


Decide in level 11 among pending : [25, 5, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [25, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]


New level: 12
 pending : [25, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]


Before reduction : 
 pending  : [25, 19, 20, 7, 2, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 12 : {2, 19, 20, 7}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 12 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]


Solution : [0, 11, 1, 4, 22, 5] has cost 43.


Before backtrack at level 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8]
 solution : [0, 11, 1, 4, 22, 5]

After backtrack at level 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 12 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22]


Solution : [0, 11, 1, 4, 22] has cost 30.


Decide in level 12 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 3, 14, 8, 19, 20, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]


New level: 13
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 13 : {32, 8, 10, 12, 13, 14, 23, 30}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 13 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 7, 2]
 solution : [0, 11, 1, 4, 22, 3]


Solution : [0, 11, 1, 4, 22, 3] has cost 36.


Decide in level 13 among pending : [25, 29, 31, 33, 27, 28, 19, 20, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

Decide 7 with phase True at level 13

After decision at level 13
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3, 7]


New level: 14
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3, 7]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, 2), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 2, 19, 20, 25, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 7]


Solution : [0, 11, 1, 4, 22, 3, 7] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 22, 3, 7]

After backtrack at level 14
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3, 7]


Invert decision for 7 at level 13


New level: 14
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 2]
 solution : [0, 11, 1, 4, 22, 3]

Essensial at level 14 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 19, 20, 25, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 3, 2]


Solution : [0, 11, 1, 4, 22, 3, 2] has cost 42.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 22, 3, 2]

After backtrack at level 14
 pending : [2, 25, 29, 31, 33, 27, 28, 19, 20]
 solution : [0, 11, 1, 4, 22, 3]


Before backtrack at level 13
 pending : [2, 25, 29, 31, 33, 27, 28, 19, 20]
 solution : [0, 11, 1, 4, 22, 3]

After backtrack at level 13
 pending : [2, 25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [2, 25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [2, 25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 13 : set()

After reduction : 
 pending  : [2, 25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22]


Solution : [0, 11, 1, 4, 22] has cost 30.


Decide in level 13 among pending : [2, 25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22, 2]


New level: 14
 pending : [25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22, 2]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 19, 20, 10, 12, 23, 32, 30, 13, 14, 8, 7]
 solution : [0, 11, 1, 4, 22, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 14 : {19, 20, 7}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8]
 solution : [0, 11, 1, 4, 22, 2]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8]
 solution : [0, 11, 1, 4, 22, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8]
 solution : [0, 11, 1, 4, 22, 2]


Solution : [0, 11, 1, 4, 22, 2] has cost 36.


Decide in level 14 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 14, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Decide 14 with phase True at level 14

After decision at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]


New level: 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 23, 32, 30, 13, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

Covered at level 15 : {32, 13, 23}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]


Solution : [0, 11, 1, 4, 22, 2, 14] has cost 41.


Before backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8]
 solution : [0, 11, 1, 4, 22, 2, 14]

After backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2, 14]


Invert decision for 14 at level 14


New level: 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2]


Solution : [0, 11, 1, 4, 22, 2] has cost 36.


Decide in level 15 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 8, 23, 32, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2, 8]


New level: 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2, 8]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 10, 12, 13, 23, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 2, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 2, 8]


Solution : [0, 11, 1, 4, 22, 2, 8] has cost 42.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 22, 2, 8]

After backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 23, 32, 13]
 solution : [0, 11, 1, 4, 22, 2]

Essensial at level 16 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

Covered at level 16 : {32, 23}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 2, 13]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 2, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 2, 13]


Solution : [0, 11, 1, 4, 22, 2, 13] has cost 38.


Before backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 2, 13]

After backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 2]


Before backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 2]

After backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8]
 solution : [0, 11, 1, 4, 22, 2]


Before backtrack at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8]
 solution : [0, 11, 1, 4, 22, 2]

After backtrack at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 19, 20, 7, 14]
 solution : [0, 11, 1, 4, 22, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 19, 20, 7, 14]
 solution : [0, 11, 1, 4, 22]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 19, 20, 7, 14]
 solution : [0, 11, 1, 4, 22]

Essensial at level 14 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 14 : {19, 20}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 14]
 solution : [0, 11, 1, 4, 22, 7]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 14]
 solution : [0, 11, 1, 4, 22, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 14]
 solution : [0, 11, 1, 4, 22, 7]


Solution : [0, 11, 1, 4, 22, 7] has cost 36.


Decide in level 14 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 8, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7, 8]


New level: 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7, 8]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 10, 12, 13, 14, 23, 25, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 22, 7, 8]


Solution : [0, 11, 1, 4, 22, 7, 8] has cost 42.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 22, 7, 8]

After backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7]


Solution : [0, 11, 1, 4, 22, 7] has cost 36.


Decide in level 15 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Decide 14 with phase True at level 15

After decision at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7, 14]


New level: 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7, 14]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, 73), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

Covered at level 16 : {32, 13, 23}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 14]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 14]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 14]


Solution : [0, 11, 1, 4, 22, 7, 14] has cost 41.


Before backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 14]

After backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7, 14]


Invert decision for 14 at level 15


New level: 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7]

Essensial at level 16 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

Covered at level 16 : {32, 23}

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 13]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 13]


Solution : [0, 11, 1, 4, 22, 7, 13] has cost 38.


Before backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30]
 solution : [0, 11, 1, 4, 22, 7, 13]

After backtrack at level 16
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7]


Before backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32]
 solution : [0, 11, 1, 4, 22, 7]

After backtrack at level 15
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7]


Before backtrack at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14]
 solution : [0, 11, 1, 4, 22, 7]

After backtrack at level 14
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8]
 solution : [0, 11, 1, 4, 22]


Before backtrack at level 13
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8]
 solution : [0, 11, 1, 4, 22]

After backtrack at level 13
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2]
 solution : [0, 11, 1, 4, 22]


Before backtrack at level 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2]
 solution : [0, 11, 1, 4, 22]

After backtrack at level 12
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3]
 solution : [0, 11, 1, 4, 22]


Before backtrack at level 11
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3]
 solution : [0, 11, 1, 4, 22]

After backtrack at level 11
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5]
 solution : [0, 11, 1, 4, 22]


Before backtrack at level 10
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5]
 solution : [0, 11, 1, 4, 22]

After backtrack at level 10
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 22]


Invert decision for 22 at level 9


New level: 10
 pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, 12), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 10 : set()

After reduction : 
 pending  : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 10 among pending : [25, 29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 25 with phase True at level 10

After decision at level 10
 pending : [29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]


New level: 11
 pending : [29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 30, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, 128), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 29), (28, 41), (29, 41), (30, 0), (31, 16), (32, 4), (33, 16)]

Covered at level 11 : {30}

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 29), (28, 41), (29, 41), (30, 0), (31, 16), (32, 4), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 29), (28, 41), (29, 41), (30, -1), (31, 16), (32, 4), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]


Solution : [0, 11, 1, 4, 25] has cost 59.


Before backtrack at level 11
 pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6]
 solution : [0, 11, 1, 4, 25]

After backtrack at level 11
 pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 25]


Invert decision for 25 at level 10


New level: 11
 pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 29), (28, 41), (29, 41), (30, -1), (31, 16), (32, 4), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 11 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 11 among pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 14, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 14 with phase True at level 11

After decision at level 11
 pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]


New level: 12
 pending : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 13, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, 128), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 12 : {13}

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, 0), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 12 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14]


Solution : [0, 11, 1, 4, 14] has cost 25.


Decide in level 12 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 7, 19, 20, 8, 2, 3, 5, 17, 6, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]


New level: 13
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 19, 20, 8, 2, 3, 5, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 13 : {2, 19, 20, 5}

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 13 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6, 30]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 13 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6, 30]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 13

After decision at level 13
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]


New level: 14
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 14 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]


Solution : [0, 11, 1, 4, 14, 7, 30] has cost 41.


Before backtrack at level 14
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]

After backtrack at level 14
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 30]


Invert decision for 30 at level 13


New level: 14
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 14 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 8, 3, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 8]


New level: 15
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 3, 6, 10, 12, 17, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 8]


Solution : [0, 11, 1, 4, 14, 7, 8] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 14, 7, 8]

After backtrack at level 15
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 15 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 3, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 3]


New level: 16
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 6, 10, 12, 17, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 3]


Solution : [0, 11, 1, 4, 14, 7, 3] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 14, 7, 3]

After backtrack at level 16
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 16 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 6]


New level: 17
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 6]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 32), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 10, 12, 17, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 7, 6]


Solution : [0, 11, 1, 4, 14, 7, 6] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 14, 7, 6]

After backtrack at level 17
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 17 among pending : [29, 31, 33, 27, 28, 10, 12, 23, 32, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 27 with phase True at level 17

After decision at level 17
 pending : [29, 31, 33, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 27]


New level: 18
 pending : [29, 31, 33, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 27]


Before reduction : 
 pending  : [29, 31, 33, 28, 10, 12, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 17, 23, 28, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 27]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 27]


Solution : [0, 11, 1, 4, 14, 7, 27] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 27]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 28, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 27]


Invert decision for 27 at level 17


New level: 18
 pending : [10, 12, 29, 31, 33, 28, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Solution : [0, 11, 1, 4, 14, 7] has cost 31.


Decide in level 18 among pending : [10, 12, 29, 31, 33, 28, 23, 32, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 28 with phase True at level 18

After decision at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 28]


New level: 19
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 28]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 28]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 17, 23, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 28]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 28]


Solution : [0, 11, 1, 4, 14, 7, 28] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 28]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7, 28]


Invert decision for 28 at level 18


New level: 19
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]

Essensial at level 19 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 17, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 29]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 29]


Solution : [0, 11, 1, 4, 14, 7, 29] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 7, 29]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 17]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 14, 7]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8]
 solution : [0, 11, 1, 4, 14, 7]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14]


Solution : [0, 11, 1, 4, 14] has cost 25.


Decide in level 13 among pending : [10, 12, 29, 31, 33, 23, 32, 17, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 17 with phase True at level 13

After decision at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]


New level: 14
 pending : [10, 12, 29, 31, 33, 23, 32, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

Covered at level 14 : {32, 23}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 2), (31, 32), (32, 0), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]
 solution : [0, 11, 1, 4, 14, 17]


Solution : [0, 11, 1, 4, 14, 17] has cost 35.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 2, 5, 30]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

Decide 2 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]


New level: 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 19, 20, 5, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 2), (31, 32), (32, -1), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : {19, 20, 5}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, 0), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]


Solution : [0, 11, 1, 4, 14, 17, 2] has cost 41.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 2]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 14, 17, 2]


Invert decision for 2 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 14, 17]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 14, 17]

Essensial at level 15 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : {19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 5]


Solution : [0, 11, 1, 4, 14, 17, 5] has cost 48.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30]
 solution : [0, 11, 1, 4, 14, 17, 5]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20]
 solution : [0, 11, 1, 4, 14, 17]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20]
 solution : [0, 11, 1, 4, 14, 17]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14, 17]


Invert decision for 17 at level 13


New level: 14
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 2), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14]


Solution : [0, 11, 1, 4, 14] has cost 25.


Decide in level 14 among pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 5, 19, 20, 23, 32, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14, 5]


New level: 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 19, 20, 23, 32, 2]
 solution : [0, 11, 1, 4, 14, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 32), (4, -1), (5, 128), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 8), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : {2, 19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 5]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 5]


Solution : [0, 11, 1, 4, 14, 5] has cost 38.


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 5]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32, 19, 20, 2]
 solution : [0, 11, 1, 4, 14, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32, 19, 20, 2]
 solution : [0, 11, 1, 4, 14]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32, 19, 20, 2]
 solution : [0, 11, 1, 4, 14]

Essensial at level 15 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : {19, 20}

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 15 among pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 30, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 15

After decision at level 15
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]


New level: 16
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]


Solution : [0, 11, 1, 4, 14, 2, 30] has cost 41.


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 30]


Invert decision for 30 at level 15


New level: 16
 pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 16 among pending : [10, 12, 29, 31, 33, 28, 27, 6, 3, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 6 with phase True at level 16

After decision at level 16
 pending : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 6]


New level: 17
 pending : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 6]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, 32), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 3, 8, 10, 12, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 6]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 6]


Solution : [0, 11, 1, 4, 14, 2, 6] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 14, 2, 6]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 6]


Invert decision for 6 at level 16


New level: 17
 pending : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 17 among pending : [10, 12, 29, 31, 33, 28, 27, 3, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 3 with phase True at level 17

After decision at level 17
 pending : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 3]


New level: 18
 pending : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 3]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 32), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 8, 10, 12, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 3]


Solution : [0, 11, 1, 4, 14, 2, 3] has cost 37.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 4, 14, 2, 3]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 3]


Invert decision for 3 at level 17


New level: 18
 pending : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 18 among pending : [10, 12, 29, 31, 33, 28, 27, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 8 with phase True at level 18

After decision at level 18
 pending : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 8]


New level: 19
 pending : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 8]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 19 : {32, 33, 10, 12, 23, 27, 28, 29, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 8]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 14, 2, 8]


Solution : [0, 11, 1, 4, 14, 2, 8] has cost 37.


Before backtrack at level 19
 pending : []
 solution : [0, 11, 1, 4, 14, 2, 8]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 8]


Invert decision for 8 at level 18


New level: 19
 pending : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 28, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 19 among pending : [10, 12, 29, 31, 33, 28, 27, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 28 with phase True at level 19

After decision at level 19
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 28]


New level: 20
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 28]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 28]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 23, 27, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 28]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 28]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 28]


Solution : [0, 11, 1, 4, 14, 2, 28] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 28]

After backtrack at level 20
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 28]


Invert decision for 28 at level 19


New level: 20
 pending : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 27, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Solution : [0, 11, 1, 4, 14, 2] has cost 31.


Decide in level 20 among pending : [10, 12, 29, 31, 33, 27, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 27 with phase True at level 20

After decision at level 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 27]


New level: 21
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 27]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 27]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, -1), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 23, 29, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 27]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 27]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 27]


Solution : [0, 11, 1, 4, 14, 2, 27] has cost 65.


Before backtrack at level 21
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 27]

After backtrack at level 21
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2, 27]


Invert decision for 27 at level 20


New level: 21
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

Essensial at level 21 : {29}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 21 : {32, 33, 23, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 29]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 29]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 29]


Solution : [0, 11, 1, 4, 14, 2, 29] has cost 65.


Before backtrack at level 21
 pending : [10, 12]
 solution : [0, 11, 1, 4, 14, 2, 29]

After backtrack at level 21
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 20
 pending : [10, 12, 29, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 20
 pending : [10, 12, 29, 31, 33, 23, 32, 27]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32, 27]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 19
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 18
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 17
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 16
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6]
 solution : [0, 11, 1, 4, 14, 2]


Before backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6]
 solution : [0, 11, 1, 4, 14, 2]

After backtrack at level 15
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30]
 solution : [0, 11, 1, 4, 14]


Before backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30]
 solution : [0, 11, 1, 4, 14]

After backtrack at level 14
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5]
 solution : [0, 11, 1, 4, 14]


Before backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5]
 solution : [0, 11, 1, 4, 14]

After backtrack at level 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17]
 solution : [0, 11, 1, 4, 14]


Before backtrack at level 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17]
 solution : [0, 11, 1, 4, 14]

After backtrack at level 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4, 14]


Invert decision for 14 at level 11


New level: 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 12 among pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 8, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4, 8]


New level: 13
 pending : [10, 12, 29, 31, 33, 23, 32, 27, 28, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4, 8]


Before reduction : 
 pending  : [10, 12, 29, 31, 33, 23, 32, 27, 28, 3, 6, 2, 19, 20, 30, 5, 17, 13, 7]
 solution : [0, 11, 1, 4, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 16), (31, 68), (32, 0), (33, 68)]

Covered at level 13 : {32, 3, 6, 10, 12, 13, 23}

After reduction : 
 pending  : [29, 31, 33, 27, 28, 2, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 2, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, 0), (7, 128), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 16), (31, 68), (32, 0), (33, 68)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 16), (31, 68), (32, -1), (33, 68)]

Covered at level 13 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 2, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]


Solution : [0, 11, 1, 4, 8] has cost 26.


Decide in level 13 among pending : [29, 31, 33, 27, 28, 2, 19, 20, 30, 5, 17, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 16), (31, 68), (32, -1), (33, 68)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8, 2]


New level: 14
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8, 2]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 16), (31, 68), (32, -1), (33, 68)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 5, 7, 17, 19, 20, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 2]


Solution : [0, 11, 1, 4, 8, 2] has cost 32.


Before backtrack at level 14
 pending : []
 solution : [0, 11, 1, 4, 8, 2]

After backtrack at level 14
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

Covered at level 14 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]
 solution : [0, 11, 1, 4, 8]


Solution : [0, 11, 1, 4, 8] has cost 26.


Decide in level 14 among pending : [29, 31, 33, 27, 28, 19, 20, 30, 5, 17, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8, 5]


New level: 15
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8, 5]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 32), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 7, 17, 19, 20, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 5]


Solution : [0, 11, 1, 4, 8, 5] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 8, 5]

After backtrack at level 15
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 17, 7]
 solution : [0, 11, 1, 4, 8]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 17, 19, 20, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 7]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 8, 7]


Solution : [0, 11, 1, 4, 8, 7] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 8, 7]

After backtrack at level 15
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17]
 solution : [0, 11, 1, 4, 8]


Before backtrack at level 14
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17]
 solution : [0, 11, 1, 4, 8]

After backtrack at level 14
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5]
 solution : [0, 11, 1, 4, 8]


Before backtrack at level 13
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5]
 solution : [0, 11, 1, 4, 8]

After backtrack at level 13
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 13 : set()

After reduction : 
 pending  : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 13 among pending : [7, 29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 7 with phase True at level 13

After decision at level 13
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4, 7]


New level: 14
 pending : [29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 19, 20, 30, 17, 5, 10, 12, 23, 32, 3, 6, 13, 2]
 solution : [0, 11, 1, 4, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 14 : {2, 19, 20, 5}

After reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 3, 6, 13]
 solution : [0, 11, 1, 4, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 3, 6, 13]
 solution : [0, 11, 1, 4, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, 0), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 14 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 3, 6, 13]
 solution : [0, 11, 1, 4, 7]


Solution : [0, 11, 1, 4, 7] has cost 26.


Decide in level 14 among pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 3, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7, 3]


New level: 15
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7, 3]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 6, 10, 12, 13, 17, 23, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 3]


Solution : [0, 11, 1, 4, 7, 3] has cost 32.


Before backtrack at level 15
 pending : []
 solution : [0, 11, 1, 4, 7, 3]

After backtrack at level 15
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 15 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]
 solution : [0, 11, 1, 4, 7]


Solution : [0, 11, 1, 4, 7] has cost 26.


Decide in level 15 among pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 6, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7, 6]


New level: 16
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7, 6]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 10, 12, 13, 17, 23, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 7, 6]


Solution : [0, 11, 1, 4, 7, 6] has cost 39.


Before backtrack at level 16
 pending : []
 solution : [0, 11, 1, 4, 7, 6]

After backtrack at level 16
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32, 13]
 solution : [0, 11, 1, 4, 7]

Essensial at level 16 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Solution : [0, 11, 1, 4, 7, 13] has cost 28.


Decide in level 16 among pending : [29, 31, 33, 27, 28, 30, 17, 10, 12, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 16

After decision at level 16
 pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]


New level: 17
 pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]


Solution : [0, 11, 1, 4, 7, 13, 30] has cost 38.


Before backtrack at level 17
 pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]

After backtrack at level 17
 pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 30]


Invert decision for 30 at level 16


New level: 17
 pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Solution : [0, 11, 1, 4, 7, 13] has cost 28.


Decide in level 17 among pending : [29, 31, 33, 27, 28, 17, 10, 12, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 10 with phase True at level 17

After decision at level 17
 pending : [29, 31, 33, 27, 28, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 10]


New level: 18
 pending : [29, 31, 33, 27, 28, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 10]


Before reduction : 
 pending  : [29, 31, 33, 27, 28, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, 8), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 12, 17, 23, 31}

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 10]


Before reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 10]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 10]


Solution : [0, 11, 1, 4, 7, 13, 10] has cost 37.


Before backtrack at level 18
 pending : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 10]

After backtrack at level 18
 pending : [29, 27, 28, 31, 33, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13, 10]


Invert decision for 10 at level 17


New level: 18
 pending : [29, 27, 28, 31, 33, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 17, 12, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]

Essensial at level 18 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 17, 23, 31}

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 12]


Before reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 12]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 12]


Solution : [0, 11, 1, 4, 7, 13, 12] has cost 37.


Before backtrack at level 18
 pending : [29, 27, 28]
 solution : [0, 11, 1, 4, 7, 13, 12]

After backtrack at level 18
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]


Before backtrack at level 17
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32]
 solution : [0, 11, 1, 4, 7, 13]

After backtrack at level 17
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10]
 solution : [0, 11, 1, 4, 7, 13]


Before backtrack at level 16
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10]
 solution : [0, 11, 1, 4, 7, 13]

After backtrack at level 16
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30]
 solution : [0, 11, 1, 4, 7]


Before backtrack at level 15
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30]
 solution : [0, 11, 1, 4, 7]

After backtrack at level 15
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6]
 solution : [0, 11, 1, 4, 7]


Before backtrack at level 14
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6]
 solution : [0, 11, 1, 4, 7]

After backtrack at level 14
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 7]


Invert decision for 7 at level 13


New level: 14
 pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 14 : set()

After reduction : 
 pending  : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 14 among pending : [29, 27, 28, 12, 31, 33, 17, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 17 with phase True at level 14

After decision at level 14
 pending : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17]


New level: 15
 pending : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17]


Before reduction : 
 pending  : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, 128), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 15 : set()

After reduction : 
 pending  : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17]


Solution : [0, 11, 1, 4, 17] has cost 30.


Decide in level 15 among pending : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 6, 19, 20, 5, 2, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 6 with phase True at level 15

After decision at level 15
 pending : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17, 6]


New level: 16
 pending : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17, 6]


Before reduction : 
 pending  : [29, 27, 28, 12, 31, 33, 23, 32, 10, 13, 30, 19, 20, 5, 2, 3]
 solution : [0, 11, 1, 4, 17, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

Covered at level 16 : {32, 3, 10, 12, 13, 23, 30}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 5, 2]
 solution : [0, 11, 1, 4, 17, 6]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 5, 2]
 solution : [0, 11, 1, 4, 17, 6]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 0), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 10), (28, 10), (29, 10), (30, 0), (31, 4), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 5, 2]
 solution : [0, 11, 1, 4, 17, 6]


Solution : [0, 11, 1, 4, 17, 6] has cost 43.


Before backtrack at level 16
 pending : [29, 27, 28, 31, 33, 19, 20, 5, 2]
 solution : [0, 11, 1, 4, 17, 6]

After backtrack at level 16
 pending : [29, 27, 28, 31, 33, 19, 20, 5, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 6]


Invert decision for 6 at level 15


New level: 16
 pending : [29, 27, 28, 31, 33, 19, 20, 5, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 5, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 10), (28, 10), (29, 10), (30, -1), (31, 4), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 5, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17]


Solution : [0, 11, 1, 4, 17] has cost 30.


Decide in level 16 among pending : [29, 27, 28, 31, 33, 19, 20, 5, 2, 12, 23, 32, 10, 13, 30, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [29, 27, 28, 31, 33, 19, 20, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]


New level: 17
 pending : [29, 27, 28, 31, 33, 19, 20, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 19, 20, 2, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 80), (28, 56), (29, 64), (30, 16), (31, 32), (32, 8), (33, 32)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 17 : {2, 19, 20}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]


Solution : [0, 11, 1, 4, 17, 5] has cost 43.


Before backtrack at level 17
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 5]

After backtrack at level 17
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 19, 20, 2]
 solution : [0, 11, 1, 4, 17, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 19, 20, 2]
 solution : [0, 11, 1, 4, 17]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 19, 20, 2]
 solution : [0, 11, 1, 4, 17]

Essensial at level 17 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 17 : {19, 20}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 2]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 2]


Solution : [0, 11, 1, 4, 17, 2] has cost 36.


Before backtrack at level 17
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3]
 solution : [0, 11, 1, 4, 17, 2]

After backtrack at level 17
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20]
 solution : [0, 11, 1, 4, 17]


Before backtrack at level 16
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20]
 solution : [0, 11, 1, 4, 17]

After backtrack at level 16
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5]
 solution : [0, 11, 1, 4, 17]


Before backtrack at level 15
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5]
 solution : [0, 11, 1, 4, 17]

After backtrack at level 15
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4, 17]


Invert decision for 17 at level 14


New level: 15
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 18), (28, 18), (29, 16), (30, 16), (31, 4), (32, 8), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 15 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 15 among pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 3, 2, 19, 20, 5, 6]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 3 with phase True at level 15

After decision at level 15
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4, 3]


New level: 16
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4, 3]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10, 13, 30, 2, 19, 20, 5, 6]
 solution : [0, 11, 1, 4, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, 0), (33, 20)]

Covered at level 16 : {32, 6, 10, 12, 13, 23}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 2, 19, 20, 5]
 solution : [0, 11, 1, 4, 3]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 2, 19, 20, 5]
 solution : [0, 11, 1, 4, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 0), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, 0), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

Covered at level 16 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 2, 19, 20, 5]
 solution : [0, 11, 1, 4, 3]


Solution : [0, 11, 1, 4, 3] has cost 26.


Decide in level 16 among pending : [29, 27, 28, 31, 33, 30, 2, 19, 20, 5]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

Decide 2 with phase True at level 16

After decision at level 16
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3, 2]


New level: 17
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3, 2]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 25), (28, 25), (29, 26), (30, 4), (31, 20), (32, -1), (33, 20)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 5, 19, 20, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 2]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 2]


Solution : [0, 11, 1, 4, 3, 2] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 3, 2]

After backtrack at level 17
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3, 2]


Invert decision for 2 at level 16


New level: 17
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 19, 20, 5]
 solution : [0, 11, 1, 4, 3]

Essensial at level 17 : {5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 19, 20, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 3, 5]


Solution : [0, 11, 1, 4, 3, 5] has cost 39.


Before backtrack at level 17
 pending : []
 solution : [0, 11, 1, 4, 3, 5]

After backtrack at level 17
 pending : [5, 29, 27, 28, 31, 33, 30, 19, 20]
 solution : [0, 11, 1, 4, 3]


Before backtrack at level 16
 pending : [5, 29, 27, 28, 31, 33, 30, 19, 20]
 solution : [0, 11, 1, 4, 3]

After backtrack at level 16
 pending : [5, 29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4, 3]


Invert decision for 3 at level 15


New level: 16
 pending : [5, 29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [5, 29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Covered at level 16 : set()

After reduction : 
 pending  : [5, 29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4]


Solution : [0, 11, 1, 4] has cost 20.


Decide in level 16 among pending : [5, 29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4, 5]


New level: 17
 pending : [29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4, 5]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 19, 20, 12, 23, 32, 10, 13, 6, 2]
 solution : [0, 11, 1, 4, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 128), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 32), (20, 32), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 113), (28, 113), (29, 98), (30, 64), (31, 96), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 17 : {2, 19, 20}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 5]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 5]


Solution : [0, 11, 1, 4, 5] has cost 33.


Before backtrack at level 17
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 5]

After backtrack at level 17
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6, 19, 20, 2]
 solution : [0, 11, 1, 4, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6, 19, 20, 2]
 solution : [0, 11, 1, 4]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6, 19, 20, 2]
 solution : [0, 11, 1, 4]

Essensial at level 17 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 17 : {19, 20}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 2]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Covered at level 17 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]
 solution : [0, 11, 1, 4, 2]


Solution : [0, 11, 1, 4, 2] has cost 26.


Decide in level 17 among pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

Decide 6 with phase True at level 17

After decision at level 17
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2, 6]


New level: 18
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2, 6]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 128), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, 64), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 32), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 32), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 18 : {32, 33, 10, 12, 13, 23, 27, 28, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 2, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 2, 6]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 4, 2, 6]


Solution : [0, 11, 1, 4, 2, 6] has cost 39.


Before backtrack at level 18
 pending : []
 solution : [0, 11, 1, 4, 2, 6]

After backtrack at level 18
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2, 6]


Invert decision for 6 at level 17


New level: 18
 pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10, 13]
 solution : [0, 11, 1, 4, 2]

Essensial at level 18 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Covered at level 18 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]


Solution : [0, 11, 1, 4, 2, 13] has cost 28.


Decide in level 18 among pending : [29, 27, 28, 31, 33, 30, 12, 23, 32, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

Decide 30 with phase True at level 18

After decision at level 18
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]


New level: 19
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, 64), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

Covered at level 19 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]


Solution : [0, 11, 1, 4, 2, 13, 30] has cost 38.


Before backtrack at level 19
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]

After backtrack at level 19
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 30]


Invert decision for 30 at level 18


New level: 19
 pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 4), (24, -1), (25, -1), (26, -1), (27, 19), (28, 21), (29, 24), (30, -1), (31, 6), (32, 4), (33, 6)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Covered at level 19 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 12, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]


Solution : [0, 11, 1, 4, 2, 13] has cost 28.


Decide in level 19 among pending : [29, 27, 28, 31, 33, 12, 23, 32, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

Decide 12 with phase True at level 19

After decision at level 19
 pending : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 12]


New level: 20
 pending : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 12]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 12]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, 26), (28, 26), (29, 24), (30, -1), (31, 12), (32, 8), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 10, 23, 31}

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 12]


Before reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 12]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 12]


Solution : [0, 11, 1, 4, 2, 13, 12] has cost 37.


Before backtrack at level 20
 pending : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 12]

After backtrack at level 20
 pending : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13, 12]


Invert decision for 12 at level 19


New level: 20
 pending : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 10]
 solution : [0, 11, 1, 4, 2, 13]

Essensial at level 20 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

Covered at level 20 : {32, 33, 23, 31}

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 10]


Before reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 10]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 10]


Solution : [0, 11, 1, 4, 2, 13, 10] has cost 37.


Before backtrack at level 20
 pending : [29, 27, 28]
 solution : [0, 11, 1, 4, 2, 13, 10]

After backtrack at level 20
 pending : [29, 27, 28, 10, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 2, 13]


Before backtrack at level 19
 pending : [29, 27, 28, 10, 31, 33, 23, 32]
 solution : [0, 11, 1, 4, 2, 13]

After backtrack at level 19
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12]
 solution : [0, 11, 1, 4, 2, 13]


Before backtrack at level 18
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12]
 solution : [0, 11, 1, 4, 2, 13]

After backtrack at level 18
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30]
 solution : [0, 11, 1, 4, 2]


Before backtrack at level 17
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30]
 solution : [0, 11, 1, 4, 2]

After backtrack at level 17
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6]
 solution : [0, 11, 1, 4]


Before backtrack at level 16
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6]
 solution : [0, 11, 1, 4]

After backtrack at level 16
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4]


Before backtrack at level 15
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5]
 solution : [0, 11, 1, 4]

After backtrack at level 15
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3]
 solution : [0, 11, 1, 4]


Before backtrack at level 14
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3]
 solution : [0, 11, 1, 4]

After backtrack at level 14
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17]
 solution : [0, 11, 1, 4]


Before backtrack at level 13
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17]
 solution : [0, 11, 1, 4]

After backtrack at level 13
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7]
 solution : [0, 11, 1, 4]


Before backtrack at level 12
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7]
 solution : [0, 11, 1, 4]

After backtrack at level 12
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8]
 solution : [0, 11, 1, 4]


Before backtrack at level 11
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8]
 solution : [0, 11, 1, 4]

After backtrack at level 11
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14]
 solution : [0, 11, 1, 4]


Before backtrack at level 10
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14]
 solution : [0, 11, 1, 4]

After backtrack at level 10
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25]
 solution : [0, 11, 1, 4]


Before backtrack at level 9
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25]
 solution : [0, 11, 1, 4]

After backtrack at level 9
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22]
 solution : [0, 11, 1, 4]


Before backtrack at level 8
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22]
 solution : [0, 11, 1, 4]

After backtrack at level 8
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26]
 solution : [0, 11, 1, 4]


Before backtrack at level 7
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26]
 solution : [0, 11, 1, 4]

After backtrack at level 7
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18]
 solution : [0, 11, 1, 4]


Before backtrack at level 6
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18]
 solution : [0, 11, 1, 4]

After backtrack at level 6
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24]
 solution : [0, 11, 1, 4]


Before backtrack at level 5
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24]
 solution : [0, 11, 1, 4]

After backtrack at level 5
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16]
 solution : [0, 11, 1, 4]


Before backtrack at level 4
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16]
 solution : [0, 11, 1, 4]

After backtrack at level 4
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15]
 solution : [0, 11, 1, 4]


Before backtrack at level 3
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15]
 solution : [0, 11, 1, 4]

After backtrack at level 3
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21, 9]
 solution : [0, 11, 1, 4]


Invert decision for 4 at level 2


New level: 3
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21, 9]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21, 9]
 solution : [0, 11, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, 8), (28, 8), (29, 8), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

Covered at level 3 : set()

After reduction : 
 pending  : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21, 9]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 3 among pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21, 9]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9]


New level: 4
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, 576), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 56), (17, 256), (18, 40), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 24), (25, 16), (26, 22), (27, 44), (28, 68), (29, 144), (30, 16), (31, 160), (32, 128), (33, 80)]

Covered at level 4 : set()

After reduction : 
 pending  : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9]


Solution : [0, 11, 1, 9] has cost 31.


Decide in level 4 among pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 3, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 56), (17, 256), (18, 40), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 24), (25, 16), (26, 22), (27, 44), (28, 68), (29, 144), (30, 16), (31, 160), (32, 128), (33, 80)]

Decide 3 with phase True at level 4

After decision at level 4
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9, 3]


New level: 5
 pending : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9, 3]


Before reduction : 
 pending  : [29, 27, 28, 10, 31, 33, 23, 32, 12, 13, 30, 2, 19, 20, 6, 5, 17, 7, 8, 14, 25, 22, 26, 18, 24, 16, 15, 21]
 solution : [0, 11, 1, 9, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 56), (17, 256), (18, 40), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 24), (25, 16), (26, 22), (27, 44), (28, 68), (29, 144), (30, 16), (31, 160), (32, 128), (33, 80)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 288), (6, 0), (7, 512), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 14), (17, 128), (18, 40), (19, 128), (20, 64), (21, 32), (22, 64), (23, 8), (24, 24), (25, 4), (26, 6), (27, 12), (28, 18), (29, 38), (30, 4), (31, 68), (32, 2), (33, 34)]

Covered at level 5 : {6, 8, 10, 12, 13, 14, 15}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21]
 solution : [0, 11, 1, 9, 3]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21]
 solution : [0, 11, 1, 9, 3]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 288), (6, 0), (7, 512), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 14), (17, 128), (18, 40), (19, 128), (20, 64), (21, 32), (22, 64), (23, 8), (24, 24), (25, 4), (26, 6), (27, 12), (28, 18), (29, 38), (30, 4), (31, 68), (32, 2), (33, 34)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 288), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 14), (17, 128), (18, 40), (19, 128), (20, 64), (21, 32), (22, 64), (23, 8), (24, 24), (25, 4), (26, 6), (27, 12), (28, 18), (29, 38), (30, 4), (31, 68), (32, 2), (33, 34)]

Covered at level 5 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21]
 solution : [0, 11, 1, 9, 3]


Solution : [0, 11, 1, 9, 3] has cost 37.


Before backtrack at level 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21]
 solution : [0, 11, 1, 9, 3]

After backtrack at level 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9, 3]


Invert decision for 3 at level 4


New level: 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 2, 19, 20, 5, 17, 7, 25, 22, 26, 18, 24, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9]

Essensial at level 5 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, 288), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 14), (17, 128), (18, 40), (19, 128), (20, 64), (21, 32), (22, 64), (23, 8), (24, 24), (25, 4), (26, 6), (27, 12), (28, 18), (29, 38), (30, 4), (31, 68), (32, 2), (33, 34)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 320), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 14), (17, 8), (18, 0), (19, 0), (20, 0), (21, 32), (22, 4), (23, 256), (24, 0), (25, 4), (26, 5), (27, 10), (28, 16), (29, 34), (30, 4), (31, 10), (32, 128), (33, 5)]

Covered at level 5 : {2, 5, 18, 19, 20, 24}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 0), (6, 320), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 14), (17, 8), (18, 0), (19, 0), (20, 0), (21, 32), (22, 4), (23, 256), (24, 0), (25, 4), (26, 5), (27, 10), (28, 16), (29, 34), (30, 4), (31, 10), (32, 128), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 320), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 14), (17, 8), (18, -1), (19, -1), (20, -1), (21, 32), (22, 4), (23, 256), (24, -1), (25, 4), (26, 5), (27, 10), (28, 16), (29, 34), (30, 4), (31, 10), (32, 128), (33, 5)]

Covered at level 5 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9, 7]


Solution : [0, 11, 1, 9, 7] has cost 37.


Before backtrack at level 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 9, 7]

After backtrack at level 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24]
 solution : [0, 11, 1, 9]


Before backtrack at level 4
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24]
 solution : [0, 11, 1, 9]

After backtrack at level 4
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 320), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 14), (17, 8), (18, -1), (19, -1), (20, -1), (21, 32), (22, 4), (23, 256), (24, -1), (25, 4), (26, 5), (27, 10), (28, 16), (29, 34), (30, 4), (31, 10), (32, 128), (33, 5)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

Covered at level 4 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1]


Solution : [0, 11, 1] has cost 10.


Decide in level 4 among pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 7, 2, 19, 20, 5, 18, 24, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1, 7]


New level: 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 2, 19, 20, 5, 18, 24, 3]
 solution : [0, 11, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, -1), (5, 320), (6, 320), (7, 512), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 192), (25, 160), (26, 136), (27, 228), (28, 232), (29, 456), (30, 64), (31, 192), (32, 128), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 512), (4, -1), (5, 0), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, 0), (20, 0), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Covered at level 5 : {2, 19, 20, 5}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24, 3]
 solution : [0, 11, 1, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24, 3]
 solution : [0, 11, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 512), (4, -1), (5, 0), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, 0), (20, 0), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Covered at level 5 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24, 3]
 solution : [0, 11, 1, 7]


Solution : [0, 11, 1, 7] has cost 16.


Decide in level 5 among pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Decide 3 with phase True at level 5

After decision at level 5
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 3]


New level: 6
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 3]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 3]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 3]


Solution : [0, 11, 1, 7, 3] has cost 22.


Before backtrack at level 6
 pending : []
 solution : [0, 11, 1, 7, 3]

After backtrack at level 6
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 3]


Invert decision for 3 at level 5


New level: 6
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Covered at level 6 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7]


Solution : [0, 11, 1, 7] has cost 16.


Decide in level 6 among pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 16, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Decide 16 with phase True at level 6

After decision at level 6
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 16]


New level: 7
 pending : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 16]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 30, 17, 25, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 18, 24]
 solution : [0, 11, 1, 7, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, 393), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 4), (18, 0), (19, -1), (20, -1), (21, 8), (22, 2), (23, 64), (24, 0), (25, 0), (26, 6), (27, 12), (28, 18), (29, 36), (30, 0), (31, 6), (32, 16), (33, 3)]

Covered at level 7 : {24, 25, 18, 30}

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 7, 16]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 7, 16]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 4), (18, 0), (19, -1), (20, -1), (21, 8), (22, 2), (23, 64), (24, 0), (25, 0), (26, 6), (27, 12), (28, 18), (29, 36), (30, 0), (31, 6), (32, 16), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, 8), (22, 2), (23, 64), (24, -1), (25, -1), (26, 6), (27, 12), (28, 18), (29, 36), (30, -1), (31, 6), (32, 16), (33, 3)]

Covered at level 7 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 7, 16]


Solution : [0, 11, 1, 7, 16] has cost 45.


Before backtrack at level 7
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15]
 solution : [0, 11, 1, 7, 16]

After backtrack at level 7
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7, 16]


Invert decision for 16 at level 6


New level: 7
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 264), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 4), (18, -1), (19, -1), (20, -1), (21, 8), (22, 2), (23, 64), (24, -1), (25, -1), (26, 6), (27, 12), (28, 18), (29, 36), (30, -1), (31, 6), (32, 16), (33, 3)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Covered at level 7 : set()

After reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7]


Solution : [0, 11, 1, 7] has cost 16.


Decide in level 7 among pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 6, 8, 14, 15, 30, 25, 18, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

Decide 6 with phase True at level 7

After decision at level 7
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7, 6]


New level: 8
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7, 6]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, -1), (8, 128), (9, -1), (10, 128), (11, -1), (12, 64), (13, 64), (14, 128), (15, 256), (16, -1), (17, 32), (18, 10), (19, -1), (20, -1), (21, 32), (22, 16), (23, 256), (24, 6), (25, 112), (26, 26), (27, 52), (28, 52), (29, 98), (30, 64), (31, 24), (32, 128), (33, 12)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {8, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 6]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 7, 6]


Solution : [0, 11, 1, 7, 6] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 11, 1, 7, 6]

After backtrack at level 8
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7, 6]


Invert decision for 6 at level 7


New level: 8
 pending : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7]


Before reduction : 
 pending  : [29, 27, 28, 31, 33, 23, 32, 17, 22, 26, 21, 10, 12, 13, 8, 14, 15, 30, 25, 18, 24]
 solution : [0, 11, 1, 7]

Essensial at level 8 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, 0), (13, 1), (14, 8), (15, 64), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 16), (22, 0), (23, 16), (24, 0), (25, 8), (26, 8), (27, 16), (28, 34), (29, 66), (30, 0), (31, 0), (32, 2), (33, 0)]

Covered at level 8 : {33, 12, 17, 18, 22, 24, 30, 31}

After reduction : 
 pending  : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25]
 solution : [0, 11, 1, 7, 10]


Before reduction : 
 pending  : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25]
 solution : [0, 11, 1, 7, 10]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, 0), (13, 1), (14, 8), (15, 64), (16, -1), (17, 0), (18, 0), (19, -1), (20, -1), (21, 16), (22, 0), (23, 16), (24, 0), (25, 8), (26, 8), (27, 16), (28, 34), (29, 66), (30, 0), (31, 0), (32, 2), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16), (22, -1), (23, 16), (24, -1), (25, 8), (26, 8), (27, 16), (28, 34), (29, 66), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25]
 solution : [0, 11, 1, 7, 10]


Solution : [0, 11, 1, 7, 10] has cost 25.


Before backtrack at level 8
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25]
 solution : [0, 11, 1, 7, 10]

After backtrack at level 8
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24]
 solution : [0, 11, 1, 7]


Before backtrack at level 7
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24]
 solution : [0, 11, 1, 7]

After backtrack at level 7
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6]
 solution : [0, 11, 1, 7]


Before backtrack at level 6
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6]
 solution : [0, 11, 1, 7]

After backtrack at level 6
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16]
 solution : [0, 11, 1, 7]


Before backtrack at level 5
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16]
 solution : [0, 11, 1, 7]

After backtrack at level 5
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 5, 3]
 solution : [0, 11, 1, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 5, 3]
 solution : [0, 11, 1]


Before reduction : 
 pending  : [29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 5, 3]
 solution : [0, 11, 1]

Essensial at level 5 : {3, 5}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, -1), (11, -1), (12, -1), (13, 1), (14, 8), (15, 64), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 16), (22, -1), (23, 16), (24, -1), (25, 8), (26, 8), (27, 16), (28, 34), (29, 66), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, 0), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 11, 1, 3, 5]


Solution : [0, 11, 1, 3, 5] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 11, 1, 3, 5]

After backtrack at level 5
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20]
 solution : [0, 11, 1]


Before backtrack at level 4
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20]
 solution : [0, 11, 1]

After backtrack at level 4
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7]
 solution : [0, 11, 1]


Before backtrack at level 3
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7]
 solution : [0, 11, 1]

After backtrack at level 3
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9]
 solution : [0, 11, 1]


Before backtrack at level 2
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9]
 solution : [0, 11, 1]

After backtrack at level 2
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11]


Before reduction : 
 pending  : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 456), (28, 464), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Covered at level 2 : set()

After reduction : 
 pending  : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11]


Solution : [0, 11] has cost 7.


Decide in level 2 among pending : [5, 3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]

Coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 456), (28, 464), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

Decide 5 with phase True at level 2

After decision at level 2
 pending : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11, 5]


New level: 3
 pending : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 20, 7, 9, 4]
 solution : [0, 11, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 512), (3, 512), (4, 640), (5, 768), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 456), (17, 256), (18, 384), (19, 128), (20, 128), (21, 128), (22, 256), (23, 256), (24, 384), (25, 320), (26, 544), (27, 456), (28, 464), (29, 584), (30, 128), (31, 384), (32, 256), (33, 384)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, 768), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, 0), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 3 : {20}

After reduction : 
 pending  : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, 768), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, 0), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, 768), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 3 : set()

After reduction : 
 pending  : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 3 among pending : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 6, 16, 2, 19, 7, 9, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, 768), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 6 with phase True at level 3

After decision at level 3
 pending : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]


New level: 4
 pending : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]


Before reduction : 
 pending  : [3, 29, 27, 28, 23, 32, 26, 21, 13, 8, 14, 15, 25, 10, 31, 33, 17, 22, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, 768), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, 576), (10, 0), (11, -1), (12, 64), (13, 256), (14, 1), (15, 0), (16, 10), (17, 16), (18, 12), (19, 16), (20, -1), (21, 16), (22, 0), (23, 16), (24, 5), (25, 5), (26, 20), (27, 0), (28, 0), (29, 18), (30, 2), (31, 0), (32, 0), (33, 9)]

Covered at level 4 : {32, 10, 15, 22, 27, 28, 31}

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]


Before reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, 576), (10, 0), (11, -1), (12, 64), (13, 256), (14, 1), (15, 0), (16, 10), (17, 16), (18, 12), (19, 16), (20, -1), (21, 16), (22, 0), (23, 16), (24, 5), (25, 5), (26, 20), (27, 0), (28, 0), (29, 18), (30, 2), (31, 0), (32, 0), (33, 9)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, 576), (10, -1), (11, -1), (12, 64), (13, 256), (14, 1), (15, -1), (16, 10), (17, 16), (18, 12), (19, 16), (20, -1), (21, 16), (22, -1), (23, 16), (24, 5), (25, 5), (26, 20), (27, -1), (28, -1), (29, 18), (30, 2), (31, -1), (32, -1), (33, 9)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]


Solution : [0, 11, 5, 6] has cost 33.


Before backtrack at level 4
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4]
 solution : [0, 11, 5, 6]

After backtrack at level 4
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 6]


Invert decision for 6 at level 3


New level: 4
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, 128), (9, 576), (10, -1), (11, -1), (12, 64), (13, 256), (14, 1), (15, -1), (16, 10), (17, 16), (18, 12), (19, 16), (20, -1), (21, 16), (22, -1), (23, 16), (24, 5), (25, 5), (26, 20), (27, -1), (28, -1), (29, 18), (30, 2), (31, -1), (32, -1), (33, 9)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 4 : set()

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 4 among pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 9, 4, 27, 28, 32, 15, 10, 31, 22]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]


New level: 5
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]


Before reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 24, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 264), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 28), (17, 128), (18, 5), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, 0), (25, 16), (26, 40), (27, 41), (28, 52), (29, 70), (30, 16), (31, 160), (32, 256), (33, 40)]

Covered at level 5 : {24}

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]


Before reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 264), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 28), (17, 128), (18, 5), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, 0), (25, 16), (26, 40), (27, 41), (28, 52), (29, 70), (30, 16), (31, 160), (32, 256), (33, 40)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 264), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 28), (17, 128), (18, 5), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, -1), (25, 16), (26, 40), (27, 41), (28, 52), (29, 70), (30, 16), (31, 160), (32, 256), (33, 40)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]


Solution : [0, 11, 5, 9] has cost 41.


Before backtrack at level 5
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22]
 solution : [0, 11, 5, 9]

After backtrack at level 5
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 264), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 28), (17, 128), (18, 5), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, -1), (25, 16), (26, 40), (27, 41), (28, 52), (29, 70), (30, 16), (31, 160), (32, 256), (33, 40)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 5 : set()

After reduction : 
 pending  : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 5 among pending : [3, 29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 3 with phase True at level 5

After decision at level 5
 pending : [29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]


New level: 6
 pending : [29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]


Before reduction : 
 pending  : [29, 23, 26, 21, 13, 8, 14, 25, 33, 17, 12, 30, 18, 16, 2, 19, 7, 4, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 512), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 512), (9, -1), (10, 64), (11, -1), (12, 256), (13, 512), (14, 512), (15, 128), (16, 8), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 8), (23, 0), (24, 48), (25, 194), (26, 208), (27, 5), (28, 18), (29, 0), (30, 128), (31, 5), (32, 16), (33, 96)]

Covered at level 6 : {4, 7, 17, 18, 19, 21, 23, 29}

After reduction : 
 pending  : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]


Before reduction : 
 pending  : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 0), (5, -1), (6, -1), (7, 0), (8, 512), (9, -1), (10, 64), (11, -1), (12, 256), (13, 512), (14, 512), (15, 128), (16, 8), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 8), (23, 0), (24, 48), (25, 194), (26, 208), (27, 5), (28, 18), (29, 0), (30, 128), (31, 5), (32, 16), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, -1), (12, 256), (13, 512), (14, 512), (15, 128), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, 48), (25, 194), (26, 208), (27, 5), (28, 18), (29, -1), (30, 128), (31, 5), (32, 16), (33, 96)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]


Solution : [0, 11, 5, 3] has cost 26.


Before backtrack at level 6
 pending : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24]
 solution : [0, 11, 5, 3]

After backtrack at level 6
 pending : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 3]


Invert decision for 3 at level 5


New level: 6
 pending : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, -1), (12, 256), (13, 512), (14, 512), (15, 128), (16, 8), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 8), (23, -1), (24, 48), (25, 194), (26, 208), (27, 5), (28, 18), (29, -1), (30, 128), (31, 5), (32, 16), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 6 : set()

After reduction : 
 pending  : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 6 among pending : [26, 13, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 13 with phase True at level 6

After decision at level 6
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]


New level: 7
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Covered at level 7 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]


Solution : [0, 11, 5, 13] has cost 22.


Decide in level 7 among pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 15, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Decide 15 with phase True at level 7

After decision at level 7
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]


New level: 8
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, 256), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, 1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 6), (25, 208), (26, 52), (27, 52), (28, 196), (29, 197), (30, 128), (31, 24), (32, 16), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]


Solution : [0, 11, 5, 13, 15] has cost 27.


Before backtrack at level 8
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]

After backtrack at level 8
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 15]


Invert decision for 15 at level 7


New level: 8
 pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, 256), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, 1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 6), (25, 208), (26, 52), (27, 52), (28, 196), (29, 197), (30, 128), (31, 24), (32, 16), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Covered at level 8 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13]


Solution : [0, 11, 5, 13] has cost 22.


Decide in level 8 among pending : [26, 8, 14, 25, 33, 12, 30, 16, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Decide 16 with phase True at level 8

After decision at level 8
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]


New level: 9
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 24, 29, 23, 21, 17, 18, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 260), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 32), (18, 0), (19, 8), (20, -1), (21, 16), (22, 8), (23, 64), (24, 0), (25, 2), (26, 38), (27, 153), (28, 80), (29, 74), (30, 2), (31, 48), (32, 32), (33, 10)]

Covered at level 9 : {24, 18}

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 260), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 32), (18, 0), (19, 8), (20, -1), (21, 16), (22, 8), (23, 64), (24, 0), (25, 2), (26, 38), (27, 153), (28, 80), (29, 74), (30, 2), (31, 48), (32, 32), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 260), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, -1), (21, 16), (22, 8), (23, 64), (24, -1), (25, 2), (26, 38), (27, 153), (28, 80), (29, 74), (30, 2), (31, 48), (32, 32), (33, 10)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]


Solution : [0, 11, 5, 13, 16] has cost 51.


Before backtrack at level 9
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4]
 solution : [0, 11, 5, 13, 16]

After backtrack at level 9
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4, 24, 18]
 solution : [0, 11, 5, 13, 16]


Invert decision for 16 at level 8


New level: 9
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4, 24, 18]
 solution : [0, 11, 5, 13]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4, 24, 18]
 solution : [0, 11, 5, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 260), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 32), (18, -1), (19, 8), (20, -1), (21, 16), (22, 8), (23, 64), (24, -1), (25, 2), (26, 38), (27, 153), (28, 80), (29, 74), (30, 2), (31, 48), (32, 32), (33, 10)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Covered at level 9 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4, 24, 18]
 solution : [0, 11, 5, 13]


Solution : [0, 11, 5, 13] has cost 22.


Decide in level 9 among pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 4, 24, 18]

Coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

Decide 4 with phase True at level 9

After decision at level 9
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 24, 18]
 solution : [0, 11, 5, 13, 4]


New level: 10
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 24, 18]
 solution : [0, 11, 5, 13, 4]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 21, 17, 19, 7, 24, 18]
 solution : [0, 11, 5, 13, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 256), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, 256), (15, -1), (16, -1), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 6), (25, 256), (26, 52), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 256), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, 4), (15, -1), (16, -1), (17, 8), (18, 5), (19, 0), (20, -1), (21, 0), (22, 8), (23, 8), (24, 6), (25, 208), (26, 52), (27, 52), (28, 26), (29, 24), (30, 128), (31, 24), (32, 16), (33, 24)]

Covered at level 10 : {19, 21, 7}

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18]
 solution : [0, 11, 5, 13, 4]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18]
 solution : [0, 11, 5, 13, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 256), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, 4), (15, -1), (16, -1), (17, 8), (18, 5), (19, 0), (20, -1), (21, 0), (22, 8), (23, 8), (24, 6), (25, 208), (26, 52), (27, 52), (28, 26), (29, 24), (30, 128), (31, 24), (32, 16), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 256), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, 4), (15, -1), (16, -1), (17, 8), (18, 5), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, 6), (25, 208), (26, 52), (27, 52), (28, 26), (29, 24), (30, 128), (31, 24), (32, 16), (33, 24)]

Covered at level 10 : set()

After reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18]
 solution : [0, 11, 5, 13, 4]


Solution : [0, 11, 5, 13, 4] has cost 32.


Before backtrack at level 10
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18]
 solution : [0, 11, 5, 13, 4]

After backtrack at level 10
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18, 21, 19, 7]
 solution : [0, 11, 5, 13, 4]


Invert decision for 4 at level 9


New level: 10
 pending : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18, 21, 19, 7]
 solution : [0, 11, 5, 13]


Before reduction : 
 pending  : [26, 8, 14, 25, 33, 12, 30, 2, 27, 28, 32, 10, 31, 22, 29, 23, 17, 24, 18, 21, 19, 7]
 solution : [0, 11, 5, 13]

Essensial at level 10 : {10, 29, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 256), (9, -1), (10, 64), (11, -1), (12, 128), (13, -1), (14, 4), (15, -1), (16, -1), (17, 8), (18, 5), (19, -1), (20, -1), (21, -1), (22, 8), (23, 8), (24, 6), (25, 208), (26, 52), (27, 52), (28, 26), (29, 24), (30, 128), (31, 24), (32, 16), (33, 24)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, 2), (13, -1), (14, 1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31}

After reduction : 
 pending  : [8, 14, 12, 2]
 solution : [0, 11, 5, 13, 10, 29, 7]


Before reduction : 
 pending  : [8, 14, 12, 2]
 solution : [0, 11, 5, 13, 10, 29, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, 2), (13, -1), (14, 1), (15, -1), (16, -1), (17, 0), (18, 0), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, 2), (13, -1), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [8, 14, 12, 2]
 solution : [0, 11, 5, 13, 10, 29, 7]


Solution : [0, 11, 5, 13, 10, 29, 7] has cost 71.


Before backtrack at level 10
 pending : [8, 14, 12, 2]
 solution : [0, 11, 5, 13, 10, 29, 7]

After backtrack at level 10
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19]
 solution : [0, 11, 5, 13]


Before backtrack at level 9
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19]
 solution : [0, 11, 5, 13]

After backtrack at level 9
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4]
 solution : [0, 11, 5, 13]


Before backtrack at level 8
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4]
 solution : [0, 11, 5, 13]

After backtrack at level 8
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16]
 solution : [0, 11, 5, 13]


Before backtrack at level 7
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16]
 solution : [0, 11, 5, 13]

After backtrack at level 7
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 13]


Invert decision for 13 at level 6


New level: 7
 pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 2), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 2), (9, -1), (10, -1), (11, -1), (12, 2), (13, -1), (14, 1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 7 : set()

After reduction : 
 pending  : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 7 among pending : [8, 14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]


New level: 8
 pending : [14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]


Before reduction : 
 pending  : [14, 12, 2, 10, 29, 7, 26, 25, 33, 30, 27, 28, 32, 31, 22, 23, 17, 24, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, 512), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 0), (13, -1), (14, 4), (15, 512), (16, 386), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 2), (23, 256), (24, 0), (25, 14), (26, 0), (27, 25), (28, 8), (29, 198), (30, 4), (31, 36), (32, 64), (33, 0)]

Covered at level 8 : {33, 2, 12, 24, 26}

After reduction : 
 pending  : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]


Before reduction : 
 pending  : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, 0), (13, -1), (14, 4), (15, 512), (16, 386), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 2), (23, 256), (24, 0), (25, 14), (26, 0), (27, 25), (28, 8), (29, 198), (30, 4), (31, 36), (32, 64), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, -1), (14, 4), (15, 512), (16, 386), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 2), (23, 256), (24, -1), (25, 14), (26, -1), (27, 25), (28, 8), (29, 198), (30, 4), (31, 36), (32, 64), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]


Solution : [0, 11, 5, 8] has cost 26.


Before backtrack at level 8
 pending : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15]
 solution : [0, 11, 5, 8]

After backtrack at level 8
 pending : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, -1), (12, -1), (13, -1), (14, 4), (15, 512), (16, 386), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 2), (23, 256), (24, -1), (25, 14), (26, -1), (27, 25), (28, 8), (29, 198), (30, 4), (31, 36), (32, 64), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Covered at level 8 : set()

After reduction : 
 pending  : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5]


Solution : [0, 11, 5] has cost 20.


Decide in level 8 among pending : [14, 10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

Decide 14 with phase True at level 8

After decision at level 8
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]


New level: 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 272), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 256), (11, -1), (12, 256), (13, -1), (14, 512), (15, 512), (16, 418), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 64), (23, 256), (24, 48), (25, 256), (26, 208), (27, 225), (28, 224), (29, 198), (30, 128), (31, 192), (32, 256), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, 128), (16, 393), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, 48), (25, 256), (26, 196), (27, 225), (28, 52), (29, 198), (30, 128), (31, 192), (32, 128), (33, 96)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]


Solution : [0, 11, 5, 14] has cost 25.


Before backtrack at level 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]

After backtrack at level 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 14]


Invert decision for 14 at level 8


New level: 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 15, 12, 2, 26, 33, 24]
 solution : [0, 11, 5]

Essensial at level 9 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, 64), (3, -1), (4, 258), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, -1), (14, -1), (15, 128), (16, 393), (17, 128), (18, 96), (19, 32), (20, -1), (21, 64), (22, 16), (23, 256), (24, 48), (25, 256), (26, 196), (27, 225), (28, 52), (29, 198), (30, 128), (31, 192), (32, 128), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, -1), (9, -1), (10, 128), (11, -1), (12, 256), (13, -1), (14, -1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 48), (25, 208), (26, 208), (27, 52), (28, 176), (29, 197), (30, 128), (31, 24), (32, 32), (33, 96)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 15]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, -1), (9, -1), (10, 128), (11, -1), (12, 256), (13, -1), (14, -1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 48), (25, 208), (26, 208), (27, 52), (28, 176), (29, 197), (30, 128), (31, 24), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, -1), (9, -1), (10, 128), (11, -1), (12, 256), (13, -1), (14, -1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 48), (25, 208), (26, 208), (27, 52), (28, 176), (29, 197), (30, 128), (31, 24), (32, 32), (33, 96)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 15]


Solution : [0, 11, 5, 15] has cost 25.


Before backtrack at level 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24]
 solution : [0, 11, 5, 15]

After backtrack at level 9
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15]
 solution : [0, 11, 5]


Before backtrack at level 8
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15]
 solution : [0, 11, 5]

After backtrack at level 8
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14]
 solution : [0, 11, 5]


Before backtrack at level 7
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14]
 solution : [0, 11, 5]

After backtrack at level 7
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8]
 solution : [0, 11, 5]


Before backtrack at level 6
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8]
 solution : [0, 11, 5]

After backtrack at level 6
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13]
 solution : [0, 11, 5]


Before backtrack at level 5
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13]
 solution : [0, 11, 5]

After backtrack at level 5
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3]
 solution : [0, 11, 5]


Before backtrack at level 4
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3]
 solution : [0, 11, 5]

After backtrack at level 4
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3, 9]
 solution : [0, 11, 5]


Before backtrack at level 3
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3, 9]
 solution : [0, 11, 5]

After backtrack at level 3
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11, 5]


Invert decision for 5 at level 2


New level: 3
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 2, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11]

Essensial at level 3 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 130), (5, -1), (6, -1), (7, 64), (8, -1), (9, -1), (10, 128), (11, -1), (12, 256), (13, -1), (14, -1), (15, -1), (16, 417), (17, 128), (18, 96), (19, 16), (20, -1), (21, 32), (22, 64), (23, 128), (24, 48), (25, 208), (26, 208), (27, 52), (28, 176), (29, 197), (30, 128), (31, 24), (32, 32), (33, 96)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

Covered at level 3 : set()

After reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11, 2]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

Covered at level 3 : set()

After reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]
 solution : [0, 11, 2]


Solution : [0, 11, 2] has cost 13.


Decide in level 3 among pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

Decide 6 with phase True at level 3

After decision at level 3
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20]
 solution : [0, 11, 2, 6]


New level: 4
 pending : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20]
 solution : [0, 11, 2, 6]


Before reduction : 
 pending  : [10, 29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 12, 26, 33, 24, 15, 14, 8, 13, 3, 9, 20]
 solution : [0, 11, 2, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, 768), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 288), (5, -1), (6, -1), (7, 512), (8, 0), (9, 576), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 101), (17, 128), (18, 320), (19, 128), (20, 32), (21, 64), (22, 32), (23, 64), (24, 24), (25, 2), (26, 0), (27, 6), (28, 27), (29, 216), (30, 2), (31, 258), (32, 2), (33, 2)]

Covered at level 4 : {8, 10, 12, 13, 14, 15, 26}

After reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20]
 solution : [0, 11, 2, 6]


Before reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20]
 solution : [0, 11, 2, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 288), (5, -1), (6, -1), (7, 512), (8, 0), (9, 576), (10, 0), (11, -1), (12, 0), (13, 0), (14, 0), (15, 0), (16, 101), (17, 128), (18, 320), (19, 128), (20, 32), (21, 64), (22, 32), (23, 64), (24, 24), (25, 2), (26, 0), (27, 6), (28, 27), (29, 216), (30, 2), (31, 258), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 288), (5, -1), (6, -1), (7, 512), (8, -1), (9, 576), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 101), (17, 128), (18, 320), (19, 128), (20, 32), (21, 64), (22, 32), (23, 64), (24, 24), (25, 2), (26, -1), (27, 6), (28, 27), (29, 208), (30, 2), (31, 258), (32, 2), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20]
 solution : [0, 11, 2, 6]


Solution : [0, 11, 2, 6] has cost 26.


Before backtrack at level 4
 pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20]
 solution : [0, 11, 2, 6]

After backtrack at level 4
 pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 6]


Invert decision for 6 at level 3


New level: 4
 pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2]


Before reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 288), (5, -1), (6, -1), (7, 512), (8, -1), (9, 576), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 101), (17, 128), (18, 320), (19, 128), (20, 32), (21, 64), (22, 32), (23, 64), (24, 24), (25, 2), (26, -1), (27, 6), (28, 27), (29, 208), (30, 2), (31, 258), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, -1), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

Covered at level 4 : set()

After reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2]


Solution : [0, 11, 2] has cost 13.


Decide in level 4 among pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 4, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, -1), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

Decide 4 with phase True at level 4

After decision at level 4
 pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]


New level: 5
 pending : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]


Before reduction : 
 pending  : [29, 7, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 21, 19, 16, 33, 24, 3, 9, 20, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, 640), (5, -1), (6, -1), (7, 512), (8, 512), (9, 576), (10, 256), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 420), (17, 256), (18, 384), (19, 128), (20, 64), (21, 128), (22, 128), (23, 256), (24, 96), (25, 320), (26, 272), (27, 456), (28, 212), (29, 584), (30, 128), (31, 384), (32, 256), (33, 192)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 512), (9, 576), (10, 128), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 194), (17, 8), (18, 5), (19, 0), (20, 0), (21, 0), (22, 16), (23, 32), (24, 12), (25, 208), (26, 104), (27, 52), (28, 52), (29, 24), (30, 128), (31, 24), (32, 64), (33, 48)]

Covered at level 5 : {19, 20, 21, 7}

After reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]


Before reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 0), (8, 512), (9, 576), (10, 128), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 194), (17, 8), (18, 5), (19, 0), (20, 0), (21, 0), (22, 16), (23, 32), (24, 12), (25, 208), (26, 104), (27, 52), (28, 52), (29, 24), (30, 128), (31, 24), (32, 64), (33, 48)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, 576), (10, 128), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 194), (17, 8), (18, 5), (19, -1), (20, -1), (21, -1), (22, 16), (23, 32), (24, 12), (25, 208), (26, 104), (27, 52), (28, 52), (29, 24), (30, 128), (31, 24), (32, 64), (33, 48)]

Covered at level 5 : set()

After reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]


Solution : [0, 11, 2, 4] has cost 23.


Before backtrack at level 5
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13]
 solution : [0, 11, 2, 4]

After backtrack at level 5
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13, 7, 21, 19, 20]
 solution : [0, 11, 2, 4]


Invert decision for 4 at level 4


New level: 5
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13, 7, 21, 19, 20]
 solution : [0, 11, 2]


Before reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 17, 18, 16, 33, 24, 3, 9, 10, 12, 26, 15, 14, 8, 13, 7, 21, 19, 20]
 solution : [0, 11, 2]

Essensial at level 5 : {10, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, 576), (10, 128), (11, -1), (12, 256), (13, 512), (14, 512), (15, 512), (16, 194), (17, 8), (18, 5), (19, -1), (20, -1), (21, -1), (22, 16), (23, 32), (24, 12), (25, 208), (26, 104), (27, 52), (28, 52), (29, 24), (30, 128), (31, 24), (32, 64), (33, 48)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, 512), (10, -1), (11, -1), (12, 8), (13, 512), (14, 128), (15, 128), (16, 104), (17, 0), (18, 2), (19, 0), (20, 8), (21, 32), (22, 16), (23, 32), (24, 16), (25, 81), (26, 36), (27, 128), (28, 146), (29, 224), (30, 2), (31, 4), (32, 128), (33, 4)]

Covered at level 5 : {17, 19}

After reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20]
 solution : [0, 11, 2, 10, 7]


Before reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20]
 solution : [0, 11, 2, 10, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, 512), (10, -1), (11, -1), (12, 8), (13, 512), (14, 128), (15, 128), (16, 104), (17, 0), (18, 2), (19, 0), (20, 8), (21, 32), (22, 16), (23, 32), (24, 16), (25, 81), (26, 36), (27, 128), (28, 146), (29, 224), (30, 2), (31, 4), (32, 128), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 512), (4, -1), (5, -1), (6, -1), (7, -1), (8, 512), (9, 512), (10, -1), (11, -1), (12, 8), (13, 512), (14, 128), (15, 128), (16, 104), (17, -1), (18, 2), (19, -1), (20, 8), (21, 32), (22, 16), (23, 32), (24, 16), (25, 81), (26, 36), (27, 128), (28, 146), (29, 224), (30, 2), (31, 4), (32, 128), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20]
 solution : [0, 11, 2, 10, 7]


Solution : [0, 11, 2, 10, 7] has cost 28.


Before backtrack at level 5
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20]
 solution : [0, 11, 2, 10, 7]

After backtrack at level 5
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19]
 solution : [0, 11, 2]


Before backtrack at level 4
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19]
 solution : [0, 11, 2]

After backtrack at level 4
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4]
 solution : [0, 11, 2]


Before backtrack at level 3
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4]
 solution : [0, 11, 2]

After backtrack at level 3
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4, 2, 6]
 solution : [0, 11]


Before backtrack at level 2
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4, 2, 6]
 solution : [0, 11]

After backtrack at level 2
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4, 2, 6, 5]
 solution : [0, 11]


Before backtrack at level 1
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4, 2, 6, 5]
 solution : [0, 11]

After backtrack at level 1
 pending : [29, 25, 30, 27, 28, 32, 31, 22, 23, 18, 16, 33, 24, 3, 9, 12, 26, 15, 14, 8, 13, 21, 20, 10, 7, 17, 19, 4, 2, 6, 5, 1]
 solution : [0, 11]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 11, 1, 7, 3] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_11] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_7] forall NODE1,NODE0. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6

invariant [invar_3] forall NODE1,NODE0. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 10.929 seconds

[QRM NOTE]: Time elapsed since last: 2.148 seconds

[QRM NOTE]: Peak memory: 2293507 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_3

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_3 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_3 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_11 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_3 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE1,NODE0. allowed_in(NODE1) | allowed_in(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1) & (forall NODE1,NODE0. internal(NODE0) | internal(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 12.798 seconds

[QRM NOTE]: Time elapsed since last: 1.869 seconds

[QRM NOTE]: Peak memory: 1294567 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

