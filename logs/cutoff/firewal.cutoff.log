
********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************


---------- Parsing Ivy ----------


Printing isolate this:

OK


================================================================================

	[FW]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

================================================================================


==============================================

	Set up for forward reachability

==============================================

ivy_to_cpp target=qrm firewall.node_3.finite.ivy

[IVY_TO_CPP RESULT]: OK

swig -c++ -python -o firewall.node_3.finite_wrap.cpp ivy_exec.i

[SWIG RESULT]: OK

g++ -std=c++11 -fpic -pthread -O3 firewall.node_3.finite.cpp firewall.node_3.finite_wrap.cpp -I/home/yunrong/.pyenv/versions/3.12.0/include/python3.12 -c

[G++ RESULT]: OK

g++ -shared firewall.node_3.finite.o firewall.node_3.finite_wrap.o -o _ivy_exec.so -lm -lstdc++

[LINK RESULT]: OK

[FW NOTE]: number of state atoms: 15

[FW NOTE]: number of interpreted atoms (e.g. member,le): 0

[FW NOTE]: number of branching actions: 18

[FW NOTE]: symmetric group order: 6

[QRM NOTE]: Time elapsed since start: 6.097 seconds

[QRM NOTE]: Time elapsed since last: 6.097 seconds

[QRM NOTE]: Peak memory: 1173114 bytes


=====================================

	Symmetric Quotient DFS

=====================================

[FW NOTE]: dfs max depth: 4

[FW NOTE]: number of total reachable states:        68

[FW NOTE]: number of dfs representative states:     16

[FW NOTE]: number of dfs non-representative states: 52


=======================================================================================

	[FW RESULT]: Forward Reachability on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================

sort: node=['node0', 'node1', 'node2']
predicate: sent('node', 'node')
predicate: internal('node',)
predicate: allowed_in('node',)
interpreted atoms: {}
state atoms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)', 'internal(node0)', 'internal(node1)', 'internal(node2)', 'sent(node0,node0)', 'sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node1)', 'sent(node1,node2)', 'sent(node2,node0)', 'sent(node2,node1)', 'sent(node2,node2)']
representative states : 0, 3584, 1536, 512, 7176, 7240, 7242, 7246, 7178, 7182, 7180, 5128, 14528, 14532, 14564, 5130


=== State Orbit 0 =====================
size : 1
repr state: 000000000000000
lex min decimal: 0
states:
000000000000000




=== State Orbit 1 =====================
size : 1
repr state: 000111000000000
lex min decimal: 3584
states:
000111000000000




=== State Orbit 2 =====================
size : 3
repr state: 000110000000000
lex min decimal: 1536
states:
000101000000000
000011000000000
000110000000000




=== State Orbit 3 =====================
size : 3
repr state: 000100000000000
lex min decimal: 512
states:
000100000000000
000001000000000
000010000000000




=== State Orbit 4 =====================
size : 6
repr state: 001110001000000
lex min decimal: 7176
states:
010101010000000
010101000000010
001110000001000
001110001000000
100011000000100
100011000100000




=== State Orbit 5 =====================
size : 3
repr state: 001110001001000
lex min decimal: 7240
states:
001110001001000
100011000100100
010101010000010




=== State Orbit 6 =====================
size : 6
repr state: 001110001001100
lex min decimal: 7242
states:
010101010001010
001110001001010
100011010100100
001110001001100
010101010100010
100011001100100




=== State Orbit 7 =====================
size : 3
repr state: 001110001001110
lex min decimal: 7246
states:
010101010101010
001110001001110
100011011100100




=== State Orbit 8 =====================
size : 6
repr state: 001110001000100
lex min decimal: 7178
states:
010101000001010
100011001000100
010101010100000
001110001000100
001110000001010
100011010100000




=== State Orbit 9 =====================
size : 6
repr state: 001110001000110
lex min decimal: 7182
states:
100011011100000
001110000001110
010101010101000
100011011000100
001110001000110
010101000101010




=== State Orbit 10 =====================
size : 6
repr state: 001110001000010
lex min decimal: 7180
states:
001110001000010
100011010000100
001110000001100
100011001100000
010101010001000
010101000100010




=== State Orbit 11 =====================
size : 6
repr state: 010100010000000
lex min decimal: 5128
states:
001010000001000
100010000100000
010100010000000
001100001000000
100001000000100
010001000000010




=== State Orbit 12 =====================
size : 3
repr state: 011100011000000
lex min decimal: 14528
states:
011100011000000
110001000000110
101010000101000




=== State Orbit 13 =====================
size : 6
repr state: 011100011100000
lex min decimal: 14532
states:
011100011000100
101010000101010
110001001000110
110001000001110
011100011100000
101010010101000




=== State Orbit 14 =====================
size : 3
repr state: 011100011100100
lex min decimal: 14564
states:
101010010101010
110001001001110
011100011100100




=== State Orbit 15 =====================
size : 6
repr state: 010100010100000
lex min decimal: 5130
states:
001100001000100
001010000001010
010100010100000
100010010100000
010001000001010
100001001000100



[QRM NOTE]: Time elapsed since start: 6.200 seconds

[QRM NOTE]: Time elapsed since last: 0.103 seconds

[QRM NOTE]: Peak memory: 1223226 bytes


======================================

	Reduce Equivalent Atoms

======================================

[FW NOTE]: equivalent atoms

[FW NOTE]: complement atoms

[FW NOTE]: remove_atom_ids: set()

[QRM NOTE]: Time elapsed since start: 6.202 seconds

[QRM NOTE]: Time elapsed since last: 0.003 seconds

[QRM NOTE]: Peak memory: 186352 bytes


=======================================================================================

	[PRIME]: Prime Orbit Generatation on [ivybench/sym/ivy/firewall: node=3]

=======================================================================================


==================================================================================

	[PRIME RESULT]: Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1--1------
6     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
7     : 0---1--1-------
7     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
8     : -0---1-----1---
8     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
9     : -0-1-----1-----
9     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
10     : --0-1--------1-
10     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
11     : --01--------1--
11     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
36 (*) : --01----1------
36     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
37     : -0-1---1-------
37     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38     : --0-1------1---
38     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
39     : 0---1----1-----
39     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
40     : -0---1-------1-
40     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
41     : 0----1------1--
41     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---1-1--1------
12     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
13     : ---11--1-------
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : ----11-----1---
14     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
15     : ---11----1-----
15     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
16     : ----11-------1-
16     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
17     : ---1-1------1--
17     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : 1----0--1------
18     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
19     : 1---0--1-------
19     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
20     : -1---0-----1---
20     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : --10--------1--
23     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
24 (*) : --10----1------
24     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
25     : -1-0---1-------
25     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
26     : --1-0------1---
26     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
27     : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : 1----0------1--
29     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
30 (*) : 1-1-----1------
30     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
31     : 11-----1-------
31     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
32     : -11--------1---
32     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
33     : 11-------1-----
33     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
34     : -11----------1-
34     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
35     : 1-1---------1--
35     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
42 (*) : --0--0--1------
42     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
43     : -0--0--1-------
43     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
44     : --0--0-----1---
44     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : 0--0--------1--
47     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
60 (*) : 0--0----1------
60     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
61     : 0--0---1-------
61     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
62     : -0--0------1---
62     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
63     : -0--0----1-----
63     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
64     : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : --0--0------1--
65     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
48 (*) : 0-0-----1------
48     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
49     : 00-----1-------
49     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
50     : -00--------1---
50     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 0-0---------1--
53     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : ---0-0--1------
54     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
55     : ---00--1-------
55     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
56     : ----00-----1---
56     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
57     : ---00----1-----
57     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
58     : ----00-------1-
58     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
59     : ---0-0------1--
59     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11----1-
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
67     : -------11--1---
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
68     : ---------1-11--
68     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
69     : --------11-1---
69     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
70     : ---------1--11-
70     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : -------1----11-
71     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11----------0--
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
75     : 1-1------0-----
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
76     : 11-----------0-
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
77     : -11----0-------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
78     : 1-1--------0---
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
79     : -11-----0------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : 11---0---------
80     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : -110-----------
82     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-----0-----0-
92     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
93     : --1-----0--0---
93     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
94     : 1--------0--0--
94     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-------1--1-0-
96     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : 1------1---0-1-
97     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : -1------1--10--
98     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : -1------01--1--
99     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : --1----1-0---1-
100     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : --1----0-1--1--
101     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
144 (*) : 1-------1--10--
144     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
145     : 1------1-0---1-
145     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
146     : -1------1--1-0-
146     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
147     : -1-----0-1--1--
147     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
148     : --1----1---0-1-
148     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
149     : --1-----01--1--
149     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
204 (*) : 1-------1---01-
204     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
205     : 1------1-0-1---
205     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
206     : -1---------110-
206     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
207     : -1-----011-----
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
208     : --1------1-0-1-
208     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
209     : --1----10---1--
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
234 (*) : --1----011-----
234     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
235     : -1-----10---1--
235     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
236     : --1----1-0-1---
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
237     : 1--------1-0-1-
237     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
238     : -1------1---01-
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
239     : 1----------110-
239     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
102 (*) : --0-----1--1-0-
102     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -0-----1---0-1-
103     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : --0-----1--10--
104     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-------01--1--
105     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : -0-----1-0---1-
106     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 0------0-1--1--
107     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
180 (*) : --0-----1---01-
180     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
181     : -0-----1-0-1---
181     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
182     : --0--------110-
182     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
183     : 0------011-----
183     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
184     : -0-------1-0-1-
184     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
185     : 0------10---1--
185     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
108 (*) : ----0---1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
109     : -----0-1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
110     : ---0----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
111     : -----0--01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
112     : ---0---1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
113     : ----0--0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
156 (*) : ----0---1---01-
156     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
157     : -----0-1-0-1---
157     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
158     : ---0-------110-
158     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
159     : -----0-011-----
159     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
160     : ---0-----1-0-1-
160     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
161     : ----0--10---1--
161     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
198 (*) : ---0----1---01-
198     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
199     : ---0---1-0-1---
199     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
200     : ----0------110-
200     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
201     : ----0--011-----
201     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
202     : -----0---1-0-1-
202     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
203     : -----0-10---1--
203     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : ---01---1--1---
120     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
121     : ---0-1-1-----1-
121     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
122     : ---10---1--1---
122     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
123     : ----01---1--1--
123     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
124     : ---1-0-1-----1-
124     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
125     : ----10---1--1--
125     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
162 (*) : ---10---1----1-
162     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
163     : ---1-0-1---1---
163     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
164     : ---01------11--
164     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
165     : ----10--11-----
165     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
166     : ---0-1---1---1-
166     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
167     : ----01-1----1--
167     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
222 (*) : ---01---1----1-
222     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
223     : ---0-1-1---1---
223     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
224     : ---10------11--
224     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
225     : ----01--11-----
225     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
226     : ---1-0---1---1-
226     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
227     : ----10-1----1--
227     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
270 (*) : ----10-11------
270     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
271     : ----01-11------
271     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
272     : ---1-0---1-1---
272     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
273     : ---0-1---1-1---
273     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
274     : ---10-------11-
274     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
275     : ---01-------11-
275     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
126 (*) : -0-0----1--1---
126     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
127     : --00---1-----1-
127     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
128     : 0---0---1--1---
128     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
129     : --0-0----1--1--
129     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
130     : 0----0-1-----1-
130     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
131     : -0---0---1--1--
131     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
150 (*) : 0---0---1----1-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
151     : 0----0-1---1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
152     : -0-0-------11--
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
153     : -0---0--11-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
154     : --00-----1---1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
155     : --0-0--1----1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
228 (*) : -0-0----1----1-
228     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1---1---
229     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0------11--
230     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0---11-----
231     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0---1---1-
232     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0-1----1--
233     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
258 (*) : --0-0--11------
258     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
259     : -0---0-11------
259     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
260     : --00-----1-1---
260     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
261     : 0----0---1-1---
261     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
262     : -0-0--------11-
262     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
263     : 0---0-------11-
263     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
132 (*) : 10------1--1---
132     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
133     : 1-0----1-----1-
133     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
134     : 01------1--1---
134     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
135     : -10------1--1--
135     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
136     : 0-1----1-----1-
136     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
137     : -01------1--1--
137     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
210 (*) : 10------1----1-
210     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
211     : 1-0----1---1---
211     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
212     : 01---------11--
212     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
213     : -10-----11-----
213     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
214     : 0-1------1---1-
214     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
215     : -01----1----1--
215     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
252 (*) : -01-----11-----
252     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
253     : -10----1----1--
253     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
254     : 0-1----1---1---
254     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
255     : 1-0------1---1-
255     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
256     : 01------1----1-
256     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
257     : 10---------11--
257     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
276 (*) : -01----11------
276     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
277     : -10----11------
277     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
278     : 0-1------1-1---
278     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
279     : 1-0------1-1---
279     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
280     : 01----------11-
280     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
281     : 10----------11-
281     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : 1---1---1--1---
138     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
139     : 1----1-1-----1-
139     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
140     : -1-1----1--1---
140     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
141     : -1---1---1--1--
141     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
142     : --11---1-----1-
142     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
143     : --1-1----1--1--
143     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
216 (*) : 1---1---1----1-
216     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
217     : 1----1-1---1---
217     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
218     : -1-1-------11--
218     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
219     : -1---1--11-----
219     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
220     : --11-----1---1-
220     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
221     : --1-1--1----1--
221     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
246 (*) : --1-1---11-----
246     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
247     : -1---1-1----1--
247     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
248     : --11---1---1---
248     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
249     : 1----1---1---1-
249     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
250     : -1-1----1----1-
250     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
251     : 1---1------11--
251     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
264 (*) : --1-1--11------
264     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
265     : -1---1-11------
265     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
266     : --11-----1-1---
266     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
267     : 1----1---1-1---
267     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
268     : -1-1--------11-
268     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
269     : 1---1-------11-
269     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---00---1---0--
168     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
169     : ---0-0-1-0-----
169     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
170     : ---00------1-0-
170     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
171     : ----00-0-1-----
171     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
172     : ---0-0-----0-1-
172     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
173     : ----00--0---1--
173     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : --0-0---1---0--
174     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
175     : -0---0-1-0-----
175     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
176     : --00-------1-0-
176     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
177     : 0----0-0-1-----
177     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
178     : -0-0-------0-1-
178     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
179     : 0---0---0---1--
179     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
186 (*) : --0-----10--0--
186     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
187     : -0-----1-0--0--
187     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
188     : --0----0---1-0-
188     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
189     : 0------0-1---0-
189     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
190     : -0------0--0-1-
190     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
191     : 0-------0--01--
191     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : ---0----10--0--
192     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : ---0---1-0--0--
193     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : ----0--0---1-0-
194     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : ----0--0-1---0-
195     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : -----0--0--0-1-
196     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -----0--0--01--
197     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---011-----
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
241     : ---1---10---1--
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
242     : ----1--1-0-1---
242     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
243     : ----1----1-0-1-
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
244     : -----1--1---01-
244     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
245     : -----1-----110-
245     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
294 (*) : -----1--1--1-0-
294     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
295     : ----1--1---0-1-
295     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
296     : -----1--1--10--
296     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
297     : ---1----01--1--
297     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
298     : ----1--1-0---1-
298     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
299     : ---1---0-1--1--
299     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
282 (*) : -----1--10--0--
282     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
283     : ----1--1-0--0--
283     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
284     : -----1-0---1-0-
284     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
285     : ---1---0-1---0-
285     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
286     : ----1---0--0-1-
286     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
287     : ---1----0--01--
287     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
288 (*) : ----01--1---0--
288     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
289     : ----10-1-0-----
289     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-1-----1-0-
290     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
291     : ---1-0-0-1-----
291     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---01------0-1-
292     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ---10---0---1--
293     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 3
300 (*) : -1---1--1----0-
300     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
301     : --1-1--1---0---
301     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
302     : 1----1-----10--
302     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
303     : --11----01-----
303     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
304     : 1---1----0---1-
304     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
305     : -1-1---0----1--
305     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
306 (*) : -1---1--1---0--
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
307     : --1-1--1-0-----
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
308     : 1----1-----1-0-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
309     : --11---0-1-----
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
310     : 1---1------0-1-
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
311     : -1-1----0---1--
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : -1-1---01------
342     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
343     : --11---10------
343     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
344     : 1---1----0-1---
344     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
345     : --1-1----1-0---
345     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
346     : 1----1------01-
346     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
347     : -1---1------10-
347     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
312 (*) : -10-----1----0-
312     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
313     : -01----1---0---
313     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
314     : 1-0--------10--
314     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
315     : 0-1-----01-----
315     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
316     : 10-------0---1-
316     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
317     : 01-----0----1--
317     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
324 (*) : -10-----1---0--
324     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
325     : -01----1-0-----
325     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
326     : 1-0--------1-0-
326     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
327     : 0-1----0-1-----
327     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
328     : 10---------0-1-
328     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
329     : 01------0---1--
329     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
336 (*) : 01-----01------
336     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
337     : 0-1----10------
337     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
338     : 10-------0-1---
338     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
339     : -01------1-0---
339     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
340     : 1-0---------01-
340     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
341     : -10---------10-
341     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
318 (*) : -1-0----1---0--
318     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
319     : --10---1-0-----
319     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
320     : 1---0------1-0-
320     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
321     : --1-0--0-1-----
321     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
322     : 1----0-----0-1-
322     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
323     : -1---0--0---1--
323     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
330 (*) : -1-----01---0--
330     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
331     : --1----100-----
331     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
332     : 1--------0-1-0-
332     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
333     : --1----0-1-0---
333     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
334     : 1----------001-
334     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
335     : -1------0---10-
335     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0



[PRIME NOTE]: number of orbits after merging: 34

[PRIME NOTE]: number of orbits before merging: 62

[PRIME NOTE]: number of primes: 348

[QRM NOTE]: Time elapsed since start: 6.270 seconds

[QRM NOTE]: Time elapsed since last: 0.067 seconds

[QRM NOTE]: Peak memory: 1552204 bytes


============================================================================

	[RED]: PRIME REDUCTION on [ivybench/sym/ivy/firewall: node=3]

============================================================================

definition primes: set()


New level: 0
 pending : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []


Before reduction : 
 pending  : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : []

Essensial at level 0 : {0, 14}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]

Essensial at level 0 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Covered at level 0 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]

[QRM NOTE]: Time elapsed since start: 6.284 seconds

[QRM NOTE]: Time elapsed since last: 0.014 seconds

[QRM NOTE]: Peak memory: 491605 bytes


================================================================================

	[QI]: Quantifier Inference on [ivybench/sym/ivy/firewall: node=3]

================================================================================


---------- quantifier_inference ----------


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node2,node2)']

sign_func_name2args: {'0$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$0]}

sig2const: {'node$0$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node2,node2)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$0$sent$1': [node$0$sent$0$0; node$0$sent$1$0]}

	identical_single_classes: {'node$0$sent$0; node$0$sent$1': node$0$sent$0$0; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~sent(NODE0,NODE0)


=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-----0-----0-
92     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
93     : --1-----0--0---
93     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
94     : 1--------0--0--
94     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0, node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0 | node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0; node$1$sent$1$1}

	identical_multi_classes: {'node$1$sent$0': [node$1$sent$0$0, node$1$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))


=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$internal$0': [node$0$allowed_in$0$0; node$0$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$internal$0': node$0$allowed_in$0$0; node$0$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)


=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1--1------
6     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
7     : 0---1--1-------
7     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
8     : -0---1-----1---
8     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
9     : -0-1-----1-----
9     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
10     : --0-1--------1-
10     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
11     : --01--------1--
11     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
36 (*) : --01----1------
36     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
37     : -0-1---1-------
37     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38     : --0-1------1---
38     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
39     : 0---1----1-----
39     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
40     : -0---1-------1-
40     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
41     : 0----1------1--
41     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', 'internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', '~allowed_in(NODE3)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$1$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$internal$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE2,NODE1,NODE0. ~sent(NODE1,NODE2) | allowed_in(NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))


=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---1-1--1------
12     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
13     : ---11--1-------
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : ----11-----1---
14     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
15     : ---11----1-----
15     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
16     : ----11-------1-
16     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
17     : ---1-1------1--
17     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$internal$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$internal$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$0': [node$0$internal$0$0; node$0$sent$0$0], 'node$0$internal$0; node$0$sent$1': [node$0$internal$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$0': node$0$internal$0$0; node$0$sent$0$0, 'node$0$internal$0; node$0$sent$1': node$0$internal$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['internal(NODE1)', 'sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~internal(NODE1) | ~sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1


=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : 1----0--1------
18     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
19     : 1---0--1-------
19     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
20     : -1---0-----1---
20     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : --10--------1--
23     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
24 (*) : --10----1------
24     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
25     : -1-0---1-------
25     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
26     : --1-0------1---
26     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
27     : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : 1----0------1--
29     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$1$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~internal(NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0 | node$1$internal$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE2,NODE1,NODE0. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))


=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
30 (*) : 1-1-----1------
30     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
31     : 11-----1-------
31     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
32     : -11--------1---
32     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
33     : 11-------1-----
33     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
34     : -11----------1-
34     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
35     : 1-1---------1--
35     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$allowed_in$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$allowed_in$0$1; node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$0$sent$0': [node$0$allowed_in$0$0; node$0$sent$0$0], 'node$0$allowed_in$0; node$0$sent$1': [node$0$allowed_in$0$1; node$0$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$0$sent$0': node$0$allowed_in$0$0; node$0$sent$0$0, 'node$0$allowed_in$0; node$0$sent$1': node$0$allowed_in$0$1; node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'allowed_in(NODE1)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. ~allowed_in(NODE0) | ~allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
42 (*) : --0--0--1------
42     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
43     : -0--0--1-------
43     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
44     : --0--0-----1---
44     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : 0--0--------1--
47     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
60 (*) : 0--0----1------
60     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
61     : 0--0---1-------
61     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
62     : -0--0------1---
62     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
63     : -0--0----1-----
63     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
64     : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : --0--0------1--
65     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node0)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$internal$0': [node$1$allowed_in$0$0; node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$internal$0': node$1$allowed_in$0$0; node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', '~allowed_in(NODE2)', 'sent(NODE0,NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. internal(NODE2) | allowed_in(NODE2) | ~sent(NODE0,NODE1) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))


=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
48 (*) : 0-0-----1------
48     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
49     : 00-----1-------
49     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
50     : -00--------1---
50     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 0-0---------1--
53     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$1, node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node0)', '~allowed_in(node2)', 'sent(node0,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$1$0; node$1$allowed_in$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$allowed_in$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$allowed_in$0': [node$0$sent$0$0; node$1$allowed_in$0$0], 'node$0$sent$1; node$1$allowed_in$0': [node$0$sent$1$0; node$1$allowed_in$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$allowed_in$0': node$0$sent$0$0; node$1$allowed_in$0$0, 'node$0$sent$1; node$1$allowed_in$0': node$0$sent$1$0; node$1$allowed_in$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~allowed_in(NODE0)', 'sent(NODE0,NODE1)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1


=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : ---0-0--1------
54     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
55     : ---00--1-------
55     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
56     : ----00-----1---
56     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
57     : ---00----1-----
57     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
58     : ----00-------1-
58     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
59     : ---0-0------1--
59     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node2)', 'sent(node0,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1, node$0$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node2)', 'sent(node0,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0': [node$0$sent$0$0; node$1$internal$0$0], 'node$0$sent$1; node$1$internal$0': [node$0$sent$1$0; node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0': node$0$sent$0$0; node$1$internal$0$0, 'node$0$sent$1; node$1$internal$0': node$0$sent$1$0; node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE1)', '~internal(NODE0)', 'sent(NODE0,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE0. internal(NODE1) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1


=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11----1-
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
67     : -------11--1---
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
68     : ---------1-11--
68     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
69     : --------11-1---
69     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
70     : ---------1--11-
70     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : -------1----11-
71     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$2], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1, node$0$sent$0$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$0$2; node$0$sent$1$1, node$0$sent$1$0; node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$2], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$0$sent$1$2]}

sig2const: {'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$2': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$2, node$0$sent$0$2; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0}

part_sig: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']

func_name2symbol:  {'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$sent': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2, node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$0$2 | node$0$sent$1$0 | node$0$sent$1$1 | node$0$sent$1$2}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$0$2], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1, node$0$sent$1$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE4)', 'sent(NODE0,NODE3)', 'sent(NODE2,NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$2; node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1 | node$0$sent$1$0; node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$0$2; node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$2; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$2

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE5:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE5', 'NODE1:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2 | node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2 | node$0$sent$0$1; node$0$sent$0$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$0$sent$0$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0 | node$0$sent$0$1; node$0$sent$1$2 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$0$2; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$2


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11----------0--
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
75     : 1-1------0-----
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
76     : 11-----------0-
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
77     : -11----0-------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
78     : 1-1--------0---
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
79     : -11-----0------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$allowed_in$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$allowed_in$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$allowed_in$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$allowed_in$0': [node$0$allowed_in$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$allowed_in$0': node$0$allowed_in$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', 'allowed_in(NODE0)', 'allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : 11---0---------
80     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : -110-----------
82     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 2, '1$internal': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$1$internal$0$0, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$1$internal$0$0 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', 'allowed_in(NODE0)', '~internal(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~allowed_in(NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

part_sig: ('node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$1$internal$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$1$internal$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0}

	identical_multi_classes: {'node$1$internal$0': [node$1$internal$0$0, node$1$internal$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall_exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE1)', '~internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))


=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$2]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$2': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

part_sig: ('node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),)}

sign_func_name2count:  {'0$allowed_in': 3}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$allowed_in$0$1 | node$0$allowed_in$0$2}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}

	identical_single_classes: {}

	identical_multi_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0, node$0$allowed_in$0$1, node$0$allowed_in$0$2]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.exists


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: set()

exists_qvars: {Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)']


---------- QFormula: get_qclause ----------

qclause: exists NODE0. ~allowed_in(NODE0)


=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-------1--1-0-
96     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : 1------1---0-1-
97     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : -1------1--10--
98     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : -1------01--1--
99     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : --1----1-0---1-
100     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : --1----0-1--1--
101     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
144 (*) : 1-------1--10--
144     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
145     : 1------1-0---1-
145     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
146     : -1------1--1-0-
146     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
147     : -1-----0-1--1--
147     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
148     : --1----1---0-1-
148     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
149     : --1-----01--1--
149     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
204 (*) : 1-------1---01-
204     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
205     : 1------1-0-1---
205     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
206     : -1---------110-
206     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
207     : -1-----011-----
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
208     : --1------1-0-1-
208     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
209     : --1----10---1--
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
234 (*) : --1----011-----
234     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
235     : -1-----10---1--
235     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
236     : --1----1-0-1---
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
237     : 1--------1-0-1-
237     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
238     : -1------1---01-
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
239     : 1----------110-
239     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$sent$0': node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE6', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~sent(NODE5,NODE6)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE6', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE6:node']

eq_terms: ['NODE0:node = NODE6', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE6', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE3:node = NODE6', 'NODE3:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE5', 'NODE4:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE4:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE4:node = NODE5', 'NODE4:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE4:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE3:node = NODE6', 'NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE6', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE6:node']

eq_terms: ['NODE1:node = NODE6']

class signature: node$0$sent$0$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE6', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE6:node']

eq_terms: ['NODE2:node = NODE5', 'NODE2:node = NODE6']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE2:node = NODE6', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE6,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | sent(NODE5,NODE6) | ((NODE0 ~= NODE1 | NODE2 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE6 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
102 (*) : --0-----1--1-0-
102     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -0-----1---0-1-
103     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : --0-----1--10--
104     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-------01--1--
105     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : -0-----1-0---1-
106     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 0------0-1--1--
107     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
180 (*) : --0-----1---01-
180     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
181     : -0-----1-0-1---
181     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
182     : --0--------110-
182     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
183     : 0------011-----
183     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
184     : -0-------1-0-1-
184     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
185     : 0------10---1--
185     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$1, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~allowed_in(NODE2)', 'sent(NODE1,NODE3)', '~sent(NODE2,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE2:node = NODE3', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE2:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE0,NODE1,NODE2,NODE4. ~sent(NODE0,NODE2) | allowed_in(NODE2) | ~sent(NODE1,NODE3) | sent(NODE2,NODE4) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
108 (*) : ----0---1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
109     : -----0-1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
110     : ---0----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
111     : -----0--01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
112     : ---0---1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
113     : ----0--0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
156 (*) : ----0---1---01-
156     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
157     : -----0-1-0-1---
157     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
158     : ---0-------110-
158     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
159     : -----0-011-----
159     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
160     : ---0-----1-0-1-
160     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
161     : ----0--10---1--
161     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
198 (*) : ---0----1---01-
198     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
199     : ---0---1-0-1---
199     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
200     : ----0------110-
200     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
201     : ----0--011-----
201     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
202     : -----0---1-0-1-
202     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
203     : -----0-10---1--
203     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$1, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 2, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0; node$1$sent$0$0, node$0$sent$1$1, node$1$internal$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1 | node$1$internal$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$1': [node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$1': node$0$sent$1$1, 'node$1$internal$0': node$1$internal$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE5)', '~internal(NODE4)', 'sent(NODE0,NODE2)', 'sent(NODE1,NODE3)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE3', 'NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$1$1; node$1$sent$1$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$sent$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$1; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE2', 'NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$1$internal$0$0; node$1$sent$1$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. sent(NODE2,NODE5) | internal(NODE4) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ((NODE1 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : ---01---1--1---
120     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
121     : ---0-1-1-----1-
121     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
122     : ---10---1--1---
122     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
123     : ----01---1--1--
123     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
124     : ---1-0-1-----1-
124     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
125     : ----10---1--1--
125     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
162 (*) : ---10---1----1-
162     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
163     : ---1-0-1---1---
163     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
164     : ---01------11--
164     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
165     : ----10--11-----
165     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
166     : ---0-1---1---1-
166     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
167     : ----01-1----1--
167     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
222 (*) : ---01---1----1-
222     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
223     : ---0-1-1---1---
223     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
224     : ---10------11--
224     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
225     : ----01--11-----
225     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
226     : ---1-0---1---1-
226     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
227     : ----10-1----1--
227     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
270 (*) : ----10-11------
270     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
271     : ----01-11------
271     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
272     : ---1-0---1-1---
272     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
273     : ---0-1---1-1---
273     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
274     : ---10-------11-
274     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
275     : ---01-------11-
275     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node1)', '~internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0': node$0$internal$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE4)', '~internal(NODE5)', 'sent(NODE1,NODE3)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE2,NODE4) | internal(NODE5) | ~sent(NODE1,NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4))


=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
126 (*) : -0-0----1--1---
126     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
127     : --00---1-----1-
127     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
128     : 0---0---1--1---
128     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
129     : --0-0----1--1--
129     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
130     : 0----0-1-----1-
130     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
131     : -0---0---1--1--
131     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
150 (*) : 0---0---1----1-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
151     : 0----0-1---1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
152     : -0-0-------11--
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
153     : -0---0--11-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
154     : --00-----1---1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
155     : --0-0--1----1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
228 (*) : -0-0----1----1-
228     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1---1---
229     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0------11--
230     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0---11-----
231     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0---1---1-
232     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0-1----1--
233     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
258 (*) : --0-0--11------
258     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
259     : -0---0-11------
259     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
260     : --00-----1-1---
260     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
261     : 0----0---1-1---
261     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
262     : -0-0--------11-
262     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
263     : 0---0-------11-
263     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', '~internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$allowed_in$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$internal$0$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$1$allowed_in$0': node$1$allowed_in$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE0,NODE2)', '~internal(NODE5)', 'sent(NODE1,NODE3)', '~allowed_in(NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE5', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE4', 'NODE3:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$internal$0$0

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$1$internal$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0; node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$internal$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE5', 'NODE2:node ~= NODE5']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0 | node$0$sent$1$0; node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0',)[]

sort partition signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0 | node$0$sent$1$1 | node$1$allowed_in$0$0

class signature: node$0$sent$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE0,NODE2) | internal(NODE5) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3))


=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
132 (*) : 10------1--1---
132     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
133     : 1-0----1-----1-
133     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
134     : 01------1--1---
134     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
135     : -10------1--1--
135     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
136     : 0-1----1-----1-
136     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
137     : -01------1--1--
137     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
210 (*) : 10------1----1-
210     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
211     : 1-0----1---1---
211     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
212     : 01---------11--
212     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
213     : -10-----11-----
213     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
214     : 0-1------1---1-
214     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
215     : -01----1----1--
215     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
252 (*) : -01-----11-----
252     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
253     : -10----1----1--
253     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
254     : 0-1----1---1---
254     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
255     : 1-0------1---1-
255     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
256     : 01------1----1-
256     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
257     : 10---------11--
257     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
276 (*) : -01----11------
276     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
277     : -10----11------
277     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
278     : 0-1------1-1---
278     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
279     : 1-0------1-1---
279     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
280     : 01----------11-
280     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
281     : 10----------11-
281     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$1$allowed_in$0$0, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$sent$0$1; node$0$sent$1$0, node$0$sent$1$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$1$1, node$0$sent$0$1; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node1)', 'allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$1$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$sent$0$0; node$0$sent$0$1, node$0$sent$1$0; node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', '~allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1, node$1$allowed_in$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1 | node$1$allowed_in$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1], 'node$1$allowed_in$0': [node$1$allowed_in$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$1$allowed_in$0': node$1$allowed_in$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE1,NODE3)', '~allowed_in(NODE5)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE4', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$1$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$1$allowed_in$0$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE3:node = NODE4', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$allowed_in$0$0 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0; node$1$allowed_in$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0 | node$0$sent$0$1

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node', 'NODE4:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE1:node = NODE5', 'NODE1:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : 1---1---1--1---
138     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
139     : 1----1-1-----1-
139     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
140     : -1-1----1--1---
140     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
141     : -1---1---1--1--
141     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
142     : --11---1-----1-
142     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
143     : --1-1----1--1--
143     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
216 (*) : 1---1---1----1-
216     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
217     : 1----1-1---1---
217     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
218     : -1-1-------11--
218     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
219     : -1---1--11-----
219     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
220     : --11-----1---1-
220     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
221     : --1-1--1----1--
221     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
246 (*) : --1-1---11-----
246     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
247     : -1---1-1----1--
247     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
248     : --11---1---1---
248     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
249     : 1----1---1---1-
249     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
250     : -1-1----1----1-
250     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
251     : 1---1------11--
251     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
264 (*) : --1-1--11------
264     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
265     : -1---1-11------
265     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
266     : --11-----1-1---
266     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
267     : 1----1---1-1---
267     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
268     : -1-1--------11-
268     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
269     : 1---1-------11-
269     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$1$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$0$0, node$0$internal$0$0; node$0$sent$1$1, node$0$sent$0$1; node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$1$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$0, node$0$internal$0$0; node$0$sent$0$1, node$0$sent$0$0; node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$0$sent$0$1]}

sig2const: {'node$0$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$0$sent$1$1, node$0$internal$0$0; node$0$sent$1$0, node$0$sent$0$0; node$0$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0, node$0$sent$0$0, node$0$sent$0$1, node$0$sent$1$0, node$0$sent$1$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0 | node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0 | node$0$sent$1$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0': [node$0$internal$0$0], 'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0': node$0$internal$0$0}

	identical_multi_classes: {'node$0$sent$0': [node$0$sent$0$0, node$0$sent$0$1], 'node$0$sent$1': [node$0$sent$1$0, node$0$sent$1$1]}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE5', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', 'sent(NODE2,NODE4)', 'sent(NODE3,NODE5)', 'internal(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE4', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE5', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$1 | node$0$sent$0$1; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE5:node']

eq_terms: ['NODE1:node = NODE5']

class signature: node$0$sent$0$1; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE5', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE5:node']

eq_terms: ['NODE2:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE2:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$1 | node$0$internal$0$0; node$0$sent$1$0 | node$0$sent$0$0; node$0$sent$0$1

class signature: node$0$allowed_in$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5']

class signature: node$0$internal$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$internal$0$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE2']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node']

eq_terms: ['NODE3:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE2', 'NODE3:node = NODE5', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$internal$0$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE3']

class signature: node$0$internal$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1 | node$0$sent$0$0 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE4:node = NODE5', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0 | node$0$sent$0$1 | node$0$sent$1$0; node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node', 'NODE5:node']

eq_terms: ['NODE4:node = NODE5']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE4:node = NODE5', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1 | node$0$sent$1$1

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE5:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE5:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node ~= NODE5', 'NODE0:node ~= NODE5', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1 | node$0$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE3:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1 | node$0$sent$0$1 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node', 'NODE2:node', 'NODE5:node']

eq_terms: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE5', 'NODE0:node = NODE1', 'NODE0:node = NODE2', 'NODE3:node ~= NODE4', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE3,NODE5) | ~internal(NODE1) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---00---1---0--
168     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
169     : ---0-0-1-0-----
169     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
170     : ---00------1-0-
170     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
171     : ----00-0-1-----
171     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
172     : ---0-0-----0-1-
172     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
173     : ----00--0---1--
173     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 2, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0, node$1$internal$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0 | node$1$internal$0$1}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$1]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~internal(NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : --0-0---1---0--
174     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
175     : -0---0-1-0-----
175     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
176     : --00-------1-0-
176     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
177     : 0----0-0-1-----
177     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
178     : -0-0-------0-1-
178     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
179     : 0---0---0---1--
179     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', '~internal(node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
186 (*) : --0-----10--0--
186     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
187     : -0-----1-0--0--
187     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
188     : --0----0---1-0-
188     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
189     : 0------0-1---0-
189     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
190     : -0------0--0-1-
190     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
191     : 0-------0--01--
191     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~allowed_in(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$allowed_in': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': [node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$allowed_in$0; node$1$sent$0': node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$allowed_in': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', 'sent(NODE0,NODE1)', '~sent(NODE1,NODE0)', '~allowed_in(NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : ---0----10--0--
192     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : ---0---1-0--0--
193     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : ----0--0---1-0-
194     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : ----0--0-1---0-
195     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : -----0--0--0-1-
196     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -----0--0--01--
197     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

part_sig: ('node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node0)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$sent$0; node$1$internal$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE0)', 'sent(NODE0,NODE1)', '~internal(NODE0)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---011-----
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
241     : ---1---10---1--
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
242     : ----1--1-0-1---
242     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
243     : ----1----1-0-1-
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
244     : -----1--1---01-
244     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
245     : -----1-----110-
245     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
294 (*) : -----1--1--1-0-
294     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
295     : ----1--1---0-1-
295     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
296     : -----1--1--10--
296     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
297     : ---1----01--1--
297     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
298     : ----1--1-0---1-
298     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
299     : ---1---0-1--1--
299     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

sign_func_name2args: {'0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$1$0, node$0$sent$0$1], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$0$sent$1$1, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$1, node$1$sent$1$0]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$1': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)


---------- SigGenerator ----------

terms:  ['internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '1$sent': 1, '0$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$0$1; node$1$sent$1$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$1; node$1$sent$1$0], 'node$0$sent$1': [node$0$sent$1$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$1; node$1$sent$1$0, 'node$0$sent$1': node$0$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE2,NODE0)', '~sent(NODE0,NODE2)', 'sent(NODE1,NODE3)', 'internal(NODE0)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3', 'NODE0:node = NODE2']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE1']

constraint: ['NODE0:node = NODE3', 'NODE0:node = NODE2', 'NODE1:node = NODE2', 'NODE0:node ~= NODE1']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE1', 'NODE0:node ~= NODE2', 'NODE2:node ~= NODE3', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0 | node$0$sent$0$0; node$0$sent$1$0 | node$0$sent$0$1; node$1$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$1$1; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$1; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$0$1; node$0$sent$1$1

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$0$1; node$0$sent$1$1


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE1:node = NODE2', 'NODE0:node = NODE2', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0

class signature: node$0$internal$0$0; node$0$sent$0$1; node$0$sent$1$1; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE2,NODE1,NODE0. ~sent(NODE2,NODE0) | sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
282 (*) : -----1--10--0--
282     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
283     : ----1--1-0--0--
283     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
284     : -----1-0---1-0-
284     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
285     : ---1---0-1---0-
285     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
286     : ----1---0--0-1-
286     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
287     : ---1----0--01--
287     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

sign_func_name2args: {'0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$1], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0, node$1$sent$1$1], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0]}

sig2const: {'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$internal': 1, '0$sent': 1, '1$sent': 2}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1 | node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1 | node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1], 'node$0$sent$0; node$1$sent$1; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1], 'node$1$sent$0': [node$1$sent$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$1, 'node$0$sent$0; node$1$sent$1; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0; node$1$sent$1$1, 'node$1$sent$0': node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
288 (*) : ----01--1---0--
288     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
289     : ----10-1-0-----
289     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-1-----1-0-
290     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
291     : ---1-0-0-1-----
291     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---01------0-1-
292     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ---10---0---1--
293     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~internal(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'1$internal': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$1$internal$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

part_sig: ('node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0',)


---------- SigGenerator ----------

terms:  ['~internal(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'1$internal': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0, node$1$internal$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$1$internal$0$0}

	sort: node

	identical_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': [node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0], 'node$0$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$1$0], 'node$1$internal$0': [node$1$internal$0$0]}

	identical_single_classes: {'node$0$internal$0; node$0$sent$1; node$1$sent$0': node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, 'node$0$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$1$0, 'node$1$internal$0': node$1$internal$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'1$internal': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~internal(NODE2)', 'sent(NODE1,NODE0)', '~sent(NODE0,NODE1)', 'internal(NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 30 =====================
size : 18
num_suborbits: 3
300 (*) : -1---1--1----0-
300     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
301     : --1-1--1---0---
301     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
302     : 1----1-----10--
302     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
303     : --11----01-----
303     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
304     : 1---1----0---1-
304     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
305     : -1-1---0----1--
305     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
306 (*) : -1---1--1---0--
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
307     : --1-1--1-0-----
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
308     : 1----1-----1-0-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
309     : --11---0-1-----
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
310     : 1---1------0-1-
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
311     : -1-1----0---1--
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : -1-1---01------
342     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
343     : --11---10------
343     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
344     : 1---1----0-1---
344     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
345     : --1-1----1-0---
345     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
346     : 1----1------01-
346     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
347     : -1---1------10-
347     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0, node$0$sent$0$0; node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', 'internal(node0)', '~sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$internal$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '0$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$internal$0$0; node$1$sent$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$internal$0; node$1$sent$0': [node$0$internal$0$0; node$1$sent$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$internal$0; node$1$sent$0': node$0$internal$0$0; node$1$sent$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['allowed_in(NODE0)', '~sent(NODE1,NODE4)', 'sent(NODE2,NODE3)', 'internal(NODE1)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$0$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$internal$0$0; node$0$sent$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE2:node']

eq_terms: ['NODE1:node = NODE2']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE2', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$0$sent$1$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$internal$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$1$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$internal$0$0; node$0$sent$1$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE4:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']

constraint: ['NODE0:node = NODE2', 'NODE1:node = NODE3', 'NODE0:node ~= NODE4', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | sent(NODE1,NODE4) | ~sent(NODE2,NODE3) | ~internal(NODE1) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))


=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
312 (*) : -10-----1----0-
312     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
313     : -01----1---0---
313     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
314     : 1-0--------10--
314     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
315     : 0-1-----01-----
315     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
316     : 10-------0---1-
316     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
317     : 01-----0----1--
317     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
324 (*) : -10-----1---0--
324     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
325     : -01----1-0-----
325     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
326     : 1-0--------1-0-
326     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
327     : 0-1----0-1-----
327     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
328     : 10---------0-1-
328     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
329     : 01------0---1--
329     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
336 (*) : 01-----01------
336     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
337     : 0-1----10------
337     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
338     : 10-------0-1---
338     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
339     : -01------1-0---
339     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
340     : 1-0---------01-
340     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
341     : -10---------10-
341     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$allowed_in': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$0$sent$1$0, node$1$sent$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$0$0, node$1$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$allowed_in$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)


---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['~allowed_in(node0)', 'allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)']

sign_func_name2args: {'1$allowed_in': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$allowed_in$0$0, node$1$sent$0$0, node$0$sent$0$0], Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0]}

sig2const: {'node$1$allowed_in$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0, node$0$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~allowed_in(node2)', 'sent(node0,node2)', '~sent(node2,node1)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$allowed_in': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0, node$0$sent$1$0, node$1$allowed_in$0$0; node$1$sent$0$0, node$1$sent$1$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0 | node$0$sent$1$0 | node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0': [node$0$sent$0$0], 'node$0$sent$1': [node$0$sent$1$0], 'node$1$allowed_in$0; node$1$sent$0': [node$1$allowed_in$0$0; node$1$sent$0$0], 'node$1$sent$1': [node$1$sent$1$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0': node$0$sent$0$0, 'node$0$sent$1': node$0$sent$1$0, 'node$1$allowed_in$0; node$1$sent$0': node$1$allowed_in$0$0; node$1$sent$0$0, 'node$1$sent$1': node$1$sent$1$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$allowed_in': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE3', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE4', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~allowed_in(NODE3)', '~sent(NODE3,NODE4)']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0',)[]

sort partition signature: node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0

class signature: node$0$allowed_in$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node']

eq_terms: []

class signature: node$0$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE4:node']

eq_terms: ['NODE1:node = NODE4']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE1:node = NODE4', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE4:node']

eq_terms: ['NODE0:node = NODE4']

class signature: node$0$sent$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node', 'NODE3:node']

eq_terms: ['NODE1:node = NODE3']

class signature: node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE4', 'NODE1:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$0$sent$0$0 | node$0$sent$1$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE3:node']

eq_terms: ['NODE0:node = NODE3']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$0$sent$1$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node']

eq_terms: ['NODE2:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']

constraint: ['NODE0:node = NODE3', 'NODE2:node = NODE4', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE1', 'NODE1:node ~= NODE2']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$1$0 | node$0$sent$0$0 | node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE2:node']

eq_terms: ['NODE0:node = NODE2']

class signature: node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE1:node']

eq_terms: []

class signature: node$1$allowed_in$0$0; node$1$sent$0$0; node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE3:node', 'NODE4:node']

eq_terms: ['NODE3:node = NODE4']


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE3:node', 'NODE0:node', 'NODE1:node']

eq_terms: ['NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']

constraint: ['NODE0:node = NODE2', 'NODE3:node = NODE4', 'NODE1:node ~= NODE3', 'NODE0:node ~= NODE1', 'NODE0:node ~= NODE3']


---------- QFormula: _get_partition_constraint ----------

partition: ('node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0',)[]

sort partition signature: node$0$allowed_in$0$0; node$0$sent$0$0 | node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0 | node$1$sent$1$0

class signature: node$0$allowed_in$0$0; node$0$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE0:node', 'NODE1:node']

eq_terms: ['NODE0:node = NODE1']

class signature: node$0$sent$1$0; node$1$allowed_in$0$0; node$1$sent$0$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE2:node', 'NODE3:node']

eq_terms: ['NODE2:node = NODE3']

class signature: node$1$sent$1$0


---------- QFormula: _get_class_constraint ----------

qvars: ['NODE4:node']

eq_terms: []


---------- QFormula: _get_diff_class_constraint ----------

qvars: ['NODE2:node', 'NODE4:node', 'NODE0:node']

eq_terms: ['NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']

constraint: ['NODE0:node = NODE1', 'NODE2:node = NODE3', 'NODE0:node ~= NODE2', 'NODE0:node ~= NODE4', 'NODE2:node ~= NODE4']


---------- QFormula: get_qclause ----------

qclause: forall NODE3,NODE0,NODE1,NODE2,NODE4. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | allowed_in(NODE3) | sent(NODE3,NODE4) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))


=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
318 (*) : -1-0----1---0--
318     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
319     : --10---1-0-----
319     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
320     : 1---0------1-0-
320     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
321     : --1-0--0-1-----
321     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
322     : 1----0-----0-1-
322     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
323     : -1---0--0---1--
323     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$internal': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '1$sent': [(Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$internal$0$0, node$0$sent$0$0, node$1$sent$1$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$sent$1$0, node$1$sent$0$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$internal$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

part_sig: ('node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~internal(node0)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'internal': Const('internal', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'internal': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$internal': 1, '0$sent': 1, '1$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0, node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, node$0$sent$1$0; node$1$sent$0$0]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0 | node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0 | node$0$sent$1$0; node$1$sent$0$0}

	sort: node

	identical_classes: {'node$0$allowed_in$0': [node$0$allowed_in$0$0], 'node$0$sent$0; node$1$internal$0; node$1$sent$1': [node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$0]}

	identical_single_classes: {'node$0$allowed_in$0': node$0$allowed_in$0$0, 'node$0$sent$0; node$1$internal$0; node$1$sent$1': node$0$sent$0$0; node$1$internal$0$0; node$1$sent$1$0, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$0}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$internal': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['sent(NODE1,NODE2)', 'allowed_in(NODE0)', '~internal(NODE1)', '~sent(NODE2,NODE1)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
330 (*) : -1-----01---0--
330     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
331     : --1----100-----
331     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
332     : 1--------0-1-0-
332     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
333     : --1----0-1-0---
333     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
334     : 1----------001-
334     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
335     : -1------0---10-
335     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   0
num_exists :   0
num_literals : 0
quantified form : None
qcost : 0




---------- QPrime ----------


---------- ConstArgBinding ----------

terms: ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', '~sent(node2,node0)']

sign_func_name2args: {'0$allowed_in': [(Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))),)], '1$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2')))), (Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))))], '0$sent': [(Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))))]}

const2sigs: {Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$0$allowed_in$0$0, node$1$sent$1$0], Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$0, node$1$sent$1$1, node$0$sent$0$0], Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))): [node$1$sent$0$1, node$0$sent$1$0]}

sig2const: {'node$0$allowed_in$0$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$0': Const('node1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$0$1': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$1$sent$1$1': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$0$0': Const('node0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), 'node$0$sent$1$0': Const('node2', EnumeratedSort('node', ('node0', 'node1', 'node2')))}


---------- ArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

part_sig: ('node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1',)


---------- SigGenerator ----------

terms:  ['allowed_in(node1)', '~sent(node0,node1)', 'sent(node0,node2)', '~sent(node2,node0)']

func_name2symbol:  {'allowed_in': Const('allowed_in', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort())), 'sent': Const('sent', FunctionSort(EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')), BooleanSort()))}

func_name2args_sort:  {'allowed_in': (EnumeratedSort('node', ('node0', 'node1', 'node2')),), 'sent': (EnumeratedSort('node', ('node0', 'node1', 'node2')), EnumeratedSort('node', ('node0', 'node1', 'node2')))}

sign_func_name2count:  {'0$allowed_in': 1, '1$sent': 2, '0$sent': 1}


---------- ProductArgPartition ----------

sort2class_sigs: {EnumeratedSort('node', ('node0', 'node1', 'node2')): [node$0$allowed_in$0$0; node$1$sent$1$0, node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, node$0$sent$1$0; node$1$sent$0$1]}

sort2part_sig: {EnumeratedSort('node', ('node0', 'node1', 'node2')): node$0$allowed_in$0$0; node$1$sent$1$0 | node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1 | node$0$sent$1$0; node$1$sent$0$1}

	sort: node

	identical_classes: {'node$0$allowed_in$0; node$1$sent$1': [node$0$allowed_in$0$0; node$1$sent$1$0], 'node$0$sent$0; node$1$sent$0; node$1$sent$1': [node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1], 'node$0$sent$1; node$1$sent$0': [node$0$sent$1$0; node$1$sent$0$1]}

	identical_single_classes: {'node$0$allowed_in$0; node$1$sent$1': node$0$allowed_in$0$0; node$1$sent$1$0, 'node$0$sent$0; node$1$sent$0; node$1$sent$1': node$0$sent$0$0; node$1$sent$0$0; node$1$sent$1$1, 'node$0$sent$1; node$1$sent$0': node$0$sent$1$0; node$1$sent$0$1}

	identical_multi_classes: {}


---------- QInference: _set_sort_to_quantifier_mode ----------

quantifier mode: node: QuantifierMode.forall


---------- QInference: _set_constraint_mode ----------

constraint mode: ConstraintMode.no_merge


---------- QFormula: _set_qvars ----------

forall_qvars: {Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))}

exists_qvars: set()


---------- QFormula: _set_signed_func_name_to_args ----------

signed_func_name2args: {'0$allowed_in': [[Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '1$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE0', EnumeratedSort('node', ('node0', 'node1', 'node2')))], [Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2')))]], '0$sent': [[Var('NODE1', EnumeratedSort('node', ('node0', 'node1', 'node2'))), Var('NODE2', EnumeratedSort('node', ('node0', 'node1', 'node2')))]]}


---------- QFormula: _set_qterms ----------

qterms: ['~sent(NODE2,NODE1)', 'allowed_in(NODE0)', 'sent(NODE1,NODE2)', '~sent(NODE1,NODE0)']


---------- QFormula: get_qclause ----------

qclause: forall NODE1,NODE2,NODE0. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)


==========================================================================================

	[QI RESULT]: Quantified Prime Orbits on [ivybench/sym/ivy/firewall: node=3]

==========================================================================================


=== Prime Orbit 0 =====================
size : 3
num_suborbits: 1
0 (*) : --------------1
0     : ['sent(node2,node2)']
1     : ----------1----
1     : ['sent(node1,node1)']
2     : ------1--------
2     : ['sent(node0,node0)']
num_forall :   1
num_exists :   0
num_literals : 1
quantified form : forall NODE0. ~sent(NODE0,NODE0)
qcost : 2




=== Prime Orbit 14 =====================
size : 3
num_suborbits: 1
92 (*) : -1-----0-----0-
92     : ['allowed_in(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
93     : --1-----0--0---
93     : ['allowed_in(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
94     : 1--------0--0--
94     : ['allowed_in(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 1 =====================
size : 3
num_suborbits: 1
3 (*) : 1--1-----------
3     : ['allowed_in(node0)', 'internal(node0)']
4     : -1--1----------
4     : ['allowed_in(node1)', 'internal(node1)']
5     : --1--1---------
5     : ['allowed_in(node2)', 'internal(node2)']
num_forall :   1
num_exists :   0
num_literals : 2
quantified form : forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)
qcost : 3




=== Prime Orbit 2 =====================
size : 12
num_suborbits: 2
6 (*) : 0----1--1------
6     : ['internal(node2)', 'sent(node0,node2)', '~allowed_in(node0)']
7     : 0---1--1-------
7     : ['internal(node1)', 'sent(node0,node1)', '~allowed_in(node0)']
8     : -0---1-----1---
8     : ['internal(node2)', 'sent(node1,node2)', '~allowed_in(node1)']
9     : -0-1-----1-----
9     : ['internal(node0)', 'sent(node1,node0)', '~allowed_in(node1)']
10     : --0-1--------1-
10     : ['internal(node1)', 'sent(node2,node1)', '~allowed_in(node2)']
11     : --01--------1--
11     : ['internal(node0)', 'sent(node2,node0)', '~allowed_in(node2)']
36 (*) : --01----1------
36     : ['internal(node0)', 'sent(node0,node2)', '~allowed_in(node2)']
37     : -0-1---1-------
37     : ['internal(node0)', 'sent(node0,node1)', '~allowed_in(node1)']
38     : --0-1------1---
38     : ['internal(node1)', 'sent(node1,node2)', '~allowed_in(node2)']
39     : 0---1----1-----
39     : ['internal(node1)', 'sent(node1,node0)', '~allowed_in(node0)']
40     : -0---1-------1-
40     : ['internal(node2)', 'sent(node2,node1)', '~allowed_in(node1)']
41     : 0----1------1--
41     : ['internal(node2)', 'sent(node2,node0)', '~allowed_in(node0)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE3,NODE2,NODE1,NODE0. ~sent(NODE1,NODE2) | allowed_in(NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2))
qcost : 13




=== Prime Orbit 3 =====================
size : 6
num_suborbits: 1
12 (*) : ---1-1--1------
12     : ['internal(node0)', 'internal(node2)', 'sent(node0,node2)']
13     : ---11--1-------
13     : ['internal(node0)', 'internal(node1)', 'sent(node0,node1)']
14     : ----11-----1---
14     : ['internal(node1)', 'internal(node2)', 'sent(node1,node2)']
15     : ---11----1-----
15     : ['internal(node0)', 'internal(node1)', 'sent(node1,node0)']
16     : ----11-------1-
16     : ['internal(node1)', 'internal(node2)', 'sent(node2,node1)']
17     : ---1-1------1--
17     : ['internal(node0)', 'internal(node2)', 'sent(node2,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~internal(NODE1) | ~sent(NODE0,NODE1) | ~internal(NODE0) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 4 =====================
size : 12
num_suborbits: 2
18 (*) : 1----0--1------
18     : ['allowed_in(node0)', 'sent(node0,node2)', '~internal(node2)']
19     : 1---0--1-------
19     : ['allowed_in(node0)', 'sent(node0,node1)', '~internal(node1)']
20     : -1---0-----1---
20     : ['allowed_in(node1)', 'sent(node1,node2)', '~internal(node2)']
21     : -1-0-----1-----
21     : ['allowed_in(node1)', 'sent(node1,node0)', '~internal(node0)']
22     : --1-0--------1-
22     : ['allowed_in(node2)', 'sent(node2,node1)', '~internal(node1)']
23     : --10--------1--
23     : ['allowed_in(node2)', 'sent(node2,node0)', '~internal(node0)']
24 (*) : --10----1------
24     : ['allowed_in(node2)', 'sent(node0,node2)', '~internal(node0)']
25     : -1-0---1-------
25     : ['allowed_in(node1)', 'sent(node0,node1)', '~internal(node0)']
26     : --1-0------1---
26     : ['allowed_in(node2)', 'sent(node1,node2)', '~internal(node1)']
27     : 1---0----1-----
27     : ['allowed_in(node0)', 'sent(node1,node0)', '~internal(node1)']
28     : -1---0-------1-
28     : ['allowed_in(node1)', 'sent(node2,node1)', '~internal(node2)']
29     : 1----0------1--
29     : ['allowed_in(node0)', 'sent(node2,node0)', '~internal(node2)']
num_forall :   4
num_exists :   0
num_literals : 9
quantified form : forall NODE3,NODE2,NODE1,NODE0. ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | internal(NODE3) | ((NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE0 = NODE2) & (NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE0 = NODE1))
qcost : 13




=== Prime Orbit 5 =====================
size : 6
num_suborbits: 1
30 (*) : 1-1-----1------
30     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node0,node2)']
31     : 11-----1-------
31     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node0,node1)']
32     : -11--------1---
32     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node1,node2)']
33     : 11-------1-----
33     : ['allowed_in(node0)', 'allowed_in(node1)', 'sent(node1,node0)']
34     : -11----------1-
34     : ['allowed_in(node1)', 'allowed_in(node2)', 'sent(node2,node1)']
35     : 1-1---------1--
35     : ['allowed_in(node0)', 'allowed_in(node2)', 'sent(node2,node0)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. ~allowed_in(NODE0) | ~allowed_in(NODE1) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 6 =====================
size : 12
num_suborbits: 2
42 (*) : --0--0--1------
42     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node2)']
43     : -0--0--1-------
43     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node1)']
44     : --0--0-----1---
44     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node2)']
45     : 0--0-----1-----
45     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node0)']
46     : -0--0--------1-
46     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node1)']
47     : 0--0--------1--
47     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node0)']
60 (*) : 0--0----1------
60     : ['sent(node0,node2)', '~allowed_in(node0)', '~internal(node0)']
61     : 0--0---1-------
61     : ['sent(node0,node1)', '~allowed_in(node0)', '~internal(node0)']
62     : -0--0------1---
62     : ['sent(node1,node2)', '~allowed_in(node1)', '~internal(node1)']
63     : -0--0----1-----
63     : ['sent(node1,node0)', '~allowed_in(node1)', '~internal(node1)']
64     : --0--0-------1-
64     : ['sent(node2,node1)', '~allowed_in(node2)', '~internal(node2)']
65     : --0--0------1--
65     : ['sent(node2,node0)', '~allowed_in(node2)', '~internal(node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. internal(NODE2) | allowed_in(NODE2) | ~sent(NODE0,NODE1) | ((NODE1 ~= NODE2 | NODE0 = NODE1) & (NODE0 ~= NODE2 | NODE0 = NODE1))
qcost : 10




=== Prime Orbit 7 =====================
size : 6
num_suborbits: 1
48 (*) : 0-0-----1------
48     : ['sent(node0,node2)', '~allowed_in(node0)', '~allowed_in(node2)']
49     : 00-----1-------
49     : ['sent(node0,node1)', '~allowed_in(node0)', '~allowed_in(node1)']
50     : -00--------1---
50     : ['sent(node1,node2)', '~allowed_in(node1)', '~allowed_in(node2)']
51     : 00-------1-----
51     : ['sent(node1,node0)', '~allowed_in(node0)', '~allowed_in(node1)']
52     : -00----------1-
52     : ['sent(node2,node1)', '~allowed_in(node1)', '~allowed_in(node2)']
53     : 0-0---------1--
53     : ['sent(node2,node0)', '~allowed_in(node0)', '~allowed_in(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 8 =====================
size : 6
num_suborbits: 1
54 (*) : ---0-0--1------
54     : ['sent(node0,node2)', '~internal(node0)', '~internal(node2)']
55     : ---00--1-------
55     : ['sent(node0,node1)', '~internal(node0)', '~internal(node1)']
56     : ----00-----1---
56     : ['sent(node1,node2)', '~internal(node1)', '~internal(node2)']
57     : ---00----1-----
57     : ['sent(node1,node0)', '~internal(node0)', '~internal(node1)']
58     : ----00-------1-
58     : ['sent(node2,node1)', '~internal(node1)', '~internal(node2)']
59     : ---0-0------1--
59     : ['sent(node2,node0)', '~internal(node0)', '~internal(node2)']
num_forall :   2
num_exists :   0
num_literals : 4
quantified form : forall NODE1,NODE0. internal(NODE1) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1
qcost : 6




=== Prime Orbit 9 =====================
size : 8
num_suborbits: 2
66 (*) : -------11----1-
66     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node2,node1)']
67     : -------11--1---
67     : ['sent(node0,node1)', 'sent(node0,node2)', 'sent(node1,node2)']
68     : ---------1-11--
68     : ['sent(node1,node0)', 'sent(node1,node2)', 'sent(node2,node0)']
69     : --------11-1---
69     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node1,node2)']
70     : ---------1--11-
70     : ['sent(node1,node0)', 'sent(node2,node0)', 'sent(node2,node1)']
71     : -------1----11-
71     : ['sent(node0,node1)', 'sent(node2,node0)', 'sent(node2,node1)']
72 (*) : --------11---1-
72     : ['sent(node0,node2)', 'sent(node1,node0)', 'sent(node2,node1)']
73     : -------1---11--
73     : ['sent(node0,node1)', 'sent(node1,node2)', 'sent(node2,node0)']
num_forall :   6
num_exists :   0
num_literals : 15
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE1,NODE4) | ~sent(NODE0,NODE3) | ~sent(NODE2,NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 21




=== Prime Orbit 10 =====================
size : 6
num_suborbits: 1
74 (*) : 11----------0--
74     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node0)']
75     : 1-1------0-----
75     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node0)']
76     : 11-----------0-
76     : ['allowed_in(node0)', 'allowed_in(node1)', '~sent(node2,node1)']
77     : -11----0-------
77     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node1)']
78     : 1-1--------0---
78     : ['allowed_in(node0)', 'allowed_in(node2)', '~sent(node1,node2)']
79     : -11-----0------
79     : ['allowed_in(node1)', 'allowed_in(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~allowed_in(NODE0) | ~allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 11 =====================
size : 3
num_suborbits: 1
80 (*) : 11---0---------
80     : ['allowed_in(node0)', 'allowed_in(node1)', '~internal(node2)']
81     : 1-1-0----------
81     : ['allowed_in(node0)', 'allowed_in(node2)', '~internal(node1)']
82     : -110-----------
82     : ['allowed_in(node1)', 'allowed_in(node2)', '~internal(node0)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. internal(NODE1) | (exists NODE0. (~allowed_in(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 12 =====================
size : 6
num_suborbits: 1
83 (*) : -1---0-0-------
83     : ['allowed_in(node1)', '~internal(node2)', '~sent(node0,node1)']
84     : --1-0---0------
84     : ['allowed_in(node2)', '~internal(node1)', '~sent(node0,node2)']
85     : 1----0---0-----
85     : ['allowed_in(node0)', '~internal(node2)', '~sent(node1,node0)']
86     : --10-------0---
86     : ['allowed_in(node2)', '~internal(node0)', '~sent(node1,node2)']
87     : 1---0-------0--
87     : ['allowed_in(node0)', '~internal(node1)', '~sent(node2,node0)']
88     : -1-0---------0-
88     : ['allowed_in(node1)', '~internal(node0)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 6
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~allowed_in(NODE0) | internal(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 9




=== Prime Orbit 13 =====================
size : 3
num_suborbits: 1
89 (*) : -1-0-0---------
89     : ['allowed_in(node1)', '~internal(node0)', '~internal(node2)']
90     : --100----------
90     : ['allowed_in(node2)', '~internal(node0)', '~internal(node1)']
91     : 1---00---------
91     : ['allowed_in(node0)', '~internal(node1)', '~internal(node2)']
num_forall :   1
num_exists :   1
num_literals : 3
quantified form : forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (internal(NODE0) & NODE0 ~= NODE1))
qcost : 5




=== Prime Orbit 15 =====================
size : 1
num_suborbits: 1
95 (*) : 111------------
95     : ['allowed_in(node0)', 'allowed_in(node1)', 'allowed_in(node2)']
num_forall :   0
num_exists :   1
num_literals : 1
quantified form : exists NODE0. ~allowed_in(NODE0)
qcost : 2




=== Prime Orbit 16 =====================
size : 24
num_suborbits: 4
96 (*) : 1-------1--1-0-
96     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
97     : 1------1---0-1-
97     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
98     : -1------1--10--
98     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
99     : -1------01--1--
99     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
100     : --1----1-0---1-
100     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
101     : --1----0-1--1--
101     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
144 (*) : 1-------1--10--
144     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
145     : 1------1-0---1-
145     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
146     : -1------1--1-0-
146     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
147     : -1-----0-1--1--
147     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
148     : --1----1---0-1-
148     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
149     : --1-----01--1--
149     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
204 (*) : 1-------1---01-
204     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
205     : 1------1-0-1---
205     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
206     : -1---------110-
206     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
207     : -1-----011-----
207     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
208     : --1------1-0-1-
208     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
209     : --1----10---1--
209     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
234 (*) : --1----011-----
234     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
235     : -1-----10---1--
235     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
236     : --1----1-0-1---
236     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
237     : 1--------1-0-1-
237     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
238     : -1------1---01-
238     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
239     : 1----------110-
239     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   7
num_exists :   0
num_literals : 32
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE6,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | sent(NODE5,NODE6) | ((NODE0 ~= NODE1 | NODE2 ~= NODE6 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE3 ~= NODE4 | NODE3 ~= NODE5 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE6 | NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE3 | NODE1 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE6 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 39




=== Prime Orbit 17 =====================
size : 12
num_suborbits: 2
102 (*) : --0-----1--1-0-
102     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
103     : -0-----1---0-1-
103     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
104     : --0-----1--10--
104     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
105     : 0-------01--1--
105     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
106     : -0-----1-0---1-
106     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
107     : 0------0-1--1--
107     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
180 (*) : --0-----1---01-
180     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
181     : -0-----1-0-1---
181     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
182     : --0--------110-
182     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
183     : 0------011-----
183     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
184     : -0-------1-0-1-
184     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
185     : 0------10---1--
185     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
num_forall :   5
num_exists :   0
num_literals : 14
quantified form : forall NODE3,NODE0,NODE1,NODE2,NODE4. ~sent(NODE0,NODE2) | allowed_in(NODE2) | ~sent(NODE1,NODE3) | sent(NODE2,NODE4) | ((NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 19




=== Prime Orbit 18 =====================
size : 24
num_suborbits: 4
108 (*) : ----0---1--1-0-
108     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
109     : -----0-1---0-1-
109     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
110     : ---0----1--10--
110     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node0)']
111     : -----0--01--1--
111     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
112     : ---0---1-0---1-
112     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node0)']
113     : ----0--0-1--1--
113     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node1)']
114 (*) : ---0----1--1-0-
114     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
115     : ---0---1---0-1-
115     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
116     : ----0---1--10--
116     : ['sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node0)']
117     : ----0---01--1--
117     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
118     : -----0-1-0---1-
118     : ['sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node0)']
119     : -----0-0-1--1--
119     : ['sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node1)']
156 (*) : ----0---1---01-
156     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)', '~sent(node2,node0)']
157     : -----0-1-0-1---
157     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)', '~sent(node1,node0)']
158     : ---0-------110-
158     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)', '~sent(node2,node1)']
159     : -----0-011-----
159     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
160     : ---0-----1-0-1-
160     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
161     : ----0--10---1--
161     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
198 (*) : ---0----1---01-
198     : ['sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)', '~sent(node2,node0)']
199     : ---0---1-0-1---
199     : ['sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)', '~sent(node1,node0)']
200     : ----0------110-
200     : ['sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)', '~sent(node2,node1)']
201     : ----0--011-----
201     : ['sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
202     : -----0---1-0-1-
202     : ['sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
203     : -----0-10---1--
203     : ['sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. sent(NODE2,NODE5) | internal(NODE4) | ~sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ((NODE1 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 19 =====================
size : 24
num_suborbits: 4
120 (*) : ---01---1--1---
120     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node0)']
121     : ---0-1-1-----1-
121     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node0)']
122     : ---10---1--1---
122     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~internal(node1)']
123     : ----01---1--1--
123     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node1)']
124     : ---1-0-1-----1-
124     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~internal(node2)']
125     : ----10---1--1--
125     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~internal(node2)']
162 (*) : ---10---1----1-
162     : ['internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node1)']
163     : ---1-0-1---1---
163     : ['internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node2)']
164     : ---01------11--
164     : ['internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node0)']
165     : ----10--11-----
165     : ['internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node2)']
166     : ---0-1---1---1-
166     : ['internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node0)']
167     : ----01-1----1--
167     : ['internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node1)']
222 (*) : ---01---1----1-
222     : ['internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~internal(node0)']
223     : ---0-1-1---1---
223     : ['internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~internal(node0)']
224     : ---10------11--
224     : ['internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~internal(node1)']
225     : ----01--11-----
225     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~internal(node1)']
226     : ---1-0---1---1-
226     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~internal(node2)']
227     : ----10-1----1--
227     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~internal(node2)']
270 (*) : ----10-11------
270     : ['internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node2)']
271     : ----01-11------
271     : ['internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~internal(node1)']
272     : ---1-0---1-1---
272     : ['internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node2)']
273     : ---0-1---1-1---
273     : ['internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~internal(node0)']
274     : ---10-------11-
274     : ['internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node1)']
275     : ---01-------11-
275     : ['internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~internal(node0)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE2,NODE4) | internal(NODE5) | ~sent(NODE1,NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE4 | NODE1 ~= NODE5 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE3 | NODE1 ~= NODE2 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4))
qcost : 34




=== Prime Orbit 20 =====================
size : 24
num_suborbits: 4
126 (*) : -0-0----1--1---
126     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)', '~internal(node0)']
127     : --00---1-----1-
127     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
128     : 0---0---1--1---
128     : ['sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node1)']
129     : --0-0----1--1--
129     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
130     : 0----0-1-----1-
130     : ['sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
131     : -0---0---1--1--
131     : ['sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
150 (*) : 0---0---1----1-
150     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
151     : 0----0-1---1---
151     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
152     : -0-0-------11--
152     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node0)']
153     : -0---0--11-----
153     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~internal(node2)']
154     : --00-----1---1-
154     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~internal(node0)']
155     : --0-0--1----1--
155     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~internal(node1)']
228 (*) : -0-0----1----1-
228     : ['sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
229     : --00---1---1---
229     : ['sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
230     : 0---0------11--
230     : ['sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)']
231     : --0-0---11-----
231     : ['sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)', '~internal(node1)']
232     : 0----0---1---1-
232     : ['sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node2)']
233     : -0---0-1----1--
233     : ['sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)', '~internal(node2)']
258 (*) : --0-0--11------
258     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)']
259     : -0---0-11------
259     : ['sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)', '~internal(node2)']
260     : --00-----1-1---
260     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)']
261     : 0----0---1-1---
261     : ['sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)', '~internal(node2)']
262     : -0-0--------11-
262     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)']
263     : 0---0-------11-
263     : ['sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)', '~internal(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~sent(NODE0,NODE2) | internal(NODE5) | ~sent(NODE1,NODE3) | allowed_in(NODE4) | ((NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE5 | NODE1 ~= NODE2 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 21 =====================
size : 24
num_suborbits: 4
132 (*) : 10------1--1---
132     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node1)']
133     : 1-0----1-----1-
133     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node2)']
134     : 01------1--1---
134     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node2)', '~allowed_in(node0)']
135     : -10------1--1--
135     : ['allowed_in(node1)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node2)']
136     : 0-1----1-----1-
136     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node1)', '~allowed_in(node0)']
137     : -01------1--1--
137     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node0)', '~allowed_in(node1)']
210 (*) : 10------1----1-
210     : ['allowed_in(node0)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node1)']
211     : 1-0----1---1---
211     : ['allowed_in(node0)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node2)']
212     : 01---------11--
212     : ['allowed_in(node1)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node0)']
213     : -10-----11-----
213     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node2)']
214     : 0-1------1---1-
214     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
215     : -01----1----1--
215     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node1)']
252 (*) : -01-----11-----
252     : ['allowed_in(node2)', 'sent(node0,node2)', 'sent(node1,node0)', '~allowed_in(node1)']
253     : -10----1----1--
253     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node2,node0)', '~allowed_in(node2)']
254     : 0-1----1---1---
254     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node1,node2)', '~allowed_in(node0)']
255     : 1-0------1---1-
255     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node2,node1)', '~allowed_in(node2)']
256     : 01------1----1-
256     : ['allowed_in(node1)', 'sent(node0,node2)', 'sent(node2,node1)', '~allowed_in(node0)']
257     : 10---------11--
257     : ['allowed_in(node0)', 'sent(node1,node2)', 'sent(node2,node0)', '~allowed_in(node1)']
276 (*) : -01----11------
276     : ['allowed_in(node2)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node1)']
277     : -10----11------
277     : ['allowed_in(node1)', 'sent(node0,node1)', 'sent(node0,node2)', '~allowed_in(node2)']
278     : 0-1------1-1---
278     : ['allowed_in(node2)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node0)']
279     : 1-0------1-1---
279     : ['allowed_in(node0)', 'sent(node1,node0)', 'sent(node1,node2)', '~allowed_in(node2)']
280     : 01----------11-
280     : ['allowed_in(node1)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node0)']
281     : 10----------11-
281     : ['allowed_in(node0)', 'sent(node2,node0)', 'sent(node2,node1)', '~allowed_in(node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE1,NODE3) | allowed_in(NODE5) | ((NODE0 ~= NODE1 | NODE2 ~= NODE5 | NODE3 ~= NODE4 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE1 | NODE2 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE4 | NODE2 = NODE4) & (NODE0 ~= NODE3 | NODE1 ~= NODE4 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE3 ~= NODE5 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 34




=== Prime Orbit 22 =====================
size : 24
num_suborbits: 4
138 (*) : 1---1---1--1---
138     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node2)']
139     : 1----1-1-----1-
139     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node1)']
140     : -1-1----1--1---
140     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node1,node2)']
141     : -1---1---1--1--
141     : ['allowed_in(node1)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node0)']
142     : --11---1-----1-
142     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node2,node1)']
143     : --1-1----1--1--
143     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', 'sent(node2,node0)']
216 (*) : 1---1---1----1-
216     : ['allowed_in(node0)', 'internal(node1)', 'sent(node0,node2)', 'sent(node2,node1)']
217     : 1----1-1---1---
217     : ['allowed_in(node0)', 'internal(node2)', 'sent(node0,node1)', 'sent(node1,node2)']
218     : -1-1-------11--
218     : ['allowed_in(node1)', 'internal(node0)', 'sent(node1,node2)', 'sent(node2,node0)']
219     : -1---1--11-----
219     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', 'sent(node1,node0)']
220     : --11-----1---1-
220     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node2,node1)']
221     : --1-1--1----1--
221     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node2,node0)']
246 (*) : --1-1---11-----
246     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node2)', 'sent(node1,node0)']
247     : -1---1-1----1--
247     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node2,node0)']
248     : --11---1---1---
248     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', 'sent(node1,node2)']
249     : 1----1---1---1-
249     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node2,node1)']
250     : -1-1----1----1-
250     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', 'sent(node2,node1)']
251     : 1---1------11--
251     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', 'sent(node2,node0)']
264 (*) : --1-1--11------
264     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', 'sent(node0,node2)']
265     : -1---1-11------
265     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node1)', 'sent(node0,node2)']
266     : --11-----1-1---
266     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', 'sent(node1,node2)']
267     : 1----1---1-1---
267     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node0)', 'sent(node1,node2)']
268     : -1-1--------11-
268     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', 'sent(node2,node1)']
269     : 1---1-------11-
269     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node0)', 'sent(node2,node1)']
num_forall :   6
num_exists :   0
num_literals : 28
quantified form : forall NODE3,NODE5,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | ~sent(NODE2,NODE4) | ~sent(NODE3,NODE5) | ~internal(NODE1) | ((NODE0 ~= NODE2 | NODE1 ~= NODE3 | NODE4 ~= NODE5 | NODE0 = NODE4 | NODE0 = NODE1 | NODE1 = NODE4) & (NODE0 ~= NODE2 | NODE1 ~= NODE5 | NODE3 ~= NODE4 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE2 ~= NODE5 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE5 | NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 34




=== Prime Orbit 23 =====================
size : 6
num_suborbits: 1
168 (*) : ---00---1---0--
168     : ['sent(node0,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node0)']
169     : ---0-0-1-0-----
169     : ['sent(node0,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node0)']
170     : ---00------1-0-
170     : ['sent(node1,node2)', '~internal(node0)', '~internal(node1)', '~sent(node2,node1)']
171     : ----00-0-1-----
171     : ['sent(node1,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node1)']
172     : ---0-0-----0-1-
172     : ['sent(node2,node1)', '~internal(node0)', '~internal(node2)', '~sent(node1,node2)']
173     : ----00--0---1--
173     : ['sent(node2,node0)', '~internal(node1)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 24 =====================
size : 6
num_suborbits: 1
174 (*) : --0-0---1---0--
174     : ['sent(node0,node2)', '~allowed_in(node2)', '~internal(node1)', '~sent(node2,node0)']
175     : -0---0-1-0-----
175     : ['sent(node0,node1)', '~allowed_in(node1)', '~internal(node2)', '~sent(node1,node0)']
176     : --00-------1-0-
176     : ['sent(node1,node2)', '~allowed_in(node2)', '~internal(node0)', '~sent(node2,node1)']
177     : 0----0-0-1-----
177     : ['sent(node1,node0)', '~allowed_in(node0)', '~internal(node2)', '~sent(node0,node1)']
178     : -0-0-------0-1-
178     : ['sent(node2,node1)', '~allowed_in(node1)', '~internal(node0)', '~sent(node1,node2)']
179     : 0---0---0---1--
179     : ['sent(node2,node0)', '~allowed_in(node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 25 =====================
size : 6
num_suborbits: 1
186 (*) : --0-----10--0--
186     : ['sent(node0,node2)', '~allowed_in(node2)', '~sent(node1,node0)', '~sent(node2,node0)']
187     : -0-----1-0--0--
187     : ['sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)', '~sent(node2,node0)']
188     : --0----0---1-0-
188     : ['sent(node1,node2)', '~allowed_in(node2)', '~sent(node0,node1)', '~sent(node2,node1)']
189     : 0------0-1---0-
189     : ['sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)', '~sent(node2,node1)']
190     : -0------0--0-1-
190     : ['sent(node2,node1)', '~allowed_in(node1)', '~sent(node0,node2)', '~sent(node1,node2)']
191     : 0-------0--01--
191     : ['sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | sent(NODE1,NODE0) | allowed_in(NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 26 =====================
size : 6
num_suborbits: 1
192 (*) : ---0----10--0--
192     : ['sent(node0,node2)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
193     : ---0---1-0--0--
193     : ['sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)', '~sent(node2,node0)']
194     : ----0--0---1-0-
194     : ['sent(node1,node2)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
195     : ----0--0-1---0-
195     : ['sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)', '~sent(node2,node1)']
196     : -----0--0--0-1-
196     : ['sent(node2,node1)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
197     : -----0--0--01--
197     : ['sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE0) | ~sent(NODE0,NODE1) | internal(NODE0) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 27 =====================
size : 12
num_suborbits: 2
240 (*) : ---1---011-----
240     : ['internal(node0)', 'sent(node0,node2)', 'sent(node1,node0)', '~sent(node0,node1)']
241     : ---1---10---1--
241     : ['internal(node0)', 'sent(node0,node1)', 'sent(node2,node0)', '~sent(node0,node2)']
242     : ----1--1-0-1---
242     : ['internal(node1)', 'sent(node0,node1)', 'sent(node1,node2)', '~sent(node1,node0)']
243     : ----1----1-0-1-
243     : ['internal(node1)', 'sent(node1,node0)', 'sent(node2,node1)', '~sent(node1,node2)']
244     : -----1--1---01-
244     : ['internal(node2)', 'sent(node0,node2)', 'sent(node2,node1)', '~sent(node2,node0)']
245     : -----1-----110-
245     : ['internal(node2)', 'sent(node1,node2)', 'sent(node2,node0)', '~sent(node2,node1)']
294 (*) : -----1--1--1-0-
294     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node1)']
295     : ----1--1---0-1-
295     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node2)']
296     : -----1--1--10--
296     : ['internal(node2)', 'sent(node0,node2)', 'sent(node1,node2)', '~sent(node2,node0)']
297     : ---1----01--1--
297     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node2)']
298     : ----1--1-0---1-
298     : ['internal(node1)', 'sent(node0,node1)', 'sent(node2,node1)', '~sent(node1,node0)']
299     : ---1---0-1--1--
299     : ['internal(node0)', 'sent(node1,node0)', 'sent(node2,node0)', '~sent(node0,node1)']
num_forall :   4
num_exists :   0
num_literals : 12
quantified form : forall NODE3,NODE2,NODE1,NODE0. ~sent(NODE2,NODE0) | sent(NODE0,NODE2) | ~sent(NODE1,NODE3) | ~internal(NODE0) | ((NODE0 ~= NODE1 | NODE0 = NODE2 | NODE2 = NODE3 | NODE0 = NODE3) & (NODE0 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 16




=== Prime Orbit 28 =====================
size : 6
num_suborbits: 1
282 (*) : -----1--10--0--
282     : ['internal(node2)', 'sent(node0,node2)', '~sent(node1,node0)', '~sent(node2,node0)']
283     : ----1--1-0--0--
283     : ['internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)', '~sent(node2,node0)']
284     : -----1-0---1-0-
284     : ['internal(node2)', 'sent(node1,node2)', '~sent(node0,node1)', '~sent(node2,node1)']
285     : ---1---0-1---0-
285     : ['internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node2,node1)']
286     : ----1---0--0-1-
286     : ['internal(node1)', 'sent(node2,node1)', '~sent(node0,node2)', '~sent(node1,node2)']
287     : ---1----0--01--
287     : ['internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node1,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE1) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 29 =====================
size : 6
num_suborbits: 1
288 (*) : ----01--1---0--
288     : ['internal(node2)', 'sent(node0,node2)', '~internal(node1)', '~sent(node2,node0)']
289     : ----10-1-0-----
289     : ['internal(node1)', 'sent(node0,node1)', '~internal(node2)', '~sent(node1,node0)']
290     : ---0-1-----1-0-
290     : ['internal(node2)', 'sent(node1,node2)', '~internal(node0)', '~sent(node2,node1)']
291     : ---1-0-0-1-----
291     : ['internal(node0)', 'sent(node1,node0)', '~internal(node2)', '~sent(node0,node1)']
292     : ---01------0-1-
292     : ['internal(node1)', 'sent(node2,node1)', '~internal(node0)', '~sent(node1,node2)']
293     : ---10---0---1--
293     : ['internal(node0)', 'sent(node2,node0)', '~internal(node1)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. internal(NODE2) | ~sent(NODE1,NODE0) | sent(NODE0,NODE1) | ~internal(NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 30 =====================
size : 18
num_suborbits: 3
300 (*) : -1---1--1----0-
300     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node1)']
301     : --1-1--1---0---
301     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node2)']
302     : 1----1-----10--
302     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node0)']
303     : --11----01-----
303     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node2)']
304     : 1---1----0---1-
304     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node0)']
305     : -1-1---0----1--
305     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node1)']
306 (*) : -1---1--1---0--
306     : ['allowed_in(node1)', 'internal(node2)', 'sent(node0,node2)', '~sent(node2,node0)']
307     : --1-1--1-0-----
307     : ['allowed_in(node2)', 'internal(node1)', 'sent(node0,node1)', '~sent(node1,node0)']
308     : 1----1-----1-0-
308     : ['allowed_in(node0)', 'internal(node2)', 'sent(node1,node2)', '~sent(node2,node1)']
309     : --11---0-1-----
309     : ['allowed_in(node2)', 'internal(node0)', 'sent(node1,node0)', '~sent(node0,node1)']
310     : 1---1------0-1-
310     : ['allowed_in(node0)', 'internal(node1)', 'sent(node2,node1)', '~sent(node1,node2)']
311     : -1-1----0---1--
311     : ['allowed_in(node1)', 'internal(node0)', 'sent(node2,node0)', '~sent(node0,node2)']
342 (*) : -1-1---01------
342     : ['allowed_in(node1)', 'internal(node0)', 'sent(node0,node2)', '~sent(node0,node1)']
343     : --11---10------
343     : ['allowed_in(node2)', 'internal(node0)', 'sent(node0,node1)', '~sent(node0,node2)']
344     : 1---1----0-1---
344     : ['allowed_in(node0)', 'internal(node1)', 'sent(node1,node2)', '~sent(node1,node0)']
345     : --1-1----1-0---
345     : ['allowed_in(node2)', 'internal(node1)', 'sent(node1,node0)', '~sent(node1,node2)']
346     : 1----1------01-
346     : ['allowed_in(node0)', 'internal(node2)', 'sent(node2,node1)', '~sent(node2,node0)']
347     : -1---1------10-
347     : ['allowed_in(node1)', 'internal(node2)', 'sent(node2,node0)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE3,NODE0,NODE1,NODE2,NODE4. ~allowed_in(NODE0) | sent(NODE1,NODE4) | ~sent(NODE2,NODE3) | ~internal(NODE1) | ((NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE3 | NODE2 ~= NODE4 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE2 | NODE1 = NODE3 | NODE0 = NODE1 | NODE0 = NODE3))
qcost : 24




=== Prime Orbit 31 =====================
size : 18
num_suborbits: 3
312 (*) : -10-----1----0-
312     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
313     : -01----1---0---
313     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
314     : 1-0--------10--
314     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
315     : 0-1-----01-----
315     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
316     : 10-------0---1-
316     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
317     : 01-----0----1--
317     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
324 (*) : -10-----1---0--
324     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node2)', '~sent(node2,node0)']
325     : -01----1-0-----
325     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node1)', '~sent(node1,node0)']
326     : 1-0--------1-0-
326     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node2)', '~sent(node2,node1)']
327     : 0-1----0-1-----
327     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node0)', '~sent(node0,node1)']
328     : 10---------0-1-
328     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node1)', '~sent(node1,node2)']
329     : 01------0---1--
329     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node0)', '~sent(node0,node2)']
336 (*) : 01-----01------
336     : ['allowed_in(node1)', 'sent(node0,node2)', '~allowed_in(node0)', '~sent(node0,node1)']
337     : 0-1----10------
337     : ['allowed_in(node2)', 'sent(node0,node1)', '~allowed_in(node0)', '~sent(node0,node2)']
338     : 10-------0-1---
338     : ['allowed_in(node0)', 'sent(node1,node2)', '~allowed_in(node1)', '~sent(node1,node0)']
339     : -01------1-0---
339     : ['allowed_in(node2)', 'sent(node1,node0)', '~allowed_in(node1)', '~sent(node1,node2)']
340     : 1-0---------01-
340     : ['allowed_in(node0)', 'sent(node2,node1)', '~allowed_in(node2)', '~sent(node2,node0)']
341     : -10---------10-
341     : ['allowed_in(node1)', 'sent(node2,node0)', '~allowed_in(node2)', '~sent(node2,node1)']
num_forall :   5
num_exists :   0
num_literals : 19
quantified form : forall NODE3,NODE0,NODE1,NODE2,NODE4. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | allowed_in(NODE3) | sent(NODE3,NODE4) | ((NODE0 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE1 ~= NODE4 | NODE2 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2) & (NODE0 ~= NODE4 | NODE1 ~= NODE3 | NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2))
qcost : 24




=== Prime Orbit 32 =====================
size : 6
num_suborbits: 1
318 (*) : -1-0----1---0--
318     : ['allowed_in(node1)', 'sent(node0,node2)', '~internal(node0)', '~sent(node2,node0)']
319     : --10---1-0-----
319     : ['allowed_in(node2)', 'sent(node0,node1)', '~internal(node0)', '~sent(node1,node0)']
320     : 1---0------1-0-
320     : ['allowed_in(node0)', 'sent(node1,node2)', '~internal(node1)', '~sent(node2,node1)']
321     : --1-0--0-1-----
321     : ['allowed_in(node2)', 'sent(node1,node0)', '~internal(node1)', '~sent(node0,node1)']
322     : 1----0-----0-1-
322     : ['allowed_in(node0)', 'sent(node2,node1)', '~internal(node2)', '~sent(node1,node2)']
323     : -1---0--0---1--
323     : ['allowed_in(node1)', 'sent(node2,node0)', '~internal(node2)', '~sent(node0,node2)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. ~sent(NODE1,NODE2) | ~allowed_in(NODE0) | internal(NODE1) | sent(NODE2,NODE1) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10




=== Prime Orbit 33 =====================
size : 6
num_suborbits: 1
330 (*) : -1-----01---0--
330     : ['allowed_in(node1)', 'sent(node0,node2)', '~sent(node0,node1)', '~sent(node2,node0)']
331     : --1----100-----
331     : ['allowed_in(node2)', 'sent(node0,node1)', '~sent(node0,node2)', '~sent(node1,node0)']
332     : 1--------0-1-0-
332     : ['allowed_in(node0)', 'sent(node1,node2)', '~sent(node1,node0)', '~sent(node2,node1)']
333     : --1----0-1-0---
333     : ['allowed_in(node2)', 'sent(node1,node0)', '~sent(node0,node1)', '~sent(node1,node2)']
334     : 1----------001-
334     : ['allowed_in(node0)', 'sent(node2,node1)', '~sent(node1,node2)', '~sent(node2,node0)']
335     : -1------0---10-
335     : ['allowed_in(node1)', 'sent(node2,node0)', '~sent(node0,node2)', '~sent(node2,node1)']
num_forall :   3
num_exists :   0
num_literals : 7
quantified form : forall NODE1,NODE2,NODE0. sent(NODE2,NODE1) | ~allowed_in(NODE0) | ~sent(NODE1,NODE2) | sent(NODE1,NODE0) | (NODE0 = NODE2 | NODE0 = NODE1 | NODE1 = NODE2)
qcost : 10



[QRM NOTE]: Time elapsed since start: 7.712 seconds

[QRM NOTE]: Time elapsed since last: 1.427 seconds

[QRM NOTE]: Peak memory: 2319894 bytes


=========================================================================

	[MIN]: Minimization on [ivybench/sym/ivy/firewall: node=3]

=========================================================================


New level: 1
 pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]


Before reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]

Essensial at level 1 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Covered at level 1 : set()

After reduction : 
 pending  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14]


Solution : [0, 14] has cost 7.


Decide in level 1 among pending : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Decide 1 with phase True at level 1

After decision at level 1
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1]


New level: 2
 pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1]


Before reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, 1024), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 544), (20, 520), (21, 520), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, 640), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 272), (20, 520), (21, 260), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1]


Solution : [0, 14, 1] has cost 10.


Decide in level 2 among pending : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, 640), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 272), (20, 520), (21, 260), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Decide 6 with phase True at level 2

After decision at level 2
 pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]


New level: 3
 pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, 640), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 272), (20, 520), (21, 260), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 576), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 129), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, 0), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 3 : {26}

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 576), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 129), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, 0), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 576), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 129), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 3 among pending : [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 576), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 129), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9]


New level: 4
 pending : [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, 576), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 129), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 4 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 4 among pending : [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [2, 3, 4, 5, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]


New level: 5
 pending : [2, 3, 4, 5, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, 0), (12, 16), (13, -1), (14, -1), (15, 0), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Covered at level 5 : {11, 15}

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]


Before reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, 0), (12, 16), (13, -1), (14, -1), (15, 0), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [2, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13]


Solution : [0, 14, 1, 6, 9, 13] has cost 46.


Decide in level 5 among pending : [2, 3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Decide 2 with phase True at level 5

After decision at level 5
 pending : [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


New level: 6
 pending : [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [3, 4, 5, 7, 8, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 6 : {3, 7, 17, 25, 27, 28}

After reduction : 
 pending  : [4, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [4, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [4, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Solution : [0, 14, 1, 6, 9, 13, 2] has cost 59.


Decide in level 6 among pending : [4, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 4]


New level: 7
 pending : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 4]


Before reduction : 
 pending  : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 4]


Solution : [0, 14, 1, 6, 9, 13, 2, 4] has cost 72.


Before backtrack at level 7
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 2, 4]

After backtrack at level 7
 pending : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Solution : [0, 14, 1, 6, 9, 13, 2] has cost 59.


Decide in level 7 among pending : [5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 5]


New level: 8
 pending : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 5]


Before reduction : 
 pending  : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 5]


Solution : [0, 14, 1, 6, 9, 13, 2, 5] has cost 65.


Before backtrack at level 8
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 2, 5]

After backtrack at level 8
 pending : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Solution : [0, 14, 1, 6, 9, 13, 2] has cost 59.


Decide in level 8 among pending : [8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 8]


New level: 9
 pending : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 8]


Before reduction : 
 pending  : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 8]


Solution : [0, 14, 1, 6, 9, 13, 2, 8] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 2, 8]

After backtrack at level 9
 pending : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Solution : [0, 14, 1, 6, 9, 13, 2] has cost 59.


Decide in level 9 among pending : [10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 10 with phase True at level 9

After decision at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 10]


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 10]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 10]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 10]


Solution : [0, 14, 1, 6, 9, 13, 2, 10] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 2, 10]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2, 10]


Invert decision for 10 at level 9


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

Essensial at level 10 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 12]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 2, 12]


Solution : [0, 14, 1, 6, 9, 13, 2, 12] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 2, 12]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33]
 solution : [0, 14, 1, 6, 9, 13, 2]

After backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 2]

After backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 2]

After backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 2]


Before backtrack at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 2]

After backtrack at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 2]


Invert decision for 2 at level 5


New level: 6
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13]


Solution : [0, 14, 1, 6, 9, 13] has cost 46.


Decide in level 6 among pending : [12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Decide 24 with phase True at level 6

After decision at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]


New level: 7
 pending : [12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, 0), (30, 10), (31, 10), (32, 0), (33, 2)]

Covered at level 7 : {32, 29, 23}

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, 0), (30, 10), (31, 10), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]


Solution : [0, 14, 1, 6, 9, 13, 24] has cost 56.


Decide in level 7 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 3, 7, 17, 25, 27, 28, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, -1), (33, 2)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


New level: 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : {7, 17, 25, 27, 28}

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Solution : [0, 14, 1, 6, 9, 13, 24, 3] has cost 62.


Decide in level 8 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]


New level: 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 4, 5, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]


Solution : [0, 14, 1, 6, 9, 13, 24, 3, 8] has cost 68.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]

After backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Solution : [0, 14, 1, 6, 9, 13, 24, 3] has cost 62.


Decide in level 9 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 4, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]


Solution : [0, 14, 1, 6, 9, 13, 24, 3, 5] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Solution : [0, 14, 1, 6, 9, 13, 24, 3] has cost 62.


Decide in level 10 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]


New level: 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]


Solution : [0, 14, 1, 6, 9, 13, 24, 3, 4] has cost 75.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]

After backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Solution : [0, 14, 1, 6, 9, 13, 24, 3] has cost 62.


Decide in level 11 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 10, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]


Solution : [0, 14, 1, 6, 9, 13, 24, 3, 12] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]

After backtrack at level 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 10]


Solution : [0, 14, 1, 6, 9, 13, 24, 3, 10] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 3, 10]

After backtrack at level 12
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

After backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

After backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

After backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Before backtrack at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]

After backtrack at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 7, 17, 25, 27, 28, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 7, 17, 25, 27, 28, 8]
 solution : [0, 14, 1, 6, 9, 13, 24]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 7, 17, 25, 27, 28, 8]
 solution : [0, 14, 1, 6, 9, 13, 24]

Essensial at level 8 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : {17, 27, 28, 25}

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Solution : [0, 14, 1, 6, 9, 13, 24, 7] has cost 62.


Decide in level 8 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]


New level: 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]


Solution : [0, 14, 1, 6, 9, 13, 24, 7, 4] has cost 75.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]

After backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Solution : [0, 14, 1, 6, 9, 13, 24, 7] has cost 62.


Decide in level 9 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]


New level: 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 10 : {33, 8, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]


Solution : [0, 14, 1, 6, 9, 13, 24, 7, 5] has cost 68.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]

After backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Solution : [0, 14, 1, 6, 9, 13, 24, 7] has cost 62.


Decide in level 10 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]


New level: 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 10, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]


Solution : [0, 14, 1, 6, 9, 13, 24, 7, 8] has cost 68.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]

After backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Solution : [0, 14, 1, 6, 9, 13, 24, 7] has cost 62.


Decide in level 11 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 12, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]


Solution : [0, 14, 1, 6, 9, 13, 24, 7, 10] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]

After backtrack at level 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 12]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 16, 18, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 12]


Solution : [0, 14, 1, 6, 9, 13, 24, 7, 12] has cost 71.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 24, 7, 12]

After backtrack at level 12
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

After backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

After backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]


Before backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 24, 7]

After backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]


Before backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13, 24]

After backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13, 24]


Invert decision for 24 at level 6


New level: 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13]


Solution : [0, 14, 1, 6, 9, 13] has cost 46.


Decide in level 7 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 7, 17, 25, 27, 28, 4, 23, 29, 32, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13, 7]


New level: 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 17, 25, 27, 28, 4, 23, 29, 32, 3]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 1), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : {3, 17, 25, 27, 28}

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Solution : [0, 14, 1, 6, 9, 13, 7] has cost 52.


Decide in level 8 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 8, 5, 4, 23, 29, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 8

After decision at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 8]


New level: 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 8]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 4, 5, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 8]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 8]


Solution : [0, 14, 1, 6, 9, 13, 7, 8] has cost 58.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 7, 8]

After backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 8]


Invert decision for 8 at level 8


New level: 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Solution : [0, 14, 1, 6, 9, 13, 7] has cost 52.


Decide in level 9 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 5, 4, 23, 29, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 5]


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 5]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 4, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 5]


Solution : [0, 14, 1, 6, 9, 13, 7, 5] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 7, 5]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Solution : [0, 14, 1, 6, 9, 13, 7] has cost 52.


Decide in level 10 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 4, 23, 29, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 4]


New level: 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 4]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 4]


Solution : [0, 14, 1, 6, 9, 13, 7, 4] has cost 65.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 7, 4]

After backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Solution : [0, 14, 1, 6, 9, 13, 7] has cost 52.


Decide in level 11 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 12]


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 12]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 12]


Solution : [0, 14, 1, 6, 9, 13, 7, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 7, 12]

After backtrack at level 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 10, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 7, 10]


Solution : [0, 14, 1, 6, 9, 13, 7, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 7, 10]

After backtrack at level 12
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 7]

After backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 7]

After backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4]
 solution : [0, 14, 1, 6, 9, 13, 7]

After backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5]
 solution : [0, 14, 1, 6, 9, 13, 7]


Before backtrack at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5]
 solution : [0, 14, 1, 6, 9, 13, 7]

After backtrack at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 17, 25, 27, 28, 3, 8]
 solution : [0, 14, 1, 6, 9, 13, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 17, 25, 27, 28, 3, 8]
 solution : [0, 14, 1, 6, 9, 13]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 17, 25, 27, 28, 3, 8]
 solution : [0, 14, 1, 6, 9, 13]

Essensial at level 8 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : {17, 27, 28, 25}

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Solution : [0, 14, 1, 6, 9, 13, 3] has cost 52.


Decide in level 8 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 4]


New level: 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 4]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 4]


Solution : [0, 14, 1, 6, 9, 13, 3, 4] has cost 65.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 3, 4]

After backtrack at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Solution : [0, 14, 1, 6, 9, 13, 3] has cost 52.


Decide in level 9 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 5]


New level: 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 5]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 5]


Solution : [0, 14, 1, 6, 9, 13, 3, 5] has cost 58.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 3, 5]

After backtrack at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Solution : [0, 14, 1, 6, 9, 13, 3] has cost 52.


Decide in level 10 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 8]


New level: 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 8]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 8]


Solution : [0, 14, 1, 6, 9, 13, 3, 8] has cost 58.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 3, 8]

After backtrack at level 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3]


Solution : [0, 14, 1, 6, 9, 13, 3] has cost 52.


Decide in level 11 among pending : [10, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 10 with phase True at level 11

After decision at level 11
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 10]


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 10]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 12, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 10]


Solution : [0, 14, 1, 6, 9, 13, 3, 10] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 3, 10]

After backtrack at level 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3, 10]


Invert decision for 10 at level 11


New level: 12
 pending : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before reduction : 
 pending  : [16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 12]
 solution : [0, 14, 1, 6, 9, 13, 3]

Essensial at level 12 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 18, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 13, 3, 12]


Solution : [0, 14, 1, 6, 9, 13, 3, 12] has cost 61.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 13, 3, 12]

After backtrack at level 12
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32]
 solution : [0, 14, 1, 6, 9, 13, 3]

After backtrack at level 11
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10]
 solution : [0, 14, 1, 6, 9, 13, 3]

After backtrack at level 10
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8]
 solution : [0, 14, 1, 6, 9, 13, 3]

After backtrack at level 9
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 3]


Before backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5]
 solution : [0, 14, 1, 6, 9, 13, 3]

After backtrack at level 8
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13]


Before backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4]
 solution : [0, 14, 1, 6, 9, 13]

After backtrack at level 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7]
 solution : [0, 14, 1, 6, 9, 13]


Before backtrack at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7]
 solution : [0, 14, 1, 6, 9, 13]

After backtrack at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24]
 solution : [0, 14, 1, 6, 9, 13]


Before backtrack at level 5
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24]
 solution : [0, 14, 1, 6, 9, 13]

After backtrack at level 5
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 5 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 5 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 29, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 29 with phase True at level 5

After decision at level 5
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]


New level: 6
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 24, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, 128), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, 0), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 6 : {24}

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, 0), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29]


Solution : [0, 14, 1, 6, 9, 29] has cost 51.


Decide in level 6 among pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 8, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


New level: 7
 pending : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before reduction : 
 pending  : [12, 16, 18, 19, 20, 21, 22, 30, 31, 33, 23, 32, 10, 5, 3, 17, 25, 27, 28, 4, 7, 11, 15, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 4, 5, 10, 11, 12, 15, 16, 18, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 3, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 3, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 3, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Solution : [0, 14, 1, 6, 9, 29, 8] has cost 57.


Decide in level 7 among pending : [19, 20, 21, 22, 30, 31, 3, 17, 25, 27, 28, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 3 with phase True at level 7

After decision at level 7
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 3]


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 8 : {2, 7, 17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 3]


Solution : [0, 14, 1, 6, 9, 29, 8, 3] has cost 63.


Before backtrack at level 8
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 8, 3]

After backtrack at level 8
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 3]


Invert decision for 3 at level 7


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Solution : [0, 14, 1, 6, 9, 29, 8] has cost 57.


Decide in level 8 among pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 7]


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {2, 17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 7]


Solution : [0, 14, 1, 6, 9, 29, 8, 7] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 8, 7]

After backtrack at level 9
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 2]
 solution : [0, 14, 1, 6, 9, 29, 8]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 9 : {17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 8, 2]


Solution : [0, 14, 1, 6, 9, 29, 8, 2] has cost 70.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 8, 2]

After backtrack at level 9
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before backtrack at level 8
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 29, 8]

After backtrack at level 8
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 29, 8]


Before backtrack at level 7
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 29, 8]

After backtrack at level 7
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29]


Solution : [0, 14, 1, 6, 9, 29] has cost 51.


Decide in level 7 among pending : [2, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29, 2]


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 3]
 solution : [0, 14, 1, 6, 9, 29, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 8 : {3, 7, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 128), (5, 128), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 2]


Solution : [0, 14, 1, 6, 9, 29, 2] has cost 64.


Before backtrack at level 8
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 2]

After backtrack at level 8
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29]


Solution : [0, 14, 1, 6, 9, 29] has cost 51.


Decide in level 8 among pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 5, 4, 11, 15, 17, 25, 27, 28, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 4, 10, 11, 12, 15, 16, 18, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 0), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]


Solution : [0, 14, 1, 6, 9, 29, 5] has cost 57.


Decide in level 9 among pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 7 with phase True at level 9

After decision at level 9
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5, 7]


New level: 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 10 : {3, 17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 7]


Solution : [0, 14, 1, 6, 9, 29, 5, 7] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 5, 7]

After backtrack at level 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5, 7]


Invert decision for 7 at level 9


New level: 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3]
 solution : [0, 14, 1, 6, 9, 29, 5]

Essensial at level 10 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 10 : {17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 5, 3]


Solution : [0, 14, 1, 6, 9, 29, 5, 3] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 5, 3]

After backtrack at level 10
 pending : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 29, 5]


Before backtrack at level 9
 pending : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 29, 5]

After backtrack at level 9
 pending : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29]


Solution : [0, 14, 1, 6, 9, 29] has cost 51.


Decide in level 9 among pending : [3, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29, 3]


New level: 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15, 7]
 solution : [0, 14, 1, 6, 9, 29, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 128), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 10 : {7, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Solution : [0, 14, 1, 6, 9, 29, 3] has cost 57.


Decide in level 10 among pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 4, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 4]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 4]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 4]


Solution : [0, 14, 1, 6, 9, 29, 3, 4] has cost 70.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 3, 4]

After backtrack at level 11
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Solution : [0, 14, 1, 6, 9, 29, 3] has cost 57.


Decide in level 11 among pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 11, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 12 : {32, 15, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]


Solution : [0, 14, 1, 6, 9, 29, 3, 11] has cost 62.


Before backtrack at level 12
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]

After backtrack at level 12
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Solution : [0, 14, 1, 6, 9, 29, 3] has cost 57.


Decide in level 12 among pending : [19, 20, 21, 22, 30, 31, 12, 16, 18, 33, 10, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 12 with phase True at level 12

After decision at level 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 12]


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 12]


Solution : [0, 14, 1, 6, 9, 29, 3, 12] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 3, 12]

After backtrack at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3, 12]


Invert decision for 12 at level 12


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]

Essensial at level 13 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 3, 10]


Solution : [0, 14, 1, 6, 9, 29, 3, 10] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 3, 10]

After backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 3]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 29, 3]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 29, 3]


Before backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 29, 3]

After backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 17, 25, 27, 28, 7, 4]
 solution : [0, 14, 1, 6, 9, 29, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 17, 25, 27, 28, 7, 4]
 solution : [0, 14, 1, 6, 9, 29]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 17, 25, 27, 28, 7, 4]
 solution : [0, 14, 1, 6, 9, 29]

Essensial at level 10 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 10 : {17, 27, 28, 25}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 4]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 4]
 solution : [0, 14, 1, 6, 9, 29, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 4]
 solution : [0, 14, 1, 6, 9, 29, 7]


Solution : [0, 14, 1, 6, 9, 29, 7] has cost 57.


Decide in level 10 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 11 with phase True at level 10

After decision at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]


New level: 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 11 : {32, 15, 23}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]


Solution : [0, 14, 1, 6, 9, 29, 7, 11] has cost 62.


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 11]


Invert decision for 11 at level 10


New level: 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Solution : [0, 14, 1, 6, 9, 29, 7] has cost 57.


Decide in level 11 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 4, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 4]


New level: 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 4]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 4]


Solution : [0, 14, 1, 6, 9, 29, 7, 4] has cost 70.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 7, 4]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Solution : [0, 14, 1, 6, 9, 29, 7] has cost 57.


Decide in level 12 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 10 with phase True at level 12

After decision at level 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 10]


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 10]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 10]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 10]


Solution : [0, 14, 1, 6, 9, 29, 7, 10] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 7, 10]

After backtrack at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7, 10]


Invert decision for 10 at level 12


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]

Essensial at level 13 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 12]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 29, 7, 12]


Solution : [0, 14, 1, 6, 9, 29, 7, 12] has cost 66.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 29, 7, 12]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 29, 7]

After backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before backtrack at level 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 29, 7]

After backtrack at level 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4]
 solution : [0, 14, 1, 6, 9, 29, 7]


Before backtrack at level 10
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4]
 solution : [0, 14, 1, 6, 9, 29, 7]

After backtrack at level 10
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11]
 solution : [0, 14, 1, 6, 9, 29]


Before backtrack at level 9
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11]
 solution : [0, 14, 1, 6, 9, 29]

After backtrack at level 9
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3]
 solution : [0, 14, 1, 6, 9, 29]


Before backtrack at level 8
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3]
 solution : [0, 14, 1, 6, 9, 29]

After backtrack at level 8
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5]
 solution : [0, 14, 1, 6, 9, 29]


Before backtrack at level 7
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5]
 solution : [0, 14, 1, 6, 9, 29]

After backtrack at level 7
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2]
 solution : [0, 14, 1, 6, 9, 29]


Before backtrack at level 6
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2]
 solution : [0, 14, 1, 6, 9, 29]

After backtrack at level 6
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9, 29]


Invert decision for 29 at level 5


New level: 6
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 6 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 6 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 4, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 4 with phase True at level 6

After decision at level 6
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9, 4]


New level: 7
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9, 4]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 7, 17, 25, 27, 28, 11, 3, 5, 2, 24, 8]
 solution : [0, 14, 1, 6, 9, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, 0), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, 0), (33, 2)]

Covered at level 7 : {32, 5, 8, 10, 11, 12, 15, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 7, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 7, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, 0), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 7, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]


Solution : [0, 14, 1, 6, 9, 4] has cost 54.


Decide in level 7 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 7, 17, 25, 27, 28, 3, 2, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 7]


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 8 : {33, 2, 3, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 7]


Solution : [0, 14, 1, 6, 9, 4, 7] has cost 60.


Before backtrack at level 8
 pending : []
 solution : [0, 14, 1, 6, 9, 4, 7]

After backtrack at level 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 32), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]


Solution : [0, 14, 1, 6, 9, 4] has cost 54.


Decide in level 8 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 3, 2, 24]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 32), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Decide 3 with phase True at level 8

After decision at level 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 3]


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, 32), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 2, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 3]


Solution : [0, 14, 1, 6, 9, 4, 3] has cost 60.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 4, 3]

After backtrack at level 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4, 3]


Invert decision for 3 at level 8


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 2, 24]
 solution : [0, 14, 1, 6, 9, 4]

Essensial at level 9 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 9 : {33, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 2]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, 0), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 4, 2]


Solution : [0, 14, 1, 6, 9, 4, 2] has cost 67.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 9, 4, 2]

After backtrack at level 9
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24]
 solution : [0, 14, 1, 6, 9, 4]


Before backtrack at level 8
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24]
 solution : [0, 14, 1, 6, 9, 4]

After backtrack at level 8
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3]
 solution : [0, 14, 1, 6, 9, 4]


Before backtrack at level 7
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3]
 solution : [0, 14, 1, 6, 9, 4]

After backtrack at level 7
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9, 4]


Invert decision for 4 at level 6


New level: 7
 pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 7 : set()

After reduction : 
 pending  : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 7 among pending : [2, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9, 2]


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 24, 3, 12, 23, 32, 15, 10, 11, 5, 8, 7]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 8 : {3, 7, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 11, 5, 8]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 11, 5, 8]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 11, 5, 8]
 solution : [0, 14, 1, 6, 9, 2]


Solution : [0, 14, 1, 6, 9, 2] has cost 54.


Decide in level 8 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 11, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 15, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : {15}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]


Solution : [0, 14, 1, 6, 9, 2, 11] has cost 59.


Before backtrack at level 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8]
 solution : [0, 14, 1, 6, 9, 2, 11]

After backtrack at level 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8, 15]
 solution : [0, 14, 1, 6, 9, 2, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]


Solution : [0, 14, 1, 6, 9, 2] has cost 54.


Decide in level 9 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 5, 8, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2, 5]


New level: 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 8, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 5]


Solution : [0, 14, 1, 6, 9, 2, 5] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 9, 2, 5]

After backtrack at level 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]
 solution : [0, 14, 1, 6, 9, 2]


Solution : [0, 14, 1, 6, 9, 2] has cost 54.


Decide in level 10 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 8, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 8]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 8]


Solution : [0, 14, 1, 6, 9, 2, 8] has cost 60.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 2, 8]

After backtrack at level 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2]


Solution : [0, 14, 1, 6, 9, 2] has cost 54.


Decide in level 11 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 12, 23, 32, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 12 with phase True at level 11

After decision at level 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 12]


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 15, 16, 18, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 12]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 12]


Solution : [0, 14, 1, 6, 9, 2, 12] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 2, 12]

After backtrack at level 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2, 12]


Invert decision for 12 at level 11


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 2]

Essensial at level 12 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 10]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 2, 10]


Solution : [0, 14, 1, 6, 9, 2, 10] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 2, 10]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 2]


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 2]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 2]


Before backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 2]

After backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 2]


Before backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 2]

After backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5]
 solution : [0, 14, 1, 6, 9, 2]


Before backtrack at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5]
 solution : [0, 14, 1, 6, 9, 2]

After backtrack at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 8 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 24, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 24 with phase True at level 8

After decision at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24]


New level: 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, 128), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24]


Solution : [0, 14, 1, 6, 9, 24] has cost 51.


Decide in level 9 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 5, 17, 25, 27, 28, 3, 7, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24, 8]


New level: 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24, 8]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 17, 25, 27, 28, 3, 7, 11]
 solution : [0, 14, 1, 6, 9, 24, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 5, 10, 11, 12, 15, 16, 18, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3, 7]
 solution : [0, 14, 1, 6, 9, 24, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3, 7]
 solution : [0, 14, 1, 6, 9, 24, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, 3), (18, 0), (19, 2), (20, 2), (21, 2), (22, 2), (23, 0), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3, 7]
 solution : [0, 14, 1, 6, 9, 24, 8]


Solution : [0, 14, 1, 6, 9, 24, 8] has cost 57.


Decide in level 10 among pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8, 3]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 3), (18, -1), (19, 2), (20, 2), (21, 2), (22, 2), (23, -1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 2), (31, 2), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {7, 17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 3]


Solution : [0, 14, 1, 6, 9, 24, 8, 3] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 8, 3]

After backtrack at level 11
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 24, 8]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 11 : {17, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 8, 7]


Solution : [0, 14, 1, 6, 9, 24, 8, 7] has cost 63.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 8, 7]

After backtrack at level 11
 pending : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 24, 8]


Before backtrack at level 10
 pending : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 24, 8]

After backtrack at level 10
 pending : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24]


Before reduction : 
 pending  : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24]


Solution : [0, 14, 1, 6, 9, 24] has cost 51.


Decide in level 10 among pending : [7, 19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24, 7]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 17, 25, 27, 28, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11, 3]
 solution : [0, 14, 1, 6, 9, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 3), (18, 2), (19, 16), (20, 16), (21, 16), (22, 16), (23, 1), (24, -1), (25, 8), (26, -1), (27, 3), (28, 8), (29, -1), (30, 10), (31, 10), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : {3, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]


Solution : [0, 14, 1, 6, 9, 24, 7] has cost 57.


Decide in level 11 among pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 5, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 5 with phase True at level 11

After decision at level 11
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7, 5]


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 5]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 5]


Solution : [0, 14, 1, 6, 9, 24, 7, 5] has cost 63.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 7, 5]

After backtrack at level 12
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7, 5]


Invert decision for 5 at level 11


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]


Solution : [0, 14, 1, 6, 9, 24, 7] has cost 57.


Decide in level 12 among pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 13 : {32, 15, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]


Solution : [0, 14, 1, 6, 9, 24, 7, 11] has cost 62.


Before backtrack at level 13
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]

After backtrack at level 13
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]


Solution : [0, 14, 1, 6, 9, 24, 7] has cost 57.


Decide in level 13 among pending : [19, 20, 21, 22, 30, 31, 10, 16, 18, 33, 12, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7, 10]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7, 10]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 10]


Solution : [0, 14, 1, 6, 9, 24, 7, 10] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 7, 10]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 12, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 7, 12]


Solution : [0, 14, 1, 6, 9, 24, 7, 12] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 7, 12]

After backtrack at level 14
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 7]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 24, 7]

After backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]


Before backtrack at level 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11]
 solution : [0, 14, 1, 6, 9, 24, 7]

After backtrack at level 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 17, 25, 27, 28, 3, 5]
 solution : [0, 14, 1, 6, 9, 24, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 17, 25, 27, 28, 3, 5]
 solution : [0, 14, 1, 6, 9, 24]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 17, 25, 27, 28, 3, 5]
 solution : [0, 14, 1, 6, 9, 24]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : {17, 27, 28, 25}

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 5]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 5]
 solution : [0, 14, 1, 6, 9, 24, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 5]
 solution : [0, 14, 1, 6, 9, 24, 3]


Solution : [0, 14, 1, 6, 9, 24, 3] has cost 57.


Decide in level 11 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 11, 5]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]


New level: 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 12 : {32, 15, 23}

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]


Solution : [0, 14, 1, 6, 9, 24, 3, 11] has cost 62.


Before backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]

After backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Solution : [0, 14, 1, 6, 9, 24, 3] has cost 57.


Decide in level 12 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 5, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 5]


New level: 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 5]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 5]


Solution : [0, 14, 1, 6, 9, 24, 3, 5] has cost 63.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 3, 5]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Solution : [0, 14, 1, 6, 9, 24, 3] has cost 57.


Decide in level 13 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 12]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 4), (20, 4), (21, 4), (22, 4), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 12]


Solution : [0, 14, 1, 6, 9, 24, 3, 12] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 3, 12]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 24, 3, 10]


Solution : [0, 14, 1, 6, 9, 24, 3, 10] has cost 66.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 24, 3, 10]

After backtrack at level 14
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 24, 3]

After backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 24, 3]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5]
 solution : [0, 14, 1, 6, 9, 24, 3]


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5]
 solution : [0, 14, 1, 6, 9, 24, 3]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11]
 solution : [0, 14, 1, 6, 9, 24]


Before backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11]
 solution : [0, 14, 1, 6, 9, 24]

After backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7]
 solution : [0, 14, 1, 6, 9, 24]


Before backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7]
 solution : [0, 14, 1, 6, 9, 24]

After backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9, 24]


Invert decision for 24 at level 8


New level: 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 9 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 5, 3, 17, 25, 27, 28, 11, 7, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9, 5]


New level: 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9, 5]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 3, 17, 25, 27, 28, 11, 7, 8]
 solution : [0, 14, 1, 6, 9, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, 0), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, 0), (33, 2)]

Covered at level 10 : {32, 8, 10, 11, 12, 15, 23}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 3, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 3, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, 0), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 3, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5]


Solution : [0, 14, 1, 6, 9, 5] has cost 47.


Decide in level 10 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 3, 17, 25, 27, 28, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5, 3]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 12), (18, 2), (19, 6), (20, 6), (21, 6), (22, 6), (23, -1), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 6), (31, 6), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 7, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 3]


Solution : [0, 14, 1, 6, 9, 5, 3] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 5, 3]

After backtrack at level 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 7]
 solution : [0, 14, 1, 6, 9, 5]

Essensial at level 11 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 11 : {33, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 5, 7]


Solution : [0, 14, 1, 6, 9, 5, 7] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 9, 5, 7]

After backtrack at level 11
 pending : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 5]


Before backtrack at level 10
 pending : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28]
 solution : [0, 14, 1, 6, 9, 5]

After backtrack at level 10
 pending : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Covered at level 10 : set()

After reduction : 
 pending  : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9]


Solution : [0, 14, 1, 6, 9] has cost 41.


Decide in level 10 among pending : [7, 19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9, 7]


New level: 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 17, 25, 27, 28, 10, 23, 32, 15, 12, 11, 8, 3]
 solution : [0, 14, 1, 6, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 8), (17, 12), (18, 8), (19, 21), (20, 21), (21, 21), (22, 21), (23, 4), (24, -1), (25, 32), (26, -1), (27, 9), (28, 32), (29, -1), (30, 20), (31, 20), (32, 4), (33, 8)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 11 : {3, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 11, 8]
 solution : [0, 14, 1, 6, 9, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 11, 8]
 solution : [0, 14, 1, 6, 9, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 11, 8]
 solution : [0, 14, 1, 6, 9, 7]


Solution : [0, 14, 1, 6, 9, 7] has cost 47.


Decide in level 11 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 11, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 11 with phase True at level 11

After decision at level 11
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]


New level: 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : {15}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]


Solution : [0, 14, 1, 6, 9, 7, 11] has cost 52.


Decide in level 12 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 8]


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 8]


Solution : [0, 14, 1, 6, 9, 7, 11, 8] has cost 58.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 11, 8]

After backtrack at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11]


Solution : [0, 14, 1, 6, 9, 7, 11] has cost 52.


Decide in level 13 among pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 10, 23, 32, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 10]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 10]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 12, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 10]


Solution : [0, 14, 1, 6, 9, 7, 11, 10] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 11, 10]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 7, 11]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 11, 12]


Solution : [0, 14, 1, 6, 9, 7, 11, 12] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 11, 12]

After backtrack at level 14
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32]
 solution : [0, 14, 1, 6, 9, 7, 11]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10]
 solution : [0, 14, 1, 6, 9, 7, 11]


Before backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10]
 solution : [0, 14, 1, 6, 9, 7, 11]

After backtrack at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15, 8]
 solution : [0, 14, 1, 6, 9, 7, 11]


Invert decision for 11 at level 11


New level: 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15, 8]
 solution : [0, 14, 1, 6, 9, 7]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15, 8]
 solution : [0, 14, 1, 6, 9, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15, 8]
 solution : [0, 14, 1, 6, 9, 7]


Solution : [0, 14, 1, 6, 9, 7] has cost 47.


Decide in level 12 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 8]


New level: 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 8]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 8]


Solution : [0, 14, 1, 6, 9, 7, 8] has cost 53.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 8]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7]


Solution : [0, 14, 1, 6, 9, 7] has cost 47.


Decide in level 13 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 12]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 12]


Solution : [0, 14, 1, 6, 9, 7, 12] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 12]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 10, 15]
 solution : [0, 14, 1, 6, 9, 7]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 7, 10]


Solution : [0, 14, 1, 6, 9, 7, 10] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 7, 10]

After backtrack at level 14
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 7]


Before backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 7]

After backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 7]


Before backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 7]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 7]


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8]
 solution : [0, 14, 1, 6, 9, 7]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 17, 25, 27, 28, 3, 11]
 solution : [0, 14, 1, 6, 9, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 17, 25, 27, 28, 3, 11]
 solution : [0, 14, 1, 6, 9]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 17, 25, 27, 28, 3, 11]
 solution : [0, 14, 1, 6, 9]

Essensial at level 11 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 11 : {17, 27, 28, 25}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 11]
 solution : [0, 14, 1, 6, 9, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 11]
 solution : [0, 14, 1, 6, 9, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, 0), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, 0), (26, -1), (27, 0), (28, 0), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 11]
 solution : [0, 14, 1, 6, 9, 3]


Solution : [0, 14, 1, 6, 9, 3] has cost 47.


Decide in level 11 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 8, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3, 8]


New level: 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3, 8]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 11, 12, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 8]


Solution : [0, 14, 1, 6, 9, 3, 8] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 9, 3, 8]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3]


Solution : [0, 14, 1, 6, 9, 3] has cost 47.


Decide in level 12 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]


New level: 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : {15}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]


Solution : [0, 14, 1, 6, 9, 3, 11] has cost 52.


Decide in level 13 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 10 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11, 10]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11, 10]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 12, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 10]


Solution : [0, 14, 1, 6, 9, 3, 11, 10] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 3, 11, 10]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11, 10]


Invert decision for 10 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12]
 solution : [0, 14, 1, 6, 9, 3, 11]

Essensial at level 14 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 11, 12]


Solution : [0, 14, 1, 6, 9, 3, 11, 12] has cost 61.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 3, 11, 12]

After backtrack at level 14
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32]
 solution : [0, 14, 1, 6, 9, 3, 11]


Before backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32]
 solution : [0, 14, 1, 6, 9, 3, 11]

After backtrack at level 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3]


Before reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3]


Solution : [0, 14, 1, 6, 9, 3] has cost 47.


Decide in level 13 among pending : [12, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

Decide 12 with phase True at level 13

After decision at level 13
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3, 12]


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, 2), (17, -1), (18, 2), (19, 5), (20, 5), (21, 5), (22, 5), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 6), (31, 6), (32, 4), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 10, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 12]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 12]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 12]


Solution : [0, 14, 1, 6, 9, 3, 12] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 3, 12]

After backtrack at level 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3, 12]


Invert decision for 12 at level 13


New level: 14
 pending : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 10]
 solution : [0, 14, 1, 6, 9, 3]

Essensial at level 14 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 15, 16, 18, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 10]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 10]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 9, 3, 10]


Solution : [0, 14, 1, 6, 9, 3, 10] has cost 56.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 9, 3, 10]

After backtrack at level 14
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 3]


Before backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 9, 3]

After backtrack at level 13
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 3]


Before backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12]
 solution : [0, 14, 1, 6, 9, 3]

After backtrack at level 12
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3]


Before backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11]
 solution : [0, 14, 1, 6, 9, 3]

After backtrack at level 11
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 7
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 7
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 6
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 6
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 5
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 5
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 9]


Before backtrack at level 4
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 9]

After backtrack at level 4
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29, 13]
 solution : [0, 14, 1, 6, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29, 13]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29, 13]
 solution : [0, 14, 1, 6]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29, 13]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 4 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29, 13]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 13 with phase True at level 4

After decision at level 4
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]


New level: 5
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 15, 12, 11, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, 256), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, 0), (12, 16), (13, -1), (14, -1), (15, 0), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 5 : {11, 15}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, 0), (12, 16), (13, -1), (14, -1), (15, 0), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 5 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 17, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 17 with phase True at level 5

After decision at level 5
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]


New level: 6
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 27, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, 0), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Covered at level 6 : {27}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, 0), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17]


Solution : [0, 14, 1, 6, 13, 17] has cost 44.


Decide in level 6 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 3, 25, 28, 8, 7, 5, 24, 2, 4, 29]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Decide 3 with phase True at level 6

After decision at level 6
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


New level: 7
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 25, 28, 8, 7, 5, 24, 2, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 7 : {25, 2, 28, 7}

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 8, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 8, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 8, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 7 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 8, 5, 24, 4, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 7

After decision at level 7
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 8]


New level: 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 8]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {32, 33, 4, 5, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 8]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 8]


Solution : [0, 14, 1, 6, 13, 17, 3, 8] has cost 56.


Before backtrack at level 8
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 3, 8]

After backtrack at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 8]


Invert decision for 8 at level 7


New level: 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 8 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 5, 24, 4, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 5]


New level: 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 5]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 4, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 5]


Solution : [0, 14, 1, 6, 13, 17, 3, 5] has cost 56.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 3, 5]

After backtrack at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 9 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 4, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 9

After decision at level 9
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 4]


New level: 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 4]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 3, 4]


Solution : [0, 14, 1, 6, 13, 17, 3, 4] has cost 63.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 3, 4]

After backtrack at level 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 4]


Invert decision for 4 at level 9


New level: 10
 pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 10 among pending : [10, 19, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 19 with phase True at level 10

After decision at level 10
 pending : [10, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]


New level: 11
 pending : [10, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]


Before reduction : 
 pending  : [10, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 12, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 16, 18, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]


Solution : [0, 14, 1, 6, 13, 17, 3, 19] has cost 84.


Before backtrack at level 11
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]

After backtrack at level 11
 pending : [10, 12, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 19]


Invert decision for 19 at level 10


New level: 11
 pending : [10, 12, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 12, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 11 among pending : [10, 12, 20, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 20 with phase True at level 11

After decision at level 11
 pending : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]


New level: 12
 pending : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]


Before reduction : 
 pending  : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 18, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]


Solution : [0, 14, 1, 6, 13, 17, 3, 20] has cost 84.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]

After backtrack at level 12
 pending : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 20]


Invert decision for 20 at level 11


New level: 12
 pending : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Solution : [0, 14, 1, 6, 13, 17, 3] has cost 50.


Decide in level 12 among pending : [10, 12, 21, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 21 with phase True at level 12

After decision at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]


New level: 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]


Solution : [0, 14, 1, 6, 13, 17, 3, 21] has cost 84.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]

After backtrack at level 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3, 21]


Invert decision for 21 at level 12


New level: 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

Essensial at level 13 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 22]


Solution : [0, 14, 1, 6, 13, 17, 3, 22] has cost 84.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 3, 22]

After backtrack at level 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 8
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 8
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 17, 3]


Before backtrack at level 7
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 17, 3]

After backtrack at level 7
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 17, 3]


Invert decision for 3 at level 6


New level: 7
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 17]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 17]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 17]


Solution : [0, 14, 1, 6, 13, 17] has cost 44.


Decide in level 7 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


New level: 8
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 101), (21, 101), (22, 101), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : {25, 2, 28}

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 8 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 8

After decision at level 8
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 4]


New level: 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 4]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 4]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 4]


Solution : [0, 14, 1, 6, 13, 17, 7, 4] has cost 63.


Before backtrack at level 9
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 7, 4]

After backtrack at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 4]


Invert decision for 4 at level 8


New level: 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 9 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 9

After decision at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 5]


New level: 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 5]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 5]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 5]


Solution : [0, 14, 1, 6, 13, 17, 7, 5] has cost 56.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 7, 5]

After backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7, 5]


Invert decision for 5 at level 9


New level: 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 10 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 10

After decision at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 8]


New level: 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 8]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 8]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 17, 7, 8]


Solution : [0, 14, 1, 6, 13, 17, 7, 8] has cost 56.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 13, 17, 7, 8]

After backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 8]


Invert decision for 8 at level 10


New level: 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 11 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 22 with phase True at level 11

After decision at level 11
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]


New level: 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 16, 18, 19, 20, 21, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]


Solution : [0, 14, 1, 6, 13, 17, 7, 22] has cost 84.


Before backtrack at level 12
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]

After backtrack at level 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 22]


Invert decision for 22 at level 11


New level: 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 12 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 21 with phase True at level 12

After decision at level 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 19, 20, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]


Solution : [0, 14, 1, 6, 13, 17, 7, 21] has cost 84.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]

After backtrack at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 21]


Invert decision for 21 at level 12


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Solution : [0, 14, 1, 6, 13, 17, 7] has cost 50.


Decide in level 13 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 20 with phase True at level 13

After decision at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 19, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]


Solution : [0, 14, 1, 6, 13, 17, 7, 20] has cost 84.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]

After backtrack at level 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7, 20]


Invert decision for 20 at level 13


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 17, 7]

Essensial at level 14 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 19]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 19]


Solution : [0, 14, 1, 6, 13, 17, 7, 19] has cost 84.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 17, 7, 19]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 13
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 17, 7]


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 17, 7]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 17, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 17]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 17]

Essensial at level 8 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : {25, 28}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 17, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 17, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 17, 2]


Solution : [0, 14, 1, 6, 13, 17, 2] has cost 57.


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 17, 2]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28]
 solution : [0, 14, 1, 6, 13, 17]


Before backtrack at level 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28]
 solution : [0, 14, 1, 6, 13, 17]

After backtrack at level 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7]
 solution : [0, 14, 1, 6, 13, 17]


Before backtrack at level 6
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7]
 solution : [0, 14, 1, 6, 13, 17]

After backtrack at level 6
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 27, 3]
 solution : [0, 14, 1, 6, 13, 17]


Invert decision for 17 at level 5


New level: 6
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 27, 3]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 27, 3]
 solution : [0, 14, 1, 6, 13]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 27, 3]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 6 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 27, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 27 with phase True at level 6

After decision at level 6
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]


New level: 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 129), (22, 129), (23, 8), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]


Solution : [0, 14, 1, 6, 13, 27] has cost 41.


Decide in level 7 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Decide 2 with phase True at level 7

After decision at level 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27, 2]


New level: 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : {25, 3, 28, 7}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 2]


Solution : [0, 14, 1, 6, 13, 27, 2] has cost 54.


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 2]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27, 2]


Invert decision for 2 at level 7


New level: 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]
 solution : [0, 14, 1, 6, 13, 27]


Solution : [0, 14, 1, 6, 13, 27] has cost 41.


Decide in level 8 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 7, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

Decide 7 with phase True at level 8

After decision at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 13, 27, 7]


New level: 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 85), (20, 85), (21, 85), (22, 85), (23, 1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : {25, 3, 28}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 9 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 9

After decision at level 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 8]


New level: 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 8]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 4, 5, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 8]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 8]


Solution : [0, 14, 1, 6, 13, 27, 7, 8] has cost 53.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 7, 8]

After backtrack at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 8]


Invert decision for 8 at level 9


New level: 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 10 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 5]


New level: 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 5]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 4, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 5]


Solution : [0, 14, 1, 6, 13, 27, 7, 5] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 7, 5]

After backtrack at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 11 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 11

After decision at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 4]


New level: 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 4]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 4]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 7, 4]


Solution : [0, 14, 1, 6, 13, 27, 7, 4] has cost 60.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 7, 4]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 4]


Invert decision for 4 at level 11


New level: 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 12 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 19 with phase True at level 12

After decision at level 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]


Solution : [0, 14, 1, 6, 13, 27, 7, 19] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]

After backtrack at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 19]


Invert decision for 19 at level 12


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 13 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 20 with phase True at level 13

After decision at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]


Solution : [0, 14, 1, 6, 13, 27, 7, 20] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]

After backtrack at level 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 20]


Invert decision for 20 at level 13


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Solution : [0, 14, 1, 6, 13, 27, 7] has cost 47.


Decide in level 14 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 22]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 21 with phase True at level 14

After decision at level 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]


New level: 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, -1), (20, -1), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 18, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]


Solution : [0, 14, 1, 6, 13, 27, 7, 21] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]

After backtrack at level 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7, 21]


Invert decision for 21 at level 14


New level: 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 22]
 solution : [0, 14, 1, 6, 13, 27, 7]

Essensial at level 15 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 18, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 22]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 22]


Solution : [0, 14, 1, 6, 13, 27, 7, 22] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 7, 22]

After backtrack at level 15
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 14
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 14
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 13
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 27, 7]


Before backtrack at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 27, 7]

After backtrack at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 3, 8]
 solution : [0, 14, 1, 6, 13, 27, 7]


Invert decision for 7 at level 8


New level: 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 3, 8]
 solution : [0, 14, 1, 6, 13, 27]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 25, 28, 3, 8]
 solution : [0, 14, 1, 6, 13, 27]

Essensial at level 9 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : {25, 28}

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 9 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 4 with phase True at level 9

After decision at level 9
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 4]


New level: 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 4]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 10 : {32, 33, 5, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 4]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 4]


Solution : [0, 14, 1, 6, 13, 27, 3, 4] has cost 60.


Before backtrack at level 10
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 3, 4]

After backtrack at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 4]


Invert decision for 4 at level 9


New level: 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 10 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 5 with phase True at level 10

After decision at level 10
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 5]


New level: 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 5]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 8, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 5]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 5]


Solution : [0, 14, 1, 6, 13, 27, 3, 5] has cost 53.


Before backtrack at level 11
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 3, 5]

After backtrack at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3, 5]


Invert decision for 5 at level 10


New level: 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 11 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 8]


New level: 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 8]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 10, 12, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 27, 3, 8]


Solution : [0, 14, 1, 6, 13, 27, 3, 8] has cost 53.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 13, 27, 3, 8]

After backtrack at level 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 12 among pending : [10, 12, 22, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 22 with phase True at level 12

After decision at level 12
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, 19), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 16, 18, 19, 20, 21, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]


Solution : [0, 14, 1, 6, 13, 27, 3, 22] has cost 81.


Before backtrack at level 13
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]

After backtrack at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 22]


Invert decision for 22 at level 12


New level: 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 13 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 21 with phase True at level 13

After decision at level 13
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, 19), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 16, 18, 19, 20, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]


Solution : [0, 14, 1, 6, 13, 27, 3, 21] has cost 81.


Before backtrack at level 14
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]

After backtrack at level 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 21]


Invert decision for 21 at level 13


New level: 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Solution : [0, 14, 1, 6, 13, 27, 3] has cost 47.


Decide in level 14 among pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

Decide 20 with phase True at level 14

After decision at level 14
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]


New level: 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 11), (17, -1), (18, 9), (19, 19), (20, 19), (21, -1), (22, -1), (23, 1), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 18, 19, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]


Solution : [0, 14, 1, 6, 13, 27, 3, 20] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]

After backtrack at level 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3, 20]


Invert decision for 20 at level 14


New level: 15
 pending : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 16, 18, 33, 23, 32, 24, 29, 19]
 solution : [0, 14, 1, 6, 13, 27, 3]

Essensial at level 15 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 16, 18, 23, 24, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 19]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, 0), (17, -1), (18, 0), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 19]


Solution : [0, 14, 1, 6, 13, 27, 3, 19] has cost 81.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 27, 3, 19]

After backtrack at level 15
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 14
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 13
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 11
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 10
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 27, 3]


Before backtrack at level 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 27, 3]

After backtrack at level 9
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4]
 solution : [0, 14, 1, 6, 13, 27]


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4]
 solution : [0, 14, 1, 6, 13, 27]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7]
 solution : [0, 14, 1, 6, 13, 27]


Before backtrack at level 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7]
 solution : [0, 14, 1, 6, 13, 27]

After backtrack at level 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 27]


Invert decision for 27 at level 6


New level: 7
 pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 7 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 7 among pending : [10, 12, 19, 30, 31, 16, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [10, 12, 19, 30, 31, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]


New level: 8
 pending : [10, 12, 19, 30, 31, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 18, 33, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 1), (33, 0)]

Covered at level 8 : {33, 18}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 0), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]


Solution : [0, 14, 1, 6, 13, 16] has cost 64.


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 16]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 18, 33]
 solution : [0, 14, 1, 6, 13, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 18, 33]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 18, 33]
 solution : [0, 14, 1, 6, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 18, 33]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 8 among pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 18, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 18]


New level: 9
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 18]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 1), (33, 0)]

Covered at level 9 : {33}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 18]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 18]


Solution : [0, 14, 1, 6, 13, 18] has cost 59.


Before backtrack at level 9
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2]
 solution : [0, 14, 1, 6, 13, 18]

After backtrack at level 9
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 1), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 9 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 9 among pending : [10, 12, 19, 30, 31, 23, 32, 24, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 24 with phase True at level 9

After decision at level 9
 pending : [10, 12, 19, 30, 31, 23, 32, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]


New level: 10
 pending : [10, 12, 19, 30, 31, 23, 32, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 29, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, 0), (30, 18), (31, 18), (32, 0), (33, 2)]

Covered at level 10 : {32, 29, 23}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, 0), (30, 18), (31, 18), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24]


Solution : [0, 14, 1, 6, 13, 24] has cost 35.


Decide in level 10 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 3, 25, 28, 4, 7, 2, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Decide 3 with phase True at level 10

After decision at level 10
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


New level: 11
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 25, 28, 4, 7, 2, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : {25, 2, 28, 7}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 11 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 8]


New level: 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 8]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 12 : {33, 4, 5, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 8]


Solution : [0, 14, 1, 6, 13, 24, 3, 8] has cost 47.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 3, 8]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 12 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 5]


New level: 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 5]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 4, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 5]


Solution : [0, 14, 1, 6, 13, 24, 3, 5] has cost 47.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 3, 5]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 13 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 4]


New level: 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 4]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 3, 4]


Solution : [0, 14, 1, 6, 13, 24, 3, 4] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 3, 4]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 14 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 19 with phase True at level 14

After decision at level 14
 pending : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]


New level: 15
 pending : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 20, 21, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]


Solution : [0, 14, 1, 6, 13, 24, 3, 19] has cost 75.


Before backtrack at level 15
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]

After backtrack at level 15
 pending : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 19]


Invert decision for 19 at level 14


New level: 15
 pending : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 20, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 15 among pending : [10, 12, 30, 31, 20, 21, 22, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 20 with phase True at level 15

After decision at level 15
 pending : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]


New level: 16
 pending : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 21, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]


Solution : [0, 14, 1, 6, 13, 24, 3, 20] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]

After backtrack at level 16
 pending : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 20]


Invert decision for 20 at level 15


New level: 16
 pending : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 21, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Solution : [0, 14, 1, 6, 13, 24, 3] has cost 41.


Decide in level 16 among pending : [10, 12, 30, 31, 21, 22, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]


New level: 17
 pending : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]


Solution : [0, 14, 1, 6, 13, 24, 3, 21] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]

After backtrack at level 17
 pending : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

Essensial at level 17 : {22}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 22]


Solution : [0, 14, 1, 6, 13, 24, 3, 22] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 3, 22]

After backtrack at level 17
 pending : [10, 12, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 16
 pending : [10, 12, 22, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 16
 pending : [10, 12, 22, 30, 31, 33, 21]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 15
 pending : [10, 12, 22, 30, 31, 33, 21]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 15
 pending : [10, 12, 22, 30, 31, 33, 21, 20]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 12
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 12
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 24, 3]


Before backtrack at level 11
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5]
 solution : [0, 14, 1, 6, 13, 24, 3]

After backtrack at level 11
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 24, 3]


Invert decision for 3 at level 10


New level: 11
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 24]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 24]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]
 solution : [0, 14, 1, 6, 13, 24]


Solution : [0, 14, 1, 6, 13, 24] has cost 35.


Decide in level 11 among pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 7, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Decide 7 with phase True at level 11

After decision at level 11
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


New level: 12
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, -1), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : {25, 2, 28}

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 12 among pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 12

After decision at level 12
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 4]


New level: 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 4]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 13 : {33, 5, 8, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 4]


Solution : [0, 14, 1, 6, 13, 24, 7, 4] has cost 54.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 7, 4]

After backtrack at level 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 4]


Invert decision for 4 at level 12


New level: 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 13 among pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 5]


New level: 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 5]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 8, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 5]


Solution : [0, 14, 1, 6, 13, 24, 7, 5] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 7, 5]

After backtrack at level 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 14 among pending : [10, 12, 22, 30, 31, 33, 21, 20, 19, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 8]


New level: 15
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 8]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 24, 7, 8]


Solution : [0, 14, 1, 6, 13, 24, 7, 8] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 24, 7, 8]

After backtrack at level 15
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 22, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 15 among pending : [10, 12, 22, 30, 31, 33, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 22 with phase True at level 15

After decision at level 15
 pending : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]


New level: 16
 pending : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 19, 20, 21, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]


Solution : [0, 14, 1, 6, 13, 24, 7, 22] has cost 75.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]

After backtrack at level 16
 pending : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 22]


Invert decision for 22 at level 15


New level: 16
 pending : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 33, 21, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 16 among pending : [10, 12, 30, 31, 33, 21, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]


New level: 17
 pending : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 19, 20, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]


Solution : [0, 14, 1, 6, 13, 24, 7, 21] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]

After backtrack at level 17
 pending : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 33, 20, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Solution : [0, 14, 1, 6, 13, 24, 7] has cost 41.


Decide in level 17 among pending : [10, 12, 30, 31, 33, 20, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 20 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]


New level: 18
 pending : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 19, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]


Solution : [0, 14, 1, 6, 13, 24, 7, 20] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]

After backtrack at level 18
 pending : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7, 20]


Invert decision for 20 at level 17


New level: 18
 pending : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 24, 7]

Essensial at level 18 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 19]


Solution : [0, 14, 1, 6, 13, 24, 7, 19] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 24, 7, 19]

After backtrack at level 18
 pending : [10, 12, 19, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 17
 pending : [10, 12, 19, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 17
 pending : [10, 12, 19, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 16
 pending : [10, 12, 19, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 16
 pending : [10, 12, 19, 30, 31, 33, 20, 21]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 15
 pending : [10, 12, 19, 30, 31, 33, 20, 21]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 15
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 14
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 13
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 24, 7]


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 24, 7]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 24, 7]


Invert decision for 7 at level 11


New level: 12
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 24]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 25, 28, 2, 4]
 solution : [0, 14, 1, 6, 13, 24]

Essensial at level 12 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : {25, 28}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 24, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 24, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 24, 2]


Solution : [0, 14, 1, 6, 13, 24, 2] has cost 48.


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 24, 2]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28]
 solution : [0, 14, 1, 6, 13, 24]


Before backtrack at level 11
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28]
 solution : [0, 14, 1, 6, 13, 24]

After backtrack at level 11
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7]
 solution : [0, 14, 1, 6, 13, 24]


Before backtrack at level 10
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7]
 solution : [0, 14, 1, 6, 13, 24]

After backtrack at level 10
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13, 24]


Invert decision for 24 at level 9


New level: 10
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 10 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 10 among pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 2, 25, 28, 7, 23, 32, 29, 3]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 2 with phase True at level 10

After decision at level 10
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13, 2]


New level: 11
 pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 25, 28, 7, 23, 32, 29, 3]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 8), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 11 : {25, 3, 28, 7}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 8), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 11 among pending : [10, 12, 19, 30, 31, 33, 20, 21, 22, 8, 5, 4, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 11

After decision at level 11
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]


New level: 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]


Solution : [0, 14, 1, 6, 13, 2, 33] has cost 48.


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 33]


Invert decision for 33 at level 11


New level: 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 4), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 12 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 8, 5, 4, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 8 with phase True at level 12

After decision at level 12
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 8]


New level: 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 8]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 13 : {32, 4, 5, 10, 12, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 8]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 8]


Solution : [0, 14, 1, 6, 13, 2, 8] has cost 44.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 13, 2, 8]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 8]


Invert decision for 8 at level 12


New level: 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 13 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 5, 4, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 5]


New level: 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 5]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 14 : {32, 4, 10, 12, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 5]


Solution : [0, 14, 1, 6, 13, 2, 5] has cost 44.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 13, 2, 5]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 14 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 4, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 4]


New level: 15
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 4]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 10, 12, 19, 20, 21, 22, 23, 29, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 2, 4]


Solution : [0, 14, 1, 6, 13, 2, 4] has cost 51.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 2, 4]

After backtrack at level 15
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 15 among pending : [10, 12, 19, 30, 31, 20, 21, 22, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 21 with phase True at level 15

After decision at level 15
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 21]


New level: 16
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 21]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 21]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 19, 20, 22, 23, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 21]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 21]


Solution : [0, 14, 1, 6, 13, 2, 21] has cost 72.


Before backtrack at level 16
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 21]

After backtrack at level 16
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 21]


Invert decision for 21 at level 15


New level: 16
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 16 among pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 22 with phase True at level 16

After decision at level 16
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 22]


New level: 17
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 22]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 19, 20, 23, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 22]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 22]


Solution : [0, 14, 1, 6, 13, 2, 22] has cost 72.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 22]

After backtrack at level 17
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 22]


Invert decision for 22 at level 16


New level: 17
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Solution : [0, 14, 1, 6, 13, 2] has cost 38.


Decide in level 17 among pending : [10, 12, 19, 30, 31, 20, 23, 32, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 19 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 19]


New level: 18
 pending : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 8), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 20, 23, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 19]


Solution : [0, 14, 1, 6, 13, 2, 19] has cost 72.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 19]

After backtrack at level 18
 pending : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2, 19]


Invert decision for 19 at level 17


New level: 18
 pending : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

Essensial at level 18 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 23, 29, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 20]


Solution : [0, 14, 1, 6, 13, 2, 20] has cost 72.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 2, 20]

After backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 29]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 13
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 13
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 12
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 12
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 2]


Before backtrack at level 11
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 2]

After backtrack at level 11
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 2]


Invert decision for 2 at level 10


New level: 11
 pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 11 among pending : [10, 12, 20, 30, 31, 23, 32, 29, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 29 with phase True at level 11

After decision at level 11
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]


New level: 12
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 0), (33, 2)]

Covered at level 12 : {32, 23}

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]
 solution : [0, 14, 1, 6, 13, 29]


Solution : [0, 14, 1, 6, 13, 29] has cost 35.


Decide in level 12 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 7, 3, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Decide 7 with phase True at level 12

After decision at level 12
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 3, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


New level: 13
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 3, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 25, 28, 3, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : {25, 3, 28}

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 13 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 4]


New level: 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 4]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 5, 8, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 4]


Solution : [0, 14, 1, 6, 13, 29, 7, 4] has cost 54.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 7, 4]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 14 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 5]


New level: 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 5]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 8, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 5]


Solution : [0, 14, 1, 6, 13, 29, 7, 5] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 7, 5]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 15 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 8]


New level: 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 8]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 7, 8]


Solution : [0, 14, 1, 6, 13, 29, 7, 8] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 7, 8]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 16 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 20 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]


New level: 17
 pending : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 19, 21, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]


Solution : [0, 14, 1, 6, 13, 29, 7, 20] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]

After backtrack at level 17
 pending : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 20]


Invert decision for 20 at level 16


New level: 17
 pending : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 17 among pending : [10, 12, 30, 31, 19, 22, 21, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 19 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]


New level: 18
 pending : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 21, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]


Solution : [0, 14, 1, 6, 13, 29, 7, 19] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]

After backtrack at level 18
 pending : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 19]


Invert decision for 19 at level 17


New level: 18
 pending : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Solution : [0, 14, 1, 6, 13, 29, 7] has cost 41.


Decide in level 18 among pending : [10, 12, 30, 31, 22, 21, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]


New level: 19
 pending : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 21, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]


Solution : [0, 14, 1, 6, 13, 29, 7, 22] has cost 75.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]

After backtrack at level 19
 pending : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

Essensial at level 19 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 21]


Solution : [0, 14, 1, 6, 13, 29, 7, 21] has cost 75.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 7, 21]

After backtrack at level 19
 pending : [10, 12, 21, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 18
 pending : [10, 12, 21, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 18
 pending : [10, 12, 21, 30, 31, 33, 22]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 17
 pending : [10, 12, 21, 30, 31, 33, 22]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 17
 pending : [10, 12, 21, 30, 31, 33, 22, 19]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 16
 pending : [10, 12, 21, 30, 31, 33, 22, 19]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 16
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5]
 solution : [0, 14, 1, 6, 13, 29, 7]


Before backtrack at level 13
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5]
 solution : [0, 14, 1, 6, 13, 29, 7]

After backtrack at level 13
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 13, 29, 7]


Invert decision for 7 at level 12


New level: 13
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 13, 29]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 13, 29]

Essensial at level 13 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : {25, 28}

After reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 13 among pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 8, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 8 with phase True at level 13

After decision at level 13
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 8]


New level: 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 8]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 14 : {33, 4, 5, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 8]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 8]


Solution : [0, 14, 1, 6, 13, 29, 3, 8] has cost 47.


Before backtrack at level 14
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 3, 8]

After backtrack at level 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 8]


Invert decision for 8 at level 13


New level: 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 14 among pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 5 with phase True at level 14

After decision at level 14
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 5]


New level: 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 5]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 15 : {33, 4, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 5]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 5]


Solution : [0, 14, 1, 6, 13, 29, 3, 5] has cost 47.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 3, 5]

After backtrack at level 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3, 5]


Invert decision for 5 at level 14


New level: 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 15 among pending : [10, 12, 21, 30, 31, 33, 22, 19, 20, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 4]


New level: 16
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 4]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 16 : {33, 10, 12, 19, 20, 21, 22, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 29, 3, 4]


Solution : [0, 14, 1, 6, 13, 29, 3, 4] has cost 54.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 13, 29, 3, 4]

After backtrack at level 16
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 16 among pending : [10, 12, 21, 30, 31, 33, 22, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]


New level: 17
 pending : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 17 : {33, 19, 20, 22, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]


Solution : [0, 14, 1, 6, 13, 29, 3, 21] has cost 75.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]

After backtrack at level 17
 pending : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 33, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 17 among pending : [10, 12, 30, 31, 33, 22, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]


New level: 18
 pending : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 18 : {33, 19, 20, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]


Solution : [0, 14, 1, 6, 13, 29, 3, 22] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]

After backtrack at level 18
 pending : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 33, 19, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Solution : [0, 14, 1, 6, 13, 29, 3] has cost 41.


Decide in level 18 among pending : [10, 12, 30, 31, 33, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Decide 19 with phase True at level 18

After decision at level 18
 pending : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]


New level: 19
 pending : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 20, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]


Solution : [0, 14, 1, 6, 13, 29, 3, 19] has cost 75.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]

After backtrack at level 19
 pending : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3, 19]


Invert decision for 19 at level 18


New level: 19
 pending : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 33, 20]
 solution : [0, 14, 1, 6, 13, 29, 3]

Essensial at level 19 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

Covered at level 19 : {33, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, -1), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 20]


Solution : [0, 14, 1, 6, 13, 29, 3, 20] has cost 75.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 29, 3, 20]

After backtrack at level 19
 pending : [10, 12, 20, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 18
 pending : [10, 12, 20, 30, 31, 33]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 18
 pending : [10, 12, 20, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 17
 pending : [10, 12, 20, 30, 31, 33, 19]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 33, 19, 22]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 16
 pending : [10, 12, 20, 30, 31, 33, 19, 22]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 15
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 14
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 29, 3]


Before backtrack at level 13
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 29, 3]

After backtrack at level 13
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8]
 solution : [0, 14, 1, 6, 13, 29]


Before backtrack at level 12
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8]
 solution : [0, 14, 1, 6, 13, 29]

After backtrack at level 12
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13, 29]


Invert decision for 29 at level 11


New level: 12
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13]


Solution : [0, 14, 1, 6, 13] has cost 25.


Decide in level 12 among pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 3, 25, 28, 8, 23, 32, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 3 with phase True at level 12

After decision at level 12
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13, 3]


New level: 13
 pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 25, 28, 8, 23, 32, 7]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 32), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 13 : {25, 28, 7}

After reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 13 among pending : [10, 12, 20, 30, 31, 33, 19, 22, 21, 4, 5, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 13

After decision at level 13
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


New level: 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 14 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 4, 5, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 4]


New level: 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 4]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 5, 8, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 4]


Solution : [0, 14, 1, 6, 13, 3, 33, 4] has cost 54.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 33, 4]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 15 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 5, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 5]


New level: 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 5]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 8, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 5]


Solution : [0, 14, 1, 6, 13, 3, 33, 5] has cost 47.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 33, 5]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 16 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 8, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 8]


New level: 17
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 8]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 33, 8]


Solution : [0, 14, 1, 6, 13, 3, 33, 8] has cost 47.


Before backtrack at level 17
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 33, 8]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 17 among pending : [10, 12, 20, 30, 31, 19, 22, 21, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 20 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]


New level: 18
 pending : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 19, 21, 22, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]


Solution : [0, 14, 1, 6, 13, 3, 33, 20] has cost 75.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]

After backtrack at level 18
 pending : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 20]


Invert decision for 20 at level 17


New level: 18
 pending : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 19, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 18 among pending : [10, 12, 30, 31, 19, 22, 21, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 19 with phase True at level 18

After decision at level 18
 pending : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]


New level: 19
 pending : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 21, 22, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]


Solution : [0, 14, 1, 6, 13, 3, 33, 19] has cost 75.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]

After backtrack at level 19
 pending : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 19]


Invert decision for 19 at level 18


New level: 19
 pending : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 22, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Solution : [0, 14, 1, 6, 13, 3, 33] has cost 41.


Decide in level 19 among pending : [10, 12, 30, 31, 22, 21, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Decide 22 with phase True at level 19

After decision at level 19
 pending : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]


New level: 20
 pending : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 21, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]


Solution : [0, 14, 1, 6, 13, 3, 33, 22] has cost 75.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]

After backtrack at level 20
 pending : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33, 22]


Invert decision for 22 at level 19


New level: 20
 pending : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before reduction : 
 pending  : [10, 12, 30, 31, 21, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

Essensial at level 20 : {21}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 21]


Solution : [0, 14, 1, 6, 13, 3, 33, 21] has cost 75.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 33, 21]

After backtrack at level 20
 pending : [10, 12, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 19
 pending : [10, 12, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 19
 pending : [10, 12, 21, 30, 31, 23, 32, 22]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 18
 pending : [10, 12, 21, 30, 31, 23, 32, 22]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 18
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 17
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 17
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5]
 solution : [0, 14, 1, 6, 13, 3, 33]


Before backtrack at level 14
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5]
 solution : [0, 14, 1, 6, 13, 3, 33]

After backtrack at level 14
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 3, 33]


Invert decision for 33 at level 13


New level: 14
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 14 among pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 8, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 8 with phase True at level 14

After decision at level 14
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3, 8]


New level: 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3, 8]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 4, 5, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 8]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 8]


Solution : [0, 14, 1, 6, 13, 3, 8] has cost 37.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 8]

After backtrack at level 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3, 8]


Invert decision for 8 at level 14


New level: 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 15 among pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 5, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3, 5]


New level: 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3, 5]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 4, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 5]


Solution : [0, 14, 1, 6, 13, 3, 5] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 5]

After backtrack at level 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 16 among pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 4 with phase True at level 16

After decision at level 16
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 4]


New level: 17
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 4]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 4]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 3, 4]


Solution : [0, 14, 1, 6, 13, 3, 4] has cost 44.


Before backtrack at level 17
 pending : []
 solution : [0, 14, 1, 6, 13, 3, 4]

After backtrack at level 17
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 4]


Invert decision for 4 at level 16


New level: 17
 pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 17 among pending : [10, 12, 21, 30, 31, 23, 32, 22, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 21 with phase True at level 17

After decision at level 17
 pending : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 21]


New level: 18
 pending : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 21]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 19, 20, 22, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 21]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 21]


Solution : [0, 14, 1, 6, 13, 3, 21] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 21]

After backtrack at level 18
 pending : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 21]


Invert decision for 21 at level 17


New level: 18
 pending : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 22, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 18 among pending : [10, 12, 30, 31, 23, 32, 22, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 22]


New level: 19
 pending : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 22]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 19, 20, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 22]


Solution : [0, 14, 1, 6, 13, 3, 22] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 22]

After backtrack at level 19
 pending : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 19, 20]
 solution : [0, 14, 1, 6, 13, 3]


Solution : [0, 14, 1, 6, 13, 3] has cost 31.


Decide in level 19 among pending : [10, 12, 30, 31, 23, 32, 19, 20]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 19 with phase True at level 19

After decision at level 19
 pending : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3, 19]


New level: 20
 pending : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 20, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 19]


Solution : [0, 14, 1, 6, 13, 3, 19] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 19]

After backtrack at level 20
 pending : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3, 19]


Invert decision for 19 at level 19


New level: 20
 pending : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 3]

Essensial at level 20 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 20]


Solution : [0, 14, 1, 6, 13, 3, 20] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 3, 20]

After backtrack at level 20
 pending : [10, 12, 20, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 19
 pending : [10, 12, 20, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 19
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 3]


Before backtrack at level 13
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 3]

After backtrack at level 13
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 33]
 solution : [0, 14, 1, 6, 13, 3]


Invert decision for 3 at level 12


New level: 13
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 33]
 solution : [0, 14, 1, 6, 13]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 25, 28, 7, 33]
 solution : [0, 14, 1, 6, 13]

Essensial at level 13 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 13 : {25, 28}

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 33]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 13 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 13

After decision at level 13
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]


New level: 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]


Solution : [0, 14, 1, 6, 13, 7, 33] has cost 41.


Before backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 33]


Invert decision for 33 at level 13


New level: 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 14 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 4, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 4]


New level: 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 4]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 15 : {32, 5, 8, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 4]


Solution : [0, 14, 1, 6, 13, 7, 4] has cost 44.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 13, 7, 4]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 15 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 5, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7, 5]


New level: 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7, 5]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 8, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 5]


Solution : [0, 14, 1, 6, 13, 7, 5] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 13, 7, 5]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 16 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7, 8]


New level: 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7, 8]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 13, 7, 8]


Solution : [0, 14, 1, 6, 13, 7, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 14, 1, 6, 13, 7, 8]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 17 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 22, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7, 22]


New level: 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7, 22]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 19, 20, 21, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 22]


Solution : [0, 14, 1, 6, 13, 7, 22] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 22]

After backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19, 21]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 18 among pending : [10, 12, 20, 30, 31, 23, 32, 19, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 21 with phase True at level 18

After decision at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 21]


New level: 19
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 21]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 19, 20, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 21]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 21]


Solution : [0, 14, 1, 6, 13, 7, 21] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 21]

After backtrack at level 19
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 21]


Invert decision for 21 at level 18


New level: 19
 pending : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7]


Solution : [0, 14, 1, 6, 13, 7] has cost 31.


Decide in level 19 among pending : [10, 12, 20, 30, 31, 23, 32, 19]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 20 with phase True at level 19

After decision at level 19
 pending : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 20]


New level: 20
 pending : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 20]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 19, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 20]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 20]


Solution : [0, 14, 1, 6, 13, 7, 20] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 20]

After backtrack at level 20
 pending : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7, 20]


Invert decision for 20 at level 19


New level: 20
 pending : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7]


Before reduction : 
 pending  : [10, 12, 30, 31, 23, 32, 19]
 solution : [0, 14, 1, 6, 13, 7]

Essensial at level 20 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 23, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 19]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 19]


Solution : [0, 14, 1, 6, 13, 7, 19] has cost 65.


Before backtrack at level 20
 pending : [10, 12]
 solution : [0, 14, 1, 6, 13, 7, 19]

After backtrack at level 20
 pending : [10, 12, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 19
 pending : [10, 12, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 19
 pending : [10, 12, 19, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 18
 pending : [10, 12, 19, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 18
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 17
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 17
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 16
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 16
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 15
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 15
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 14
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 14
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 7]


Before backtrack at level 13
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4]
 solution : [0, 14, 1, 6, 13, 7]

After backtrack at level 13
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 12
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 12
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 11
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 11
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 10
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 10
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 9
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 9
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 8
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 8
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 7
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 7
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 6
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 6
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27]
 solution : [0, 14, 1, 6, 13]


Before backtrack at level 5
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27]
 solution : [0, 14, 1, 6, 13]

After backtrack at level 5
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27, 15, 11, 17]
 solution : [0, 14, 1, 6, 13]


Invert decision for 13 at level 4


New level: 5
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27, 15, 11, 17]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27, 15, 11, 17]
 solution : [0, 14, 1, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27, 15, 11, 17]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 5 among pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 27, 15, 11, 17]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 27 with phase True at level 5

After decision at level 5
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11, 17]
 solution : [0, 14, 1, 6, 27]


New level: 6
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11, 17]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11, 17]
 solution : [0, 14, 1, 6, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, 192), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, 0), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 6 : {17}

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, 0), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 6 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Solution : [0, 14, 1, 6, 27] has cost 36.


Decide in level 6 among pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Decide 8 with phase True at level 6

After decision at level 6
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 8]


New level: 7
 pending : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 8]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 23, 32, 20, 21, 22, 5, 4, 7, 25, 28, 33, 3, 29, 2, 24, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, 0), (33, 0)]

Covered at level 7 : {32, 33, 4, 5, 10, 11, 12, 15, 16, 18, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 27, 8]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 27, 8]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, 0), (6, -1), (7, 128), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 27, 8]


Solution : [0, 14, 1, 6, 27, 8] has cost 42.


Before backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24]
 solution : [0, 14, 1, 6, 27, 8]

After backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 8]


Invert decision for 8 at level 6


New level: 7
 pending : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Solution : [0, 14, 1, 6, 27] has cost 36.


Decide in level 7 among pending : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Decide 7 with phase True at level 7

After decision at level 7
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]


New level: 8
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 3, 29, 2, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 8 : {25, 2, 3, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]


Solution : [0, 14, 1, 6, 27, 7] has cost 42.


Before backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 7]

After backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 7]


Invert decision for 7 at level 7


New level: 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27]


Solution : [0, 14, 1, 6, 27] has cost 36.


Decide in level 8 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 5, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Decide 5 with phase True at level 8

After decision at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]


New level: 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, 0), (33, 0)]

Covered at level 9 : {32, 33, 4, 10, 11, 12, 15, 16, 18, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, 0), (17, -1), (18, 0), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]


Solution : [0, 14, 1, 6, 27, 5] has cost 42.


Before backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 27, 5]

After backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 5]


Invert decision for 5 at level 8


New level: 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27]


Solution : [0, 14, 1, 6, 27] has cost 36.


Decide in level 9 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 3, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Decide 3 with phase True at level 9

After decision at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]


New level: 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 25, 28, 2, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 85), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 10 : {25, 2, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]


Solution : [0, 14, 1, 6, 27, 3] has cost 42.


Before backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 3]

After backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 2]
 solution : [0, 14, 1, 6, 27, 3]


Invert decision for 3 at level 9


New level: 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 2]
 solution : [0, 14, 1, 6, 27]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 25, 28, 2]
 solution : [0, 14, 1, 6, 27]

Essensial at level 10 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 10 : {25, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 2]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 2]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, 0), (26, -1), (27, -1), (28, 0), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 2]


Solution : [0, 14, 1, 6, 27, 2] has cost 49.


Before backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11]
 solution : [0, 14, 1, 6, 27, 2]

After backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28]
 solution : [0, 14, 1, 6, 27]


Before backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28]
 solution : [0, 14, 1, 6, 27]

After backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3]
 solution : [0, 14, 1, 6, 27]


Before backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3]
 solution : [0, 14, 1, 6, 27]

After backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5]
 solution : [0, 14, 1, 6, 27]


Before backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5]
 solution : [0, 14, 1, 6, 27]

After backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7]
 solution : [0, 14, 1, 6, 27]


Before backtrack at level 6
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7]
 solution : [0, 14, 1, 6, 27]

After backtrack at level 6
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 17, 8]
 solution : [0, 14, 1, 6, 27]


Invert decision for 27 at level 5


New level: 6
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 17, 8]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 17, 8]
 solution : [0, 14, 1, 6]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 19), (20, 19), (21, 19), (22, 19), (23, 32), (24, 1), (25, -1), (26, -1), (27, -1), (28, -1), (29, 1), (30, 6), (31, 6), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 17, 8]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 6 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 17, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 17 with phase True at level 6

After decision at level 6
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]


New level: 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, 192), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 101), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]


Solution : [0, 14, 1, 6, 17] has cost 39.


Before backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]

After backtrack at level 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 17]


Invert decision for 17 at level 6


New level: 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 36), (17, -1), (18, 28), (19, 85), (20, 101), (21, 85), (22, 85), (23, 32), (24, 32), (25, 8), (26, -1), (27, -1), (28, 8), (29, 32), (30, 18), (31, 18), (32, 32), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 7 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 16, 15, 11, 2, 25, 28, 3, 5, 7, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 16 with phase True at level 7

After decision at level 7
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]


New level: 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 33, 18, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, 168), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, 0), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 4), (33, 0)]

Covered at level 8 : {33, 18}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, 0), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 4), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]


Solution : [0, 14, 1, 6, 16] has cost 59.


Before backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 16]

After backtrack at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33, 18]
 solution : [0, 14, 1, 6, 16]


Invert decision for 16 at level 7


New level: 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33, 18]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33, 18]
 solution : [0, 14, 1, 6]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 16), (31, 16), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33, 18]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 8 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33, 18]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 18]


New level: 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 18]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, 144), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 4), (33, 0)]

Covered at level 9 : {33}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 18]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 4), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 4), (33, -1)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 18]


Solution : [0, 14, 1, 6, 18] has cost 54.


Before backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8]
 solution : [0, 14, 1, 6, 18]

After backtrack at level 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 29), (20, 29), (21, 29), (22, 29), (23, 4), (24, 32), (25, 32), (26, -1), (27, -1), (28, 32), (29, 32), (30, 16), (31, 16), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 9 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 9 among pending : [19, 30, 31, 20, 21, 22, 29, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 29 with phase True at level 9

After decision at level 9
 pending : [19, 30, 31, 20, 21, 22, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]


New level: 10
 pending : [19, 30, 31, 20, 21, 22, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 24, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, 128), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, 0), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 10 : {24}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, 0), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29]


Solution : [0, 14, 1, 6, 29] has cost 30.


Decide in level 10 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 4, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 4 with phase True at level 10

After decision at level 10
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29, 4]


New level: 11
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29, 4]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 2, 25, 28, 3, 5, 7, 8, 33]
 solution : [0, 14, 1, 6, 29, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 5, 8, 10, 11, 12, 15, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 4]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 4]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 4]


Solution : [0, 14, 1, 6, 29, 4] has cost 43.


Before backtrack at level 11
 pending : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 4]

After backtrack at level 11
 pending : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 4]


Invert decision for 4 at level 10


New level: 11
 pending : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29]


Solution : [0, 14, 1, 6, 29] has cost 30.


Decide in level 11 among pending : [19, 30, 31, 20, 21, 22, 2, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 2 with phase True at level 11

After decision at level 11
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]


New level: 12
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 3, 7, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 12 : {25, 3, 28, 7}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, 128), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]


Solution : [0, 14, 1, 6, 29, 2] has cost 43.


Before backtrack at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 2]

After backtrack at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 2]


Invert decision for 2 at level 11


New level: 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29]


Solution : [0, 14, 1, 6, 29] has cost 30.


Decide in level 12 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 11, 5, 8, 33, 25, 28, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]


New level: 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 15, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 0), (33, 2)]

Covered at level 13 : {32, 15, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 3, 7]
 solution : [0, 14, 1, 6, 29, 11]


Solution : [0, 14, 1, 6, 29, 11] has cost 35.


Decide in level 13 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 3, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11, 3]


New level: 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 32), (6, -1), (7, 128), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : {25, 28, 7}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, 0), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 3]


Solution : [0, 14, 1, 6, 29, 11, 3] has cost 41.


Before backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 3]

After backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 25, 28, 7]
 solution : [0, 14, 1, 6, 29, 11]

Essensial at level 14 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : {25, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 7]


Solution : [0, 14, 1, 6, 29, 11, 7] has cost 41.


Before backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33]
 solution : [0, 14, 1, 6, 29, 11, 7]

After backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28]
 solution : [0, 14, 1, 6, 29, 11]


Before backtrack at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28]
 solution : [0, 14, 1, 6, 29, 11]

After backtrack at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 8), (11, -1), (12, 8), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29]


Solution : [0, 14, 1, 6, 29] has cost 30.


Decide in level 13 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 5, 8, 33, 7, 25, 28, 23, 32, 15, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 5 with phase True at level 13

After decision at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29, 5]


New level: 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 7, 25, 28, 23, 32, 15, 3]
 solution : [0, 14, 1, 6, 29, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

Covered at level 14 : {32, 33, 8, 10, 12, 15, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5]


Solution : [0, 14, 1, 6, 29, 5] has cost 36.


Decide in level 14 among pending : [19, 30, 31, 20, 21, 22, 7, 25, 28, 3]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Decide 7 with phase True at level 14

After decision at level 14
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5, 7]


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {3, 19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 7]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 7]


Solution : [0, 14, 1, 6, 29, 5, 7] has cost 42.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 29, 5, 7]

After backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5, 7]


Invert decision for 7 at level 14


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 3]
 solution : [0, 14, 1, 6, 29, 5]

Essensial at level 15 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

Covered at level 15 : {19, 20, 21, 22, 25, 28, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 3]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, -1), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 0), (31, 0), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 5, 3]


Solution : [0, 14, 1, 6, 29, 5, 3] has cost 42.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 29, 5, 3]

After backtrack at level 15
 pending : [3, 19, 30, 31, 20, 21, 22, 25, 28]
 solution : [0, 14, 1, 6, 29, 5]


Before backtrack at level 14
 pending : [3, 19, 30, 31, 20, 21, 22, 25, 28]
 solution : [0, 14, 1, 6, 29, 5]

After backtrack at level 14
 pending : [3, 19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29, 5]


Invert decision for 5 at level 13


New level: 14
 pending : [3, 19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [3, 19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [3, 19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29]


Solution : [0, 14, 1, 6, 29] has cost 30.


Decide in level 14 among pending : [3, 19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29, 3]


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 10, 12, 8, 33, 23, 32, 15, 7]
 solution : [0, 14, 1, 6, 29, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 96), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 15 : {25, 28, 7}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, 0), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3]


Solution : [0, 14, 1, 6, 29, 3] has cost 36.


Decide in level 15 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 8, 33, 23, 32, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3, 8]


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3, 8]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 10, 12, 15, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 3, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 3, 8]


Solution : [0, 14, 1, 6, 29, 3, 8] has cost 42.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 29, 3, 8]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 15]
 solution : [0, 14, 1, 6, 29, 3]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 16 : {32, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 3, 15]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 3, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 3, 15]


Solution : [0, 14, 1, 6, 29, 3, 15] has cost 38.


Before backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 3, 15]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 3]


Before backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 3]

After backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 7, 8]
 solution : [0, 14, 1, 6, 29, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 7, 8]
 solution : [0, 14, 1, 6, 29]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 7, 8]
 solution : [0, 14, 1, 6, 29]

Essensial at level 15 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 15 : {25, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8]
 solution : [0, 14, 1, 6, 29, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8]
 solution : [0, 14, 1, 6, 29, 7]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8]
 solution : [0, 14, 1, 6, 29, 7]


Solution : [0, 14, 1, 6, 29, 7] has cost 36.


Decide in level 15 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7, 8]


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7, 8]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 10, 12, 15, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 7, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 29, 7, 8]


Solution : [0, 14, 1, 6, 29, 7, 8] has cost 42.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 29, 7, 8]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7]

Essensial at level 16 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

Covered at level 16 : {32, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 7, 15]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 7, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

Covered at level 16 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 7, 15]


Solution : [0, 14, 1, 6, 29, 7, 15] has cost 38.


Before backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33]
 solution : [0, 14, 1, 6, 29, 7, 15]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7]


Before backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32]
 solution : [0, 14, 1, 6, 29, 7]

After backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8]
 solution : [0, 14, 1, 6, 29]


Before backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8]
 solution : [0, 14, 1, 6, 29]

After backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3]
 solution : [0, 14, 1, 6, 29]


Before backtrack at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3]
 solution : [0, 14, 1, 6, 29]

After backtrack at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5]
 solution : [0, 14, 1, 6, 29]


Before backtrack at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5]
 solution : [0, 14, 1, 6, 29]

After backtrack at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11]
 solution : [0, 14, 1, 6, 29]


Before backtrack at level 11
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11]
 solution : [0, 14, 1, 6, 29]

After backtrack at level 11
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2]
 solution : [0, 14, 1, 6, 29]


Before backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2]
 solution : [0, 14, 1, 6, 29]

After backtrack at level 10
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6, 29]


Invert decision for 29 at level 9


New level: 10
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 10 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 10 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 7, 25, 28, 8, 3, 5, 11, 2, 24, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 7 with phase True at level 10

After decision at level 10
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6, 7]


New level: 11
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 25, 28, 8, 3, 5, 11, 2, 24, 4]
 solution : [0, 14, 1, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, 128), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 11 : {25, 2, 3, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Solution : [0, 14, 1, 6, 7] has cost 26.


Decide in level 11 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 8, 5, 11, 24, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 8 with phase True at level 11

After decision at level 11
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 8]


New level: 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 8]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 12 : {32, 33, 4, 5, 10, 11, 12, 15, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 8]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 12 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 8]


Solution : [0, 14, 1, 6, 7, 8] has cost 32.


Before backtrack at level 12
 pending : []
 solution : [0, 14, 1, 6, 7, 8]

After backtrack at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 8]


Invert decision for 8 at level 11


New level: 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Solution : [0, 14, 1, 6, 7] has cost 26.


Decide in level 12 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 5, 11, 24, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 5 with phase True at level 12

After decision at level 12
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 5]


New level: 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 4, 10, 11, 12, 15, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 5]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 5]


Solution : [0, 14, 1, 6, 7, 5] has cost 32.


Before backtrack at level 13
 pending : []
 solution : [0, 14, 1, 6, 7, 5]

After backtrack at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7, 5]


Invert decision for 5 at level 12


New level: 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]
 solution : [0, 14, 1, 6, 7]


Solution : [0, 14, 1, 6, 7] has cost 26.


Decide in level 13 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 11, 24, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 11 with phase True at level 13

After decision at level 13
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


New level: 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 15, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : {15}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


Solution : [0, 14, 1, 6, 7, 11] has cost 31.


Decide in level 14 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 33, 23, 32, 24, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 14

After decision at level 14
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]


Solution : [0, 14, 1, 6, 7, 11, 33] has cost 41.


Before backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]

After backtrack at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11, 33]


Invert decision for 33 at level 14


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]
 solution : [0, 14, 1, 6, 7, 11]


Solution : [0, 14, 1, 6, 7, 11] has cost 31.


Decide in level 15 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 4 with phase True at level 15

After decision at level 15
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 4]


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 4]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 10, 12, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 11, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 11, 4]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 11, 4]


Solution : [0, 14, 1, 6, 7, 11, 4] has cost 44.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 7, 11, 4]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 4]


Invert decision for 4 at level 15


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Solution : [0, 14, 1, 6, 7, 11] has cost 31.


Decide in level 16 among pending : [19, 30, 31, 20, 21, 22, 10, 12, 23, 32, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 21 with phase True at level 16

After decision at level 16
 pending : [19, 30, 31, 20, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 21]


New level: 17
 pending : [19, 30, 31, 20, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 21]


Before reduction : 
 pending  : [19, 30, 31, 20, 22, 10, 12, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 19, 20, 22, 23, 24, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 21]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 21]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 21]


Solution : [0, 14, 1, 6, 7, 11, 21] has cost 65.


Before backtrack at level 17
 pending : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 21]

After backtrack at level 17
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 21]


Invert decision for 21 at level 16


New level: 17
 pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 22, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 22, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Solution : [0, 14, 1, 6, 7, 11] has cost 31.


Decide in level 17 among pending : [10, 12, 19, 30, 31, 20, 22, 23, 32, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 22 with phase True at level 17

After decision at level 17
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 22]


New level: 18
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 22]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 19, 20, 23, 24, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 22]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 22]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 22]


Solution : [0, 14, 1, 6, 7, 11, 22] has cost 65.


Before backtrack at level 18
 pending : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 22]

After backtrack at level 18
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 22]


Invert decision for 22 at level 17


New level: 18
 pending : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [10, 12, 19, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Solution : [0, 14, 1, 6, 7, 11] has cost 31.


Decide in level 18 among pending : [10, 12, 19, 30, 31, 20, 23, 32, 24]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 19 with phase True at level 18

After decision at level 18
 pending : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 19]


New level: 19
 pending : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 19]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 20, 23, 24, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 19]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 19]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, 0), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 19]


Solution : [0, 14, 1, 6, 7, 11, 19] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 19]

After backtrack at level 19
 pending : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11, 19]


Invert decision for 19 at level 18


New level: 19
 pending : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Before reduction : 
 pending  : [10, 12, 30, 31, 20, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]

Essensial at level 19 : {20}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 23, 24, 30, 31}

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 20]


Before reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 20]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 20]


Solution : [0, 14, 1, 6, 7, 11, 20] has cost 65.


Before backtrack at level 19
 pending : [10, 12]
 solution : [0, 14, 1, 6, 7, 11, 20]

After backtrack at level 19
 pending : [10, 12, 20, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]


Before backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 11]

After backtrack at level 18
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19]
 solution : [0, 14, 1, 6, 7, 11]


Before backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19]
 solution : [0, 14, 1, 6, 7, 11]

After backtrack at level 17
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22]
 solution : [0, 14, 1, 6, 7, 11]


Before backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22]
 solution : [0, 14, 1, 6, 7, 11]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 11]


Before backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 11]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 7, 11]


Before backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4]
 solution : [0, 14, 1, 6, 7, 11]

After backtrack at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4, 15, 33]
 solution : [0, 14, 1, 6, 7, 11]


Invert decision for 11 at level 13


New level: 14
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4, 15, 33]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4, 15, 33]
 solution : [0, 14, 1, 6, 7]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4, 15, 33]
 solution : [0, 14, 1, 6, 7]


Solution : [0, 14, 1, 6, 7] has cost 26.


Decide in level 14 among pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 4, 15, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 4 with phase True at level 14

After decision at level 14
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7, 4]


New level: 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7, 4]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 128), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 15 : {32, 33, 10, 12, 15, 19, 20, 21, 22, 23, 24, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 4]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 7, 4]


Solution : [0, 14, 1, 6, 7, 4] has cost 39.


Before backtrack at level 15
 pending : []
 solution : [0, 14, 1, 6, 7, 4]

After backtrack at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7, 4]


Invert decision for 4 at level 14


New level: 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 15, 33]
 solution : [0, 14, 1, 6, 7]

Essensial at level 15 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 7, 15]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 7, 15]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 33]
 solution : [0, 14, 1, 6, 7, 15]


Solution : [0, 14, 1, 6, 7, 15] has cost 28.


Decide in level 15 among pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21, 33]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 15

After decision at level 15
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]


New level: 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]


Solution : [0, 14, 1, 6, 7, 15, 33] has cost 38.


Before backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]

After backtrack at level 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 33]


Invert decision for 33 at level 15


New level: 16
 pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15]


Before reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, 4), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15]


Solution : [0, 14, 1, 6, 7, 15] has cost 28.


Decide in level 16 among pending : [10, 12, 20, 30, 31, 23, 32, 24, 19, 22, 21]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 10 with phase True at level 16

After decision at level 16
 pending : [12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]


New level: 17
 pending : [12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]


Before reduction : 
 pending  : [12, 20, 30, 31, 23, 32, 24, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, 8), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 12, 23, 24, 30, 31}

After reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]


Before reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]


Solution : [0, 14, 1, 6, 7, 15, 10] has cost 37.


Before backtrack at level 17
 pending : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 10]

After backtrack at level 17
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 15, 10]


Invert decision for 10 at level 16


New level: 17
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 15]


Before reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 15]

Essensial at level 17 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 23, 24, 30, 31}

After reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 12]


Before reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 12]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, 0), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 12]


Solution : [0, 14, 1, 6, 7, 15, 12] has cost 37.


Before backtrack at level 17
 pending : [20, 19, 22, 21]
 solution : [0, 14, 1, 6, 7, 15, 12]

After backtrack at level 17
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 15]


Before backtrack at level 16
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24]
 solution : [0, 14, 1, 6, 7, 15]

After backtrack at level 16
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10]
 solution : [0, 14, 1, 6, 7, 15]


Before backtrack at level 15
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10]
 solution : [0, 14, 1, 6, 7, 15]

After backtrack at level 15
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33]
 solution : [0, 14, 1, 6, 7]


Before backtrack at level 14
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33]
 solution : [0, 14, 1, 6, 7]

After backtrack at level 14
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4]
 solution : [0, 14, 1, 6, 7]


Before backtrack at level 13
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4]
 solution : [0, 14, 1, 6, 7]

After backtrack at level 13
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11]
 solution : [0, 14, 1, 6, 7]


Before backtrack at level 12
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11]
 solution : [0, 14, 1, 6, 7]

After backtrack at level 12
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5]
 solution : [0, 14, 1, 6, 7]


Before backtrack at level 11
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5]
 solution : [0, 14, 1, 6, 7]

After backtrack at level 11
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 7]


Invert decision for 7 at level 10


New level: 11
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 11 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 11 among pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 24, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 24 with phase True at level 11

After decision at level 11
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24]


New level: 12
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24]


Before reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, 128), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24]


Solution : [0, 14, 1, 6, 24] has cost 30.


Decide in level 12 among pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 4, 11, 5, 25, 28, 3, 2, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 4 with phase True at level 12

After decision at level 12
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24, 4]


New level: 13
 pending : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24, 4]


Before reduction : 
 pending  : [20, 19, 22, 21, 12, 30, 31, 23, 32, 10, 15, 33, 11, 5, 25, 28, 3, 2, 8]
 solution : [0, 14, 1, 6, 24, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

Covered at level 13 : {32, 33, 5, 8, 10, 11, 12, 15, 23}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 24, 4]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 24, 4]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, 0), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, 0), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 24, 4]


Solution : [0, 14, 1, 6, 24, 4] has cost 43.


Before backtrack at level 13
 pending : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2]
 solution : [0, 14, 1, 6, 24, 4]

After backtrack at level 13
 pending : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 4]


Invert decision for 4 at level 12


New level: 13
 pending : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 10), (20, 10), (21, 10), (22, 10), (23, -1), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 4), (31, 4), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24]


Solution : [0, 14, 1, 6, 24] has cost 30.


Decide in level 13 among pending : [20, 19, 22, 21, 30, 31, 25, 28, 3, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

Decide 3 with phase True at level 13

After decision at level 13
 pending : [20, 19, 22, 21, 30, 31, 25, 28, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]


New level: 14
 pending : [20, 19, 22, 21, 30, 31, 25, 28, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 25, 28, 2, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 96), (20, 80), (21, 80), (22, 80), (23, 8), (24, -1), (25, 8), (26, -1), (27, -1), (28, 8), (29, -1), (30, 18), (31, 18), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 14 : {25, 2, 28}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]


Solution : [0, 14, 1, 6, 24, 3] has cost 36.


Before backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 3]

After backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 25, 28, 2]
 solution : [0, 14, 1, 6, 24, 3]


Invert decision for 3 at level 13


New level: 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 25, 28, 2]
 solution : [0, 14, 1, 6, 24]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 25, 28, 2]
 solution : [0, 14, 1, 6, 24]

Essensial at level 14 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 14 : {25, 28}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 2]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 2]


Solution : [0, 14, 1, 6, 24, 2] has cost 43.


Before backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8]
 solution : [0, 14, 1, 6, 24, 2]

After backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28]
 solution : [0, 14, 1, 6, 24]


Before backtrack at level 13
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28]
 solution : [0, 14, 1, 6, 24]

After backtrack at level 13
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3]
 solution : [0, 14, 1, 6, 24]


Before backtrack at level 12
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3]
 solution : [0, 14, 1, 6, 24]

After backtrack at level 12
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 24]


Invert decision for 24 at level 11


New level: 12
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6]

Essensial at level 12 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 18), (20, 18), (21, 18), (22, 18), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 4), (31, 4), (32, 8), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 12 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 12 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 11, 5, 8, 2, 25, 28, 3, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 11 with phase True at level 12

After decision at level 12
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]


New level: 13
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 15, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, 128), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 13 : {15}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11]


Solution : [0, 14, 1, 6, 11] has cost 25.


Decide in level 13 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 2, 25, 28, 3, 4]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

Decide 2 with phase True at level 13

After decision at level 13
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11, 2]


New level: 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11, 2]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 25, 28, 3, 4]
 solution : [0, 14, 1, 6, 11, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 8), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : {25, 3, 28}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 2]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 2]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 2]


Solution : [0, 14, 1, 6, 11, 2] has cost 38.


Before backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 2]

After backtrack at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 11, 2]


Invert decision for 2 at level 13


New level: 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 11]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4, 25, 28, 3]
 solution : [0, 14, 1, 6, 11]

Essensial at level 14 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : {25, 28}

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 14 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 33, 5, 8, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 14

After decision at level 14
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]


New level: 15
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]


Solution : [0, 14, 1, 6, 11, 3, 33] has cost 41.


Before backtrack at level 15
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]

After backtrack at level 15
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 33]


Invert decision for 33 at level 14


New level: 15
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 15 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 15 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 5, 8, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 5 with phase True at level 15

After decision at level 15
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 5]


New level: 16
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 5]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, 32), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 16 : {32, 4, 8, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 5]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 5]


Solution : [0, 14, 1, 6, 11, 3, 5] has cost 37.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 11, 3, 5]

After backtrack at level 16
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3, 5]


Invert decision for 5 at level 15


New level: 16
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 16 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 8, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 8 with phase True at level 16

After decision at level 16
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3, 8]


New level: 17
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3, 8]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, 32), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 17 : {32, 4, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 8]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 8]


Solution : [0, 14, 1, 6, 11, 3, 8] has cost 37.


Before backtrack at level 17
 pending : []
 solution : [0, 14, 1, 6, 11, 3, 8]

After backtrack at level 17
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3, 8]


Invert decision for 8 at level 16


New level: 17
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 17 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 4 with phase True at level 17

After decision at level 17
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 4]


New level: 18
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 4]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 32), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 18 : {32, 10, 12, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 4]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 11, 3, 4]


Solution : [0, 14, 1, 6, 11, 3, 4] has cost 44.


Before backtrack at level 18
 pending : []
 solution : [0, 14, 1, 6, 11, 3, 4]

After backtrack at level 18
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 4]


Invert decision for 4 at level 17


New level: 18
 pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 18 among pending : [20, 19, 22, 21, 30, 31, 12, 23, 32, 10]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 22 with phase True at level 18

After decision at level 18
 pending : [20, 19, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]


New level: 19
 pending : [20, 19, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]


Before reduction : 
 pending  : [20, 19, 21, 30, 31, 12, 23, 32, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 19, 20, 21, 23, 30, 31}

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]


Solution : [0, 14, 1, 6, 11, 3, 22] has cost 65.


Before backtrack at level 19
 pending : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 22]

After backtrack at level 19
 pending : [12, 10, 20, 19, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 22]


Invert decision for 22 at level 18


New level: 19
 pending : [12, 10, 20, 19, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [12, 10, 20, 19, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [12, 10, 20, 19, 21, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 19 among pending : [12, 10, 20, 19, 21, 30, 31, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 21 with phase True at level 19

After decision at level 19
 pending : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 21]


New level: 20
 pending : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 21]


Before reduction : 
 pending  : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 20 : {32, 19, 20, 23, 30, 31}

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 21]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 21]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 21]


Solution : [0, 14, 1, 6, 11, 3, 21] has cost 65.


Before backtrack at level 20
 pending : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 21]

After backtrack at level 20
 pending : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 21]


Invert decision for 21 at level 19


New level: 20
 pending : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 20 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 20 : set()

After reduction : 
 pending  : [12, 10, 20, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Solution : [0, 14, 1, 6, 11, 3] has cost 31.


Decide in level 20 among pending : [12, 10, 20, 19, 30, 31, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 20 with phase True at level 20

After decision at level 20
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 20]


New level: 21
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 20]


Before reduction : 
 pending  : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 20]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 16), (11, -1), (12, 16), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, -1), (22, -1), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 21 : {32, 19, 23, 30, 31}

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 20]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 20]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 0), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 20]


Solution : [0, 14, 1, 6, 11, 3, 20] has cost 65.


Before backtrack at level 21
 pending : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 20]

After backtrack at level 21
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3, 20]


Invert decision for 20 at level 20


New level: 21
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Before reduction : 
 pending  : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]

Essensial at level 21 : {19}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 21 : {32, 23, 30, 31}

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 19]


Before reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 19]

Essensial at level 21 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 21 : set()

After reduction : 
 pending  : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 19]


Solution : [0, 14, 1, 6, 11, 3, 19] has cost 65.


Before backtrack at level 21
 pending : [12, 10]
 solution : [0, 14, 1, 6, 11, 3, 19]

After backtrack at level 21
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 20
 pending : [12, 10, 19, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 20
 pending : [12, 10, 19, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 19
 pending : [12, 10, 19, 30, 31, 23, 32, 20]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 19
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 18
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 18
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 17
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 17
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 16
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 16
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 15
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 15
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5]
 solution : [0, 14, 1, 6, 11, 3]


Before backtrack at level 14
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5]
 solution : [0, 14, 1, 6, 11, 3]

After backtrack at level 14
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33]
 solution : [0, 14, 1, 6, 11]


Before backtrack at level 13
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33]
 solution : [0, 14, 1, 6, 11]

After backtrack at level 13
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6, 11]


Invert decision for 11 at level 12


New level: 13
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6]

Essensial at level 13 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 1), (11, -1), (12, 1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 13 : set()

After reduction : 
 pending  : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 13 among pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 4, 8, 5, 3, 25, 28, 33, 15, 2]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 4 with phase True at level 13

After decision at level 13
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6, 4]


New level: 14
 pending : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6, 4]


Before reduction : 
 pending  : [12, 10, 19, 30, 31, 23, 32, 20, 21, 22, 8, 5, 3, 25, 28, 33, 15, 2]
 solution : [0, 14, 1, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, 128), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 26), (20, 26), (21, 25), (22, 25), (23, 0), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 16), (31, 16), (32, 0), (33, 4)]

Covered at level 14 : {32, 5, 8, 10, 12, 15, 23}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2]
 solution : [0, 14, 1, 6, 4]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2]
 solution : [0, 14, 1, 6, 4]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 0), (6, -1), (7, -1), (8, 0), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 26), (20, 26), (21, 25), (22, 25), (23, 0), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 16), (31, 16), (32, 0), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 26), (20, 26), (21, 25), (22, 25), (23, -1), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 16), (31, 16), (32, -1), (33, 4)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2]
 solution : [0, 14, 1, 6, 4]


Solution : [0, 14, 1, 6, 4] has cost 33.


Before backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2]
 solution : [0, 14, 1, 6, 4]

After backtrack at level 14
 pending : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 4]


Invert decision for 4 at level 13


New level: 14
 pending : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6]

Essensial at level 14 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 26), (20, 26), (21, 25), (22, 25), (23, -1), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 16), (31, 16), (32, -1), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Covered at level 14 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6]


Solution : [0, 14, 1, 6] has cost 20.


Decide in level 14 among pending : [19, 30, 31, 20, 21, 22, 3, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]

Coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

Decide 3 with phase True at level 14

After decision at level 14
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]


New level: 15
 pending : [19, 30, 31, 20, 21, 22, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 25, 28, 33, 2, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 128), (3, 128), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 105), (20, 105), (21, 113), (22, 113), (23, 32), (24, -1), (25, 32), (26, -1), (27, -1), (28, 32), (29, -1), (30, 66), (31, 66), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 15 : {25, 2, 28}

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 8, 5, 15]
 solution : [0, 14, 1, 6, 3]


Solution : [0, 14, 1, 6, 3] has cost 26.


Decide in level 15 among pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 8, 5, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 8 with phase True at level 15

After decision at level 15
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3, 8]


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3, 8]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 16 : {32, 33, 5, 10, 12, 15, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 8]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 16 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 8]


Solution : [0, 14, 1, 6, 3, 8] has cost 32.


Before backtrack at level 16
 pending : []
 solution : [0, 14, 1, 6, 3, 8]

After backtrack at level 16
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3, 8]


Invert decision for 8 at level 15


New level: 16
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3]

Essensial at level 16 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 16 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]
 solution : [0, 14, 1, 6, 3]


Solution : [0, 14, 1, 6, 3] has cost 26.


Decide in level 16 among pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 5, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Decide 5 with phase True at level 16

After decision at level 16
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3, 5]


New level: 17
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3, 5]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 17 : {32, 33, 10, 12, 15, 19, 20, 21, 22, 23, 30, 31}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 5]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 5]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, 0), (13, -1), (14, -1), (15, 0), (16, -1), (17, -1), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 17 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 6, 3, 5]


Solution : [0, 14, 1, 6, 3, 5] has cost 32.


Before backtrack at level 17
 pending : []
 solution : [0, 14, 1, 6, 3, 5]

After backtrack at level 17
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3, 5]


Invert decision for 5 at level 16


New level: 17
 pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32, 15]
 solution : [0, 14, 1, 6, 3]

Essensial at level 17 : {15}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 17 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]

Essensial at level 17 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Covered at level 17 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Solution : [0, 14, 1, 6, 3, 15] has cost 28.


Decide in level 17 among pending : [19, 30, 31, 20, 21, 22, 33, 12, 10, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

Decide 33 with phase True at level 17

After decision at level 17
 pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]


New level: 18
 pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]


Solution : [0, 14, 1, 6, 3, 15, 33] has cost 38.


Before backtrack at level 18
 pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]

After backtrack at level 18
 pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 33]


Invert decision for 33 at level 17


New level: 18
 pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]

Essensial at level 18 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 19), (20, 19), (21, 19), (22, 19), (23, 4), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 8), (31, 8), (32, 4), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Covered at level 18 : set()

After reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Solution : [0, 14, 1, 6, 3, 15] has cost 28.


Decide in level 18 among pending : [19, 30, 31, 20, 21, 22, 12, 10, 23, 32]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

Decide 12 with phase True at level 18

After decision at level 18
 pending : [19, 30, 31, 20, 21, 22, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 12]


New level: 19
 pending : [19, 30, 31, 20, 21, 22, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 12]


Before reduction : 
 pending  : [19, 30, 31, 20, 21, 22, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 32), (11, -1), (12, 32), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 8), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 8), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 10, 23, 30, 31}

After reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 12]


Before reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 12]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 12]


Solution : [0, 14, 1, 6, 3, 15, 12] has cost 37.


Before backtrack at level 19
 pending : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 12]

After backtrack at level 19
 pending : [19, 20, 21, 22, 30, 31, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15, 12]


Invert decision for 12 at level 18


New level: 19
 pending : [19, 20, 21, 22, 30, 31, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 10, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]

Essensial at level 19 : {10}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

Covered at level 19 : {32, 23, 30, 31}

After reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 10]


Before reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 10]

Essensial at level 19 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, 0), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 0), (31, 0), (32, 0), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 19 : set()

After reduction : 
 pending  : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 10]


Solution : [0, 14, 1, 6, 3, 15, 10] has cost 37.


Before backtrack at level 19
 pending : [19, 20, 21, 22]
 solution : [0, 14, 1, 6, 3, 15, 10]

After backtrack at level 19
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]


Before backtrack at level 18
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32]
 solution : [0, 14, 1, 6, 3, 15]

After backtrack at level 18
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12]
 solution : [0, 14, 1, 6, 3, 15]


Before backtrack at level 17
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12]
 solution : [0, 14, 1, 6, 3, 15]

After backtrack at level 17
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33]
 solution : [0, 14, 1, 6, 3]


Before backtrack at level 16
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33]
 solution : [0, 14, 1, 6, 3]

After backtrack at level 16
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5]
 solution : [0, 14, 1, 6, 3]


Before backtrack at level 15
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5]
 solution : [0, 14, 1, 6, 3]

After backtrack at level 15
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6, 3]


Invert decision for 3 at level 14


New level: 15
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6]


Before reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 25, 28, 2, 8]
 solution : [0, 14, 1, 6]

Essensial at level 15 : {2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, 8), (20, 8), (21, 8), (22, 8), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 15 : {25, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8]
 solution : [0, 14, 1, 6, 2]


Before reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8]
 solution : [0, 14, 1, 6, 2]

Essensial at level 15 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, 0), (26, -1), (27, -1), (28, 0), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

Covered at level 15 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8]
 solution : [0, 14, 1, 6, 2]


Solution : [0, 14, 1, 6, 2] has cost 33.


Before backtrack at level 15
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8]
 solution : [0, 14, 1, 6, 2]

After backtrack at level 15
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28]
 solution : [0, 14, 1, 6]


Before backtrack at level 14
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28]
 solution : [0, 14, 1, 6]

After backtrack at level 14
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3]
 solution : [0, 14, 1, 6]


Before backtrack at level 13
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3]
 solution : [0, 14, 1, 6]

After backtrack at level 13
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6]


Before backtrack at level 12
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4]
 solution : [0, 14, 1, 6]

After backtrack at level 12
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11]
 solution : [0, 14, 1, 6]


Before backtrack at level 11
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11]
 solution : [0, 14, 1, 6]

After backtrack at level 11
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24]
 solution : [0, 14, 1, 6]


Before backtrack at level 10
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24]
 solution : [0, 14, 1, 6]

After backtrack at level 10
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7]
 solution : [0, 14, 1, 6]


Before backtrack at level 9
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7]
 solution : [0, 14, 1, 6]

After backtrack at level 9
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29]
 solution : [0, 14, 1, 6]


Before backtrack at level 8
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29]
 solution : [0, 14, 1, 6]

After backtrack at level 8
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18]
 solution : [0, 14, 1, 6]


Before backtrack at level 7
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18]
 solution : [0, 14, 1, 6]

After backtrack at level 7
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16]
 solution : [0, 14, 1, 6]


Before backtrack at level 6
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16]
 solution : [0, 14, 1, 6]

After backtrack at level 6
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17]
 solution : [0, 14, 1, 6]


Before backtrack at level 5
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17]
 solution : [0, 14, 1, 6]

After backtrack at level 5
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27]
 solution : [0, 14, 1, 6]


Before backtrack at level 4
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27]
 solution : [0, 14, 1, 6]

After backtrack at level 4
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13]
 solution : [0, 14, 1, 6]


Before backtrack at level 3
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13]
 solution : [0, 14, 1, 6]

After backtrack at level 3
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26, 9]
 solution : [0, 14, 1, 6]


Invert decision for 6 at level 2


New level: 3
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26, 9]
 solution : [0, 14, 1]


Before reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26, 9]
 solution : [0, 14, 1]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 128), (6, -1), (7, -1), (8, 128), (9, -1), (10, 64), (11, -1), (12, 64), (13, -1), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 22), (20, 22), (21, 26), (22, 26), (23, 32), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, 12), (31, 12), (32, 32), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Covered at level 3 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26, 9]
 solution : [0, 14, 1]


Solution : [0, 14, 1] has cost 10.


Decide in level 3 among pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26, 9]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Decide 9 with phase True at level 3

After decision at level 3
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9]


New level: 4
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9]


Before reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, 576), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 16), (17, 48), (18, 60), (19, 68), (20, 136), (21, 44), (22, 22), (23, 256), (24, 256), (25, 128), (26, 128), (27, 20), (28, 64), (29, 128), (30, 24), (31, 44), (32, 128), (33, 16)]

Covered at level 4 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9]


Solution : [0, 14, 1, 9] has cost 31.


Decide in level 4 among pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 8, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 16), (17, 48), (18, 60), (19, 68), (20, 136), (21, 44), (22, 22), (23, 256), (24, 256), (25, 128), (26, 128), (27, 20), (28, 64), (29, 128), (30, 24), (31, 44), (32, 128), (33, 16)]

Decide 8 with phase True at level 4

After decision at level 4
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9, 8]


New level: 5
 pending : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 10, 30, 31, 23, 32, 12, 15, 33, 5, 2, 25, 28, 3, 4, 11, 24, 7, 29, 18, 16, 17, 27, 13, 26]
 solution : [0, 14, 1, 9, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 16), (17, 48), (18, 60), (19, 68), (20, 136), (21, 44), (22, 22), (23, 256), (24, 256), (25, 128), (26, 128), (27, 20), (28, 64), (29, 128), (30, 24), (31, 44), (32, 128), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 128), (4, 0), (5, 0), (6, -1), (7, 512), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 4), (17, 48), (18, 15), (19, 18), (20, 36), (21, 12), (22, 6), (23, 8), (24, 256), (25, 128), (26, 32), (27, 20), (28, 64), (29, 128), (30, 8), (31, 12), (32, 2), (33, 4)]

Covered at level 5 : {4, 5, 10, 11, 12, 13, 15}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26]
 solution : [0, 14, 1, 9, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26]
 solution : [0, 14, 1, 9, 8]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 128), (4, 0), (5, 0), (6, -1), (7, 512), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 4), (17, 48), (18, 15), (19, 18), (20, 36), (21, 12), (22, 6), (23, 8), (24, 256), (25, 128), (26, 32), (27, 20), (28, 64), (29, 128), (30, 8), (31, 12), (32, 2), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 128), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 48), (18, 15), (19, 18), (20, 36), (21, 12), (22, 6), (23, 8), (24, 256), (25, 128), (26, 32), (27, 20), (28, 64), (29, 128), (30, 8), (31, 12), (32, 2), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26]
 solution : [0, 14, 1, 9, 8]


Solution : [0, 14, 1, 9, 8] has cost 37.


Before backtrack at level 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26]
 solution : [0, 14, 1, 9, 8]

After backtrack at level 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9, 8]


Invert decision for 8 at level 4


New level: 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 2, 25, 28, 3, 24, 7, 29, 18, 16, 17, 27, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9]

Essensial at level 5 : {7}

Before removed
 coverage : [(0, -1), (1, -1), (2, 288), (3, 128), (4, -1), (5, -1), (6, -1), (7, 512), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 4), (17, 48), (18, 15), (19, 18), (20, 36), (21, 12), (22, 6), (23, 8), (24, 256), (25, 128), (26, 32), (27, 20), (28, 64), (29, 128), (30, 8), (31, 12), (32, 2), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 4), (17, 0), (18, 15), (19, 16), (20, 32), (21, 10), (22, 5), (23, 256), (24, 8), (25, 0), (26, 32), (27, 0), (28, 0), (29, 4), (30, 6), (31, 12), (32, 128), (33, 4)]

Covered at level 5 : {2, 3, 17, 25, 27, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 4), (17, 0), (18, 15), (19, 16), (20, 32), (21, 10), (22, 5), (23, 256), (24, 8), (25, 0), (26, 32), (27, 0), (28, 0), (29, 4), (30, 6), (31, 12), (32, 128), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 4), (17, -1), (18, 15), (19, 16), (20, 32), (21, 10), (22, 5), (23, 256), (24, 8), (25, -1), (26, 32), (27, -1), (28, -1), (29, 4), (30, 6), (31, 12), (32, 128), (33, 4)]

Covered at level 5 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9, 7]


Solution : [0, 14, 1, 9, 7] has cost 37.


Before backtrack at level 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 9, 7]

After backtrack at level 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27]
 solution : [0, 14, 1, 9]


Before backtrack at level 4
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27]
 solution : [0, 14, 1, 9]

After backtrack at level 4
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1, 9]


Invert decision for 9 at level 3


New level: 4
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 4), (17, -1), (18, 15), (19, 16), (20, 32), (21, 10), (22, 5), (23, 256), (24, 8), (25, -1), (26, 32), (27, -1), (28, -1), (29, 4), (30, 6), (31, 12), (32, 128), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Covered at level 4 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1]


Solution : [0, 14, 1] has cost 10.


Decide in level 4 among pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 7, 2, 25, 28, 3, 17, 27, 8]

Coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

Decide 7 with phase True at level 4

After decision at level 4
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1, 7]


New level: 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 2, 25, 28, 3, 17, 27, 8]
 solution : [0, 14, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 320), (3, 128), (4, 320), (5, 128), (6, -1), (7, 512), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 192), (17, 384), (18, 420), (19, 232), (20, 456), (21, 228), (22, 136), (23, 256), (24, 256), (25, 128), (26, 128), (27, 192), (28, 64), (29, 128), (30, 72), (31, 132), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 320), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, 0), (26, 32), (27, 5), (28, 0), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Covered at level 5 : {25, 2, 3, 28}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27, 8]
 solution : [0, 14, 1, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27, 8]
 solution : [0, 14, 1, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 0), (3, 0), (4, 320), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, 0), (26, 32), (27, 5), (28, 0), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Covered at level 5 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27, 8]
 solution : [0, 14, 1, 7]


Solution : [0, 14, 1, 7] has cost 16.


Decide in level 5 among pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27, 8]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Decide 8 with phase True at level 5

After decision at level 5
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 8]


New level: 6
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 8]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, 512), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 6 : {4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 8]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 6 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 8]


Solution : [0, 14, 1, 7, 8] has cost 22.


Before backtrack at level 6
 pending : []
 solution : [0, 14, 1, 7, 8]

After backtrack at level 6
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 8]


Invert decision for 8 at level 5


New level: 6
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Covered at level 6 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7]


Solution : [0, 14, 1, 7] has cost 16.


Decide in level 6 among pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 18, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Decide 18 with phase True at level 6

After decision at level 6
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 18]


New level: 7
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 18]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 33, 24, 29, 16, 26, 10, 12, 15, 5, 4, 11, 13, 17, 27]
 solution : [0, 14, 1, 7, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, 393), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 0), (17, 0), (18, -1), (19, 12), (20, 24), (21, 12), (22, 6), (23, 64), (24, 4), (25, -1), (26, 8), (27, 0), (28, -1), (29, 2), (30, 4), (31, 8), (32, 16), (33, 0)]

Covered at level 7 : {16, 33, 27, 17}

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 7, 18]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 7, 18]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 0), (17, 0), (18, -1), (19, 12), (20, 24), (21, 12), (22, 6), (23, 64), (24, 4), (25, -1), (26, 8), (27, 0), (28, -1), (29, 2), (30, 4), (31, 8), (32, 16), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 12), (20, 24), (21, 12), (22, 6), (23, 64), (24, 4), (25, -1), (26, 8), (27, -1), (28, -1), (29, 2), (30, 4), (31, 8), (32, 16), (33, -1)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 7, 18]


Solution : [0, 14, 1, 7, 18] has cost 50.


Before backtrack at level 7
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13]
 solution : [0, 14, 1, 7, 18]

After backtrack at level 7
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7, 18]


Invert decision for 18 at level 6


New level: 7
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 272), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, -1), (17, -1), (18, -1), (19, 12), (20, 24), (21, 12), (22, 6), (23, 64), (24, 4), (25, -1), (26, 8), (27, -1), (28, -1), (29, 2), (30, 4), (31, 8), (32, 16), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, -1), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Covered at level 7 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7]


Solution : [0, 14, 1, 7] has cost 16.


Decide in level 7 among pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 4, 11, 13, 33, 16, 17, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, -1), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

Decide 4 with phase True at level 7

After decision at level 7
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7, 4]


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7, 4]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 320), (5, 128), (6, -1), (7, -1), (8, -1), (9, -1), (10, 64), (11, 128), (12, 128), (13, 256), (14, -1), (15, 64), (16, 150), (17, 12), (18, -1), (19, 48), (20, 96), (21, 52), (22, 26), (23, 256), (24, 32), (25, -1), (26, 32), (27, 5), (28, -1), (29, 16), (30, 12), (31, 24), (32, 128), (33, 64)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 8 : {5, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 4]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 4]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, -1), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, -1), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 7, 4]


Solution : [0, 14, 1, 7, 4] has cost 29.


Before backtrack at level 8
 pending : []
 solution : [0, 14, 1, 7, 4]

After backtrack at level 8
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7, 4]


Invert decision for 4 at level 7


New level: 8
 pending : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7]


Before reduction : 
 pending  : [19, 20, 21, 22, 30, 31, 23, 32, 24, 29, 26, 10, 12, 15, 5, 11, 13, 33, 16, 17, 27]
 solution : [0, 14, 1, 7]

Essensial at level 8 : {12}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 8), (12, -1), (13, 64), (14, -1), (15, 1), (16, 10), (17, 0), (18, -1), (19, 34), (20, 66), (21, 16), (22, 8), (23, 16), (24, 0), (25, -1), (26, 16), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 2), (33, 0)]

Covered at level 8 : {33, 10, 17, 24, 27, 29, 30, 31}

After reduction : 
 pending  : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16]
 solution : [0, 14, 1, 7, 12]


Before reduction : 
 pending  : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16]
 solution : [0, 14, 1, 7, 12]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 8), (12, -1), (13, 64), (14, -1), (15, 1), (16, 10), (17, 0), (18, -1), (19, 34), (20, 66), (21, 16), (22, 8), (23, 16), (24, 0), (25, -1), (26, 16), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 2), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8), (12, -1), (13, 64), (14, -1), (15, 1), (16, 10), (17, -1), (18, -1), (19, 34), (20, 66), (21, 16), (22, 8), (23, 16), (24, -1), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 2), (33, -1)]

Covered at level 8 : set()

After reduction : 
 pending  : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16]
 solution : [0, 14, 1, 7, 12]


Solution : [0, 14, 1, 7, 12] has cost 25.


Before backtrack at level 8
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16]
 solution : [0, 14, 1, 7, 12]

After backtrack at level 8
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27]
 solution : [0, 14, 1, 7]


Before backtrack at level 7
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27]
 solution : [0, 14, 1, 7]

After backtrack at level 7
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4]
 solution : [0, 14, 1, 7]


Before backtrack at level 6
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4]
 solution : [0, 14, 1, 7]

After backtrack at level 6
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18]
 solution : [0, 14, 1, 7]


Before backtrack at level 5
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18]
 solution : [0, 14, 1, 7]

After backtrack at level 5
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 2, 25, 28, 3, 8]
 solution : [0, 14, 1, 7]


Invert decision for 7 at level 4


New level: 5
 pending : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 2, 25, 28, 3, 8]
 solution : [0, 14, 1]


Before reduction : 
 pending  : [19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 2, 25, 28, 3, 8]
 solution : [0, 14, 1]

Essensial at level 5 : {8, 2}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 32), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, 8), (12, -1), (13, 64), (14, -1), (15, 1), (16, 10), (17, -1), (18, -1), (19, 34), (20, 66), (21, 16), (22, 8), (23, 16), (24, -1), (25, -1), (26, 16), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, 2), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 5 : {3, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}

After reduction : 
 pending  : []
 solution : [0, 14, 1, 8, 2]


Before reduction : 
 pending  : []
 solution : [0, 14, 1, 8, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, 0), (5, 0), (6, -1), (7, -1), (8, -1), (9, -1), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 0), (17, 0), (18, 0), (19, 0), (20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 5 : set()

After reduction : 
 pending  : []
 solution : [0, 14, 1, 8, 2]


Solution : [0, 14, 1, 8, 2] has cost 29.


Before backtrack at level 5
 pending : []
 solution : [0, 14, 1, 8, 2]

After backtrack at level 5
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3]
 solution : [0, 14, 1]


Before backtrack at level 4
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3]
 solution : [0, 14, 1]

After backtrack at level 4
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7]
 solution : [0, 14, 1]


Before backtrack at level 3
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7]
 solution : [0, 14, 1]

After backtrack at level 3
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9]
 solution : [0, 14, 1]


Before backtrack at level 2
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9]
 solution : [0, 14, 1]

After backtrack at level 2
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14, 1]


Invert decision for 1 at level 1


New level: 2
 pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14]


Before reduction : 
 pending  : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14]

Essensial at level 2 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 464), (20, 520), (21, 456), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Covered at level 2 : set()

After reduction : 
 pending  : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14]


Solution : [0, 14] has cost 7.


Decide in level 2 among pending : [2, 8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]

Coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 464), (20, 520), (21, 456), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

Decide 2 with phase True at level 2

After decision at level 2
 pending : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14, 2]


New level: 3
 pending : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 28, 3, 7, 9, 6]
 solution : [0, 14, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, 768), (3, 512), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 456), (19, 464), (20, 520), (21, 456), (22, 544), (23, 256), (24, 256), (25, 128), (26, 128), (27, 384), (28, 128), (29, 256), (30, 288), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, 0), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 3 : {28}

After reduction : 
 pending  : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, 0), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 3 among pending : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 4, 18, 25, 3, 7, 9, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]


New level: 4
 pending : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]


Before reduction : 
 pending  : [8, 19, 20, 21, 22, 23, 32, 26, 15, 5, 11, 13, 16, 12, 30, 31, 24, 29, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, 768), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, 64), (8, 64), (9, 576), (10, 64), (11, 1), (12, 0), (13, 0), (14, -1), (15, 128), (16, 5), (17, 10), (18, 10), (19, 0), (20, 21), (21, 0), (22, 20), (23, 16), (24, 16), (25, 16), (26, 16), (27, 5), (28, -1), (29, 0), (30, 9), (31, 0), (32, 0), (33, 2)]

Covered at level 4 : {32, 12, 13, 19, 21, 29, 31}

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]


Before reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, 64), (8, 64), (9, 576), (10, 64), (11, 1), (12, 0), (13, 0), (14, -1), (15, 128), (16, 5), (17, 10), (18, 10), (19, 0), (20, 21), (21, 0), (22, 20), (23, 16), (24, 16), (25, 16), (26, 16), (27, 5), (28, -1), (29, 0), (30, 9), (31, 0), (32, 0), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, 64), (8, 64), (9, 576), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, 128), (16, 5), (17, 10), (18, 10), (19, -1), (20, 21), (21, -1), (22, 20), (23, 16), (24, 16), (25, 16), (26, 16), (27, 5), (28, -1), (29, -1), (30, 9), (31, -1), (32, -1), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]


Solution : [0, 14, 2, 4] has cost 33.


Before backtrack at level 4
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6]
 solution : [0, 14, 2, 4]

After backtrack at level 4
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 128), (6, 64), (7, 64), (8, 64), (9, 576), (10, 64), (11, 1), (12, -1), (13, -1), (14, -1), (15, 128), (16, 5), (17, 10), (18, 10), (19, -1), (20, 21), (21, -1), (22, 20), (23, 16), (24, 16), (25, 16), (26, 16), (27, 5), (28, -1), (29, -1), (30, 9), (31, -1), (32, -1), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 4 among pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 9, 6, 19, 21, 32, 13, 12, 31, 29]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 9 with phase True at level 4

After decision at level 4
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]


New level: 5
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]


Before reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 27, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 16), (17, 6), (18, 28), (19, 64), (20, 66), (21, 41), (22, 40), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 16), (30, 36), (31, 42), (32, 256), (33, 16)]

Covered at level 5 : {27}

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]


Before reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 16), (17, 6), (18, 28), (19, 64), (20, 66), (21, 41), (22, 40), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 16), (30, 36), (31, 42), (32, 256), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 16), (17, 6), (18, 28), (19, 64), (20, 66), (21, 41), (22, 40), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 16), (30, 36), (31, 42), (32, 256), (33, 16)]

Covered at level 5 : set()

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]


Solution : [0, 14, 2, 9] has cost 41.


Before backtrack at level 5
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29]
 solution : [0, 14, 2, 9]

After backtrack at level 5
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 9]


Invert decision for 9 at level 4


New level: 5
 pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 16), (17, 6), (18, 28), (19, 64), (20, 66), (21, 41), (22, 40), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 16), (30, 36), (31, 42), (32, 256), (33, 16)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 5 among pending : [8, 20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 8 with phase True at level 5

After decision at level 5
 pending : [20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]


New level: 6
 pending : [20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]


Before reduction : 
 pending  : [20, 22, 23, 26, 15, 5, 11, 16, 30, 24, 10, 33, 17, 18, 25, 3, 7, 6, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, 512), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 0), (7, 0), (8, -1), (9, -1), (10, 256), (11, 512), (12, 64), (13, 64), (14, -1), (15, 512), (16, 289), (17, 0), (18, 8), (19, 25), (20, 0), (21, 5), (22, 208), (23, 0), (24, 0), (25, 0), (26, 0), (27, 40), (28, -1), (29, 8), (30, 82), (31, 6), (32, 16), (33, 128)]

Covered at level 6 : {6, 7, 17, 20, 23, 24, 25, 26}

After reduction : 
 pending  : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]


Before reduction : 
 pending  : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 0), (7, 0), (8, -1), (9, -1), (10, 256), (11, 512), (12, 64), (13, 64), (14, -1), (15, 512), (16, 289), (17, 0), (18, 8), (19, 25), (20, 0), (21, 5), (22, 208), (23, 0), (24, 0), (25, 0), (26, 0), (27, 40), (28, -1), (29, 8), (30, 82), (31, 6), (32, 16), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, -1), (7, -1), (8, -1), (9, -1), (10, 256), (11, 512), (12, 64), (13, 64), (14, -1), (15, 512), (16, 289), (17, -1), (18, 8), (19, 25), (20, -1), (21, 5), (22, 208), (23, -1), (24, -1), (25, -1), (26, -1), (27, 40), (28, -1), (29, 8), (30, 82), (31, 6), (32, 16), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]


Solution : [0, 14, 2, 8] has cost 26.


Before backtrack at level 6
 pending : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27]
 solution : [0, 14, 2, 8]

After backtrack at level 6
 pending : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 8]


Invert decision for 8 at level 5


New level: 6
 pending : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2]

Essensial at level 6 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, -1), (7, -1), (8, -1), (9, -1), (10, 256), (11, 512), (12, 64), (13, 64), (14, -1), (15, 512), (16, 289), (17, -1), (18, 8), (19, 25), (20, -1), (21, 5), (22, 208), (23, -1), (24, -1), (25, -1), (26, -1), (27, 40), (28, -1), (29, 8), (30, 82), (31, 6), (32, 16), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 6 : set()

After reduction : 
 pending  : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 6 among pending : [22, 15, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 15 with phase True at level 6

After decision at level 6
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]


New level: 7
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 224), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]


Solution : [0, 14, 2, 15] has cost 22.


Decide in level 7 among pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 13, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 224), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

Decide 13 with phase True at level 7

After decision at level 7
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]


New level: 8
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 224), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 132), (7, 64), (8, -1), (9, -1), (10, 128), (11, 1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 393), (19, 224), (20, 169), (21, 52), (22, 52), (23, 128), (24, 128), (25, 16), (26, 32), (27, 5), (28, -1), (29, 64), (30, 22), (31, 22), (32, 16), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]


Solution : [0, 14, 2, 15, 13] has cost 27.


Before backtrack at level 8
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]

After backtrack at level 8
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 13]


Invert decision for 13 at level 7


New level: 8
 pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 132), (7, 64), (8, -1), (9, -1), (10, 128), (11, 1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 393), (19, 224), (20, 169), (21, 52), (22, 52), (23, 128), (24, 128), (25, 16), (26, 32), (27, 5), (28, -1), (29, 64), (30, 22), (31, 22), (32, 16), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15]


Solution : [0, 14, 2, 15] has cost 22.


Decide in level 8 among pending : [22, 5, 11, 16, 30, 10, 33, 18, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

Decide 18 with phase True at level 8

After decision at level 8
 pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]


New level: 9
 pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 27, 20, 23, 26, 24, 17, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 328), (17, 96), (18, 394), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 64), (30, 22), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 264), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, -1), (19, 40), (20, 50), (21, 153), (22, 38), (23, 64), (24, 32), (25, 8), (26, 16), (27, 0), (28, -1), (29, 4), (30, 10), (31, 34), (32, 32), (33, 2)]

Covered at level 9 : {17, 27}

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 264), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 2), (17, 0), (18, -1), (19, 40), (20, 50), (21, 153), (22, 38), (23, 64), (24, 32), (25, 8), (26, 16), (27, 0), (28, -1), (29, 4), (30, 10), (31, 34), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 264), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 40), (20, 50), (21, 153), (22, 38), (23, 64), (24, 32), (25, 8), (26, 16), (27, -1), (28, -1), (29, 4), (30, 10), (31, 34), (32, 32), (33, 2)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]


Solution : [0, 14, 2, 15, 18] has cost 56.


Before backtrack at level 9
 pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6]
 solution : [0, 14, 2, 15, 18]

After backtrack at level 9
 pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15, 18]


Invert decision for 18 at level 8


New level: 9
 pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15]


Before reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 264), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 2), (17, -1), (18, -1), (19, 40), (20, 50), (21, 153), (22, 38), (23, 64), (24, 32), (25, 8), (26, 16), (27, -1), (28, -1), (29, 4), (30, 10), (31, 34), (32, 32), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 312), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15]


Solution : [0, 14, 2, 15] has cost 22.


Decide in level 9 among pending : [22, 5, 11, 16, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 312), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

Decide 16 with phase True at level 9

After decision at level 9
 pending : [22, 5, 11, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15, 16]


New level: 10
 pending : [22, 5, 11, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15, 16]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 33, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 27, 17]
 solution : [0, 14, 2, 15, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, 312), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, -1), (19, 96), (20, 194), (21, 57), (22, 12), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 8), (30, 8), (31, 32), (32, 32), (33, 0)]

Covered at level 10 : {33, 27}

After reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17]
 solution : [0, 14, 2, 15, 16]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17]
 solution : [0, 14, 2, 15, 16]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, -1), (19, 96), (20, 194), (21, 57), (22, 12), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 8), (30, 8), (31, 32), (32, 32), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, -1), (19, 96), (20, 194), (21, 57), (22, 12), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 32), (32, 32), (33, -1)]

Covered at level 10 : set()

After reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17]
 solution : [0, 14, 2, 15, 16]


Solution : [0, 14, 2, 15, 16] has cost 61.


Before backtrack at level 10
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17]
 solution : [0, 14, 2, 15, 16]

After backtrack at level 10
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17, 33, 27]
 solution : [0, 14, 2, 15, 16]


Invert decision for 16 at level 9


New level: 10
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17, 33, 27]
 solution : [0, 14, 2, 15]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17, 33, 27]
 solution : [0, 14, 2, 15]

Essensial at level 10 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 10), (18, -1), (19, 96), (20, 194), (21, 57), (22, 12), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 8), (30, 8), (31, 32), (32, 32), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

Covered at level 10 : set()

After reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17, 33, 27]
 solution : [0, 14, 2, 15]


Solution : [0, 14, 2, 15] has cost 22.


Decide in level 10 among pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 6, 17, 33, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

Decide 6 with phase True at level 10

After decision at level 10
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]


New level: 11
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 26, 24, 25, 7, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, 288), (7, 128), (8, -1), (9, -1), (10, 128), (11, 256), (12, 256), (13, -1), (14, -1), (15, -1), (16, -1), (17, 96), (18, -1), (19, 160), (20, 194), (21, 225), (22, 52), (23, 256), (24, 128), (25, 32), (26, 64), (27, 5), (28, -1), (29, 32), (30, 22), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, -1), (7, 0), (8, -1), (9, -1), (10, 128), (11, 4), (12, 64), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, 22), (20, 22), (21, 52), (22, 52), (23, 8), (24, 8), (25, 0), (26, 0), (27, 5), (28, -1), (29, 8), (30, 22), (31, 22), (32, 16), (33, 128)]

Covered at level 11 : {25, 26, 7}

After reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, -1), (7, 0), (8, -1), (9, -1), (10, 128), (11, 4), (12, 64), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, 22), (20, 22), (21, 52), (22, 52), (23, 8), (24, 8), (25, 0), (26, 0), (27, 5), (28, -1), (29, 8), (30, 22), (31, 22), (32, 16), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 4), (12, 64), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, 22), (20, 22), (21, 52), (22, 52), (23, 8), (24, 8), (25, -1), (26, -1), (27, 5), (28, -1), (29, 8), (30, 22), (31, 22), (32, 16), (33, 128)]

Covered at level 11 : set()

After reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]


Solution : [0, 14, 2, 15, 6] has cost 32.


Before backtrack at level 11
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27]
 solution : [0, 14, 2, 15, 6]

After backtrack at level 11
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27, 26, 25, 7]
 solution : [0, 14, 2, 15, 6]


Invert decision for 6 at level 10


New level: 11
 pending : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27, 26, 25, 7]
 solution : [0, 14, 2, 15]


Before reduction : 
 pending  : [22, 5, 11, 30, 10, 3, 19, 21, 32, 12, 31, 29, 20, 23, 24, 17, 33, 27, 26, 25, 7]
 solution : [0, 14, 2, 15]

Essensial at level 11 : {12, 20, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 256), (6, -1), (7, -1), (8, -1), (9, -1), (10, 128), (11, 4), (12, 64), (13, -1), (14, -1), (15, -1), (16, -1), (17, 6), (18, -1), (19, 22), (20, 22), (21, 52), (22, 52), (23, 8), (24, 8), (25, -1), (26, -1), (27, 5), (28, -1), (29, 8), (30, 22), (31, 22), (32, 16), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 2), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

Covered at level 11 : {32, 33, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31}

After reduction : 
 pending  : [5, 11, 10, 3]
 solution : [0, 14, 2, 15, 12, 20, 7]


Before reduction : 
 pending  : [5, 11, 10, 3]
 solution : [0, 14, 2, 15, 12, 20, 7]

Essensial at level 11 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 2), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, 0), (18, -1), (19, 0), (20, -1), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, -1), (29, 0), (30, 0), (31, 0), (32, 0), (33, 0)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 2), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

Covered at level 11 : set()

After reduction : 
 pending  : [5, 11, 10, 3]
 solution : [0, 14, 2, 15, 12, 20, 7]


Solution : [0, 14, 2, 15, 12, 20, 7] has cost 71.


Before backtrack at level 11
 pending : [5, 11, 10, 3]
 solution : [0, 14, 2, 15, 12, 20, 7]

After backtrack at level 11
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25]
 solution : [0, 14, 2, 15]


Before backtrack at level 10
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25]
 solution : [0, 14, 2, 15]

After backtrack at level 10
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6]
 solution : [0, 14, 2, 15]


Before backtrack at level 9
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6]
 solution : [0, 14, 2, 15]

After backtrack at level 9
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16]
 solution : [0, 14, 2, 15]


Before backtrack at level 8
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16]
 solution : [0, 14, 2, 15]

After backtrack at level 8
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18]
 solution : [0, 14, 2, 15]


Before backtrack at level 7
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18]
 solution : [0, 14, 2, 15]

After backtrack at level 7
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 15]


Invert decision for 15 at level 6


New level: 7
 pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2]

Essensial at level 7 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 2), (4, -1), (5, 2), (6, -1), (7, -1), (8, -1), (9, -1), (10, 2), (11, 1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 7 : set()

After reduction : 
 pending  : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 7 among pending : [5, 11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 5 with phase True at level 7

After decision at level 7
 pending : [11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]


New level: 8
 pending : [11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]


Before reduction : 
 pending  : [11, 10, 3, 12, 20, 7, 22, 30, 19, 21, 32, 31, 29, 23, 24, 17, 33, 27, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, 512), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, 0), (11, 4), (12, 64), (13, 512), (14, -1), (15, -1), (16, 15), (17, 96), (18, 386), (19, 8), (20, 194), (21, 25), (22, 0), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 2), (30, 0), (31, 16), (32, 64), (33, 4)]

Covered at level 8 : {3, 10, 22, 27, 30}

After reduction : 
 pending  : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]


Before reduction : 
 pending  : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 0), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, 0), (11, 4), (12, 64), (13, 512), (14, -1), (15, -1), (16, 15), (17, 96), (18, 386), (19, 8), (20, 194), (21, 25), (22, 0), (23, 256), (24, 128), (25, 32), (26, 64), (27, 0), (28, -1), (29, 2), (30, 0), (31, 16), (32, 64), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, -1), (11, 4), (12, 64), (13, 512), (14, -1), (15, -1), (16, 15), (17, 96), (18, 386), (19, 8), (20, 194), (21, 25), (22, -1), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 2), (30, -1), (31, 16), (32, 64), (33, 4)]

Covered at level 8 : set()

After reduction : 
 pending  : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]


Solution : [0, 14, 2, 5] has cost 26.


Before backtrack at level 8
 pending : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13]
 solution : [0, 14, 2, 5]

After backtrack at level 8
 pending : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 5]


Invert decision for 5 at level 7


New level: 8
 pending : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2]

Essensial at level 8 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, -1), (11, 4), (12, 64), (13, 512), (14, -1), (15, -1), (16, 15), (17, 96), (18, 386), (19, 8), (20, 194), (21, 25), (22, -1), (23, 256), (24, 128), (25, 32), (26, 64), (27, -1), (28, -1), (29, 2), (30, -1), (31, 16), (32, 64), (33, 4)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Covered at level 8 : set()

After reduction : 
 pending  : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2]


Solution : [0, 14, 2] has cost 20.


Decide in level 8 among pending : [11, 12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]

Coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

Decide 11 with phase True at level 8

After decision at level 8
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]


New level: 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 288), (7, 128), (8, -1), (9, -1), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, -1), (16, 328), (17, 96), (18, 418), (19, 224), (20, 194), (21, 225), (22, 208), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 64), (30, 84), (31, 104), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 272), (7, 128), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, 64), (14, -1), (15, -1), (16, 328), (17, 96), (18, 393), (19, 48), (20, 194), (21, 225), (22, 196), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 16), (30, 84), (31, 100), (32, 128), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]


Solution : [0, 14, 2, 11] has cost 25.


Before backtrack at level 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]

After backtrack at level 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 11]


Invert decision for 11 at level 8


New level: 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 13, 10, 3, 22, 30, 27]
 solution : [0, 14, 2]

Essensial at level 9 : {13}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 64), (4, -1), (5, -1), (6, 272), (7, 128), (8, -1), (9, -1), (10, 128), (11, -1), (12, 128), (13, 64), (14, -1), (15, -1), (16, 328), (17, 96), (18, 393), (19, 48), (20, 194), (21, 225), (22, 196), (23, 256), (24, 128), (25, 32), (26, 64), (27, 40), (28, -1), (29, 16), (30, 84), (31, 100), (32, 128), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 132), (7, 64), (8, -1), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 417), (19, 224), (20, 169), (21, 52), (22, 208), (23, 128), (24, 128), (25, 16), (26, 32), (27, 40), (28, -1), (29, 64), (30, 84), (31, 22), (32, 32), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 13]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 13]

Essensial at level 9 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 132), (7, 64), (8, -1), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 417), (19, 224), (20, 169), (21, 52), (22, 208), (23, 128), (24, 128), (25, 16), (26, 32), (27, 40), (28, -1), (29, 64), (30, 84), (31, 22), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 132), (7, 64), (8, -1), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 417), (19, 224), (20, 169), (21, 52), (22, 208), (23, 128), (24, 128), (25, 16), (26, 32), (27, 40), (28, -1), (29, 64), (30, 84), (31, 22), (32, 32), (33, 128)]

Covered at level 9 : set()

After reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 13]


Solution : [0, 14, 2, 13] has cost 25.


Before backtrack at level 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27]
 solution : [0, 14, 2, 13]

After backtrack at level 9
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13]
 solution : [0, 14, 2]


Before backtrack at level 8
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13]
 solution : [0, 14, 2]

After backtrack at level 8
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11]
 solution : [0, 14, 2]


Before backtrack at level 7
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11]
 solution : [0, 14, 2]

After backtrack at level 7
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5]
 solution : [0, 14, 2]


Before backtrack at level 6
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5]
 solution : [0, 14, 2]

After backtrack at level 6
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15]
 solution : [0, 14, 2]


Before backtrack at level 5
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15]
 solution : [0, 14, 2]

After backtrack at level 5
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8]
 solution : [0, 14, 2]


Before backtrack at level 4
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8]
 solution : [0, 14, 2]

After backtrack at level 4
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8, 9]
 solution : [0, 14, 2]


Before backtrack at level 3
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8, 9]
 solution : [0, 14, 2]

After backtrack at level 3
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14, 2]


Invert decision for 2 at level 2


New level: 3
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 3, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14]

Essensial at level 3 : {3}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, 128), (4, -1), (5, -1), (6, 132), (7, 64), (8, -1), (9, -1), (10, 256), (11, -1), (12, 128), (13, -1), (14, -1), (15, -1), (16, 292), (17, 96), (18, 417), (19, 224), (20, 169), (21, 52), (22, 208), (23, 128), (24, 128), (25, 16), (26, 32), (27, 40), (28, -1), (29, 64), (30, 84), (31, 22), (32, 32), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14, 3]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14, 3]

Essensial at level 3 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

Covered at level 3 : set()

After reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]
 solution : [0, 14, 3]


Solution : [0, 14, 3] has cost 13.


Decide in level 3 among pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28, 4]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

Decide 4 with phase True at level 3

After decision at level 3
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28]
 solution : [0, 14, 3, 4]


New level: 4
 pending : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28]
 solution : [0, 14, 3, 4]


Before reduction : 
 pending  : [12, 20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 10, 22, 30, 27, 13, 11, 5, 15, 8, 9, 28]
 solution : [0, 14, 3, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, 768), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 288), (7, 512), (8, 64), (9, 576), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 2), (17, 256), (18, 101), (19, 25), (20, 216), (21, 6), (22, 0), (23, 64), (24, 128), (25, 128), (26, 64), (27, 20), (28, 32), (29, 32), (30, 2), (31, 6), (32, 2), (33, 2)]

Covered at level 4 : {5, 10, 11, 12, 13, 15, 22}

After reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28]
 solution : [0, 14, 3, 4]


Before reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28]
 solution : [0, 14, 3, 4]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 0), (6, 288), (7, 512), (8, 64), (9, 576), (10, 0), (11, 0), (12, 0), (13, 0), (14, -1), (15, 0), (16, 2), (17, 256), (18, 101), (19, 25), (20, 216), (21, 6), (22, 0), (23, 64), (24, 128), (25, 128), (26, 64), (27, 20), (28, 32), (29, 32), (30, 2), (31, 6), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, 512), (8, 64), (9, 576), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 256), (18, 101), (19, 25), (20, 216), (21, 6), (22, -1), (23, 64), (24, 128), (25, 128), (26, 64), (27, 20), (28, 32), (29, 32), (30, 2), (31, 6), (32, 2), (33, 2)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28]
 solution : [0, 14, 3, 4]


Solution : [0, 14, 3, 4] has cost 26.


Before backtrack at level 4
 pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28]
 solution : [0, 14, 3, 4]

After backtrack at level 4
 pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 4]


Invert decision for 4 at level 3


New level: 4
 pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3]


Before reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3]

Essensial at level 4 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, 288), (7, 512), (8, 64), (9, 576), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, 2), (17, 256), (18, 101), (19, 25), (20, 216), (21, 6), (22, -1), (23, 64), (24, 128), (25, 128), (26, 64), (27, 20), (28, 32), (29, 32), (30, 2), (31, 6), (32, 2), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

Covered at level 4 : set()

After reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3]


Solution : [0, 14, 3] has cost 13.


Decide in level 4 among pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 6, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]

Coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

Decide 6 with phase True at level 4

After decision at level 4
 pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]


New level: 5
 pending : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]


Before reduction : 
 pending  : [20, 7, 19, 21, 32, 31, 29, 23, 24, 17, 33, 26, 25, 16, 18, 30, 27, 8, 9, 28, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, 640), (7, 512), (8, 512), (9, 576), (10, 256), (11, 512), (12, 256), (13, 512), (14, -1), (15, 512), (16, 384), (17, 384), (18, 420), (19, 196), (20, 520), (21, 456), (22, 272), (23, 256), (24, 256), (25, 128), (26, 128), (27, 96), (28, 64), (29, 128), (30, 128), (31, 272), (32, 256), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, 0), (8, 128), (9, 576), (10, 256), (11, 512), (12, 128), (13, 512), (14, -1), (15, 512), (16, 292), (17, 6), (18, 104), (19, 44), (20, 22), (21, 52), (22, 104), (23, 32), (24, 8), (25, 0), (26, 0), (27, 10), (28, 0), (29, 16), (30, 40), (31, 22), (32, 64), (33, 128)]

Covered at level 5 : {25, 26, 28, 7}

After reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]


Before reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, 0), (8, 128), (9, 576), (10, 256), (11, 512), (12, 128), (13, 512), (14, -1), (15, 512), (16, 292), (17, 6), (18, 104), (19, 44), (20, 22), (21, 52), (22, 104), (23, 32), (24, 8), (25, 0), (26, 0), (27, 10), (28, 0), (29, 16), (30, 40), (31, 22), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, 128), (9, 576), (10, 256), (11, 512), (12, 128), (13, 512), (14, -1), (15, 512), (16, 292), (17, 6), (18, 104), (19, 44), (20, 22), (21, 52), (22, 104), (23, 32), (24, 8), (25, -1), (26, -1), (27, 10), (28, -1), (29, 16), (30, 40), (31, 22), (32, 64), (33, 128)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]


Solution : [0, 14, 3, 6] has cost 23.


Before backtrack at level 5
 pending : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15]
 solution : [0, 14, 3, 6]

After backtrack at level 5
 pending : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15, 7, 26, 25, 28]
 solution : [0, 14, 3, 6]


Invert decision for 6 at level 4


New level: 5
 pending : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15, 7, 26, 25, 28]
 solution : [0, 14, 3]


Before reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 24, 17, 33, 16, 18, 30, 27, 8, 9, 12, 10, 22, 13, 11, 5, 15, 7, 26, 25, 28]
 solution : [0, 14, 3]

Essensial at level 5 : {12, 7}

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, 128), (9, 576), (10, 256), (11, 512), (12, 128), (13, 512), (14, -1), (15, 512), (16, 292), (17, 6), (18, 104), (19, 44), (20, 22), (21, 52), (22, 104), (23, 32), (24, 8), (25, -1), (26, -1), (27, 10), (28, -1), (29, 16), (30, 40), (31, 22), (32, 64), (33, 128)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, 512), (9, 512), (10, 8), (11, 128), (12, -1), (13, 128), (14, -1), (15, 512), (16, 258), (17, 2), (18, 265), (19, 136), (20, 130), (21, 128), (22, 36), (23, 32), (24, 0), (25, 0), (26, 32), (27, 9), (28, 8), (29, 16), (30, 4), (31, 4), (32, 128), (33, 2)]

Covered at level 5 : {24, 25}

After reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28]
 solution : [0, 14, 3, 12, 7]


Before reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28]
 solution : [0, 14, 3, 12, 7]

Essensial at level 5 : set()

Before removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, 512), (9, 512), (10, 8), (11, 128), (12, -1), (13, 128), (14, -1), (15, 512), (16, 258), (17, 2), (18, 265), (19, 136), (20, 130), (21, 128), (22, 36), (23, 32), (24, 0), (25, 0), (26, 32), (27, 9), (28, 8), (29, 16), (30, 4), (31, 4), (32, 128), (33, 2)]

After removed
 coverage : [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, 512), (6, -1), (7, -1), (8, 512), (9, 512), (10, 8), (11, 128), (12, -1), (13, 128), (14, -1), (15, 512), (16, 258), (17, 2), (18, 265), (19, 136), (20, 130), (21, 128), (22, 36), (23, 32), (24, -1), (25, -1), (26, 32), (27, 9), (28, 8), (29, 16), (30, 4), (31, 4), (32, 128), (33, 2)]

Covered at level 5 : set()

After reduction : 
 pending  : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28]
 solution : [0, 14, 3, 12, 7]


Solution : [0, 14, 3, 12, 7] has cost 28.


Before backtrack at level 5
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28]
 solution : [0, 14, 3, 12, 7]

After backtrack at level 5
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25]
 solution : [0, 14, 3]


Before backtrack at level 4
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25]
 solution : [0, 14, 3]

After backtrack at level 4
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6]
 solution : [0, 14, 3]


Before backtrack at level 3
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6]
 solution : [0, 14, 3]

After backtrack at level 3
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6, 3, 4]
 solution : [0, 14]


Before backtrack at level 2
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6, 3, 4]
 solution : [0, 14]

After backtrack at level 2
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6, 3, 4, 2]
 solution : [0, 14]


Before backtrack at level 1
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6, 3, 4, 2]
 solution : [0, 14]

After backtrack at level 1
 pending : [20, 19, 21, 32, 31, 29, 23, 17, 33, 16, 18, 30, 27, 8, 9, 10, 22, 13, 11, 5, 15, 26, 28, 12, 7, 24, 25, 6, 3, 4, 2, 1]
 solution : [0, 14]


========================================================================================

	[MIN RESULT]: Minimized Invariants on [ivybench/sym/ivy/firewall: node=3]

========================================================================================

[MIN NOTE]: number of minimal solution found: 1

[MIN NOTE]: total qcost: 22

[MIN NOTE]: maximum branch and bound depth: 21

Definitions (length=0)

Equality Relations (length=0)

Solution 0 : [0, 14, 1, 7, 8] (length = 5)

invariant [invar_0] forall NODE0. ~sent(NODE0,NODE0) # qcost: 2

invariant [invar_14] forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1)) # qcost: 5

invariant [invar_1] forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0) # qcost: 3

invariant [invar_7] forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1 # qcost: 6

invariant [invar_8] forall NODE1,NODE0. internal(NODE1) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1 # qcost: 6




[QRM NOTE]: Time elapsed since start: 10.082 seconds

[QRM NOTE]: Time elapsed since last: 2.370 seconds

[QRM NOTE]: Peak memory: 2289579 bytes


============================================================================

	[IVY_CHECK]: Ivy Check on [ivybench/sym/ivy/firewall: node=3]

============================================================================

ivy_check complete=fo ivybench/sym/ivy/firewall.node_3.0.ivy


Isolate this:

    The inductive invariant consists of the following conjectures:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_14
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_8

    The following action implementations are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 15: implementation of send_from_internal
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 23: implementation of send_to_internal

    The following initializers are present:
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 10: init[after1]

    Initialization must establish the invariant
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_14 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
        ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_8 ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:send_from_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_14 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_8 ... PASS
        (internal) ext:send_to_internal
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 38: invar_0 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 39: invar_14 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 40: invar_1 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 41: invar_7 ... PASS
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 42: invar_8 ... PASS

    The following program assertions are treated as assumptions:
        in action send_from_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 16: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 17: assumption
        in action send_to_internal when called from the environment:
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 24: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 25: assumption
            ivybench/sym/ivy/firewall.node_3.0.ivy: line 26: assumption

OK
[IVY_CHECK RESULT]: PASS

[R Implies P]: True

[UNSAT CORE]: ((forall NODE1. ~allowed_in(NODE1) | (exists NODE0. (sent(NODE0,NODE1) & NODE0 ~= NODE1))) & (forall NODE0. ~allowed_in(NODE0) | ~internal(NODE0)) & (forall NODE1,NODE0. allowed_in(NODE0) | ~sent(NODE0,NODE1) | allowed_in(NODE1) | NODE0 = NODE1) & (forall NODE1,NODE0. internal(NODE1) | internal(NODE0) | ~sent(NODE0,NODE1) | NODE0 = NODE1))

[QRM NOTE]: Time elapsed since start: 11.741 seconds

[QRM NOTE]: Time elapsed since last: 1.659 seconds

[QRM NOTE]: Peak memory: 1290639 bytes


********************************************************

	[QRM]: ivybench/sym/ivy/firewall.ivy

********************************************************

[QRM RESULT]: PASS

